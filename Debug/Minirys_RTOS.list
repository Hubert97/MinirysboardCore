
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006270  08006270  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006278  08006278  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000172c  20000010  08006290  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  08006290  0002173c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ab3d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000529f  00000000  00000000  0004ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0004fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a436  00000000  00000000  00051320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024cb8  00000000  00000000  0006b756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6ce2  00000000  00000000  0009040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001370f0  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0001876d  00000000  00000000  00137143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002d00  00000000  00000000  0014f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004044  00000000  00000000  001525b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006084 	.word	0x08006084

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006084 	.word	0x08006084

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__gnu_thumb1_case_uhi>:
 8000144:	b403      	push	{r0, r1}
 8000146:	4671      	mov	r1, lr
 8000148:	0849      	lsrs	r1, r1, #1
 800014a:	0040      	lsls	r0, r0, #1
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	5a09      	ldrh	r1, [r1, r0]
 8000150:	0049      	lsls	r1, r1, #1
 8000152:	448e      	add	lr, r1
 8000154:	bc03      	pop	{r0, r1}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f8f0 	bl	8000440 <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__divsi3>:
 800026c:	4603      	mov	r3, r0
 800026e:	430b      	orrs	r3, r1
 8000270:	d47f      	bmi.n	8000372 <__divsi3+0x106>
 8000272:	2200      	movs	r2, #0
 8000274:	0843      	lsrs	r3, r0, #1
 8000276:	428b      	cmp	r3, r1
 8000278:	d374      	bcc.n	8000364 <__divsi3+0xf8>
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d35f      	bcc.n	8000340 <__divsi3+0xd4>
 8000280:	0a03      	lsrs	r3, r0, #8
 8000282:	428b      	cmp	r3, r1
 8000284:	d344      	bcc.n	8000310 <__divsi3+0xa4>
 8000286:	0b03      	lsrs	r3, r0, #12
 8000288:	428b      	cmp	r3, r1
 800028a:	d328      	bcc.n	80002de <__divsi3+0x72>
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d30d      	bcc.n	80002ae <__divsi3+0x42>
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	ba12      	rev	r2, r2
 8000298:	0c03      	lsrs	r3, r0, #16
 800029a:	428b      	cmp	r3, r1
 800029c:	d302      	bcc.n	80002a4 <__divsi3+0x38>
 800029e:	1212      	asrs	r2, r2, #8
 80002a0:	0209      	lsls	r1, r1, #8
 80002a2:	d065      	beq.n	8000370 <__divsi3+0x104>
 80002a4:	0b03      	lsrs	r3, r0, #12
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d319      	bcc.n	80002de <__divsi3+0x72>
 80002aa:	e000      	b.n	80002ae <__divsi3+0x42>
 80002ac:	0a09      	lsrs	r1, r1, #8
 80002ae:	0bc3      	lsrs	r3, r0, #15
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x4c>
 80002b4:	03cb      	lsls	r3, r1, #15
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b83      	lsrs	r3, r0, #14
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x58>
 80002c0:	038b      	lsls	r3, r1, #14
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b43      	lsrs	r3, r0, #13
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x64>
 80002cc:	034b      	lsls	r3, r1, #13
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x70>
 80002d8:	030b      	lsls	r3, r1, #12
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0ac3      	lsrs	r3, r0, #11
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x7c>
 80002e4:	02cb      	lsls	r3, r1, #11
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a83      	lsrs	r3, r0, #10
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x88>
 80002f0:	028b      	lsls	r3, r1, #10
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a43      	lsrs	r3, r0, #9
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0x94>
 80002fc:	024b      	lsls	r3, r1, #9
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	0a03      	lsrs	r3, r0, #8
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__divsi3+0xa0>
 8000308:	020b      	lsls	r3, r1, #8
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	d2cd      	bcs.n	80002ac <__divsi3+0x40>
 8000310:	09c3      	lsrs	r3, r0, #7
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xae>
 8000316:	01cb      	lsls	r3, r1, #7
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0983      	lsrs	r3, r0, #6
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xba>
 8000322:	018b      	lsls	r3, r1, #6
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0943      	lsrs	r3, r0, #5
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xc6>
 800032e:	014b      	lsls	r3, r1, #5
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xd2>
 800033a:	010b      	lsls	r3, r1, #4
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	08c3      	lsrs	r3, r0, #3
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xde>
 8000346:	00cb      	lsls	r3, r1, #3
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0883      	lsrs	r3, r0, #2
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xea>
 8000352:	008b      	lsls	r3, r1, #2
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0843      	lsrs	r3, r0, #1
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__divsi3+0xf6>
 800035e:	004b      	lsls	r3, r1, #1
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	1a41      	subs	r1, r0, r1
 8000366:	d200      	bcs.n	800036a <__divsi3+0xfe>
 8000368:	4601      	mov	r1, r0
 800036a:	4152      	adcs	r2, r2
 800036c:	4610      	mov	r0, r2
 800036e:	4770      	bx	lr
 8000370:	e05d      	b.n	800042e <__divsi3+0x1c2>
 8000372:	0fca      	lsrs	r2, r1, #31
 8000374:	d000      	beq.n	8000378 <__divsi3+0x10c>
 8000376:	4249      	negs	r1, r1
 8000378:	1003      	asrs	r3, r0, #32
 800037a:	d300      	bcc.n	800037e <__divsi3+0x112>
 800037c:	4240      	negs	r0, r0
 800037e:	4053      	eors	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	469c      	mov	ip, r3
 8000384:	0903      	lsrs	r3, r0, #4
 8000386:	428b      	cmp	r3, r1
 8000388:	d32d      	bcc.n	80003e6 <__divsi3+0x17a>
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d312      	bcc.n	80003b6 <__divsi3+0x14a>
 8000390:	22fc      	movs	r2, #252	; 0xfc
 8000392:	0189      	lsls	r1, r1, #6
 8000394:	ba12      	rev	r2, r2
 8000396:	0a03      	lsrs	r3, r0, #8
 8000398:	428b      	cmp	r3, r1
 800039a:	d30c      	bcc.n	80003b6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d308      	bcc.n	80003b6 <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d304      	bcc.n	80003b6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	d03a      	beq.n	8000426 <__divsi3+0x1ba>
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	e000      	b.n	80003b6 <__divsi3+0x14a>
 80003b4:	0989      	lsrs	r1, r1, #6
 80003b6:	09c3      	lsrs	r3, r0, #7
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x154>
 80003bc:	01cb      	lsls	r3, r1, #7
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0983      	lsrs	r3, r0, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x160>
 80003c8:	018b      	lsls	r3, r1, #6
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0943      	lsrs	r3, r0, #5
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x16c>
 80003d4:	014b      	lsls	r3, r1, #5
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0903      	lsrs	r3, r0, #4
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x178>
 80003e0:	010b      	lsls	r3, r1, #4
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	08c3      	lsrs	r3, r0, #3
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x184>
 80003ec:	00cb      	lsls	r3, r1, #3
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	0883      	lsrs	r3, r0, #2
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x190>
 80003f8:	008b      	lsls	r3, r1, #2
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	d2d9      	bcs.n	80003b4 <__divsi3+0x148>
 8000400:	0843      	lsrs	r3, r0, #1
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__divsi3+0x19e>
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	d200      	bcs.n	8000412 <__divsi3+0x1a6>
 8000410:	4601      	mov	r1, r0
 8000412:	4663      	mov	r3, ip
 8000414:	4152      	adcs	r2, r2
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	4610      	mov	r0, r2
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x1b4>
 800041c:	4240      	negs	r0, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d500      	bpl.n	8000424 <__divsi3+0x1b8>
 8000422:	4249      	negs	r1, r1
 8000424:	4770      	bx	lr
 8000426:	4663      	mov	r3, ip
 8000428:	105b      	asrs	r3, r3, #1
 800042a:	d300      	bcc.n	800042e <__divsi3+0x1c2>
 800042c:	4240      	negs	r0, r0
 800042e:	b501      	push	{r0, lr}
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f805 	bl	8000440 <__aeabi_idiv0>
 8000436:	bd02      	pop	{r1, pc}

08000438 <__aeabi_idivmod>:
 8000438:	2900      	cmp	r1, #0
 800043a:	d0f8      	beq.n	800042e <__divsi3+0x1c2>
 800043c:	e716      	b.n	800026c <__divsi3>
 800043e:	4770      	bx	lr

08000440 <__aeabi_idiv0>:
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_uldivmod>:
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <__aeabi_uldivmod+0x28>
 8000448:	2a00      	cmp	r2, #0
 800044a:	d10f      	bne.n	800046c <__aeabi_uldivmod+0x28>
 800044c:	2900      	cmp	r1, #0
 800044e:	d100      	bne.n	8000452 <__aeabi_uldivmod+0xe>
 8000450:	2800      	cmp	r0, #0
 8000452:	d002      	beq.n	800045a <__aeabi_uldivmod+0x16>
 8000454:	2100      	movs	r1, #0
 8000456:	43c9      	mvns	r1, r1
 8000458:	1c08      	adds	r0, r1, #0
 800045a:	b407      	push	{r0, r1, r2}
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <__aeabi_uldivmod+0x24>)
 800045e:	a102      	add	r1, pc, #8	; (adr r1, 8000468 <__aeabi_uldivmod+0x24>)
 8000460:	1840      	adds	r0, r0, r1
 8000462:	9002      	str	r0, [sp, #8]
 8000464:	bd03      	pop	{r0, r1, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	ffffffd9 	.word	0xffffffd9
 800046c:	b403      	push	{r0, r1}
 800046e:	4668      	mov	r0, sp
 8000470:	b501      	push	{r0, lr}
 8000472:	9802      	ldr	r0, [sp, #8]
 8000474:	f000 f806 	bl	8000484 <__udivmoddi4>
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	469e      	mov	lr, r3
 800047c:	b002      	add	sp, #8
 800047e:	bc0c      	pop	{r2, r3}
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <modbus_init_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_modbus_init_task */
void modbus_init_task(void *argument)
{
 8000670:	b510      	push	{r4, lr}
  for(;;)
  {

      //HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);

      osDelay(2000);
 8000672:	24fa      	movs	r4, #250	; 0xfa
 8000674:	00e4      	lsls	r4, r4, #3
 8000676:	0020      	movs	r0, r4
 8000678:	f003 ff35 	bl	80044e6 <osDelay>
  for(;;)
 800067c:	e7fb      	b.n	8000676 <modbus_init_task+0x6>

0800067e <MSM_DataCopy>:

    } StateData;

void MSM_DataCopy(analog_data * Dest,const analog_data * Source, uint8_t NoOfBytes )
    {
    for(int i =0; i<NoOfBytes;++i)
 800067e:	2300      	movs	r3, #0
    {
 8000680:	b510      	push	{r4, lr}
 8000682:	0052      	lsls	r2, r2, #1
    for(int i =0; i<NoOfBytes;++i)
 8000684:	4293      	cmp	r3, r2
 8000686:	d100      	bne.n	800068a <MSM_DataCopy+0xc>
	{
	Dest[i]=Source[i];
	}


    }
 8000688:	bd10      	pop	{r4, pc}
	Dest[i]=Source[i];
 800068a:	5acc      	ldrh	r4, [r1, r3]
 800068c:	52c4      	strh	r4, [r0, r3]
    for(int i =0; i<NoOfBytes;++i)
 800068e:	3302      	adds	r3, #2
 8000690:	e7f8      	b.n	8000684 <MSM_DataCopy+0x6>
	...

08000694 <main_logic_setup>:
{
 8000694:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreGive(modbus_h.ModBusSphrHandle);
 8000696:	2600      	movs	r6, #0
	xSemaphoreTake(modbus_h.ModBusSphrHandle , 100);
 8000698:	4c15      	ldr	r4, [pc, #84]	; (80006f0 <main_logic_setup+0x5c>)
 800069a:	2164      	movs	r1, #100	; 0x64
 800069c:	0025      	movs	r5, r4
 800069e:	35c4      	adds	r5, #196	; 0xc4
 80006a0:	6828      	ldr	r0, [r5, #0]
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, modbus_h.au16regs[0] & 0x1);
 80006a2:	3498      	adds	r4, #152	; 0x98
	xSemaphoreTake(modbus_h.ModBusSphrHandle , 100);
 80006a4:	f004 faa1 	bl	8004bea <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, modbus_h.au16regs[0] & 0x1);
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	2104      	movs	r1, #4
 80006ac:	881a      	ldrh	r2, [r3, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4810      	ldr	r0, [pc, #64]	; (80006f4 <main_logic_setup+0x60>)
 80006b2:	401a      	ands	r2, r3
 80006b4:	f001 fa0c 	bl	8001ad0 <HAL_GPIO_WritePin>
	ModbusDATA[1]=MachineStateData.FanSpeedRPM;
 80006b8:	4c0f      	ldr	r4, [pc, #60]	; (80006f8 <main_logic_setup+0x64>)
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <main_logic_setup+0x68>)
 80006bc:	8b22      	ldrh	r2, [r4, #24]
	MSM_DataCopy(&ModbusDATA[2],&MachineStateData.AnalogInputs.ADC_Input[0],12);
 80006be:	0021      	movs	r1, r4
	ModbusDATA[1]=MachineStateData.FanSpeedRPM;
 80006c0:	805a      	strh	r2, [r3, #2]
	MSM_DataCopy(&ModbusDATA[2],&MachineStateData.AnalogInputs.ADC_Input[0],12);
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <main_logic_setup+0x6c>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	f7ff ffda 	bl	800067e <MSM_DataCopy>
	xSemaphoreGive(modbus_h.ModBusSphrHandle);
 80006ca:	2300      	movs	r3, #0
 80006cc:	6828      	ldr	r0, [r5, #0]
 80006ce:	001a      	movs	r2, r3
 80006d0:	0019      	movs	r1, r3
 80006d2:	f004 f92b 	bl	800492c <xQueueGenericSend>
	uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <main_logic_setup+0x70>)
	osDelay(200);
 80006d8:	20c8      	movs	r0, #200	; 0xc8
	uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 80006da:	681a      	ldr	r2, [r3, #0]
	MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 80006dc:	2396      	movs	r3, #150	; 0x96
	uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 80006de:	6a51      	ldr	r1, [r2, #36]	; 0x24
	MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	434b      	muls	r3, r1
	htim17.Instance->CNT=0;
 80006e4:	6256      	str	r6, [r2, #36]	; 0x24
	MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 80006e6:	8323      	strh	r3, [r4, #24]
	osDelay(200);
 80006e8:	f003 fefd 	bl	80044e6 <osDelay>
  for(;;)
 80006ec:	e7d4      	b.n	8000698 <main_logic_setup+0x4>
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	200013b4 	.word	0x200013b4
 80006f4:	50000400 	.word	0x50000400
 80006f8:	200015f4 	.word	0x200015f4
 80006fc:	2000138c 	.word	0x2000138c
 8000700:	20001390 	.word	0x20001390
 8000704:	20001340 	.word	0x20001340

08000708 <SystemClock_Config>:
{
 8000708:	b510      	push	{r4, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070c:	2238      	movs	r2, #56	; 0x38
 800070e:	2100      	movs	r1, #0
 8000710:	a80e      	add	r0, sp, #56	; 0x38
 8000712:	f005 fcae 	bl	8006072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000716:	2210      	movs	r2, #16
 8000718:	2100      	movs	r1, #0
 800071a:	4668      	mov	r0, sp
 800071c:	f005 fca9 	bl	8006072 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	2228      	movs	r2, #40	; 0x28
 8000722:	2100      	movs	r1, #0
 8000724:	a804      	add	r0, sp, #16
 8000726:	f005 fca4 	bl	8006072 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	0080      	lsls	r0, r0, #2
 800072e:	f001 f9d5 	bl	8001adc <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	3340      	adds	r3, #64	; 0x40
 800073e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000740:	3b10      	subs	r3, #16
 8000742:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000744:	3320      	adds	r3, #32
 8000746:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	049b      	lsls	r3, r3, #18
 8000752:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000754:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000756:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000758:	061b      	lsls	r3, r3, #24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000762:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f001 f9e6 	bl	8001b34 <HAL_RCC_OscConfig>
 8000768:	2800      	cmp	r0, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x68>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	0021      	movs	r1, r4
 8000778:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f001 fc43 	bl	8002008 <HAL_RCC_ClockConfig>
 8000782:	2800      	cmp	r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x82>
 8000786:	b672      	cpsid	i
  while (1)
 8000788:	e7fe      	b.n	8000788 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SystemClock_Config+0x9c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800078c:	9005      	str	r0, [sp, #20]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800078e:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000792:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000794:	f001 fd14 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	2800      	cmp	r0, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x98>
 800079c:	b672      	cpsid	i
  while (1)
 800079e:	e7fe      	b.n	800079e <SystemClock_Config+0x96>
}
 80007a0:	b01c      	add	sp, #112	; 0x70
 80007a2:	bd10      	pop	{r4, pc}
 80007a4:	00004001 	.word	0x00004001

080007a8 <main>:
{
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80007ac:	f000 fb4c 	bl	8000e48 <HAL_Init>
  SystemClock_Config();
 80007b0:	f7ff ffaa 	bl	8000708 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2214      	movs	r2, #20
 80007b6:	2100      	movs	r1, #0
 80007b8:	a805      	add	r0, sp, #20
 80007ba:	f005 fc5a 	bl	8006072 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2404      	movs	r4, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4dc2      	ldr	r5, [pc, #776]	; (8000ad0 <main+0x328>)
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80007c6:	48c3      	ldr	r0, [pc, #780]	; (8000ad4 <main+0x32c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80007ca:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	430a      	orrs	r2, r1
 80007ce:	636a      	str	r2, [r5, #52]	; 0x34
 80007d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	400b      	ands	r3, r1
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80007dc:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4333      	orrs	r3, r6
 80007e0:	636b      	str	r3, [r5, #52]	; 0x34
 80007e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80007e4:	007f      	lsls	r7, r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4033      	ands	r3, r6
 80007e8:	9303      	str	r3, [sp, #12]
 80007ea:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007ee:	4323      	orrs	r3, r4
 80007f0:	636b      	str	r3, [r5, #52]	; 0x34
 80007f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007f4:	4023      	ands	r3, r4
 80007f6:	9304      	str	r3, [sp, #16]
 80007f8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80007fa:	f001 f969 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80007fe:	20a0      	movs	r0, #160	; 0xa0
 8000800:	2200      	movs	r2, #0
 8000802:	0039      	movs	r1, r7
 8000804:	05c0      	lsls	r0, r0, #23
 8000806:	f001 f963 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	48b2      	ldr	r0, [pc, #712]	; (8000ad8 <main+0x330>)
 8000810:	f001 f95e 	bl	8001ad0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000814:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2400      	movs	r4, #0
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000818:	48ae      	ldr	r0, [pc, #696]	; (8000ad4 <main+0x32c>)
 800081a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000822:	f001 f8ab 	bl	800197c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000826:	20a0      	movs	r0, #160	; 0xa0
 8000828:	a905      	add	r1, sp, #20
 800082a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_R_Pin;
 800082c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000834:	f001 f8a2 	bl	800197c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000838:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800083a:	48a7      	ldr	r0, [pc, #668]	; (8000ad8 <main+0x330>)
 800083c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_G_Pin;
 800083e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000846:	f001 f899 	bl	800197c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800084c:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084e:	4333      	orrs	r3, r6
 8000850:	63ab      	str	r3, [r5, #56]	; 0x38
 8000852:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000854:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000858:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800085e:	f000 fea7 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000862:	2009      	movs	r0, #9
 8000864:	f000 fece 	bl	8001604 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000868:	4d9c      	ldr	r5, [pc, #624]	; (8000adc <main+0x334>)
 800086a:	4b9d      	ldr	r3, [pc, #628]	; (8000ae0 <main+0x338>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086c:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 800086e:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000870:	23e1      	movs	r3, #225	; 0xe1
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000876:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000878:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087a:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087c:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087e:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000880:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000882:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000884:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000886:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088a:	f002 fe07 	bl	800349c <HAL_UART_Init>
 800088e:	0001      	movs	r1, r0
 8000890:	42a0      	cmp	r0, r4
 8000892:	d001      	beq.n	8000898 <main+0xf0>
 8000894:	b672      	cpsid	i
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0xee>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000898:	0028      	movs	r0, r5
 800089a:	f002 ff1f 	bl	80036dc <HAL_UARTEx_SetTxFifoThreshold>
 800089e:	1e01      	subs	r1, r0, #0
 80008a0:	d001      	beq.n	80008a6 <main+0xfe>
 80008a2:	b672      	cpsid	i
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <main+0xfc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a6:	0028      	movs	r0, r5
 80008a8:	f002 ff3c 	bl	8003724 <HAL_UARTEx_SetRxFifoThreshold>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d001      	beq.n	80008b4 <main+0x10c>
 80008b0:	b672      	cpsid	i
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <main+0x10a>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008b4:	0028      	movs	r0, r5
 80008b6:	f002 fef3 	bl	80036a0 <HAL_UARTEx_DisableFifoMode>
 80008ba:	1e07      	subs	r7, r0, #0
 80008bc:	d001      	beq.n	80008c2 <main+0x11a>
 80008be:	b672      	cpsid	i
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0x118>
  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	0001      	movs	r1, r0
 80008c4:	220c      	movs	r2, #12
 80008c6:	a805      	add	r0, sp, #20
 80008c8:	f005 fbd3 	bl	8006072 <memset>
  hadc1.Instance = ADC1;
 80008cc:	4c85      	ldr	r4, [pc, #532]	; (8000ae4 <main+0x33c>)
 80008ce:	4b86      	ldr	r3, [pc, #536]	; (8000ae8 <main+0x340>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	0020      	movs	r0, r4
  hadc1.Instance = ADC1;
 80008d2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	061b      	lsls	r3, r3, #24
 80008d8:	6063      	str	r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80008da:	6123      	str	r3, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008dc:	2308      	movs	r3, #8
 80008de:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80008e0:	2302      	movs	r3, #2
 80008e2:	33ff      	adds	r3, #255	; 0xff
 80008e4:	8323      	strh	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	1c63      	adds	r3, r4, #1
 80008e8:	77df      	strb	r7, [r3, #31]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ea:	0023      	movs	r3, r4
 80008ec:	332c      	adds	r3, #44	; 0x2c
 80008ee:	701e      	strb	r6, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80008f0:	2304      	movs	r3, #4
 80008f2:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f4:	0023      	movs	r3, r4
 80008f6:	333c      	adds	r3, #60	; 0x3c
 80008f8:	701f      	strb	r7, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	059b      	lsls	r3, r3, #22
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008fe:	60a7      	str	r7, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000900:	60e7      	str	r7, [r4, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000902:	76a6      	strb	r6, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000904:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000906:	6267      	str	r7, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090a:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800090c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	f000 fac5 	bl	8000e9c <HAL_ADC_Init>
 8000912:	2800      	cmp	r0, #0
 8000914:	d001      	beq.n	800091a <main+0x172>
 8000916:	b672      	cpsid	i
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x170>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	0020      	movs	r0, r4
 800091c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 800091e:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000920:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	f000 fc45 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000926:	2800      	cmp	r0, #0
 8000928:	d001      	beq.n	800092e <main+0x186>
 800092a:	b672      	cpsid	i
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x184>
  sConfig.Channel = ADC_CHANNEL_1;
 800092e:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <main+0x344>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	0020      	movs	r0, r4
 8000932:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 8000934:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	f000 fc3b 	bl	80011b0 <HAL_ADC_ConfigChannel>
 800093a:	2800      	cmp	r0, #0
 800093c:	d001      	beq.n	8000942 <main+0x19a>
 800093e:	b672      	cpsid	i
  while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x198>
  sConfig.Channel = ADC_CHANNEL_2;
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <main+0x348>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	0020      	movs	r0, r4
 8000946:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_2;
 8000948:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	f000 fc31 	bl	80011b0 <HAL_ADC_ConfigChannel>
 800094e:	2800      	cmp	r0, #0
 8000950:	d001      	beq.n	8000956 <main+0x1ae>
 8000952:	b672      	cpsid	i
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x1ac>
  sConfig.Channel = ADC_CHANNEL_3;
 8000956:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <main+0x34c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	0020      	movs	r0, r4
 800095a:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_3;
 800095c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	f000 fc27 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000962:	2800      	cmp	r0, #0
 8000964:	d001      	beq.n	800096a <main+0x1c2>
 8000966:	b672      	cpsid	i
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0x1c0>
  sConfig.Channel = ADC_CHANNEL_4;
 800096a:	4b63      	ldr	r3, [pc, #396]	; (8000af8 <main+0x350>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	0020      	movs	r0, r4
 800096e:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 8000970:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	f000 fc1d 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000976:	2800      	cmp	r0, #0
 8000978:	d001      	beq.n	800097e <main+0x1d6>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x1d4>
  sConfig.Channel = ADC_CHANNEL_5;
 800097e:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <main+0x354>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	0020      	movs	r0, r4
 8000982:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 8000984:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	f000 fc13 	bl	80011b0 <HAL_ADC_ConfigChannel>
 800098a:	2800      	cmp	r0, #0
 800098c:	d001      	beq.n	8000992 <main+0x1ea>
 800098e:	b672      	cpsid	i
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x1e8>
  sConfig.Channel = ADC_CHANNEL_6;
 8000992:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <main+0x358>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000994:	0020      	movs	r0, r4
 8000996:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_6;
 8000998:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	f000 fc09 	bl	80011b0 <HAL_ADC_ConfigChannel>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d001      	beq.n	80009a6 <main+0x1fe>
 80009a2:	b672      	cpsid	i
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_7;
 80009a6:	4b57      	ldr	r3, [pc, #348]	; (8000b04 <main+0x35c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	0020      	movs	r0, r4
 80009aa:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_7;
 80009ac:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	f000 fbff 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d001      	beq.n	80009ba <main+0x212>
 80009b6:	b672      	cpsid	i
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x210>
  sConfig.Channel = ADC_CHANNEL_8;
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <main+0x360>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	0020      	movs	r0, r4
 80009be:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_8;
 80009c0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	f000 fbf5 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d001      	beq.n	80009ce <main+0x226>
 80009ca:	b672      	cpsid	i
  while (1)
 80009cc:	e7fe      	b.n	80009cc <main+0x224>
  sConfig.Channel = ADC_CHANNEL_9;
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <main+0x364>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	0020      	movs	r0, r4
 80009d2:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_9;
 80009d4:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	f000 fbeb 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d001      	beq.n	80009e2 <main+0x23a>
 80009de:	b672      	cpsid	i
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <main+0x238>
  sConfig.Channel = ADC_CHANNEL_16;
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <main+0x368>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	0020      	movs	r0, r4
 80009e6:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_16;
 80009e8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	f000 fbe1 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d001      	beq.n	80009f6 <main+0x24e>
 80009f2:	b672      	cpsid	i
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0x24c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009f6:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <main+0x36c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	0020      	movs	r0, r4
 80009fa:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009fc:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	f000 fbd7 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000a02:	1e07      	subs	r7, r0, #0
 8000a04:	d001      	beq.n	8000a0a <main+0x262>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x260>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	a805      	add	r0, sp, #20
 8000a10:	f005 fb2f 	bl	8006072 <memset>
  htim17.Instance = TIM17;
 8000a14:	4e40      	ldr	r6, [pc, #256]	; (8000b18 <main+0x370>)
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <main+0x374>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a18:	0030      	movs	r0, r6
  htim17.Instance = TIM17;
 8000a1a:	6033      	str	r3, [r6, #0]
  htim17.Init.Period = 65535;
 8000a1c:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <main+0x378>)
  htim17.Init.Prescaler = 0;
 8000a1e:	6077      	str	r7, [r6, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	60b7      	str	r7, [r6, #8]
  htim17.Init.Period = 65535;
 8000a22:	60f3      	str	r3, [r6, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	6137      	str	r7, [r6, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a26:	6177      	str	r7, [r6, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2a:	f001 fddd 	bl	80025e8 <HAL_TIM_Base_Init>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d001      	beq.n	8000a36 <main+0x28e>
 8000a32:	b672      	cpsid	i
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x28c>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8000a36:	0030      	movs	r0, r6
 8000a38:	f001 fe00 	bl	800263c <HAL_TIM_IC_Init>
 8000a3c:	1e02      	subs	r2, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <main+0x29c>
 8000a40:	b672      	cpsid	i
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <main+0x29a>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a44:	2301      	movs	r3, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a46:	9005      	str	r0, [sp, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a48:	9007      	str	r0, [sp, #28]
  sConfigIC.ICFilter = 0;
 8000a4a:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	a905      	add	r1, sp, #20
 8000a4e:	0030      	movs	r0, r6
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a50:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	f001 fe45 	bl	80026e0 <HAL_TIM_IC_ConfigChannel>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d001      	beq.n	8000a5e <main+0x2b6>
 8000a5a:	b672      	cpsid	i
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0x2b4>
  modbus_h.uiModbusType = SLAVE_RTU;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	4e30      	ldr	r6, [pc, #192]	; (8000b24 <main+0x37c>)
  modbus_h.u16timeOut = 1000;
 8000a62:	22fa      	movs	r2, #250	; 0xfa
  modbus_h.uiModbusType = SLAVE_RTU;
 8000a64:	7033      	strb	r3, [r6, #0]
  modbus_h.u8id = 10; //Modbus slave ID
 8000a66:	3307      	adds	r3, #7
 8000a68:	7233      	strb	r3, [r6, #8]
  modbus_h.u16timeOut = 1000;
 8000a6a:	0033      	movs	r3, r6
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	33a2      	adds	r3, #162	; 0xa2
 8000a70:	801a      	strh	r2, [r3, #0]
  modbus_h.u32overTime = 0;
 8000a72:	0033      	movs	r3, r6
  modbus_h.port =  &huart1;
 8000a74:	6075      	str	r5, [r6, #4]
  modbus_h.EN_Port = NULL;
 8000a76:	2500      	movs	r5, #0
  modbus_h.u32overTime = 0;
 8000a78:	33ac      	adds	r3, #172	; 0xac
 8000a7a:	601d      	str	r5, [r3, #0]
  modbus_h.au16regs = ModbusDATA;
 8000a7c:	0033      	movs	r3, r6
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <main+0x380>)
 8000a80:	3398      	adds	r3, #152	; 0x98
 8000a82:	601a      	str	r2, [r3, #0]
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000a84:	0033      	movs	r3, r6
 8000a86:	2210      	movs	r2, #16
 8000a88:	33b0      	adds	r3, #176	; 0xb0
  ModbusInit(&modbus_h);
 8000a8a:	0030      	movs	r0, r6
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000a8c:	801a      	strh	r2, [r3, #0]
  modbus_h.EN_Port = NULL;
 8000a8e:	60f5      	str	r5, [r6, #12]
  ModbusInit(&modbus_h);
 8000a90:	f002 ff1a 	bl	80038c8 <ModbusInit>
  ModbusStart(&modbus_h);
 8000a94:	0030      	movs	r0, r6
 8000a96:	f002 ff93 	bl	80039c0 <ModbusStart>
  HAL_ADC_Start_DMA(&hadc1,&MachineStateData.AnalogInputs.ADC_Input[0] ,12);
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	4923      	ldr	r1, [pc, #140]	; (8000b2c <main+0x384>)
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f000 fd2e 	bl	8001500 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f000 fcfd 	bl	80014a4 <HAL_ADC_Start>
  osKernelInitialize();
 8000aaa:	f003 fc99 	bl	80043e0 <osKernelInitialize>
  main_logic_loopHandle = osThreadNew(main_logic_setup, NULL, &main_logic_loop_attributes);
 8000aae:	0029      	movs	r1, r5
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <main+0x388>)
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <main+0x38c>)
 8000ab4:	f003 fcc4 	bl	8004440 <osThreadNew>
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <main+0x390>)
  Modbus_TaskHandle = osThreadNew(modbus_init_task, NULL, &Modbus_Task_attributes);
 8000aba:	0029      	movs	r1, r5
  main_logic_loopHandle = osThreadNew(main_logic_setup, NULL, &main_logic_loop_attributes);
 8000abc:	6018      	str	r0, [r3, #0]
  Modbus_TaskHandle = osThreadNew(modbus_init_task, NULL, &Modbus_Task_attributes);
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <main+0x394>)
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <main+0x398>)
 8000ac2:	f003 fcbd 	bl	8004440 <osThreadNew>
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <main+0x39c>)
 8000ac8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000aca:	f003 fc9b 	bl	8004404 <osKernelStart>
  while (1)
 8000ace:	e7fe      	b.n	8000ace <main+0x326>
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	50000400 	.word	0x50000400
 8000ad8:	50000800 	.word	0x50000800
 8000adc:	20001564 	.word	0x20001564
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	20001500 	.word	0x20001500
 8000ae8:	40012400 	.word	0x40012400
 8000aec:	04000002 	.word	0x04000002
 8000af0:	08000004 	.word	0x08000004
 8000af4:	0c000008 	.word	0x0c000008
 8000af8:	10000010 	.word	0x10000010
 8000afc:	14000020 	.word	0x14000020
 8000b00:	18000040 	.word	0x18000040
 8000b04:	1c000080 	.word	0x1c000080
 8000b08:	20000100 	.word	0x20000100
 8000b0c:	24000200 	.word	0x24000200
 8000b10:	40010000 	.word	0x40010000
 8000b14:	b0001000 	.word	0xb0001000
 8000b18:	20001340 	.word	0x20001340
 8000b1c:	40014800 	.word	0x40014800
 8000b20:	0000ffff 	.word	0x0000ffff
 8000b24:	200013b4 	.word	0x200013b4
 8000b28:	2000138c 	.word	0x2000138c
 8000b2c:	200015f4 	.word	0x200015f4
 8000b30:	080060e4 	.word	0x080060e4
 8000b34:	08000695 	.word	0x08000695
 8000b38:	2000133c 	.word	0x2000133c
 8000b3c:	080060c0 	.word	0x080060c0
 8000b40:	08000671 	.word	0x08000671
 8000b44:	200016a8 	.word	0x200016a8

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000b4a:	6802      	ldr	r2, [r0, #0]
{
 8000b4c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000b52:	f000 f98d 	bl	8000e70 <HAL_IncTick>
}
 8000b56:	bd10      	pop	{r4, pc}
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <Error_Handler>:
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <Error_Handler+0x2>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2001      	movs	r0, #1
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x34>)
 8000b66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000b68:	4301      	orrs	r1, r0
 8000b6a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4002      	ands	r2, r0
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b7a:	1800      	adds	r0, r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b82:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	400b      	ands	r3, r1
 8000b86:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b8e:	f000 fd0f 	bl	80015b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bd07      	pop	{r0, r1, r2, pc}
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	0005      	movs	r5, r0
 8000b9c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	2214      	movs	r2, #20
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	a803      	add	r0, sp, #12
 8000ba4:	f005 fa65 	bl	8006072 <memset>
  if(hadc->Instance==ADC1)
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_ADC_MspInit+0xac>)
 8000baa:	682a      	ldr	r2, [r5, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d147      	bne.n	8000c40 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <HAL_ADC_MspInit+0xb0>)
 8000bb4:	0340      	lsls	r0, r0, #13
 8000bb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    */
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
                          |BOARD_TEMP_PROBE1_Pin|BOARD_TEMP_PROBE2_Pin|GPIO_PIN_6|VBAT_1_Pin
                          |BAT_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bba:	4301      	orrs	r1, r0
 8000bbc:	6419      	str	r1, [r3, #64]	; 0x40
 8000bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc2:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2001      	movs	r0, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bcc:	4301      	orrs	r1, r0
 8000bce:	6359      	str	r1, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bd4:	4002      	ands	r2, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	9201      	str	r2, [sp, #4]
 8000bda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	430a      	orrs	r2, r1
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	400b      	ands	r3, r1
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000bf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f000 fec1 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <HAL_ADC_MspInit+0xb8>)
 8000bfc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000bfe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c00:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f000 feba 	bl	800197c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c08:	4c12      	ldr	r4, [pc, #72]	; (8000c54 <HAL_ADC_MspInit+0xbc>)
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0c:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000c0e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c10:	2305      	movs	r3, #5
 8000c12:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c14:	337b      	adds	r3, #123	; 0x7b
 8000c16:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c18:	3380      	adds	r3, #128	; 0x80
 8000c1a:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c22:	2320      	movs	r3, #32
 8000c24:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	019b      	lsls	r3, r3, #6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c2e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c30:	f000 fd2e 	bl	8001690 <HAL_DMA_Init>
 8000c34:	42b0      	cmp	r0, r6
 8000c36:	d001      	beq.n	8000c3c <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8000c38:	f7ff ff90 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c3c:	652c      	str	r4, [r5, #80]	; 0x50
 8000c3e:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c40:	b008      	add	sp, #32
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	40012400 	.word	0x40012400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	000010ff 	.word	0x000010ff
 8000c50:	50000400 	.word	0x50000400
 8000c54:	20001614 	.word	0x20001614
 8000c58:	40020008 	.word	0x40020008

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	0004      	movs	r4, r0
 8000c60:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	2214      	movs	r2, #20
 8000c64:	2100      	movs	r1, #0
 8000c66:	a803      	add	r0, sp, #12
 8000c68:	f005 fa03 	bl	8006072 <memset>
  if(htim_base->Instance==TIM17)
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_TIM_Base_MspInit+0x58>)
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d11d      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c74:	2080      	movs	r0, #128	; 0x80
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_TIM_Base_MspInit+0x5c>)
 8000c78:	02c0      	lsls	r0, r0, #11
 8000c7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c7c:	4301      	orrs	r1, r0
 8000c7e:	6419      	str	r1, [r3, #64]	; 0x40
 8000c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c82:	4002      	ands	r2, r0
 8000c84:	9201      	str	r2, [sp, #4]
 8000c86:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	2202      	movs	r2, #2
 8000c8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <HAL_TIM_Base_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	6359      	str	r1, [r3, #52]	; 0x34
 8000c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4013      	ands	r3, r2
 8000c98:	9302      	str	r3, [sp, #8]
 8000c9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8000caa:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f000 fe66 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cb0:	b008      	add	sp, #32
 8000cb2:	bd10      	pop	{r4, pc}
 8000cb4:	40014800 	.word	0x40014800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	50000400 	.word	0x50000400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	2214      	movs	r2, #20
 8000cc8:	2100      	movs	r1, #0
 8000cca:	a803      	add	r0, sp, #12
 8000ccc:	f005 f9d1 	bl	8006072 <memset>
  if(huart->Instance==USART1)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0x6c>)
 8000cd2:	6822      	ldr	r2, [r4, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d127      	bne.n	8000d28 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd8:	2080      	movs	r0, #128	; 0x80
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_UART_MspInit+0x70>)
 8000cdc:	01c0      	lsls	r0, r0, #7
 8000cde:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	4301      	orrs	r1, r0
 8000ce4:	6419      	str	r1, [r3, #64]	; 0x40
 8000ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce8:	4002      	ands	r2, r0
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2201      	movs	r2, #1
 8000cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4311      	orrs	r1, r2
 8000cf6:	6359      	str	r1, [r3, #52]	; 0x34
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d0e:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f000 fe32 	bl	800197c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000d18:	201b      	movs	r0, #27
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	f000 fc47 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d22:	201b      	movs	r0, #27
 8000d24:	f000 fc6e 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d28:	b008      	add	sp, #32
 8000d2a:	bd10      	pop	{r4, pc}
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b510      	push	{r4, lr}
 8000d36:	0001      	movs	r1, r0
 8000d38:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	200d      	movs	r0, #13
 8000d3e:	f000 fc37 	bl	80015b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d42:	200d      	movs	r0, #13
 8000d44:	f000 fc5e 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_InitTick+0x68>)
 8000d4c:	0100      	lsls	r0, r0, #4
 8000d4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d50:	4301      	orrs	r1, r0
 8000d52:	6411      	str	r1, [r2, #64]	; 0x40
 8000d54:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d56:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d58:	4003      	ands	r3, r0
 8000d5a:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5c:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d60:	f001 fa14 	bl	800218c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d64:	f001 f9fe 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d68:	4c0d      	ldr	r4, [pc, #52]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6c:	490e      	ldr	r1, [pc, #56]	; (8000da8 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8000d6e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_InitTick+0x78>)
 8000d72:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d74:	f7ff f9f0 	bl	8000158 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000d78:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d7c:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d7e:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000d80:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d84:	f001 fc30 	bl	80025e8 <HAL_TIM_Base_Init>
 8000d88:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 faf7 	bl	8002384 <HAL_TIM_Base_Start_IT>
}
 8000d96:	b006      	add	sp, #24
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	200016ac 	.word	0x200016ac
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	000f4240 	.word	0x000f4240
 8000dac:	000003e7 	.word	0x000003e7

08000db0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler>

08000db2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler>

08000db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DMA1_Channel1_IRQHandler+0xc>)
 8000db8:	f000 fd8c 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20001614 	.word	0x20001614

08000dc4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000dc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8000dc8:	f001 fb12 	bl	80023f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	200016ac 	.word	0x200016ac

08000dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000dd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USART1_IRQHandler+0xc>)
 8000dd8:	f001 fe3a 	bl	8002a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20001564 	.word	0x20001564

08000de4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <SystemInit+0xc>)
 8000de8:	0512      	lsls	r2, r2, #20
 8000dea:	609a      	str	r2, [r3, #8]
#endif
}
 8000dec:	4770      	bx	lr
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff fff4 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f005 f8f9 	bl	8006018 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e26:	f7ff fcbf 	bl	80007a8 <main>

08000e2a <LoopForever>:

LoopForever:
  b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e38:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 8000e3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e40:	2000173c 	.word	0x2000173c

08000e44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_IRQHandler>
	...

08000e48 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_Init+0x24>)
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	6811      	ldr	r1, [r2, #0]
{
 8000e50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e52:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e54:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e56:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e58:	f7ff ff6c 	bl	8000d34 <HAL_InitTick>
 8000e5c:	1e04      	subs	r4, r0, #0
 8000e5e:	d103      	bne.n	8000e68 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe7e 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000e64:	0020      	movs	r0, r4
 8000e66:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e68:	2401      	movs	r4, #1
 8000e6a:	e7fb      	b.n	8000e64 <HAL_Init+0x1c>
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x10>)
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_IncTick+0x14>)
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	185b      	adds	r3, r3, r1
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	4770      	bx	lr
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	200016f8 	.word	0x200016f8
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e88:	4b01      	ldr	r3, [pc, #4]	; (8000e90 <HAL_GetTick+0x8>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	200016f8 	.word	0x200016f8

08000e94 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e94:	6880      	ldr	r0, [r0, #8]
 8000e96:	0740      	lsls	r0, r0, #29
 8000e98:	0fc0      	lsrs	r0, r0, #31
}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e9c:	2300      	movs	r3, #0
{
 8000e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea0:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000ea2:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000ea4:	3301      	adds	r3, #1
{
 8000ea6:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 8000ea8:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000eaa:	d100      	bne.n	8000eae <HAL_ADC_Init+0x12>
 8000eac:	e0be      	b.n	800102c <HAL_ADC_Init+0x190>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eae:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d105      	bne.n	8000ec0 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb4:	f7ff fe70 	bl	8000b98 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000eb8:	0023      	movs	r3, r4
 8000eba:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000ebe:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ec0:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec2:	6826      	ldr	r6, [r4, #0]
 8000ec4:	055b      	lsls	r3, r3, #21
 8000ec6:	68b2      	ldr	r2, [r6, #8]
 8000ec8:	421a      	tst	r2, r3
 8000eca:	d100      	bne.n	8000ece <HAL_ADC_Init+0x32>
 8000ecc:	e0b1      	b.n	8001032 <HAL_ADC_Init+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	68b3      	ldr	r3, [r6, #8]
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	d408      	bmi.n	8000eea <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed8:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eda:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000edc:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ede:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ee6:	432b      	orrs	r3, r5
 8000ee8:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eea:	0030      	movs	r0, r6
 8000eec:	f7ff ffd2 	bl	8000e94 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	4310      	orrs	r0, r2
 8000ef8:	d000      	beq.n	8000efc <HAL_ADC_Init+0x60>
 8000efa:	e0e8      	b.n	80010ce <HAL_ADC_Init+0x232>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_ADC_Init+0x240>)
  uint32_t tmpCFGR2 = 0UL;
 8000f00:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	401a      	ands	r2, r3
 8000f04:	2302      	movs	r3, #2
 8000f06:	4313      	orrs	r3, r2
 8000f08:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f0a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	07d2      	lsls	r2, r2, #31
 8000f10:	d42e      	bmi.n	8000f70 <HAL_ADC_Init+0xd4>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	3118      	adds	r1, #24
 8000f16:	438a      	bics	r2, r1
 8000f18:	68a1      	ldr	r1, [r4, #8]
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.Oversampling.Ratio         |
                   hadc->Init.Oversampling.RightBitShift |
                   hadc->Init.Oversampling.TriggeredMode |
 8000f1a:	6c65      	ldr	r5, [r4, #68]	; 0x44
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f1c:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.TriggeredMode |
 8000f1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f20:	60da      	str	r2, [r3, #12]
                   hadc->Init.Oversampling.TriggeredMode |
 8000f22:	4329      	orrs	r1, r5
 8000f24:	6ca5      	ldr	r5, [r4, #72]	; 0x48
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f26:	6862      	ldr	r2, [r4, #4]
                   hadc->Init.Oversampling.TriggeredMode |
 8000f28:	4329      	orrs	r1, r5
 8000f2a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f2c:	0f96      	lsrs	r6, r2, #30
 8000f2e:	07b6      	lsls	r6, r6, #30
                   hadc->Init.Oversampling.TriggeredMode |
 8000f30:	4329      	orrs	r1, r5
 8000f32:	4331      	orrs	r1, r6
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f34:	0026      	movs	r6, r4
 8000f36:	363c      	adds	r6, #60	; 0x3c
 8000f38:	7836      	ldrb	r6, [r6, #0]
 8000f3a:	2e01      	cmp	r6, #1
 8000f3c:	d100      	bne.n	8000f40 <HAL_ADC_Init+0xa4>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000f3e:	4331      	orrs	r1, r6
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f40:	691e      	ldr	r6, [r3, #16]
 8000f42:	4f67      	ldr	r7, [pc, #412]	; (80010e0 <HAL_ADC_Init+0x244>)
 8000f44:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f46:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000f48:	430e      	orrs	r6, r1
 8000f4a:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f4c:	0056      	lsls	r6, r2, #1
 8000f4e:	0876      	lsrs	r6, r6, #1
 8000f50:	05ff      	lsls	r7, r7, #23
 8000f52:	42be      	cmp	r6, r7
 8000f54:	d00c      	beq.n	8000f70 <HAL_ADC_Init+0xd4>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f56:	2680      	movs	r6, #128	; 0x80
 8000f58:	0636      	lsls	r6, r6, #24
 8000f5a:	42b2      	cmp	r2, r6
 8000f5c:	d008      	beq.n	8000f70 <HAL_ADC_Init+0xd4>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f5e:	4e61      	ldr	r6, [pc, #388]	; (80010e4 <HAL_ADC_Init+0x248>)
 8000f60:	4f61      	ldr	r7, [pc, #388]	; (80010e8 <HAL_ADC_Init+0x24c>)
 8000f62:	6835      	ldr	r5, [r6, #0]
 8000f64:	402f      	ands	r7, r5
 8000f66:	25f0      	movs	r5, #240	; 0xf0
 8000f68:	03ad      	lsls	r5, r5, #14
 8000f6a:	402a      	ands	r2, r5
 8000f6c:	433a      	orrs	r2, r7
 8000f6e:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f70:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f72:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f74:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f76:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f78:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f7a:	7ea2      	ldrb	r2, [r4, #26]
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_Init+0xee>
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0152      	lsls	r2, r2, #5
 8000f8a:	68e5      	ldr	r5, [r4, #12]
 8000f8c:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f8e:	6925      	ldr	r5, [r4, #16]
 8000f90:	433e      	orrs	r6, r7
 8000f92:	9603      	str	r6, [sp, #12]
 8000f94:	9502      	str	r5, [sp, #8]
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	da5f      	bge.n	800105a <HAL_ADC_Init+0x1be>
 8000f9a:	006f      	lsls	r7, r5, #1
 8000f9c:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f9e:	0026      	movs	r6, r4
 8000fa0:	362c      	adds	r6, #44	; 0x2c
 8000fa2:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fa4:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fa6:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fa8:	432e      	orrs	r6, r5
 8000faa:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fac:	1c66      	adds	r6, r4, #1
 8000fae:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb0:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb2:	2e01      	cmp	r6, #1
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_Init+0x126>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb6:	4665      	mov	r5, ip
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d151      	bne.n	8001060 <HAL_ADC_Init+0x1c4>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fbc:	2680      	movs	r6, #128	; 0x80
 8000fbe:	0276      	lsls	r6, r6, #9
 8000fc0:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_ADC_Init+0x138>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fc8:	27e0      	movs	r7, #224	; 0xe0
 8000fca:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000fcc:	007f      	lsls	r7, r7, #1
 8000fce:	403e      	ands	r6, r7
 8000fd0:	432e      	orrs	r6, r5
 8000fd2:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000fd4:	68de      	ldr	r6, [r3, #12]
 8000fd6:	4f45      	ldr	r7, [pc, #276]	; (80010ec <HAL_ADC_Init+0x250>)
  MODIFY_REG(ADCx->SMPR,
 8000fd8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000fda:	403e      	ands	r6, r7
 8000fdc:	4316      	orrs	r6, r2
 8000fde:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000fe0:	691e      	ldr	r6, [r3, #16]
 8000fe2:	4f43      	ldr	r7, [pc, #268]	; (80010f0 <HAL_ADC_Init+0x254>)
 8000fe4:	403e      	ands	r6, r7
 8000fe6:	4331      	orrs	r1, r6
 8000fe8:	2607      	movs	r6, #7
 8000fea:	2770      	movs	r7, #112	; 0x70
 8000fec:	6119      	str	r1, [r3, #16]
 8000fee:	6959      	ldr	r1, [r3, #20]
 8000ff0:	43b1      	bics	r1, r6
 8000ff2:	4329      	orrs	r1, r5
 8000ff4:	6159      	str	r1, [r3, #20]
 8000ff6:	695e      	ldr	r6, [r3, #20]
 8000ff8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000ffa:	43be      	bics	r6, r7
 8000ffc:	0109      	lsls	r1, r1, #4
 8000ffe:	4331      	orrs	r1, r6
 8001000:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001002:	9902      	ldr	r1, [sp, #8]
 8001004:	2900      	cmp	r1, #0
 8001006:	d133      	bne.n	8001070 <HAL_ADC_Init+0x1d4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001008:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800100a:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800100c:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800100e:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	4938      	ldr	r1, [pc, #224]	; (80010f4 <HAL_ADC_Init+0x258>)
 8001014:	400b      	ands	r3, r1
 8001016:	4293      	cmp	r3, r2
 8001018:	d14c      	bne.n	80010b4 <HAL_ADC_Init+0x218>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800101c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800101e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001022:	4393      	bics	r3, r2
 8001024:	001a      	movs	r2, r3
 8001026:	2301      	movs	r3, #1
 8001028:	4313      	orrs	r3, r2
 800102a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800102c:	9801      	ldr	r0, [sp, #4]
 800102e:	b007      	add	sp, #28
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8001032:	68b2      	ldr	r2, [r6, #8]
 8001034:	4930      	ldr	r1, [pc, #192]	; (80010f8 <HAL_ADC_Init+0x25c>)
 8001036:	400a      	ands	r2, r1
 8001038:	4313      	orrs	r3, r2
 800103a:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_ADC_Init+0x260>)
 800103e:	4930      	ldr	r1, [pc, #192]	; (8001100 <HAL_ADC_Init+0x264>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f7ff f889 	bl	8000158 <__udivsi3>
 8001046:	0040      	lsls	r0, r0, #1
 8001048:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 800104a:	9b05      	ldr	r3, [sp, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <HAL_ADC_Init+0x1b6>
 8001050:	e73d      	b.n	8000ece <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8001052:	9b05      	ldr	r3, [sp, #20]
 8001054:	3b01      	subs	r3, #1
 8001056:	9305      	str	r3, [sp, #20]
 8001058:	e7f7      	b.n	800104a <HAL_ADC_Init+0x1ae>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800105a:	2780      	movs	r7, #128	; 0x80
 800105c:	03bf      	lsls	r7, r7, #14
 800105e:	e79e      	b.n	8000f9e <HAL_ADC_Init+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001060:	2720      	movs	r7, #32
 8001062:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8001064:	432f      	orrs	r7, r5
 8001066:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800106a:	433e      	orrs	r6, r7
 800106c:	65e6      	str	r6, [r4, #92]	; 0x5c
 800106e:	e7a8      	b.n	8000fc2 <HAL_ADC_Init+0x126>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	9d02      	ldr	r5, [sp, #8]
 8001074:	0389      	lsls	r1, r1, #14
 8001076:	428d      	cmp	r5, r1
 8001078:	d1ca      	bne.n	8001010 <HAL_ADC_Init+0x174>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800107a:	270f      	movs	r7, #15
 800107c:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800107e:	0035      	movs	r5, r6
 8001080:	0081      	lsls	r1, r0, #2
 8001082:	40cd      	lsrs	r5, r1
 8001084:	0029      	movs	r1, r5
 8001086:	4039      	ands	r1, r7
 8001088:	290f      	cmp	r1, #15
 800108a:	d00d      	beq.n	80010a8 <HAL_ADC_Init+0x20c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800108c:	3001      	adds	r0, #1
 800108e:	2808      	cmp	r0, #8
 8001090:	d1f5      	bne.n	800107e <HAL_ADC_Init+0x1e2>
        MODIFY_REG(hadc->Instance->CHSELR,
 8001092:	201c      	movs	r0, #28
 8001094:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001096:	69e1      	ldr	r1, [r4, #28]
 8001098:	3901      	subs	r1, #1
 800109a:	0089      	lsls	r1, r1, #2
 800109c:	4001      	ands	r1, r0
 800109e:	382c      	subs	r0, #44	; 0x2c
 80010a0:	4088      	lsls	r0, r1
 80010a2:	0001      	movs	r1, r0
 80010a4:	4331      	orrs	r1, r6
 80010a6:	e7b2      	b.n	800100e <HAL_ADC_Init+0x172>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80010a8:	2801      	cmp	r0, #1
 80010aa:	d1f2      	bne.n	8001092 <HAL_ADC_Init+0x1f6>
        SET_BIT(hadc->Instance->CHSELR,
 80010ac:	2110      	movs	r1, #16
 80010ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010b0:	4249      	negs	r1, r1
 80010b2:	e7ab      	b.n	800100c <HAL_ADC_Init+0x170>
      ADC_STATE_CLR_SET(hadc->State,
 80010b4:	2212      	movs	r2, #18
 80010b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 80010ba:	4393      	bics	r3, r2
 80010bc:	001a      	movs	r2, r3
 80010be:	2310      	movs	r3, #16
 80010c0:	4313      	orrs	r3, r2
 80010c2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80010c6:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c8:	432b      	orrs	r3, r5
 80010ca:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80010cc:	e7ae      	b.n	800102c <HAL_ADC_Init+0x190>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010d0:	4313      	orrs	r3, r2
 80010d2:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	e7a8      	b.n	800102c <HAL_ADC_Init+0x190>
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	fffffefd 	.word	0xfffffefd
 80010e0:	1ffffc02 	.word	0x1ffffc02
 80010e4:	40012708 	.word	0x40012708
 80010e8:	ffc3ffff 	.word	0xffc3ffff
 80010ec:	fffe0219 	.word	0xfffe0219
 80010f0:	dffffc02 	.word	0xdffffc02
 80010f4:	833fffe7 	.word	0x833fffe7
 80010f8:	6fffffe8 	.word	0x6fffffe8
 80010fc:	20000000 	.word	0x20000000
 8001100:	00030d40 	.word	0x00030d40

08001104 <HAL_ADC_ConvCpltCallback>:
 8001104:	4770      	bx	lr

08001106 <HAL_ADC_ConvHalfCpltCallback>:
 8001106:	4770      	bx	lr

08001108 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001108:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800110a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800110c:	f7ff fffb 	bl	8001106 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001110:	bd10      	pop	{r4, pc}

08001112 <HAL_ADC_ErrorCallback>:
 8001112:	4770      	bx	lr

08001114 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001114:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001116:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001118:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800111a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800111c:	4313      	orrs	r3, r2
 800111e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001120:	2304      	movs	r3, #4
 8001122:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001124:	4313      	orrs	r3, r2
 8001126:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001128:	f7ff fff3 	bl	8001112 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800112c:	bd10      	pop	{r4, pc}
	...

08001130 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001130:	2350      	movs	r3, #80	; 0x50
{
 8001132:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001134:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001136:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001138:	421a      	tst	r2, r3
 800113a:	d12c      	bne.n	8001196 <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800113e:	33b1      	adds	r3, #177	; 0xb1
 8001140:	33ff      	adds	r3, #255	; 0xff
 8001142:	4313      	orrs	r3, r2
 8001144:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001146:	23c0      	movs	r3, #192	; 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001148:	6820      	ldr	r0, [r4, #0]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	68c2      	ldr	r2, [r0, #12]
 800114e:	421a      	tst	r2, r3
 8001150:	d114      	bne.n	800117c <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001152:	7ea3      	ldrb	r3, [r4, #26]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	071b      	lsls	r3, r3, #28
 800115c:	d50e      	bpl.n	800117c <ADC_DMAConvCplt+0x4c>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800115e:	f7ff fe99 	bl	8000e94 <LL_ADC_REG_IsConversionOngoing>
 8001162:	2800      	cmp	r0, #0
 8001164:	d10e      	bne.n	8001184 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001166:	210c      	movs	r1, #12
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	6853      	ldr	r3, [r2, #4]
 800116c:	438b      	bics	r3, r1
 800116e:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <ADC_DMAConvCplt+0x7c>)
 8001174:	401a      	ands	r2, r3
 8001176:	2301      	movs	r3, #1
 8001178:	4313      	orrs	r3, r2
 800117a:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800117c:	0020      	movs	r0, r4
 800117e:	f7ff ffc1 	bl	8001104 <HAL_ADC_ConvCpltCallback>
}
 8001182:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001184:	2320      	movs	r3, #32
 8001186:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001188:	4313      	orrs	r3, r2
 800118a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118c:	2301      	movs	r3, #1
 800118e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001190:	4313      	orrs	r3, r2
 8001192:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001194:	e7f2      	b.n	800117c <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001198:	06db      	lsls	r3, r3, #27
 800119a:	d503      	bpl.n	80011a4 <ADC_DMAConvCplt+0x74>
      HAL_ADC_ErrorCallback(hadc);
 800119c:	0020      	movs	r0, r4
 800119e:	f7ff ffb8 	bl	8001112 <HAL_ADC_ErrorCallback>
 80011a2:	e7ee      	b.n	8001182 <ADC_DMAConvCplt+0x52>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	4798      	blx	r3
}
 80011aa:	e7ea      	b.n	8001182 <ADC_DMAConvCplt+0x52>
 80011ac:	fffffefe 	.word	0xfffffefe

080011b0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 80011b0:	2300      	movs	r3, #0
{
 80011b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b4:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 80011b6:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hadc);
 80011b8:	0003      	movs	r3, r0
 80011ba:	3354      	adds	r3, #84	; 0x54
 80011bc:	781a      	ldrb	r2, [r3, #0]
{
 80011be:	0005      	movs	r5, r0
 80011c0:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 80011c2:	2002      	movs	r0, #2
 80011c4:	2a01      	cmp	r2, #1
 80011c6:	d100      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x1a>
 80011c8:	e0c2      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1a0>
 80011ca:	2401      	movs	r4, #1
 80011cc:	701c      	strb	r4, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011ce:	6828      	ldr	r0, [r5, #0]
 80011d0:	f7ff fe60 	bl	8000e94 <LL_ADC_REG_IsConversionOngoing>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d000      	beq.n	80011da <HAL_ADC_ConfigChannel+0x2a>
 80011d8:	e0f8      	b.n	80013cc <HAL_ADC_ConfigChannel+0x21c>
    if (sConfig->Rank != ADC_RANK_NONE)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	6873      	ldr	r3, [r6, #4]
 80011de:	0612      	lsls	r2, r2, #24
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2304      	movs	r3, #4
 80011e4:	4694      	mov	ip, r2
 80011e6:	692f      	ldr	r7, [r5, #16]
 80011e8:	9a01      	ldr	r2, [sp, #4]
 80011ea:	439f      	bics	r7, r3
 80011ec:	6833      	ldr	r3, [r6, #0]
 80011ee:	2a02      	cmp	r2, #2
 80011f0:	d100      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x44>
 80011f2:	e0c1      	b.n	8001378 <HAL_ADC_ConfigChannel+0x1c8>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011f4:	0359      	lsls	r1, r3, #13
 80011f6:	0b49      	lsrs	r1, r1, #13
 80011f8:	682a      	ldr	r2, [r5, #0]
 80011fa:	9102      	str	r1, [sp, #8]
 80011fc:	4567      	cmp	r7, ip
 80011fe:	d10f      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001200:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8001202:	4301      	orrs	r1, r0
 8001204:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8001206:	68b1      	ldr	r1, [r6, #8]
 8001208:	6954      	ldr	r4, [r2, #20]
 800120a:	0218      	lsls	r0, r3, #8
 800120c:	4e72      	ldr	r6, [pc, #456]	; (80013d8 <HAL_ADC_ConfigChannel+0x228>)
 800120e:	4001      	ands	r1, r0
 8001210:	4031      	ands	r1, r6
 8001212:	4384      	bics	r4, r0
 8001214:	4321      	orrs	r1, r4
 8001216:	6151      	str	r1, [r2, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001218:	2b00      	cmp	r3, #0
 800121a:	db64      	blt.n	80012e6 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2000      	movs	r0, #0
}
 800121e:	e094      	b.n	800134a <HAL_ADC_ConfigChannel+0x19a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001220:	211f      	movs	r1, #31
 8001222:	9f01      	ldr	r7, [sp, #4]
 8001224:	400f      	ands	r7, r1
 8001226:	46bc      	mov	ip, r7
 8001228:	270f      	movs	r7, #15
 800122a:	4661      	mov	r1, ip
 800122c:	408f      	lsls	r7, r1
 800122e:	43f9      	mvns	r1, r7
 8001230:	9103      	str	r1, [sp, #12]
 8001232:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001234:	43b9      	bics	r1, r7
 8001236:	000f      	movs	r7, r1
 8001238:	9902      	ldr	r1, [sp, #8]
 800123a:	2900      	cmp	r1, #0
 800123c:	d114      	bne.n	8001268 <HAL_ADC_ConfigChannel+0xb8>
 800123e:	0e98      	lsrs	r0, r3, #26
 8001240:	311f      	adds	r1, #31
 8001242:	4008      	ands	r0, r1
 8001244:	4661      	mov	r1, ip
 8001246:	4088      	lsls	r0, r1
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001248:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800124a:	4307      	orrs	r7, r0
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800124c:	0889      	lsrs	r1, r1, #2
 800124e:	69e8      	ldr	r0, [r5, #28]
 8001250:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001252:	662f      	str	r7, [r5, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001254:	4281      	cmp	r1, r0
 8001256:	d8d6      	bhi.n	8001206 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001258:	4664      	mov	r4, ip
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	0f09      	lsrs	r1, r1, #28
 800125e:	40a1      	lsls	r1, r4
 8001260:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001262:	9c03      	ldr	r4, [sp, #12]
 8001264:	4020      	ands	r0, r4
 8001266:	e7cc      	b.n	8001202 <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001268:	4223      	tst	r3, r4
 800126a:	d1eb      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 800126c:	2102      	movs	r1, #2
 800126e:	0020      	movs	r0, r4
 8001270:	420b      	tst	r3, r1
 8001272:	d1e7      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 8001274:	0008      	movs	r0, r1
 8001276:	1849      	adds	r1, r1, r1
 8001278:	420b      	tst	r3, r1
 800127a:	d1e3      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 800127c:	3001      	adds	r0, #1
 800127e:	0719      	lsls	r1, r3, #28
 8001280:	d4e0      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 8001282:	3001      	adds	r0, #1
 8001284:	06d9      	lsls	r1, r3, #27
 8001286:	d4dd      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 8001288:	3001      	adds	r0, #1
 800128a:	0699      	lsls	r1, r3, #26
 800128c:	d4da      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 800128e:	3001      	adds	r0, #1
 8001290:	0659      	lsls	r1, r3, #25
 8001292:	d4d7      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 8001294:	3001      	adds	r0, #1
 8001296:	0619      	lsls	r1, r3, #24
 8001298:	d4d4      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 800129a:	3001      	adds	r0, #1
 800129c:	05d9      	lsls	r1, r3, #23
 800129e:	d4d1      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012a0:	3001      	adds	r0, #1
 80012a2:	0599      	lsls	r1, r3, #22
 80012a4:	d4ce      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012a6:	3001      	adds	r0, #1
 80012a8:	0559      	lsls	r1, r3, #21
 80012aa:	d4cb      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012ac:	3001      	adds	r0, #1
 80012ae:	0519      	lsls	r1, r3, #20
 80012b0:	d4c8      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012b2:	3001      	adds	r0, #1
 80012b4:	04d9      	lsls	r1, r3, #19
 80012b6:	d4c5      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012b8:	3001      	adds	r0, #1
 80012ba:	0499      	lsls	r1, r3, #18
 80012bc:	d4c2      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012be:	3001      	adds	r0, #1
 80012c0:	0459      	lsls	r1, r3, #17
 80012c2:	d4bf      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012c4:	3001      	adds	r0, #1
 80012c6:	0419      	lsls	r1, r3, #16
 80012c8:	d4bc      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012ca:	3001      	adds	r0, #1
 80012cc:	03d9      	lsls	r1, r3, #15
 80012ce:	d4b9      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012d0:	3001      	adds	r0, #1
 80012d2:	0399      	lsls	r1, r3, #14
 80012d4:	d4b6      	bmi.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	0018      	movs	r0, r3
 80012da:	02c9      	lsls	r1, r1, #11
 80012dc:	4008      	ands	r0, r1
 80012de:	420b      	tst	r3, r1
 80012e0:	d0b0      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x94>
 80012e2:	2012      	movs	r0, #18
 80012e4:	e7ae      	b.n	8001244 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e6:	24e0      	movs	r4, #224	; 0xe0
 80012e8:	4a3c      	ldr	r2, [pc, #240]	; (80013dc <HAL_ADC_ConfigChannel+0x22c>)
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ea:	483d      	ldr	r0, [pc, #244]	; (80013e0 <HAL_ADC_ConfigChannel+0x230>)
 80012ec:	6811      	ldr	r1, [r2, #0]
 80012ee:	0464      	lsls	r4, r4, #17
 80012f0:	400c      	ands	r4, r1
 80012f2:	4283      	cmp	r3, r0
 80012f4:	d119      	bne.n	800132a <HAL_ADC_ConfigChannel+0x17a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	041b      	lsls	r3, r3, #16
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012fa:	4219      	tst	r1, r3
 80012fc:	d18e      	bne.n	800121c <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012fe:	6811      	ldr	r1, [r2, #0]
 8001300:	4838      	ldr	r0, [pc, #224]	; (80013e4 <HAL_ADC_ConfigChannel+0x234>)
 8001302:	4001      	ands	r1, r0
 8001304:	4321      	orrs	r1, r4
 8001306:	4319      	orrs	r1, r3
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_ADC_ConfigChannel+0x238>)
 800130a:	6011      	str	r1, [r2, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4937      	ldr	r1, [pc, #220]	; (80013ec <HAL_ADC_ConfigChannel+0x23c>)
 8001310:	f7fe ff22 	bl	8000158 <__udivsi3>
 8001314:	230c      	movs	r3, #12
 8001316:	4343      	muls	r3, r0
 8001318:	3301      	adds	r3, #1
            wait_loop_index--;
 800131a:	9305      	str	r3, [sp, #20]
          while (wait_loop_index != 0UL)
 800131c:	9b05      	ldr	r3, [sp, #20]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x174>
 8001322:	e77b      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
            wait_loop_index--;
 8001324:	9b05      	ldr	r3, [sp, #20]
 8001326:	3b01      	subs	r3, #1
 8001328:	e7f7      	b.n	800131a <HAL_ADC_ConfigChannel+0x16a>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800132a:	4831      	ldr	r0, [pc, #196]	; (80013f0 <HAL_ADC_ConfigChannel+0x240>)
 800132c:	4283      	cmp	r3, r0
 800132e:	d111      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1a4>
 8001330:	2680      	movs	r6, #128	; 0x80
 8001332:	0008      	movs	r0, r1
 8001334:	0476      	lsls	r6, r6, #17
 8001336:	4030      	ands	r0, r6
 8001338:	4231      	tst	r1, r6
 800133a:	d000      	beq.n	800133e <HAL_ADC_ConfigChannel+0x18e>
 800133c:	e76e      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
 800133e:	6811      	ldr	r1, [r2, #0]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_ADC_ConfigChannel+0x234>)
 8001342:	4019      	ands	r1, r3
 8001344:	4321      	orrs	r1, r4
 8001346:	430e      	orrs	r6, r1
 8001348:	6016      	str	r6, [r2, #0]
  __HAL_UNLOCK(hadc);
 800134a:	2300      	movs	r3, #0
 800134c:	3554      	adds	r5, #84	; 0x54
 800134e:	702b      	strb	r3, [r5, #0]
}
 8001350:	b007      	add	sp, #28
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001354:	4827      	ldr	r0, [pc, #156]	; (80013f4 <HAL_ADC_ConfigChannel+0x244>)
 8001356:	4283      	cmp	r3, r0
 8001358:	d000      	beq.n	800135c <HAL_ADC_ConfigChannel+0x1ac>
 800135a:	e75f      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	0008      	movs	r0, r1
 8001360:	03db      	lsls	r3, r3, #15
 8001362:	4018      	ands	r0, r3
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001364:	4219      	tst	r1, r3
 8001366:	d000      	beq.n	800136a <HAL_ADC_ConfigChannel+0x1ba>
 8001368:	e758      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
 800136a:	6811      	ldr	r1, [r2, #0]
 800136c:	4e1d      	ldr	r6, [pc, #116]	; (80013e4 <HAL_ADC_ConfigChannel+0x234>)
 800136e:	4031      	ands	r1, r6
 8001370:	4321      	orrs	r1, r4
 8001372:	430b      	orrs	r3, r1
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	e7e8      	b.n	800134a <HAL_ADC_ConfigChannel+0x19a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001378:	4567      	cmp	r7, ip
 800137a:	d105      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1d8>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800137c:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800137e:	0359      	lsls	r1, r3, #13
 8001380:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001382:	0b49      	lsrs	r1, r1, #13
 8001384:	438a      	bics	r2, r1
 8001386:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001388:	2b00      	cmp	r3, #0
 800138a:	db00      	blt.n	800138e <HAL_ADC_ConfigChannel+0x1de>
 800138c:	e746      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_ADC_ConfigChannel+0x22c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <HAL_ADC_ConfigChannel+0x230>)
 8001392:	6811      	ldr	r1, [r2, #0]
 8001394:	4283      	cmp	r3, r0
 8001396:	d108      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x1fa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001398:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800139e:	4019      	ands	r1, r3
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_ADC_ConfigChannel+0x234>)
 80013a2:	4003      	ands	r3, r0
 80013a4:	4319      	orrs	r1, r3
 80013a6:	6011      	str	r1, [r2, #0]
 80013a8:	e738      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HAL_ADC_ConfigChannel+0x240>)
 80013ac:	4283      	cmp	r3, r0
 80013ae:	d103      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x208>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b0:	23c0      	movs	r3, #192	; 0xc0
 80013b2:	6810      	ldr	r0, [r2, #0]
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	e7f2      	b.n	800139e <HAL_ADC_ConfigChannel+0x1ee>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013b8:	480e      	ldr	r0, [pc, #56]	; (80013f4 <HAL_ADC_ConfigChannel+0x244>)
 80013ba:	4283      	cmp	r3, r0
 80013bc:	d000      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x210>
 80013be:	e72d      	b.n	800121c <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013c0:	20c0      	movs	r0, #192	; 0xc0
 80013c2:	0440      	lsls	r0, r0, #17
 80013c4:	4001      	ands	r1, r0
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_ADC_ConfigChannel+0x234>)
 80013ca:	e7ea      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x1f2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	2320      	movs	r3, #32
 80013ce:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80013d0:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d2:	4313      	orrs	r3, r2
 80013d4:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80013d6:	e7b8      	b.n	800134a <HAL_ADC_ConfigChannel+0x19a>
 80013d8:	07ffff00 	.word	0x07ffff00
 80013dc:	40012708 	.word	0x40012708
 80013e0:	b0001000 	.word	0xb0001000
 80013e4:	fe3fffff 	.word	0xfe3fffff
 80013e8:	20000000 	.word	0x20000000
 80013ec:	00030d40 	.word	0x00030d40
 80013f0:	b8004000 	.word	0xb8004000
 80013f4:	b4002000 	.word	0xb4002000

080013f8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 80013f8:	2300      	movs	r3, #0
{
 80013fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013fc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80013fe:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001400:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001402:	2001      	movs	r0, #1
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4202      	tst	r2, r0
 8001408:	d001      	beq.n	800140e <ADC_Enable+0x16>
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
}
 800140c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <ADC_Enable+0x98>)
 8001412:	4211      	tst	r1, r2
 8001414:	d007      	beq.n	8001426 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	2310      	movs	r3, #16
 8001418:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800141a:	4313      	orrs	r3, r2
 800141c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	4303      	orrs	r3, r0
 8001422:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001424:	e7f2      	b.n	800140c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4d1a      	ldr	r5, [pc, #104]	; (8001494 <ADC_Enable+0x9c>)
 800142a:	402a      	ands	r2, r5
 800142c:	4310      	orrs	r0, r2
 800142e:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <ADC_Enable+0xa0>)
 8001432:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	d41d      	bmi.n	8001474 <ADC_Enable+0x7c>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001438:	7e63      	ldrb	r3, [r4, #25]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d0e5      	beq.n	800140a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800143e:	f7ff fd23 	bl	8000e88 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001442:	2601      	movs	r6, #1
      tickstart = HAL_GetTick();
 8001444:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	4233      	tst	r3, r6
 800144c:	d1dd      	bne.n	800140a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800144e:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001450:	4233      	tst	r3, r6
 8001452:	d103      	bne.n	800145c <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8001454:	6893      	ldr	r3, [r2, #8]
 8001456:	402b      	ands	r3, r5
 8001458:	4333      	orrs	r3, r6
 800145a:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800145c:	f7ff fd14 	bl	8000e88 <HAL_GetTick>
 8001460:	1bc0      	subs	r0, r0, r7
 8001462:	2802      	cmp	r0, #2
 8001464:	d9ef      	bls.n	8001446 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001466:	2310      	movs	r3, #16
 8001468:	6da2      	ldr	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146c:	4313      	orrs	r3, r2
 800146e:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001472:	e7d5      	b.n	8001420 <ADC_Enable+0x28>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <ADC_Enable+0xa4>)
 8001476:	490a      	ldr	r1, [pc, #40]	; (80014a0 <ADC_Enable+0xa8>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	f7fe fe6d 	bl	8000158 <__udivsi3>
 800147e:	3001      	adds	r0, #1
 8001480:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0d7      	beq.n	8001438 <ADC_Enable+0x40>
        wait_loop_index--;
 8001488:	9b01      	ldr	r3, [sp, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	e7f8      	b.n	8001482 <ADC_Enable+0x8a>
 8001490:	80000017 	.word	0x80000017
 8001494:	7fffffe8 	.word	0x7fffffe8
 8001498:	40012708 	.word	0x40012708
 800149c:	20000000 	.word	0x20000000
 80014a0:	00030d40 	.word	0x00030d40

080014a4 <HAL_ADC_Start>:
{
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a8:	6800      	ldr	r0, [r0, #0]
 80014aa:	f7ff fcf3 	bl	8000e94 <LL_ADC_REG_IsConversionOngoing>
 80014ae:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 80014b0:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d11d      	bne.n	80014f2 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 80014b6:	0025      	movs	r5, r4
 80014b8:	3554      	adds	r5, #84	; 0x54
 80014ba:	782b      	ldrb	r3, [r5, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d018      	beq.n	80014f2 <HAL_ADC_Start+0x4e>
 80014c0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80014c2:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 80014c4:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 80014c6:	f7ff ff97 	bl	80013f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d112      	bne.n	80014f4 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 80014ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 80014d2:	490a      	ldr	r1, [pc, #40]	; (80014fc <HAL_ADC_Start+0x58>)
 80014d4:	401a      	ands	r2, r3
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014dc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80014e6:	7028      	strb	r0, [r5, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	4011      	ands	r1, r2
 80014ec:	2204      	movs	r2, #4
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
}
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80014f4:	702e      	strb	r6, [r5, #0]
 80014f6:	e7fc      	b.n	80014f2 <HAL_ADC_Start+0x4e>
 80014f8:	fffff0fe 	.word	0xfffff0fe
 80014fc:	7fffffe8 	.word	0x7fffffe8

08001500 <HAL_ADC_Start_DMA>:
{
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001504:	6800      	ldr	r0, [r0, #0]
{
 8001506:	000d      	movs	r5, r1
 8001508:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150a:	f7ff fcc3 	bl	8000e94 <LL_ADC_REG_IsConversionOngoing>
    tmp_hal_status = HAL_BUSY;
 800150e:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001510:	2800      	cmp	r0, #0
 8001512:	d140      	bne.n	8001596 <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 8001514:	0027      	movs	r7, r4
 8001516:	3754      	adds	r7, #84	; 0x54
 8001518:	783a      	ldrb	r2, [r7, #0]
 800151a:	2a01      	cmp	r2, #1
 800151c:	d03b      	beq.n	8001596 <HAL_ADC_Start_DMA+0x96>
 800151e:	2201      	movs	r2, #1
 8001520:	703a      	strb	r2, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	68d9      	ldr	r1, [r3, #12]
 8001526:	4211      	tst	r1, r2
 8001528:	d10c      	bne.n	8001544 <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800152a:	6899      	ldr	r1, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800152c:	4211      	tst	r1, r2
 800152e:	d005      	beq.n	800153c <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	491a      	ldr	r1, [pc, #104]	; (800159c <HAL_ADC_Start_DMA+0x9c>)
 8001534:	4011      	ands	r1, r2
 8001536:	2202      	movs	r2, #2
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800153c:	2201      	movs	r2, #1
 800153e:	68d9      	ldr	r1, [r3, #12]
 8001540:	430a      	orrs	r2, r1
 8001542:	60da      	str	r2, [r3, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001544:	0020      	movs	r0, r4
 8001546:	f7ff ff57 	bl	80013f8 <ADC_Enable>
 800154a:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 800154c:	d123      	bne.n	8001596 <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800154e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001550:	4913      	ldr	r1, [pc, #76]	; (80015a0 <HAL_ADC_Start_DMA+0xa0>)
 8001552:	4011      	ands	r1, r2
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0052      	lsls	r2, r2, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	65a2      	str	r2, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800155c:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_ADC_Start_DMA+0xa4>)
 8001560:	6d20      	ldr	r0, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001562:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001564:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_ADC_Start_DMA+0xa8>)
 8001568:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_ADC_Start_DMA+0xac>)
 800156c:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156e:	221c      	movs	r2, #28
 8001570:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 8001572:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001574:	684a      	ldr	r2, [r1, #4]
 8001576:	3310      	adds	r3, #16
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800157c:	002a      	movs	r2, r5
 800157e:	0033      	movs	r3, r6
 8001580:	3140      	adds	r1, #64	; 0x40
 8001582:	f000 f8e3 	bl	800174c <HAL_DMA_Start_IT>
 8001586:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001588:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800158a:	4904      	ldr	r1, [pc, #16]	; (800159c <HAL_ADC_Start_DMA+0x9c>)
 800158c:	6882      	ldr	r2, [r0, #8]
 800158e:	4011      	ands	r1, r2
 8001590:	2204      	movs	r2, #4
 8001592:	430a      	orrs	r2, r1
 8001594:	6082      	str	r2, [r0, #8]
}
 8001596:	0018      	movs	r0, r3
 8001598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	7fffffe8 	.word	0x7fffffe8
 80015a0:	fffff0fe 	.word	0xfffff0fe
 80015a4:	08001131 	.word	0x08001131
 80015a8:	08001109 	.word	0x08001109
 80015ac:	08001115 	.word	0x08001115

080015b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b530      	push	{r4, r5, lr}
 80015b2:	25ff      	movs	r5, #255	; 0xff
 80015b4:	2403      	movs	r4, #3
 80015b6:	002a      	movs	r2, r5
 80015b8:	4004      	ands	r4, r0
 80015ba:	00e4      	lsls	r4, r4, #3
 80015bc:	40a2      	lsls	r2, r4
 80015be:	0189      	lsls	r1, r1, #6
 80015c0:	4029      	ands	r1, r5
 80015c2:	43d2      	mvns	r2, r2
 80015c4:	40a1      	lsls	r1, r4
 80015c6:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	db0a      	blt.n	80015e2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015cc:	24c0      	movs	r4, #192	; 0xc0
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_NVIC_SetPriority+0x4c>)
 80015d0:	0880      	lsrs	r0, r0, #2
 80015d2:	0080      	lsls	r0, r0, #2
 80015d4:	18c0      	adds	r0, r0, r3
 80015d6:	00a4      	lsls	r4, r4, #2
 80015d8:	5903      	ldr	r3, [r0, r4]
 80015da:	401a      	ands	r2, r3
 80015dc:	4311      	orrs	r1, r2
 80015de:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80015e0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e2:	200f      	movs	r0, #15
 80015e4:	4003      	ands	r3, r0
 80015e6:	3b08      	subs	r3, #8
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_NVIC_SetPriority+0x50>)
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	181b      	adds	r3, r3, r0
 80015f0:	69d8      	ldr	r0, [r3, #28]
 80015f2:	4002      	ands	r2, r0
 80015f4:	4311      	orrs	r1, r2
 80015f6:	61d9      	str	r1, [r3, #28]
 80015f8:	e7f2      	b.n	80015e0 <HAL_NVIC_SetPriority+0x30>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001604:	2800      	cmp	r0, #0
 8001606:	db05      	blt.n	8001614 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001608:	231f      	movs	r3, #31
 800160a:	4018      	ands	r0, r3
 800160c:	3b1e      	subs	r3, #30
 800160e:	4083      	lsls	r3, r0
 8001610:	4a01      	ldr	r2, [pc, #4]	; (8001618 <HAL_NVIC_EnableIRQ+0x14>)
 8001612:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001614:	4770      	bx	lr
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	e000e100 	.word	0xe000e100

0800161c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001620:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001622:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001624:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001626:	2c00      	cmp	r4, #0
 8001628:	d002      	beq.n	8001630 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800162c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800162e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001630:	251c      	movs	r5, #28
 8001632:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001634:	4e08      	ldr	r6, [pc, #32]	; (8001658 <DMA_SetConfig+0x3c>)
 8001636:	4025      	ands	r5, r4
 8001638:	2401      	movs	r4, #1
 800163a:	40ac      	lsls	r4, r5
 800163c:	6877      	ldr	r7, [r6, #4]
 800163e:	433c      	orrs	r4, r7
 8001640:	6074      	str	r4, [r6, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001642:	6804      	ldr	r4, [r0, #0]
 8001644:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001646:	6883      	ldr	r3, [r0, #8]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d102      	bne.n	8001652 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800164c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800164e:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8001652:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001654:	60e2      	str	r2, [r4, #12]
}
 8001656:	e7fb      	b.n	8001650 <DMA_SetConfig+0x34>
 8001658:	40020000 	.word	0x40020000

0800165c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800165c:	b510      	push	{r4, lr}
 800165e:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001660:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	189b      	adds	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	2114      	movs	r1, #20
 8001670:	b2d8      	uxtb	r0, r3
 8001672:	3808      	subs	r0, #8
 8001674:	f7fe fd70 	bl	8000158 <__udivsi3>
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800167a:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800167c:	231f      	movs	r3, #31
 800167e:	4018      	ands	r0, r3
 8001680:	3b1e      	subs	r3, #30
 8001682:	4083      	lsls	r3, r0
 8001684:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001686:	bd10      	pop	{r4, pc}
 8001688:	10008200 	.word	0x10008200
 800168c:	40020880 	.word	0x40020880

08001690 <HAL_DMA_Init>:
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001694:	2001      	movs	r0, #1
  if (hdma == NULL)
 8001696:	2c00      	cmp	r4, #0
 8001698:	d049      	beq.n	800172e <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800169a:	6825      	ldr	r5, [r4, #0]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_DMA_Init+0xac>)
 800169e:	2114      	movs	r1, #20
 80016a0:	18e8      	adds	r0, r5, r3
 80016a2:	f7fe fd59 	bl	8000158 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a6:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016a8:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80016aa:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016ac:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ae:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016b4:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b6:	4013      	ands	r3, r2
 80016b8:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016ba:	68a3      	ldr	r3, [r4, #8]
 80016bc:	682a      	ldr	r2, [r5, #0]
 80016be:	430b      	orrs	r3, r1
 80016c0:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016c2:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6961      	ldr	r1, [r4, #20]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	69a1      	ldr	r1, [r4, #24]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	69e1      	ldr	r1, [r4, #28]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6a21      	ldr	r1, [r4, #32]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	4313      	orrs	r3, r2
 80016d8:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016da:	f7ff ffbf 	bl	800165c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	68a2      	ldr	r2, [r4, #8]
 80016e2:	01db      	lsls	r3, r3, #7
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d101      	bne.n	80016ec <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016e8:	2300      	movs	r3, #0
 80016ea:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016ec:	233f      	movs	r3, #63	; 0x3f
 80016ee:	6862      	ldr	r2, [r4, #4]
 80016f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80016f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016fa:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016fc:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016fe:	2a03      	cmp	r2, #3
 8001700:	d816      	bhi.n	8001730 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001706:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001708:	2203      	movs	r2, #3
 800170a:	3b01      	subs	r3, #1
 800170c:	4013      	ands	r3, r2
 800170e:	3a02      	subs	r2, #2
 8001710:	409a      	lsls	r2, r3
 8001712:	65a2      	str	r2, [r4, #88]	; 0x58
 8001714:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001716:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001718:	0089      	lsls	r1, r1, #2
 800171a:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800171c:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800171e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001720:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001722:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001724:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001728:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800172a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800172c:	77e0      	strb	r0, [r4, #31]
}
 800172e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001734:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001736:	65a3      	str	r3, [r4, #88]	; 0x58
 8001738:	e7f3      	b.n	8001722 <HAL_DMA_Init+0x92>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	ffff800f 	.word	0xffff800f
 8001744:	1000823f 	.word	0x1000823f
 8001748:	40020940 	.word	0x40020940

0800174c <HAL_DMA_Start_IT>:
{
 800174c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800174e:	1d45      	adds	r5, r0, #5
{
 8001750:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001752:	7fee      	ldrb	r6, [r5, #31]
{
 8001754:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001756:	2002      	movs	r0, #2
 8001758:	2e01      	cmp	r6, #1
 800175a:	d034      	beq.n	80017c6 <HAL_DMA_Start_IT+0x7a>
 800175c:	3801      	subs	r0, #1
 800175e:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8001760:	1da7      	adds	r7, r4, #6
 8001762:	7ffe      	ldrb	r6, [r7, #31]
 8001764:	46b4      	mov	ip, r6
 8001766:	4663      	mov	r3, ip
 8001768:	b2f6      	uxtb	r6, r6
 800176a:	9600      	str	r6, [sp, #0]
 800176c:	2600      	movs	r6, #0
 800176e:	4283      	cmp	r3, r0
 8001770:	d131      	bne.n	80017d6 <HAL_DMA_Start_IT+0x8a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001772:	3001      	adds	r0, #1
 8001774:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 8001776:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001778:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800177a:	6828      	ldr	r0, [r5, #0]
 800177c:	9b00      	ldr	r3, [sp, #0]
 800177e:	4398      	bics	r0, r3
 8001780:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	0020      	movs	r0, r4
 8001786:	f7ff ff49 	bl	800161c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800178a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	42b2      	cmp	r2, r6
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	220e      	movs	r2, #14
 8001794:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800179a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800179c:	6811      	ldr	r1, [r2, #0]
 800179e:	03c9      	lsls	r1, r1, #15
 80017a0:	d504      	bpl.n	80017ac <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	6810      	ldr	r0, [r2, #0]
 80017a6:	0049      	lsls	r1, r1, #1
 80017a8:	4301      	orrs	r1, r0
 80017aa:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80017ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d004      	beq.n	80017bc <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	6810      	ldr	r0, [r2, #0]
 80017b6:	0049      	lsls	r1, r1, #1
 80017b8:	4301      	orrs	r1, r0
 80017ba:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80017bc:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80017be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
}
 80017c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c8:	2104      	movs	r1, #4
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	438a      	bics	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	220a      	movs	r2, #10
 80017d4:	e7df      	b.n	8001796 <HAL_DMA_Start_IT+0x4a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80017da:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 80017dc:	e7f3      	b.n	80017c6 <HAL_DMA_Start_IT+0x7a>
	...

080017e0 <HAL_DMA_Abort>:
{
 80017e0:	0003      	movs	r3, r0
 80017e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
  if (NULL == hdma)
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017ea:	1d98      	adds	r0, r3, #6
 80017ec:	7fc2      	ldrb	r2, [r0, #31]
 80017ee:	1d5c      	adds	r4, r3, #5
 80017f0:	2a02      	cmp	r2, #2
 80017f2:	d005      	beq.n	8001800 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	2204      	movs	r2, #4
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80017f8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80017fc:	77e3      	strb	r3, [r4, #31]
}
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	250e      	movs	r5, #14
 8001802:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001804:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001806:	680a      	ldr	r2, [r1, #0]
 8001808:	43aa      	bics	r2, r5
 800180a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800180c:	6832      	ldr	r2, [r6, #0]
 800180e:	4d11      	ldr	r5, [pc, #68]	; (8001854 <HAL_DMA_Abort+0x74>)
 8001810:	402a      	ands	r2, r5
 8001812:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8001814:	2201      	movs	r2, #1
 8001816:	680e      	ldr	r6, [r1, #0]
 8001818:	4694      	mov	ip, r2
 800181a:	4396      	bics	r6, r2
 800181c:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800181e:	211c      	movs	r1, #28
 8001820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001822:	4e0d      	ldr	r6, [pc, #52]	; (8001858 <HAL_DMA_Abort+0x78>)
 8001824:	4011      	ands	r1, r2
 8001826:	4662      	mov	r2, ip
 8001828:	408a      	lsls	r2, r1
 800182a:	6877      	ldr	r7, [r6, #4]
 800182c:	433a      	orrs	r2, r7
 800182e:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001830:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001834:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	2a00      	cmp	r2, #0
 800183a:	d005      	beq.n	8001848 <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800183c:	6811      	ldr	r1, [r2, #0]
 800183e:	4029      	ands	r1, r5
 8001840:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001848:	2301      	movs	r3, #1
 800184a:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 800184c:	2000      	movs	r0, #0
 800184e:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8001850:	e7d5      	b.n	80017fe <HAL_DMA_Abort+0x1e>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	fffffeff 	.word	0xfffffeff
 8001858:	40020000 	.word	0x40020000

0800185c <HAL_DMA_Abort_IT>:
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800185e:	1d81      	adds	r1, r0, #6
 8001860:	7fcb      	ldrb	r3, [r1, #31]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d004      	beq.n	8001870 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001866:	2304      	movs	r3, #4
 8001868:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800186a:	3b03      	subs	r3, #3
}
 800186c:	0018      	movs	r0, r3
 800186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001870:	240e      	movs	r4, #14
 8001872:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001874:	4d15      	ldr	r5, [pc, #84]	; (80018cc <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001878:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	43a3      	bics	r3, r4
 800187c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800187e:	2301      	movs	r3, #1
 8001880:	6814      	ldr	r4, [r2, #0]
 8001882:	439c      	bics	r4, r3
 8001884:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001886:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	402a      	ands	r2, r5
 800188c:	6022      	str	r2, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800188e:	241c      	movs	r4, #28
 8001890:	403c      	ands	r4, r7
 8001892:	40a3      	lsls	r3, r4
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_DMA_Abort_IT+0x74>)
 8001896:	6856      	ldr	r6, [r2, #4]
 8001898:	4333      	orrs	r3, r6
 800189a:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800189e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80018a0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80018a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	402a      	ands	r2, r5
 80018ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018b0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80018b2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018b4:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80018b6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 80018ba:	1d43      	adds	r3, r0, #5
 80018bc:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80018be:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 80018c2:	42a2      	cmp	r2, r4
 80018c4:	d0d2      	beq.n	800186c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80018c6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	0023      	movs	r3, r4
 80018ca:	e7cf      	b.n	800186c <HAL_DMA_Abort_IT+0x10>
 80018cc:	fffffeff 	.word	0xfffffeff
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_DMA_IRQHandler>:
{
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018d6:	211c      	movs	r1, #28
 80018d8:	2704      	movs	r7, #4
 80018da:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018de:	4021      	ands	r1, r4
 80018e0:	003c      	movs	r4, r7
 80018e2:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80018e4:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018e6:	6802      	ldr	r2, [r0, #0]
 80018e8:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018ea:	4226      	tst	r6, r4
 80018ec:	d00f      	beq.n	800190e <HAL_DMA_IRQHandler+0x3a>
 80018ee:	423d      	tst	r5, r7
 80018f0:	d00d      	beq.n	800190e <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f2:	6811      	ldr	r1, [r2, #0]
 80018f4:	0689      	lsls	r1, r1, #26
 80018f6:	d402      	bmi.n	80018fe <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	43b9      	bics	r1, r7
 80018fc:	6011      	str	r1, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4314      	orrs	r4, r2
 8001902:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001904:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01b      	beq.n	8001942 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800190a:	4798      	blx	r3
  return;
 800190c:	e019      	b.n	8001942 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800190e:	2702      	movs	r7, #2
 8001910:	003c      	movs	r4, r7
 8001912:	408c      	lsls	r4, r1
 8001914:	4226      	tst	r6, r4
 8001916:	d015      	beq.n	8001944 <HAL_DMA_IRQHandler+0x70>
 8001918:	423d      	tst	r5, r7
 800191a:	d013      	beq.n	8001944 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191c:	6811      	ldr	r1, [r2, #0]
 800191e:	0689      	lsls	r1, r1, #26
 8001920:	d406      	bmi.n	8001930 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001922:	250a      	movs	r5, #10
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	43a9      	bics	r1, r5
 8001928:	6011      	str	r1, [r2, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800192a:	2101      	movs	r1, #1
 800192c:	1d82      	adds	r2, r0, #6
 800192e:	77d1      	strb	r1, [r2, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4314      	orrs	r4, r2
      __HAL_UNLOCK(hdma);
 8001934:	2200      	movs	r2, #0
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001936:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001938:	1d43      	adds	r3, r0, #5
 800193a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 800193c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800193e:	4293      	cmp	r3, r2
 8001940:	d1e3      	bne.n	800190a <HAL_DMA_IRQHandler+0x36>
}
 8001942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001944:	2408      	movs	r4, #8
 8001946:	0027      	movs	r7, r4
 8001948:	408f      	lsls	r7, r1
 800194a:	423e      	tst	r6, r7
 800194c:	d0f9      	beq.n	8001942 <HAL_DMA_IRQHandler+0x6e>
 800194e:	4225      	tst	r5, r4
 8001950:	d0f7      	beq.n	8001942 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001952:	250e      	movs	r5, #14
 8001954:	6814      	ldr	r4, [r2, #0]
 8001956:	43ac      	bics	r4, r5
 8001958:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800195a:	2201      	movs	r2, #1
 800195c:	0015      	movs	r5, r2
 800195e:	408d      	lsls	r5, r1
 8001960:	0029      	movs	r1, r5
 8001962:	685c      	ldr	r4, [r3, #4]
 8001964:	4321      	orrs	r1, r4
 8001966:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001968:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800196a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800196e:	2200      	movs	r2, #0
 8001970:	1d43      	adds	r3, r0, #5
 8001972:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001974:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001976:	e7e2      	b.n	800193e <HAL_DMA_IRQHandler+0x6a>
 8001978:	40020000 	.word	0x40020000

0800197c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800197c:	2300      	movs	r3, #0
{
 800197e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001980:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	680a      	ldr	r2, [r1, #0]
 8001984:	0014      	movs	r4, r2
 8001986:	40dc      	lsrs	r4, r3
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800198a:	b005      	add	sp, #20
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198e:	2401      	movs	r4, #1
 8001990:	0015      	movs	r5, r2
 8001992:	409c      	lsls	r4, r3
 8001994:	4025      	ands	r5, r4
 8001996:	9502      	str	r5, [sp, #8]
    if (iocurrent != 0x00u)
 8001998:	4222      	tst	r2, r4
 800199a:	d100      	bne.n	800199e <HAL_GPIO_Init+0x22>
 800199c:	e08a      	b.n	8001ab4 <HAL_GPIO_Init+0x138>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800199e:	2510      	movs	r5, #16
 80019a0:	684a      	ldr	r2, [r1, #4]
 80019a2:	005e      	lsls	r6, r3, #1
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	43aa      	bics	r2, r5
 80019a8:	3d0d      	subs	r5, #13
 80019aa:	40b5      	lsls	r5, r6
 80019ac:	4694      	mov	ip, r2
 80019ae:	3a01      	subs	r2, #1
 80019b0:	43ed      	mvns	r5, r5
 80019b2:	2a01      	cmp	r2, #1
 80019b4:	d80f      	bhi.n	80019d6 <HAL_GPIO_Init+0x5a>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b6:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80019b8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ba:	40b2      	lsls	r2, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019bc:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019be:	433a      	orrs	r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019c0:	2701      	movs	r7, #1
        GPIOx->OSPEEDR = temp;
 80019c2:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80019c4:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c6:	43a2      	bics	r2, r4
 80019c8:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ca:	9a01      	ldr	r2, [sp, #4]
 80019cc:	0912      	lsrs	r2, r2, #4
 80019ce:	403a      	ands	r2, r7
 80019d0:	409a      	lsls	r2, r3
 80019d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80019d4:	6042      	str	r2, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d6:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 80019d8:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019da:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019dc:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019de:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 80019e0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e2:	4662      	mov	r2, ip
 80019e4:	2a02      	cmp	r2, #2
 80019e6:	d10f      	bne.n	8001a08 <HAL_GPIO_Init+0x8c>
        temp = GPIOx->AFR[position >> 3u];
 80019e8:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	2407      	movs	r4, #7
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3u];
 80019f0:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f2:	9203      	str	r2, [sp, #12]
 80019f4:	220f      	movs	r2, #15
 80019f6:	401c      	ands	r4, r3
 80019f8:	00a4      	lsls	r4, r4, #2
 80019fa:	40a2      	lsls	r2, r4
 80019fc:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fe:	690a      	ldr	r2, [r1, #16]
 8001a00:	40a2      	lsls	r2, r4
 8001a02:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3u] = temp;
 8001a04:	9a03      	ldr	r2, [sp, #12]
 8001a06:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a08:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8001a0a:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0c:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0e:	9a01      	ldr	r2, [sp, #4]
 8001a10:	4022      	ands	r2, r4
 8001a12:	40b2      	lsls	r2, r6
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a14:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a16:	4315      	orrs	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a18:	9a01      	ldr	r2, [sp, #4]
 8001a1a:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 8001a1c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1e:	4222      	tst	r2, r4
 8001a20:	d048      	beq.n	8001ab4 <HAL_GPIO_Init+0x138>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a22:	2503      	movs	r5, #3
 8001a24:	270f      	movs	r7, #15
 8001a26:	401d      	ands	r5, r3
 8001a28:	00ed      	lsls	r5, r5, #3
 8001a2a:	40af      	lsls	r7, r5
 8001a2c:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_GPIO_Init+0x13c>)
        temp = EXTI->EXTICR[position >> 2u];
 8001a2e:	089c      	lsrs	r4, r3, #2
 8001a30:	00a4      	lsls	r4, r4, #2
 8001a32:	18a4      	adds	r4, r4, r2
 8001a34:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a36:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a38:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a3a:	27a0      	movs	r7, #160	; 0xa0
 8001a3c:	05ff      	lsls	r7, r7, #23
 8001a3e:	42b8      	cmp	r0, r7
 8001a40:	d00c      	beq.n	8001a5c <HAL_GPIO_Init+0xe0>
 8001a42:	4f1e      	ldr	r7, [pc, #120]	; (8001abc <HAL_GPIO_Init+0x140>)
 8001a44:	3201      	adds	r2, #1
 8001a46:	42b8      	cmp	r0, r7
 8001a48:	d008      	beq.n	8001a5c <HAL_GPIO_Init+0xe0>
 8001a4a:	4f1d      	ldr	r7, [pc, #116]	; (8001ac0 <HAL_GPIO_Init+0x144>)
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	42b8      	cmp	r0, r7
 8001a50:	d004      	beq.n	8001a5c <HAL_GPIO_Init+0xe0>
 8001a52:	4f1c      	ldr	r7, [pc, #112]	; (8001ac4 <HAL_GPIO_Init+0x148>)
 8001a54:	3201      	adds	r2, #1
 8001a56:	42b8      	cmp	r0, r7
 8001a58:	d000      	beq.n	8001a5c <HAL_GPIO_Init+0xe0>
 8001a5a:	3202      	adds	r2, #2
 8001a5c:	40aa      	lsls	r2, r5
 8001a5e:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001a60:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 8001a62:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8001a64:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR1;
 8001a66:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 8001a68:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6a:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 8001a6c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001a6e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a70:	03ff      	lsls	r7, r7, #15
 8001a72:	d401      	bmi.n	8001a78 <HAL_GPIO_Init+0xfc>
        temp &= ~(iocurrent);
 8001a74:	0035      	movs	r5, r6
 8001a76:	4025      	ands	r5, r4
        EXTI->IMR1 = temp;
 8001a78:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001a7a:	4d14      	ldr	r5, [pc, #80]	; (8001acc <HAL_GPIO_Init+0x150>)
          temp |= iocurrent;
 8001a7c:	9e02      	ldr	r6, [sp, #8]
        temp = EXTI->EMR1;
 8001a7e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001a82:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	03bf      	lsls	r7, r7, #14
 8001a86:	d401      	bmi.n	8001a8c <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001a88:	4022      	ands	r2, r4
 8001a8a:	0016      	movs	r6, r2
        EXTI->EMR1 = temp;
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_GPIO_Init+0x13c>)
 8001a8e:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001a90:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001a92:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001a96:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	02ff      	lsls	r7, r7, #11
 8001a9a:	d401      	bmi.n	8001aa0 <HAL_GPIO_Init+0x124>
        temp &= ~(iocurrent);
 8001a9c:	0035      	movs	r5, r6
 8001a9e:	4025      	ands	r5, r4
        EXTI->RTSR1 = temp;
 8001aa0:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001aa2:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001aa4:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa6:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001aa8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aaa:	02bf      	lsls	r7, r7, #10
 8001aac:	d401      	bmi.n	8001ab2 <HAL_GPIO_Init+0x136>
        temp &= ~(iocurrent);
 8001aae:	4025      	ands	r5, r4
 8001ab0:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 8001ab2:	6056      	str	r6, [r2, #4]
    position++;
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	e764      	b.n	8001982 <HAL_GPIO_Init+0x6>
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	50000400 	.word	0x50000400
 8001ac0:	50000800 	.word	0x50000800
 8001ac4:	50000c00 	.word	0x50000c00
 8001ac8:	40021804 	.word	0x40021804
 8001acc:	40021808 	.word	0x40021808

08001ad0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	2a00      	cmp	r2, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ada:	e7fc      	b.n	8001ad6 <HAL_GPIO_WritePin+0x6>

08001adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001adc:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ade:	4c11      	ldr	r4, [pc, #68]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001ae0:	4911      	ldr	r1, [pc, #68]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001ae2:	6823      	ldr	r3, [r4, #0]
{
 8001ae4:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	4303      	orrs	r3, r0
 8001aea:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aec:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001aee:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d10e      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001af8:	490d      	ldr	r1, [pc, #52]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	2306      	movs	r3, #6
 8001afe:	4358      	muls	r0, r3
 8001b00:	f7fe fb2a 	bl	8000158 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b04:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001b06:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b08:	00d2      	lsls	r2, r2, #3
 8001b0a:	6961      	ldr	r1, [r4, #20]
 8001b0c:	0008      	movs	r0, r1
 8001b0e:	4010      	ands	r0, r2
 8001b10:	4211      	tst	r1, r2
 8001b12:	d100      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8001b14:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	e7f5      	b.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8001b1e:	2003      	movs	r0, #3
 8001b20:	e7f8      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40007000 	.word	0x40007000
 8001b28:	fffff9ff 	.word	0xfffff9ff
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	000f4240 	.word	0x000f4240

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	0004      	movs	r4, r0
 8001b38:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d023      	beq.n	8001b86 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	6803      	ldr	r3, [r0, #0]
 8001b40:	07db      	lsls	r3, r3, #31
 8001b42:	d410      	bmi.n	8001b66 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	079b      	lsls	r3, r3, #30
 8001b48:	d45e      	bmi.n	8001c08 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	071b      	lsls	r3, r3, #28
 8001b4e:	d500      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x1e>
 8001b50:	e0c3      	b.n	8001cda <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	075b      	lsls	r3, r3, #29
 8001b56:	d500      	bpl.n	8001b5a <HAL_RCC_OscConfig+0x26>
 8001b58:	e0f5      	b.n	8001d46 <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5a:	69e2      	ldr	r2, [r4, #28]
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d000      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2e>
 8001b60:	e17c      	b.n	8001e5c <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e029      	b.n	8001bba <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	2238      	movs	r2, #56	; 0x38
 8001b68:	4db0      	ldr	r5, [pc, #704]	; (8001e2c <HAL_RCC_OscConfig+0x2f8>)
 8001b6a:	68ab      	ldr	r3, [r5, #8]
 8001b6c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d10a      	bne.n	8001b8a <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b74:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b76:	0793      	lsls	r3, r2, #30
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	039b      	lsls	r3, r3, #14
 8001b7e:	d5e1      	bpl.n	8001b44 <HAL_RCC_OscConfig+0x10>
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1de      	bne.n	8001b44 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
 8001b88:	e017      	b.n	8001bba <HAL_RCC_OscConfig+0x86>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d0f5      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	6863      	ldr	r3, [r4, #4]
 8001b92:	0252      	lsls	r2, r2, #9
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d112      	bne.n	8001bbe <HAL_RCC_OscConfig+0x8a>
 8001b98:	682a      	ldr	r2, [r5, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f973 	bl	8000e88 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001ba4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	02bf      	lsls	r7, r7, #10
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	423b      	tst	r3, r7
 8001bac:	d1ca      	bne.n	8001b44 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bae:	f7ff f96b 	bl	8000e88 <HAL_GetTick>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	2864      	cmp	r0, #100	; 0x64
 8001bb6:	d9f7      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
}
 8001bba:	b005      	add	sp, #20
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	21a0      	movs	r1, #160	; 0xa0
 8001bc0:	02c9      	lsls	r1, r1, #11
 8001bc2:	428b      	cmp	r3, r1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xa4>
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	6829      	ldr	r1, [r5, #0]
 8001bca:	02db      	lsls	r3, r3, #11
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd6:	e7e2      	b.n	8001b9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	682a      	ldr	r2, [r5, #0]
 8001bda:	4995      	ldr	r1, [pc, #596]	; (8001e30 <HAL_RCC_OscConfig+0x2fc>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	602a      	str	r2, [r5, #0]
 8001be0:	682a      	ldr	r2, [r5, #0]
 8001be2:	4994      	ldr	r1, [pc, #592]	; (8001e34 <HAL_RCC_OscConfig+0x300>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1d8      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8001bec:	f7ff f94c 	bl	8000e88 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001bf2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf4:	02bf      	lsls	r7, r7, #10
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	423b      	tst	r3, r7
 8001bfa:	d0a3      	beq.n	8001b44 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f944 	bl	8000e88 <HAL_GetTick>
 8001c00:	1b80      	subs	r0, r0, r6
 8001c02:	2864      	cmp	r0, #100	; 0x64
 8001c04:	d9f7      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001c06:	e7d7      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c08:	2338      	movs	r3, #56	; 0x38
 8001c0a:	4d88      	ldr	r5, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x2f8>)
 8001c0c:	68aa      	ldr	r2, [r5, #8]
 8001c0e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d128      	bne.n	8001c68 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c16:	2103      	movs	r1, #3
 8001c18:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c1a:	2a02      	cmp	r2, #2
 8001c1c:	d126      	bne.n	8001c6c <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	682a      	ldr	r2, [r5, #0]
 8001c20:	0552      	lsls	r2, r2, #21
 8001c22:	d502      	bpl.n	8001c2a <HAL_RCC_OscConfig+0xf6>
 8001c24:	68e2      	ldr	r2, [r4, #12]
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d0ad      	beq.n	8001b86 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	6869      	ldr	r1, [r5, #4]
 8001c2c:	6962      	ldr	r2, [r4, #20]
 8001c2e:	4882      	ldr	r0, [pc, #520]	; (8001e38 <HAL_RCC_OscConfig+0x304>)
 8001c30:	0212      	lsls	r2, r2, #8
 8001c32:	4001      	ands	r1, r0
 8001c34:	430a      	orrs	r2, r1
 8001c36:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	4a7f      	ldr	r2, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x308>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	6922      	ldr	r2, [r4, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	4a7d      	ldr	r2, [pc, #500]	; (8001e40 <HAL_RCC_OscConfig+0x30c>)
 8001c4c:	049b      	lsls	r3, r3, #18
 8001c4e:	0f5b      	lsrs	r3, r3, #29
 8001c50:	40da      	lsrs	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	4a7b      	ldr	r2, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x310>)
 8001c56:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x314>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	f7ff f86a 	bl	8000d34 <HAL_InitTick>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d100      	bne.n	8001c66 <HAL_RCC_OscConfig+0x132>
 8001c64:	e771      	b.n	8001b4a <HAL_RCC_OscConfig+0x16>
 8001c66:	e78e      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0d8      	beq.n	8001c1e <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	68e3      	ldr	r3, [r4, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	4a71      	ldr	r2, [pc, #452]	; (8001e3c <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c76:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c78:	4013      	ands	r3, r2
 8001c7a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	682a      	ldr	r2, [r5, #0]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8fc 	bl	8000e88 <HAL_GetTick>
 8001c90:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	423b      	tst	r3, r7
 8001c96:	d007      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	686a      	ldr	r2, [r5, #4]
 8001c9a:	6963      	ldr	r3, [r4, #20]
 8001c9c:	4966      	ldr	r1, [pc, #408]	; (8001e38 <HAL_RCC_OscConfig+0x304>)
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	606b      	str	r3, [r5, #4]
 8001ca6:	e750      	b.n	8001b4a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f8ee 	bl	8000e88 <HAL_GetTick>
 8001cac:	1b80      	subs	r0, r0, r6
 8001cae:	2802      	cmp	r0, #2
 8001cb0:	d9ef      	bls.n	8001c92 <HAL_RCC_OscConfig+0x15e>
 8001cb2:	e781      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4013      	ands	r3, r2
 8001cbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f8e3 	bl	8000e88 <HAL_GetTick>
 8001cc2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc4:	00ff      	lsls	r7, r7, #3
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	423b      	tst	r3, r7
 8001cca:	d100      	bne.n	8001cce <HAL_RCC_OscConfig+0x19a>
 8001ccc:	e73d      	b.n	8001b4a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f8db 	bl	8000e88 <HAL_GetTick>
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9f6      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x192>
 8001cd8:	e76e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cda:	2138      	movs	r1, #56	; 0x38
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x2f8>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	001d      	movs	r5, r3
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	2a18      	cmp	r2, #24
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	079b      	lsls	r3, r3, #30
 8001cec:	d400      	bmi.n	8001cf0 <HAL_RCC_OscConfig+0x1bc>
 8001cee:	e730      	b.n	8001b52 <HAL_RCC_OscConfig+0x1e>
 8001cf0:	69a3      	ldr	r3, [r4, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x1c4>
 8001cf6:	e72c      	b.n	8001b52 <HAL_RCC_OscConfig+0x1e>
 8001cf8:	e745      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfa:	69a2      	ldr	r2, [r4, #24]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d010      	beq.n	8001d24 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8001d02:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d04:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001d06:	4313      	orrs	r3, r2
 8001d08:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f8bd 	bl	8000e88 <HAL_GetTick>
 8001d0e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d10:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001d12:	423b      	tst	r3, r7
 8001d14:	d000      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1e4>
 8001d16:	e71c      	b.n	8001b52 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f8b6 	bl	8000e88 <HAL_GetTick>
 8001d1c:	1b80      	subs	r0, r0, r6
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d9f6      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1dc>
 8001d22:	e749      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8001d24:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d26:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001d28:	439a      	bics	r2, r3
 8001d2a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f8ac 	bl	8000e88 <HAL_GetTick>
 8001d30:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d32:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001d34:	423b      	tst	r3, r7
 8001d36:	d100      	bne.n	8001d3a <HAL_RCC_OscConfig+0x206>
 8001d38:	e70b      	b.n	8001b52 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f8a5 	bl	8000e88 <HAL_GetTick>
 8001d3e:	1b80      	subs	r0, r0, r6
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9f6      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
 8001d44:	e738      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d46:	2138      	movs	r1, #56	; 0x38
 8001d48:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_RCC_OscConfig+0x2f8>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	400a      	ands	r2, r1
 8001d50:	2a20      	cmp	r2, #32
 8001d52:	d108      	bne.n	8001d66 <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	079b      	lsls	r3, r3, #30
 8001d58:	d400      	bmi.n	8001d5c <HAL_RCC_OscConfig+0x228>
 8001d5a:	e6fe      	b.n	8001b5a <HAL_RCC_OscConfig+0x26>
 8001d5c:	68a3      	ldr	r3, [r4, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d000      	beq.n	8001d64 <HAL_RCC_OscConfig+0x230>
 8001d62:	e6fa      	b.n	8001b5a <HAL_RCC_OscConfig+0x26>
 8001d64:	e70f      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d66:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d70:	4213      	tst	r3, r2
 8001d72:	d108      	bne.n	8001d86 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001d76:	4313      	orrs	r3, r2
 8001d78:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001d7a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	9303      	str	r3, [sp, #12]
 8001d80:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d86:	2780      	movs	r7, #128	; 0x80
 8001d88:	4e31      	ldr	r6, [pc, #196]	; (8001e50 <HAL_RCC_OscConfig+0x31c>)
 8001d8a:	007f      	lsls	r7, r7, #1
 8001d8c:	6833      	ldr	r3, [r6, #0]
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d015      	beq.n	8001dbe <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d92:	68a3      	ldr	r3, [r4, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d122      	bne.n	8001dde <HAL_RCC_OscConfig+0x2aa>
 8001d98:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f873 	bl	8000e88 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001da4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001da8:	423b      	tst	r3, r7
 8001daa:	d038      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8001dac:	9b00      	ldr	r3, [sp, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d000      	beq.n	8001db4 <HAL_RCC_OscConfig+0x280>
 8001db2:	e6d2      	b.n	8001b5a <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001db6:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x320>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001dbc:	e6cd      	b.n	8001b5a <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbe:	6833      	ldr	r3, [r6, #0]
 8001dc0:	433b      	orrs	r3, r7
 8001dc2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f860 	bl	8000e88 <HAL_GetTick>
 8001dc8:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dca:	6833      	ldr	r3, [r6, #0]
 8001dcc:	423b      	tst	r3, r7
 8001dce:	d1e0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7ff f85a 	bl	8000e88 <HAL_GetTick>
 8001dd4:	9b01      	ldr	r3, [sp, #4]
 8001dd6:	1ac0      	subs	r0, r0, r3
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f6      	bls.n	8001dca <HAL_RCC_OscConfig+0x296>
 8001ddc:	e6ec      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2bc>
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4313      	orrs	r3, r2
 8001de8:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001dea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001dec:	2301      	movs	r3, #1
 8001dee:	e7d4      	b.n	8001d9a <HAL_RCC_OscConfig+0x266>
 8001df0:	2101      	movs	r1, #1
 8001df2:	438a      	bics	r2, r1
 8001df4:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001df6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001df8:	3103      	adds	r1, #3
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1cd      	bne.n	8001d9e <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 8001e02:	f7ff f841 	bl	8000e88 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e06:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001e08:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001e0c:	423b      	tst	r3, r7
 8001e0e:	d0cd      	beq.n	8001dac <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7ff f83a 	bl	8000e88 <HAL_GetTick>
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x324>)
 8001e16:	1b80      	subs	r0, r0, r6
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d9f6      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2d6>
 8001e1c:	e6cc      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f833 	bl	8000e88 <HAL_GetTick>
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x324>)
 8001e24:	1b80      	subs	r0, r0, r6
 8001e26:	4298      	cmp	r0, r3
 8001e28:	d9bd      	bls.n	8001da6 <HAL_RCC_OscConfig+0x272>
 8001e2a:	e6c5      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	fffeffff 	.word	0xfffeffff
 8001e34:	fffbffff 	.word	0xfffbffff
 8001e38:	ffff80ff 	.word	0xffff80ff
 8001e3c:	ffffc7ff 	.word	0xffffc7ff
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	fffffeff 	.word	0xfffffeff
 8001e50:	40007000 	.word	0x40007000
 8001e54:	efffffff 	.word	0xefffffff
 8001e58:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5c:	2038      	movs	r0, #56	; 0x38
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <HAL_RCC_OscConfig+0x43c>)
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	001d      	movs	r5, r3
 8001e64:	4001      	ands	r1, r0
 8001e66:	2910      	cmp	r1, #16
 8001e68:	d054      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4941      	ldr	r1, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x440>)
 8001e6e:	400b      	ands	r3, r1
 8001e70:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e72:	2a02      	cmp	r2, #2
 8001e74:	d137      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001e76:	f7ff f807 	bl	8000e88 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001e7c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	04bf      	lsls	r7, r7, #18
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	423b      	tst	r3, r7
 8001e84:	d129      	bne.n	8001eda <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e88:	6a23      	ldr	r3, [r4, #32]
 8001e8a:	68ea      	ldr	r2, [r5, #12]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	493a      	ldr	r1, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x444>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e90:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	400a      	ands	r2, r1
 8001e94:	4313      	orrs	r3, r2
 8001e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e98:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ea6:	0212      	lsls	r2, r2, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	682a      	ldr	r2, [r5, #0]
 8001eb0:	045b      	lsls	r3, r3, #17
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	68ea      	ldr	r2, [r5, #12]
 8001eba:	055b      	lsls	r3, r3, #21
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ffe2 	bl	8000e88 <HAL_GetTick>
 8001ec4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	4233      	tst	r3, r6
 8001eca:	d000      	beq.n	8001ece <HAL_RCC_OscConfig+0x39a>
 8001ecc:	e649      	b.n	8001b62 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe ffdb 	bl	8000e88 <HAL_GetTick>
 8001ed2:	1b00      	subs	r0, r0, r4
 8001ed4:	2802      	cmp	r0, #2
 8001ed6:	d9f6      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x392>
 8001ed8:	e66e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe ffd5 	bl	8000e88 <HAL_GetTick>
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d9cd      	bls.n	8001e80 <HAL_RCC_OscConfig+0x34c>
 8001ee4:	e668      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eea:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001eec:	4393      	bics	r3, r2
 8001eee:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ef0:	68eb      	ldr	r3, [r5, #12]
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_RCC_OscConfig+0x448>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001efa:	f7fe ffc5 	bl	8000e88 <HAL_GetTick>
 8001efe:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	4233      	tst	r3, r6
 8001f04:	d100      	bne.n	8001f08 <HAL_RCC_OscConfig+0x3d4>
 8001f06:	e62c      	b.n	8001b62 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe ffbe 	bl	8000e88 <HAL_GetTick>
 8001f0c:	1b00      	subs	r0, r0, r4
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d9f6      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
 8001f12:	e651      	b.n	8001bb8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	2a01      	cmp	r2, #1
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3e6>
 8001f18:	e635      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001f1c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	6a21      	ldr	r1, [r4, #32]
 8001f20:	401a      	ands	r2, r3
 8001f22:	428a      	cmp	r2, r1
 8001f24:	d000      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3f4>
 8001f26:	e62e      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f28:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f2c:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d000      	beq.n	8001f34 <HAL_RCC_OscConfig+0x400>
 8001f32:	e628      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f34:	21fe      	movs	r1, #254	; 0xfe
 8001f36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f38:	01c9      	lsls	r1, r1, #7
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f3e:	4291      	cmp	r1, r2
 8001f40:	d000      	beq.n	8001f44 <HAL_RCC_OscConfig+0x410>
 8001f42:	e620      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f44:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f48:	0392      	lsls	r2, r2, #14
 8001f4a:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4c:	428a      	cmp	r2, r1
 8001f4e:	d000      	beq.n	8001f52 <HAL_RCC_OscConfig+0x41e>
 8001f50:	e619      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f52:	22e0      	movs	r2, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f54:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f56:	0512      	lsls	r2, r2, #20
 8001f58:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f5a:	428a      	cmp	r2, r1
 8001f5c:	d000      	beq.n	8001f60 <HAL_RCC_OscConfig+0x42c>
 8001f5e:	e612      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f60:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f62:	0f5b      	lsrs	r3, r3, #29
 8001f64:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d100      	bne.n	8001f6c <HAL_RCC_OscConfig+0x438>
 8001f6a:	e5fa      	b.n	8001b62 <HAL_RCC_OscConfig+0x2e>
 8001f6c:	e60b      	b.n	8001b86 <HAL_RCC_OscConfig+0x52>
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40021000 	.word	0x40021000
 8001f74:	feffffff 	.word	0xfeffffff
 8001f78:	11c1808c 	.word	0x11c1808c
 8001f7c:	eefeffff 	.word	0xeefeffff

08001f80 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f80:	2338      	movs	r3, #56	; 0x38
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001f84:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f86:	6891      	ldr	r1, [r2, #8]
 8001f88:	0014      	movs	r4, r2
 8001f8a:	4219      	tst	r1, r3
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f8e:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f90:	481b      	ldr	r0, [pc, #108]	; (8002000 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f92:	049b      	lsls	r3, r3, #18
 8001f94:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f96:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9a:	6891      	ldr	r1, [r2, #8]
 8001f9c:	4019      	ands	r1, r3
 8001f9e:	2908      	cmp	r1, #8
 8001fa0:	d027      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa2:	6891      	ldr	r1, [r2, #8]
 8001fa4:	4019      	ands	r1, r3
 8001fa6:	2910      	cmp	r1, #16
 8001fa8:	d117      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001faa:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fac:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fb2:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb4:	0649      	lsls	r1, r1, #25
 8001fb6:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fb8:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fba:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fbc:	4015      	ands	r5, r2
    switch (pllsource)
 8001fbe:	079b      	lsls	r3, r3, #30
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc2:	4810      	ldr	r0, [pc, #64]	; (8002004 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fc4:	f7fe f8c8 	bl	8000158 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fc8:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fca:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fcc:	0f49      	lsrs	r1, r1, #29
 8001fce:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001fd0:	f7fe f8c2 	bl	8000158 <__udivsi3>
  return sysclockfreq;
 8001fd4:	e7e0      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <HAL_RCC_GetSysClockFreq+0x80>)
 8001fd8:	e7f4      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fda:	6891      	ldr	r1, [r2, #8]
 8001fdc:	4019      	ands	r1, r3
 8001fde:	2920      	cmp	r1, #32
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fe2:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001fe4:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b18      	cmp	r3, #24
 8001fea:	d1d5      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001fec:	20fa      	movs	r0, #250	; 0xfa
 8001fee:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001ff0:	e7d2      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <HAL_RCC_GetSysClockFreq+0x84>)
 8001ff4:	e7d0      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001ff6:	2080      	movs	r0, #128	; 0x80
 8001ff8:	0200      	lsls	r0, r0, #8
 8001ffa:	e7cd      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
 8001ffc:	40021000 	.word	0x40021000
 8002000:	00f42400 	.word	0x00f42400
 8002004:	007a1200 	.word	0x007a1200

08002008 <HAL_RCC_ClockConfig>:
{
 8002008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800200a:	0005      	movs	r5, r0
 800200c:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800200e:	2800      	cmp	r0, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002012:	2001      	movs	r0, #1
}
 8002014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002016:	2707      	movs	r7, #7
 8002018:	4c4a      	ldr	r4, [pc, #296]	; (8002144 <HAL_RCC_ClockConfig+0x13c>)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	403b      	ands	r3, r7
 800201e:	428b      	cmp	r3, r1
 8002020:	d32a      	bcc.n	8002078 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002022:	6829      	ldr	r1, [r5, #0]
 8002024:	078b      	lsls	r3, r1, #30
 8002026:	d43b      	bmi.n	80020a0 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002028:	07cb      	lsls	r3, r1, #31
 800202a:	d448      	bmi.n	80020be <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	2707      	movs	r7, #7
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	403b      	ands	r3, r7
 8002032:	42b3      	cmp	r3, r6
 8002034:	d90a      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	43bb      	bics	r3, r7
 800203a:	4333      	orrs	r3, r6
 800203c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800203e:	f7fe ff23 	bl	8000e88 <HAL_GetTick>
 8002042:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	403b      	ands	r3, r7
 8002048:	42b3      	cmp	r3, r6
 800204a:	d16b      	bne.n	8002124 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	4c3e      	ldr	r4, [pc, #248]	; (8002148 <HAL_RCC_ClockConfig+0x140>)
 8002050:	075b      	lsls	r3, r3, #29
 8002052:	d46f      	bmi.n	8002134 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002054:	f7ff ff94 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8002058:	68a3      	ldr	r3, [r4, #8]
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HAL_RCC_ClockConfig+0x144>)
 800205c:	051b      	lsls	r3, r3, #20
 800205e:	0f1b      	lsrs	r3, r3, #28
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	589b      	ldr	r3, [r3, r2]
 8002064:	221f      	movs	r2, #31
 8002066:	4013      	ands	r3, r2
 8002068:	40d8      	lsrs	r0, r3
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_ClockConfig+0x148>)
 800206c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_ClockConfig+0x14c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f7fe fe5f 	bl	8000d34 <HAL_InitTick>
 8002076:	e7cd      	b.n	8002014 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	43bb      	bics	r3, r7
 800207c:	430b      	orrs	r3, r1
 800207e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002080:	f7fe ff02 	bl	8000e88 <HAL_GetTick>
 8002084:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	403b      	ands	r3, r7
 800208a:	42b3      	cmp	r3, r6
 800208c:	d0c9      	beq.n	8002022 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7fe fefb 	bl	8000e88 <HAL_GetTick>
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	1ac0      	subs	r0, r0, r3
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x150>)
 8002098:	4298      	cmp	r0, r3
 800209a:	d9f4      	bls.n	8002086 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 800209c:	2003      	movs	r0, #3
 800209e:	e7b9      	b.n	8002014 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_RCC_ClockConfig+0x140>)
 80020a2:	074b      	lsls	r3, r1, #29
 80020a4:	d504      	bpl.n	80020b0 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020a6:	23e0      	movs	r3, #224	; 0xe0
 80020a8:	6890      	ldr	r0, [r2, #8]
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4303      	orrs	r3, r0
 80020ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	6893      	ldr	r3, [r2, #8]
 80020b2:	482a      	ldr	r0, [pc, #168]	; (800215c <HAL_RCC_ClockConfig+0x154>)
 80020b4:	4003      	ands	r3, r0
 80020b6:	68a8      	ldr	r0, [r5, #8]
 80020b8:	4303      	orrs	r3, r0
 80020ba:	6093      	str	r3, [r2, #8]
 80020bc:	e7b4      	b.n	8002028 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	686a      	ldr	r2, [r5, #4]
 80020c0:	4f21      	ldr	r7, [pc, #132]	; (8002148 <HAL_RCC_ClockConfig+0x140>)
 80020c2:	2a01      	cmp	r2, #1
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	039b      	lsls	r3, r3, #14
 80020ca:	d5a2      	bpl.n	8002012 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020cc:	2107      	movs	r1, #7
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	438b      	bics	r3, r1
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80020d6:	f7fe fed7 	bl	8000e88 <HAL_GetTick>
 80020da:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	2338      	movs	r3, #56	; 0x38
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	401a      	ands	r2, r3
 80020e2:	686b      	ldr	r3, [r5, #4]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d0a0      	beq.n	800202c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	f7fe fecd 	bl	8000e88 <HAL_GetTick>
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	1ac0      	subs	r0, r0, r3
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_ClockConfig+0x150>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d9f1      	bls.n	80020dc <HAL_RCC_ClockConfig+0xd4>
 80020f8:	e7d0      	b.n	800209c <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	2a02      	cmp	r2, #2
 80020fc:	d103      	bne.n	8002106 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	d4e3      	bmi.n	80020cc <HAL_RCC_ClockConfig+0xc4>
 8002104:	e785      	b.n	8002012 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002106:	2a00      	cmp	r2, #0
 8002108:	d103      	bne.n	8002112 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	055b      	lsls	r3, r3, #21
 800210e:	d4dd      	bmi.n	80020cc <HAL_RCC_ClockConfig+0xc4>
 8002110:	e77f      	b.n	8002012 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002112:	2302      	movs	r3, #2
 8002114:	2a03      	cmp	r2, #3
 8002116:	d103      	bne.n	8002120 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002118:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4219      	tst	r1, r3
 800211c:	d1d6      	bne.n	80020cc <HAL_RCC_ClockConfig+0xc4>
 800211e:	e778      	b.n	8002012 <HAL_RCC_ClockConfig+0xa>
 8002120:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002122:	e7fa      	b.n	800211a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe feb0 	bl	8000e88 <HAL_GetTick>
 8002128:	9b01      	ldr	r3, [sp, #4]
 800212a:	1ac0      	subs	r0, r0, r3
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x150>)
 800212e:	4298      	cmp	r0, r3
 8002130:	d988      	bls.n	8002044 <HAL_RCC_ClockConfig+0x3c>
 8002132:	e7b3      	b.n	800209c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x158>)
 8002138:	4013      	ands	r3, r2
 800213a:	68ea      	ldr	r2, [r5, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60a3      	str	r3, [r4, #8]
 8002140:	e788      	b.n	8002054 <HAL_RCC_ClockConfig+0x4c>
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08006108 	.word	0x08006108
 8002150:	20000000 	.word	0x20000000
 8002154:	20000008 	.word	0x20000008
 8002158:	00001388 	.word	0x00001388
 800215c:	fffff0ff 	.word	0xfffff0ff
 8002160:	ffff8fff 	.word	0xffff8fff

08002164 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	045b      	lsls	r3, r3, #17
 800216c:	0f5b      	lsrs	r3, r3, #29
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	589b      	ldr	r3, [r3, r2]
 8002172:	221f      	movs	r2, #31
 8002174:	4013      	ands	r3, r2
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002178:	6810      	ldr	r0, [r2, #0]
 800217a:	40d8      	lsrs	r0, r3
}
 800217c:	4770      	bx	lr
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	08006148 	.word	0x08006148
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800218c:	2207      	movs	r2, #7
{
 800218e:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002190:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002194:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002196:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002198:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800219a:	4014      	ands	r4, r2
 800219c:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800219e:	689c      	ldr	r4, [r3, #8]
 80021a0:	402c      	ands	r4, r5
 80021a2:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80021a4:	24e0      	movs	r4, #224	; 0xe0
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	01e4      	lsls	r4, r4, #7
 80021aa:	4023      	ands	r3, r4
 80021ac:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetClockConfig+0x30>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4013      	ands	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
}
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c4:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c6:	2000      	movs	r0, #0
{
 80021c8:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ca:	039b      	lsls	r3, r3, #14
 80021cc:	d53c      	bpl.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x88>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	4c60      	ldr	r4, [pc, #384]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d8:	4213      	tst	r3, r2
 80021da:	d108      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021de:	4313      	orrs	r3, r2
 80021e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e4:	4013      	ands	r3, r2
 80021e6:	9303      	str	r3, [sp, #12]
 80021e8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ee:	2780      	movs	r7, #128	; 0x80
 80021f0:	4e59      	ldr	r6, [pc, #356]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80021f2:	007f      	lsls	r7, r7, #1
 80021f4:	6833      	ldr	r3, [r6, #0]
 80021f6:	433b      	orrs	r3, r7
 80021f8:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fe45 	bl	8000e88 <HAL_GetTick>
 80021fe:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002200:	6833      	ldr	r3, [r6, #0]
 8002202:	423b      	tst	r3, r7
 8002204:	d012      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002206:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	0011      	movs	r1, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4e53      	ldr	r6, [pc, #332]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002210:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002212:	421a      	tst	r2, r3
 8002214:	d003      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002218:	4299      	cmp	r1, r3
 800221a:	d000      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800221c:	e07a      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002220:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002222:	401e      	ands	r6, r3
 8002224:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002226:	431e      	orrs	r6, r3
 8002228:	65e6      	str	r6, [r4, #92]	; 0x5c
 800222a:	e006      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7fe fe2c 	bl	8000e88 <HAL_GetTick>
 8002230:	9b01      	ldr	r3, [sp, #4]
 8002232:	1ac0      	subs	r0, r0, r3
 8002234:	2802      	cmp	r0, #2
 8002236:	d9e3      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800223a:	9b00      	ldr	r3, [sp, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d103      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002242:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002244:	4013      	ands	r3, r2
 8002246:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	07da      	lsls	r2, r3, #31
 800224c:	d506      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224e:	2403      	movs	r4, #3
 8002250:	4940      	ldr	r1, [pc, #256]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002252:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002254:	43a2      	bics	r2, r4
 8002256:	686c      	ldr	r4, [r5, #4]
 8002258:	4322      	orrs	r2, r4
 800225a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800225c:	06da      	lsls	r2, r3, #27
 800225e:	d506      	bpl.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	493c      	ldr	r1, [pc, #240]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002262:	4c40      	ldr	r4, [pc, #256]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002264:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002266:	4022      	ands	r2, r4
 8002268:	68ac      	ldr	r4, [r5, #8]
 800226a:	4322      	orrs	r2, r4
 800226c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800226e:	059a      	lsls	r2, r3, #22
 8002270:	d506      	bpl.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4938      	ldr	r1, [pc, #224]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002274:	4c3c      	ldr	r4, [pc, #240]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002276:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002278:	4022      	ands	r2, r4
 800227a:	696c      	ldr	r4, [r5, #20]
 800227c:	4322      	orrs	r2, r4
 800227e:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002280:	055a      	lsls	r2, r3, #21
 8002282:	d506      	bpl.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002284:	4933      	ldr	r1, [pc, #204]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002286:	4c39      	ldr	r4, [pc, #228]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002288:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800228a:	4022      	ands	r2, r4
 800228c:	69ac      	ldr	r4, [r5, #24]
 800228e:	4322      	orrs	r2, r4
 8002290:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002292:	069a      	lsls	r2, r3, #26
 8002294:	d506      	bpl.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002296:	492f      	ldr	r1, [pc, #188]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002298:	4c35      	ldr	r4, [pc, #212]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800229a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800229c:	4022      	ands	r2, r4
 800229e:	68ec      	ldr	r4, [r5, #12]
 80022a0:	4322      	orrs	r2, r4
 80022a2:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a4:	045a      	lsls	r2, r3, #17
 80022a6:	d50f      	bpl.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a8:	492a      	ldr	r1, [pc, #168]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022aa:	69ec      	ldr	r4, [r5, #28]
 80022ac:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	0892      	lsrs	r2, r2, #2
 80022b2:	4322      	orrs	r2, r4
 80022b4:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	05d2      	lsls	r2, r2, #23
 80022ba:	4294      	cmp	r4, r2
 80022bc:	d104      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	68cc      	ldr	r4, [r1, #12]
 80022c2:	0252      	lsls	r2, r2, #9
 80022c4:	4322      	orrs	r2, r4
 80022c6:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022c8:	029a      	lsls	r2, r3, #10
 80022ca:	d50f      	bpl.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022cc:	4921      	ldr	r1, [pc, #132]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022ce:	4e29      	ldr	r6, [pc, #164]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80022d0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022d2:	6a2c      	ldr	r4, [r5, #32]
 80022d4:	4032      	ands	r2, r6
 80022d6:	4322      	orrs	r2, r4
 80022d8:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	03d2      	lsls	r2, r2, #15
 80022de:	4294      	cmp	r4, r2
 80022e0:	d104      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	68cc      	ldr	r4, [r1, #12]
 80022e6:	0452      	lsls	r2, r2, #17
 80022e8:	4322      	orrs	r2, r4
 80022ea:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	d50f      	bpl.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022f2:	4c21      	ldr	r4, [pc, #132]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022f6:	6929      	ldr	r1, [r5, #16]
 80022f8:	4023      	ands	r3, r4
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	01db      	lsls	r3, r3, #7
 8002302:	4299      	cmp	r1, r3
 8002304:	d104      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	68d1      	ldr	r1, [r2, #12]
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	430b      	orrs	r3, r1
 800230e:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002310:	b005      	add	sp, #20
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8002314:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002316:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002318:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800231a:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 800231c:	025b      	lsls	r3, r3, #9
 800231e:	4303      	orrs	r3, r0
 8002320:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002322:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002324:	4815      	ldr	r0, [pc, #84]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002326:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002328:	4003      	ands	r3, r0
 800232a:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 800232c:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800232e:	07d3      	lsls	r3, r2, #31
 8002330:	d400      	bmi.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002332:	e774      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 8002334:	f7fe fda8 	bl	8000e88 <HAL_GetTick>
 8002338:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	2202      	movs	r2, #2
 800233c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800233e:	4213      	tst	r3, r2
 8002340:	d000      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002342:	e76c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fda0 	bl	8000e88 <HAL_GetTick>
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234a:	1bc0      	subs	r0, r0, r7
 800234c:	4298      	cmp	r0, r3
 800234e:	d9f4      	bls.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002350:	e772      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
 800235c:	fffffcff 	.word	0xfffffcff
 8002360:	efffffff 	.word	0xefffffff
 8002364:	fffff3ff 	.word	0xfffff3ff
 8002368:	fff3ffff 	.word	0xfff3ffff
 800236c:	ffcfffff 	.word	0xffcfffff
 8002370:	ffffcfff 	.word	0xffffcfff
 8002374:	ffbfffff 	.word	0xffbfffff
 8002378:	ffff3fff 	.word	0xffff3fff
 800237c:	fffeffff 	.word	0xfffeffff
 8002380:	00001388 	.word	0x00001388

08002384 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	0002      	movs	r2, r0
{
 8002386:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002388:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800238a:	323d      	adds	r2, #61	; 0x3d
 800238c:	7811      	ldrb	r1, [r2, #0]
 800238e:	4281      	cmp	r1, r0
 8002390:	d11c      	bne.n	80023cc <HAL_TIM_Base_Start_IT+0x48>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002392:	2102      	movs	r1, #2
 8002394:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4302      	orrs	r2, r0
 800239c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_TIM_Base_Start_IT+0x54>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d006      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x2e>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	05d2      	lsls	r2, r2, #23
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d002      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x2e>
 80023ac:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <HAL_TIM_Base_Start_IT+0x58>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <HAL_TIM_Base_Start_IT+0x4a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	490a      	ldr	r1, [pc, #40]	; (80023e0 <HAL_TIM_Base_Start_IT+0x5c>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	2a06      	cmp	r2, #6
 80023bc:	d006      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x48>
 80023be:	3907      	subs	r1, #7
 80023c0:	428a      	cmp	r2, r1
 80023c2:	d003      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 80023c4:	2201      	movs	r2, #1
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4310      	orrs	r0, r2
 80023d2:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7f9      	b.n	80023cc <HAL_TIM_Base_Start_IT+0x48>
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40000400 	.word	0x40000400
 80023e0:	00010007 	.word	0x00010007

080023e4 <HAL_TIM_IC_MspInit>:
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIM_OC_DelayElapsedCallback>:
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_IC_CaptureCallback>:
 80023e8:	4770      	bx	lr

080023ea <HAL_TIM_PWM_PulseFinishedCallback>:
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_TriggerCallback>:
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f0:	2202      	movs	r2, #2
 80023f2:	6803      	ldr	r3, [r0, #0]
{
 80023f4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f6:	6919      	ldr	r1, [r3, #16]
{
 80023f8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023fa:	4211      	tst	r1, r2
 80023fc:	d00e      	beq.n	800241c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023fe:	68d9      	ldr	r1, [r3, #12]
 8002400:	4211      	tst	r1, r2
 8002402:	d00b      	beq.n	800241c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002404:	3a05      	subs	r2, #5
 8002406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002408:	3204      	adds	r2, #4
 800240a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	079b      	lsls	r3, r3, #30
 8002410:	d100      	bne.n	8002414 <HAL_TIM_IRQHandler+0x24>
 8002412:	e086      	b.n	8002522 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002414:	f7ff ffe8 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002418:	2300      	movs	r3, #0
 800241a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800241c:	2204      	movs	r2, #4
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	4211      	tst	r1, r2
 8002424:	d011      	beq.n	800244a <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	4211      	tst	r1, r2
 800242a:	d00e      	beq.n	800244a <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800242c:	3a09      	subs	r2, #9
 800242e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002430:	3207      	adds	r2, #7
 8002432:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243c:	421a      	tst	r2, r3
 800243e:	d100      	bne.n	8002442 <HAL_TIM_IRQHandler+0x52>
 8002440:	e075      	b.n	800252e <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	f7ff ffd1 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	2300      	movs	r3, #0
 8002448:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244a:	2208      	movs	r2, #8
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	6919      	ldr	r1, [r3, #16]
 8002450:	4211      	tst	r1, r2
 8002452:	d00e      	beq.n	8002472 <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	4211      	tst	r1, r2
 8002458:	d00b      	beq.n	8002472 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800245a:	3a11      	subs	r2, #17
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245e:	320d      	adds	r2, #13
 8002460:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002462:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002464:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002466:	079b      	lsls	r3, r3, #30
 8002468:	d067      	beq.n	800253a <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	f7ff ffbd 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	2300      	movs	r3, #0
 8002470:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002472:	2210      	movs	r2, #16
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	4211      	tst	r1, r2
 800247a:	d010      	beq.n	800249e <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	4211      	tst	r1, r2
 8002480:	d00d      	beq.n	800249e <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002482:	3a21      	subs	r2, #33	; 0x21
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002486:	3219      	adds	r2, #25
 8002488:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002490:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002492:	421a      	tst	r2, r3
 8002494:	d057      	beq.n	8002546 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	f7ff ffa7 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	2300      	movs	r3, #0
 800249c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800249e:	2201      	movs	r2, #1
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	4211      	tst	r1, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a8:	68d9      	ldr	r1, [r3, #12]
 80024aa:	4211      	tst	r1, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ae:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b4:	f7fe fb48 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	4211      	tst	r1, r2
 80024c0:	d008      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	4211      	tst	r1, r2
 80024c6:	d005      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c8:	3a02      	subs	r2, #2
 80024ca:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024cc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024d0:	f000 f99b 	bl	800280a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	05d2      	lsls	r2, r2, #23
 80024da:	d507      	bpl.n	80024ec <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	0612      	lsls	r2, r2, #24
 80024e0:	d504      	bpl.n	80024ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80024e8:	f000 f990 	bl	800280c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ec:	2240      	movs	r2, #64	; 0x40
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	4211      	tst	r1, r2
 80024f4:	d007      	beq.n	8002506 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f6:	68d9      	ldr	r1, [r3, #12]
 80024f8:	4211      	tst	r1, r2
 80024fa:	d004      	beq.n	8002506 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fc:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fe:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002500:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002502:	f7ff ff73 	bl	80023ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002506:	2220      	movs	r2, #32
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	6919      	ldr	r1, [r3, #16]
 800250c:	4211      	tst	r1, r2
 800250e:	d007      	beq.n	8002520 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	4211      	tst	r1, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002516:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002518:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800251a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800251c:	f000 f974 	bl	8002808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002520:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	f7ff ff60 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002526:	0020      	movs	r0, r4
 8002528:	f7ff ff5f 	bl	80023ea <HAL_TIM_PWM_PulseFinishedCallback>
 800252c:	e774      	b.n	8002418 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	f7ff ff5a 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002532:	0020      	movs	r0, r4
 8002534:	f7ff ff59 	bl	80023ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002538:	e785      	b.n	8002446 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	f7ff ff54 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253e:	0020      	movs	r0, r4
 8002540:	f7ff ff53 	bl	80023ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002544:	e793      	b.n	800246e <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	f7ff ff4e 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254a:	0020      	movs	r0, r4
 800254c:	f7ff ff4d 	bl	80023ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002550:	e7a3      	b.n	800249a <HAL_TIM_IRQHandler+0xaa>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	fffffeff 	.word	0xfffffeff

08002558 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <TIM_Base_SetConfig+0x78>)
{
 800255a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800255c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255e:	4290      	cmp	r0, r2
 8002560:	d006      	beq.n	8002570 <TIM_Base_SetConfig+0x18>
 8002562:	2480      	movs	r4, #128	; 0x80
 8002564:	05e4      	lsls	r4, r4, #23
 8002566:	42a0      	cmp	r0, r4
 8002568:	d002      	beq.n	8002570 <TIM_Base_SetConfig+0x18>
 800256a:	4c1a      	ldr	r4, [pc, #104]	; (80025d4 <TIM_Base_SetConfig+0x7c>)
 800256c:	42a0      	cmp	r0, r4
 800256e:	d10c      	bne.n	800258a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002570:	2470      	movs	r4, #112	; 0x70
 8002572:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002574:	684c      	ldr	r4, [r1, #4]
 8002576:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002578:	4290      	cmp	r0, r2
 800257a:	d00f      	beq.n	800259c <TIM_Base_SetConfig+0x44>
 800257c:	2480      	movs	r4, #128	; 0x80
 800257e:	05e4      	lsls	r4, r4, #23
 8002580:	42a0      	cmp	r0, r4
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x44>
 8002584:	4c13      	ldr	r4, [pc, #76]	; (80025d4 <TIM_Base_SetConfig+0x7c>)
 8002586:	42a0      	cmp	r0, r4
 8002588:	d008      	beq.n	800259c <TIM_Base_SetConfig+0x44>
 800258a:	4c13      	ldr	r4, [pc, #76]	; (80025d8 <TIM_Base_SetConfig+0x80>)
 800258c:	42a0      	cmp	r0, r4
 800258e:	d005      	beq.n	800259c <TIM_Base_SetConfig+0x44>
 8002590:	4c12      	ldr	r4, [pc, #72]	; (80025dc <TIM_Base_SetConfig+0x84>)
 8002592:	42a0      	cmp	r0, r4
 8002594:	d002      	beq.n	800259c <TIM_Base_SetConfig+0x44>
 8002596:	4c12      	ldr	r4, [pc, #72]	; (80025e0 <TIM_Base_SetConfig+0x88>)
 8002598:	42a0      	cmp	r0, r4
 800259a:	d103      	bne.n	80025a4 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259c:	4c11      	ldr	r4, [pc, #68]	; (80025e4 <TIM_Base_SetConfig+0x8c>)
 800259e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a0:	68cc      	ldr	r4, [r1, #12]
 80025a2:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	2480      	movs	r4, #128	; 0x80
 80025a6:	43a3      	bics	r3, r4
 80025a8:	694c      	ldr	r4, [r1, #20]
 80025aa:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80025ac:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ae:	688b      	ldr	r3, [r1, #8]
 80025b0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b2:	680b      	ldr	r3, [r1, #0]
 80025b4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b6:	4290      	cmp	r0, r2
 80025b8:	d005      	beq.n	80025c6 <TIM_Base_SetConfig+0x6e>
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <TIM_Base_SetConfig+0x84>)
 80025bc:	4298      	cmp	r0, r3
 80025be:	d002      	beq.n	80025c6 <TIM_Base_SetConfig+0x6e>
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <TIM_Base_SetConfig+0x88>)
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d101      	bne.n	80025ca <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c6:	690b      	ldr	r3, [r1, #16]
 80025c8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ca:	2301      	movs	r3, #1
 80025cc:	6143      	str	r3, [r0, #20]
}
 80025ce:	bd10      	pop	{r4, pc}
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40002000 	.word	0x40002000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800
 80025e4:	fffffcff 	.word	0xfffffcff

080025e8 <HAL_TIM_Base_Init>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
  if (htim == NULL)
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d023      	beq.n	800263a <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025f2:	0025      	movs	r5, r4
 80025f4:	353d      	adds	r5, #61	; 0x3d
 80025f6:	782b      	ldrb	r3, [r5, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80025fe:	0023      	movs	r3, r4
 8002600:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002602:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002604:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002606:	f7fe fb29 	bl	8000c5c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260e:	6820      	ldr	r0, [r4, #0]
 8002610:	1d21      	adds	r1, r4, #4
 8002612:	f7ff ffa1 	bl	8002558 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002616:	0022      	movs	r2, r4
 8002618:	2301      	movs	r3, #1
  return HAL_OK;
 800261a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261c:	3248      	adds	r2, #72	; 0x48
 800261e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	3a0a      	subs	r2, #10
 8002624:	7013      	strb	r3, [r2, #0]
 8002626:	7053      	strb	r3, [r2, #1]
 8002628:	7093      	strb	r3, [r2, #2]
 800262a:	70d3      	strb	r3, [r2, #3]
 800262c:	7113      	strb	r3, [r2, #4]
 800262e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	7193      	strb	r3, [r2, #6]
 8002632:	71d3      	strb	r3, [r2, #7]
 8002634:	7213      	strb	r3, [r2, #8]
 8002636:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002638:	702b      	strb	r3, [r5, #0]
}
 800263a:	bd70      	pop	{r4, r5, r6, pc}

0800263c <HAL_TIM_IC_Init>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
  if (htim == NULL)
 8002642:	2c00      	cmp	r4, #0
 8002644:	d023      	beq.n	800268e <HAL_TIM_IC_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	0025      	movs	r5, r4
 8002648:	353d      	adds	r5, #61	; 0x3d
 800264a:	782b      	ldrb	r3, [r5, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002652:	0023      	movs	r3, r4
 8002654:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002656:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002658:	701a      	strb	r2, [r3, #0]
    HAL_TIM_IC_MspInit(htim);
 800265a:	f7ff fec3 	bl	80023e4 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002662:	6820      	ldr	r0, [r4, #0]
 8002664:	1d21      	adds	r1, r4, #4
 8002666:	f7ff ff77 	bl	8002558 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266a:	0022      	movs	r2, r4
 800266c:	2301      	movs	r3, #1
  return HAL_OK;
 800266e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	3248      	adds	r2, #72	; 0x48
 8002672:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	3a0a      	subs	r2, #10
 8002678:	7013      	strb	r3, [r2, #0]
 800267a:	7053      	strb	r3, [r2, #1]
 800267c:	7093      	strb	r3, [r2, #2]
 800267e:	70d3      	strb	r3, [r2, #3]
 8002680:	7113      	strb	r3, [r2, #4]
 8002682:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	7193      	strb	r3, [r2, #6]
 8002686:	71d3      	strb	r3, [r2, #7]
 8002688:	7213      	strb	r3, [r2, #8]
 800268a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800268c:	702b      	strb	r3, [r5, #0]
}
 800268e:	bd70      	pop	{r4, r5, r6, pc}

08002690 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002692:	2601      	movs	r6, #1
 8002694:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002696:	4f10      	ldr	r7, [pc, #64]	; (80026d8 <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002698:	43b4      	bics	r4, r6
 800269a:	6204      	str	r4, [r0, #32]
{
 800269c:	0015      	movs	r5, r2
  tmpccmr1 = TIMx->CCMR1;
 800269e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80026a0:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026a2:	42b8      	cmp	r0, r7
 80026a4:	d014      	beq.n	80026d0 <TIM_TI1_SetConfig+0x40>
 80026a6:	2780      	movs	r7, #128	; 0x80
 80026a8:	05ff      	lsls	r7, r7, #23
 80026aa:	42b8      	cmp	r0, r7
 80026ac:	d010      	beq.n	80026d0 <TIM_TI1_SetConfig+0x40>
 80026ae:	4f0b      	ldr	r7, [pc, #44]	; (80026dc <TIM_TI1_SetConfig+0x4c>)
 80026b0:	42b8      	cmp	r0, r7
 80026b2:	d00d      	beq.n	80026d0 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026b4:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b6:	25f0      	movs	r5, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026b8:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ba:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026bc:	350f      	adds	r5, #15
 80026be:	402b      	ands	r3, r5
 80026c0:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c2:	230a      	movs	r3, #10
 80026c4:	439c      	bics	r4, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026c6:	4019      	ands	r1, r3
 80026c8:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026cc:	6201      	str	r1, [r0, #32]
}
 80026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026d0:	2603      	movs	r6, #3
 80026d2:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 80026d4:	432a      	orrs	r2, r5
 80026d6:	e7ee      	b.n	80026b6 <TIM_TI1_SetConfig+0x26>
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400

080026e0 <HAL_TIM_IC_ConfigChannel>:
{
 80026e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80026e2:	0006      	movs	r6, r0
 80026e4:	363c      	adds	r6, #60	; 0x3c
 80026e6:	7833      	ldrb	r3, [r6, #0]
{
 80026e8:	0005      	movs	r5, r0
 80026ea:	000c      	movs	r4, r1
 80026ec:	0017      	movs	r7, r2
  __HAL_LOCK(htim);
 80026ee:	2002      	movs	r0, #2
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d014      	beq.n	800271e <HAL_TIM_IC_ConfigChannel+0x3e>
 80026f4:	2301      	movs	r3, #1
 80026f6:	7033      	strb	r3, [r6, #0]
  if (Channel == TIM_CHANNEL_1)
 80026f8:	6828      	ldr	r0, [r5, #0]
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	6862      	ldr	r2, [r4, #4]
 80026fe:	68e3      	ldr	r3, [r4, #12]
 8002700:	2f00      	cmp	r7, #0
 8002702:	d10d      	bne.n	8002720 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI1_SetConfig(htim->Instance,
 8002704:	f7ff ffc4 	bl	8002690 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002708:	210c      	movs	r1, #12
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	438a      	bics	r2, r1
 8002710:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	68a1      	ldr	r1, [r4, #8]
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800271a:	2000      	movs	r0, #0
 800271c:	7030      	strb	r0, [r6, #0]
}
 800271e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002720:	68a4      	ldr	r4, [r4, #8]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	6a05      	ldr	r5, [r0, #32]
 8002724:	9401      	str	r4, [sp, #4]
  else if (Channel == TIM_CHANNEL_2)
 8002726:	2f04      	cmp	r7, #4
 8002728:	d11e      	bne.n	8002768 <HAL_TIM_IC_ConfigChannel+0x88>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800272a:	370c      	adds	r7, #12
 800272c:	43bd      	bics	r5, r7
 800272e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002730:	6987      	ldr	r7, [r0, #24]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002732:	4c2e      	ldr	r4, [pc, #184]	; (80027ec <HAL_TIM_IC_ConfigChannel+0x10c>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002734:	0212      	lsls	r2, r2, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002736:	4027      	ands	r7, r4
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002738:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800273a:	4f2d      	ldr	r7, [pc, #180]	; (80027f0 <HAL_TIM_IC_ConfigChannel+0x110>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800273c:	071b      	lsls	r3, r3, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800273e:	403a      	ands	r2, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002744:	22a0      	movs	r2, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002746:	6a05      	ldr	r5, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002748:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800274a:	4395      	bics	r5, r2
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800274c:	4011      	ands	r1, r2
 800274e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002750:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002752:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002754:	6983      	ldr	r3, [r0, #24]
 8002756:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_TIM_IC_ConfigChannel+0x114>)
 8002758:	4013      	ands	r3, r2
 800275a:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800275c:	9a01      	ldr	r2, [sp, #4]
 800275e:	6983      	ldr	r3, [r0, #24]
 8002760:	0214      	lsls	r4, r2, #8
 8002762:	431c      	orrs	r4, r3
 8002764:	6184      	str	r4, [r0, #24]
 8002766:	e7d8      	b.n	800271a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002768:	2f08      	cmp	r7, #8
 800276a:	d11f      	bne.n	80027ac <HAL_TIM_IC_ConfigChannel+0xcc>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800276c:	2403      	movs	r4, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276e:	4f22      	ldr	r7, [pc, #136]	; (80027f8 <HAL_TIM_IC_ConfigChannel+0x118>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002770:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002772:	403d      	ands	r5, r7
 8002774:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002776:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 8002778:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800277a:	43a5      	bics	r5, r4
  tmpccmr2 |= TIM_ICSelection;
 800277c:	432a      	orrs	r2, r5
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800277e:	25f0      	movs	r5, #240	; 0xf0
 8002780:	43aa      	bics	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002782:	350f      	adds	r5, #15
 8002784:	402b      	ands	r3, r5
 8002786:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_TIM_IC_ConfigChannel+0x11c>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800278a:	61c2      	str	r2, [r0, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800278c:	401f      	ands	r7, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800278e:	23a0      	movs	r3, #160	; 0xa0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002790:	220c      	movs	r2, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	0209      	lsls	r1, r1, #8
 8002796:	4019      	ands	r1, r3
 8002798:	4339      	orrs	r1, r7
  TIMx->CCER = tmpccer;
 800279a:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800279c:	69c3      	ldr	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800279e:	9c01      	ldr	r4, [sp, #4]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027a0:	4393      	bics	r3, r2
 80027a2:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027a4:	69c3      	ldr	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027a6:	431c      	orrs	r4, r3
 80027a8:	61c4      	str	r4, [r0, #28]
 80027aa:	e7b6      	b.n	800271a <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ac:	4f14      	ldr	r7, [pc, #80]	; (8002800 <HAL_TIM_IC_ConfigChannel+0x120>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027ae:	4c0f      	ldr	r4, [pc, #60]	; (80027ec <HAL_TIM_IC_ConfigChannel+0x10c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027b0:	403d      	ands	r5, r7
 80027b2:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027b4:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027b6:	0212      	lsls	r2, r2, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027b8:	4027      	ands	r7, r4
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027ba:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027bc:	4f0c      	ldr	r7, [pc, #48]	; (80027f0 <HAL_TIM_IC_ConfigChannel+0x110>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027be:	071b      	lsls	r3, r3, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027c0:	403a      	ands	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027c2:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
 80027c4:	6a05      	ldr	r5, [r0, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027c6:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80027ca:	0309      	lsls	r1, r1, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80027cc:	4015      	ands	r5, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80027ce:	22a0      	movs	r2, #160	; 0xa0
 80027d0:	0212      	lsls	r2, r2, #8
 80027d2:	4011      	ands	r1, r2
 80027d4:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027d6:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80027d8:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027da:	69c3      	ldr	r3, [r0, #28]
 80027dc:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <HAL_TIM_IC_ConfigChannel+0x114>)
 80027de:	4013      	ands	r3, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027e0:	9a01      	ldr	r2, [sp, #4]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027e2:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027e4:	69c3      	ldr	r3, [r0, #28]
 80027e6:	0214      	lsls	r4, r2, #8
 80027e8:	e7dd      	b.n	80027a6 <HAL_TIM_IC_ConfigChannel+0xc6>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	fffffcff 	.word	0xfffffcff
 80027f0:	ffff0fff 	.word	0xffff0fff
 80027f4:	fffff3ff 	.word	0xfffff3ff
 80027f8:	fffffeff 	.word	0xfffffeff
 80027fc:	fffff5ff 	.word	0xfffff5ff
 8002800:	ffffefff 	.word	0xffffefff
 8002804:	ffff5fff 	.word	0xffff5fff

08002808 <HAL_TIMEx_CommutCallback>:
 8002808:	4770      	bx	lr

0800280a <HAL_TIMEx_BreakCallback>:
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_Break2Callback>:
 800280c:	4770      	bx	lr
	...

08002810 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	490b      	ldr	r1, [pc, #44]	; (8002840 <UART_EndRxTransfer+0x30>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <UART_EndRxTransfer+0x34>)
 800281e:	400a      	ands	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002822:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002824:	2a01      	cmp	r2, #1
 8002826:	d103      	bne.n	8002830 <UART_EndRxTransfer+0x20>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002828:	2110      	movs	r1, #16
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	0003      	movs	r3, r0
 8002832:	2220      	movs	r2, #32
 8002834:	3388      	adds	r3, #136	; 0x88
 8002836:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	2300      	movs	r3, #0
 800283a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800283c:	6703      	str	r3, [r0, #112]	; 0x70
}
 800283e:	4770      	bx	lr
 8002840:	fffffedf 	.word	0xfffffedf
 8002844:	effffffe 	.word	0xeffffffe

08002848 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002848:	0003      	movs	r3, r0
 800284a:	3308      	adds	r3, #8
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800284e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002850:	2b21      	cmp	r3, #33	; 0x21
 8002852:	d10d      	bne.n	8002870 <UART_TxISR_8BIT+0x28>
  {
    if (huart->TxXferCount == 0U)
 8002854:	0001      	movs	r1, r0
 8002856:	3156      	adds	r1, #86	; 0x56
 8002858:	880a      	ldrh	r2, [r1, #0]
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	2a00      	cmp	r2, #0
 800285e:	d108      	bne.n	8002872 <UART_TxISR_8BIT+0x2a>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	438a      	bics	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002870:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002872:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002874:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8002876:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002878:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800287a:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800287c:	880b      	ldrh	r3, [r1, #0]
 800287e:	3b01      	subs	r3, #1
 8002880:	b29b      	uxth	r3, r3
 8002882:	800b      	strh	r3, [r1, #0]
}
 8002884:	e7f4      	b.n	8002870 <UART_TxISR_8BIT+0x28>

08002886 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002886:	0003      	movs	r3, r0
 8002888:	3308      	adds	r3, #8
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800288c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800288e:	2b21      	cmp	r3, #33	; 0x21
 8002890:	d10d      	bne.n	80028ae <UART_TxISR_16BIT+0x28>
  {
    if (huart->TxXferCount == 0U)
 8002892:	0001      	movs	r1, r0
 8002894:	3156      	adds	r1, #86	; 0x56
 8002896:	880a      	ldrh	r2, [r1, #0]
 8002898:	6803      	ldr	r3, [r0, #0]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d108      	bne.n	80028b0 <UART_TxISR_16BIT+0x2a>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	438a      	bics	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80028ae:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028b0:	6d04      	ldr	r4, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80028b2:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 80028b4:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80028b6:	05d2      	lsls	r2, r2, #23
 80028b8:	0dd2      	lsrs	r2, r2, #23
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80028bc:	6504      	str	r4, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80028be:	880b      	ldrh	r3, [r1, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	800b      	strh	r3, [r1, #0]
}
 80028c6:	e7f2      	b.n	80028ae <UART_TxISR_16BIT+0x28>

080028c8 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c8:	0003      	movs	r3, r0
 80028ca:	3308      	adds	r3, #8
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80028ce:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028d0:	2b21      	cmp	r3, #33	; 0x21
 80028d2:	d113      	bne.n	80028fc <UART_TxISR_16BIT_FIFOEN+0x34>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80028d4:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 80028d6:	0004      	movs	r4, r0
        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80028d8:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80028da:	336a      	adds	r3, #106	; 0x6a
 80028dc:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 80028de:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d00b      	beq.n	80028fc <UART_TxISR_16BIT_FIFOEN+0x34>
      if (huart->TxXferCount == 0U)
 80028e4:	8821      	ldrh	r1, [r4, #0]
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d108      	bne.n	80028fe <UART_TxISR_16BIT_FIFOEN+0x36>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	490c      	ldr	r1, [pc, #48]	; (8002920 <UART_TxISR_16BIT_FIFOEN+0x58>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
      {
        /* Nothing to do */
      }
    }
  }
}
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	4229      	tst	r1, r5
 8002902:	d00a      	beq.n	800291a <UART_TxISR_16BIT_FIFOEN+0x52>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8002904:	6d06      	ldr	r6, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002906:	8831      	ldrh	r1, [r6, #0]
        huart->pTxBuffPtr += 2U;
 8002908:	3602      	adds	r6, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800290a:	05c9      	lsls	r1, r1, #23
 800290c:	0dc9      	lsrs	r1, r1, #23
 800290e:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002910:	6506      	str	r6, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002912:	8823      	ldrh	r3, [r4, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800291a:	3a01      	subs	r2, #1
 800291c:	b292      	uxth	r2, r2
 800291e:	e7df      	b.n	80028e0 <UART_TxISR_16BIT_FIFOEN+0x18>
 8002920:	ff7fffff 	.word	0xff7fffff

08002924 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002924:	0003      	movs	r3, r0
 8002926:	3308      	adds	r3, #8
 8002928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800292a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800292c:	2b21      	cmp	r3, #33	; 0x21
 800292e:	d113      	bne.n	8002958 <UART_TxISR_8BIT_FIFOEN+0x34>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002930:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8002932:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002934:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002936:	336a      	adds	r3, #106	; 0x6a
 8002938:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 800293a:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800293c:	2a00      	cmp	r2, #0
 800293e:	d00b      	beq.n	8002958 <UART_TxISR_8BIT_FIFOEN+0x34>
      if (huart->TxXferCount == 0U)
 8002940:	8821      	ldrh	r1, [r4, #0]
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	2900      	cmp	r1, #0
 8002946:	d108      	bne.n	800295a <UART_TxISR_8BIT_FIFOEN+0x36>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	490b      	ldr	r1, [pc, #44]	; (8002978 <UART_TxISR_8BIT_FIFOEN+0x54>)
 800294c:	400a      	ands	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800295a:	69d9      	ldr	r1, [r3, #28]
 800295c:	4229      	tst	r1, r5
 800295e:	d008      	beq.n	8002972 <UART_TxISR_8BIT_FIFOEN+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002960:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002962:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8002964:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002966:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8002968:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800296a:	8823      	ldrh	r3, [r4, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002972:	3a01      	subs	r2, #1
 8002974:	b292      	uxth	r2, r2
 8002976:	e7e1      	b.n	800293c <UART_TxISR_8BIT_FIFOEN+0x18>
 8002978:	ff7fffff 	.word	0xff7fffff

0800297c <HAL_UART_Transmit_IT>:
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800297e:	0006      	movs	r6, r0
 8002980:	3608      	adds	r6, #8
 8002982:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8002984:	0003      	movs	r3, r0
    return HAL_BUSY;
 8002986:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002988:	2c20      	cmp	r4, #32
 800298a:	d13a      	bne.n	8002a02 <HAL_UART_Transmit_IT+0x86>
      return HAL_ERROR;
 800298c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800298e:	2900      	cmp	r1, #0
 8002990:	d037      	beq.n	8002a02 <HAL_UART_Transmit_IT+0x86>
 8002992:	2a00      	cmp	r2, #0
 8002994:	d035      	beq.n	8002a02 <HAL_UART_Transmit_IT+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002996:	2080      	movs	r0, #128	; 0x80
 8002998:	689d      	ldr	r5, [r3, #8]
 800299a:	0140      	lsls	r0, r0, #5
 800299c:	4285      	cmp	r5, r0
 800299e:	d106      	bne.n	80029ae <HAL_UART_Transmit_IT+0x32>
 80029a0:	6918      	ldr	r0, [r3, #16]
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d103      	bne.n	80029ae <HAL_UART_Transmit_IT+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80029a6:	3c1f      	subs	r4, #31
      return HAL_ERROR;
 80029a8:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80029aa:	4221      	tst	r1, r4
 80029ac:	d129      	bne.n	8002a02 <HAL_UART_Transmit_IT+0x86>
    __HAL_LOCK(huart);
 80029ae:	001c      	movs	r4, r3
 80029b0:	3480      	adds	r4, #128	; 0x80
 80029b2:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 80029b4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80029b6:	2f01      	cmp	r7, #1
 80029b8:	d023      	beq.n	8002a02 <HAL_UART_Transmit_IT+0x86>
 80029ba:	3801      	subs	r0, #1
 80029bc:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 80029be:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80029c0:	0019      	movs	r1, r3
 80029c2:	3154      	adds	r1, #84	; 0x54
 80029c4:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 80029c6:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	001a      	movs	r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	328c      	adds	r2, #140	; 0x8c
 80029ce:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d0:	2221      	movs	r2, #33	; 0x21
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	67f2      	str	r2, [r6, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80029da:	0592      	lsls	r2, r2, #22
 80029dc:	0149      	lsls	r1, r1, #5
 80029de:	4290      	cmp	r0, r2
 80029e0:	d110      	bne.n	8002a04 <HAL_UART_Transmit_IT+0x88>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_UART_Transmit_IT+0xa8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	428d      	cmp	r5, r1
 80029e6:	d103      	bne.n	80029f0 <HAL_UART_Transmit_IT+0x74>
 80029e8:	6919      	ldr	r1, [r3, #16]
 80029ea:	2900      	cmp	r1, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_UART_Transmit_IT+0x74>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_UART_Transmit_IT+0xac>)
      __HAL_UNLOCK(huart);
 80029f0:	2000      	movs	r0, #0
 80029f2:	675a      	str	r2, [r3, #116]	; 0x74
 80029f4:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	6891      	ldr	r1, [r2, #8]
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	430b      	orrs	r3, r1
 8002a00:	6093      	str	r3, [r2, #8]
}
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT;
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_UART_Transmit_IT+0xb0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a06:	428d      	cmp	r5, r1
 8002a08:	d103      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x96>
 8002a0a:	6919      	ldr	r1, [r3, #16]
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	d100      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x96>
        huart->TxISR = UART_TxISR_16BIT;
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_UART_Transmit_IT+0xb4>)
      __HAL_UNLOCK(huart);
 8002a12:	2000      	movs	r0, #0
 8002a14:	675a      	str	r2, [r3, #116]	; 0x74
 8002a16:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e7ee      	b.n	8002a02 <HAL_UART_Transmit_IT+0x86>
 8002a24:	08002925 	.word	0x08002925
 8002a28:	080028c9 	.word	0x080028c9
 8002a2c:	08002849 	.word	0x08002849
 8002a30:	08002887 	.word	0x08002887

08002a34 <HAL_UART_ErrorCallback>:
 8002a34:	4770      	bx	lr

08002a36 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a36:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	0002      	movs	r2, r0
{
 8002a3c:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002a3e:	325e      	adds	r2, #94	; 0x5e
 8002a40:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002a42:	3a08      	subs	r2, #8
 8002a44:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8002a46:	f7ff fff5 	bl	8002a34 <HAL_UART_ErrorCallback>
}
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <HAL_UARTEx_RxEventCallback>:
}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a50:	6803      	ldr	r3, [r0, #0]
{
 8002a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a54:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a56:	4d9f      	ldr	r5, [pc, #636]	; (8002cd4 <HAL_UART_IRQHandler+0x284>)
{
 8002a58:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a5a:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	6898      	ldr	r0, [r3, #8]
  if (errorflags == 0U)
 8002a5e:	422a      	tst	r2, r5
 8002a60:	d10f      	bne.n	8002a82 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a62:	2520      	movs	r5, #32
 8002a64:	422a      	tst	r2, r5
 8002a66:	d100      	bne.n	8002a6a <HAL_UART_IRQHandler+0x1a>
 8002a68:	e090      	b.n	8002b8c <HAL_UART_IRQHandler+0x13c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a6a:	2680      	movs	r6, #128	; 0x80
 8002a6c:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6e:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a70:	4006      	ands	r6, r0
 8002a72:	4335      	orrs	r5, r6
 8002a74:	d100      	bne.n	8002a78 <HAL_UART_IRQHandler+0x28>
 8002a76:	e089      	b.n	8002b8c <HAL_UART_IRQHandler+0x13c>
      if (huart->RxISR != NULL)
 8002a78:	6f23      	ldr	r3, [r4, #112]	; 0x70
      huart->TxISR(huart);
 8002a7a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d17a      	bne.n	8002b76 <HAL_UART_IRQHandler+0x126>
 8002a80:	e07a      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a82:	4d95      	ldr	r5, [pc, #596]	; (8002cd8 <HAL_UART_IRQHandler+0x288>)
 8002a84:	4005      	ands	r5, r0
 8002a86:	46ac      	mov	ip, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a88:	4666      	mov	r6, ip
 8002a8a:	4d94      	ldr	r5, [pc, #592]	; (8002cdc <HAL_UART_IRQHandler+0x28c>)
 8002a8c:	400d      	ands	r5, r1
 8002a8e:	4335      	orrs	r5, r6
 8002a90:	d100      	bne.n	8002a94 <HAL_UART_IRQHandler+0x44>
 8002a92:	e07b      	b.n	8002b8c <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a94:	2501      	movs	r5, #1
 8002a96:	422a      	tst	r2, r5
 8002a98:	d007      	beq.n	8002aaa <HAL_UART_IRQHandler+0x5a>
 8002a9a:	05ce      	lsls	r6, r1, #23
 8002a9c:	d505      	bpl.n	8002aaa <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a9e:	0026      	movs	r6, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aa0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aa2:	368c      	adds	r6, #140	; 0x8c
 8002aa4:	6837      	ldr	r7, [r6, #0]
 8002aa6:	433d      	orrs	r5, r7
 8002aa8:	6035      	str	r5, [r6, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aaa:	0025      	movs	r5, r4
 8002aac:	2602      	movs	r6, #2
 8002aae:	358c      	adds	r5, #140	; 0x8c
 8002ab0:	9501      	str	r5, [sp, #4]
 8002ab2:	4232      	tst	r2, r6
 8002ab4:	d007      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x76>
 8002ab6:	07c5      	lsls	r5, r0, #31
 8002ab8:	d505      	bpl.n	8002ac6 <HAL_UART_IRQHandler+0x76>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aba:	9d01      	ldr	r5, [sp, #4]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002abc:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	682f      	ldr	r7, [r5, #0]
 8002ac0:	19b6      	adds	r6, r6, r6
 8002ac2:	433e      	orrs	r6, r7
 8002ac4:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ac6:	2604      	movs	r6, #4
 8002ac8:	4232      	tst	r2, r6
 8002aca:	d009      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x90>
 8002acc:	07c5      	lsls	r5, r0, #31
 8002ace:	d507      	bpl.n	8002ae0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad0:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad4:	378c      	adds	r7, #140	; 0x8c
 8002ad6:	683e      	ldr	r6, [r7, #0]
 8002ad8:	0035      	movs	r5, r6
 8002ada:	2602      	movs	r6, #2
 8002adc:	432e      	orrs	r6, r5
 8002ade:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ae0:	2608      	movs	r6, #8
 8002ae2:	4232      	tst	r2, r6
 8002ae4:	d00a      	beq.n	8002afc <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ae6:	2720      	movs	r7, #32
 8002ae8:	4665      	mov	r5, ip
 8002aea:	400f      	ands	r7, r1
 8002aec:	432f      	orrs	r7, r5
 8002aee:	d005      	beq.n	8002afc <HAL_UART_IRQHandler+0xac>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af0:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af4:	378c      	adds	r7, #140	; 0x8c
 8002af6:	683d      	ldr	r5, [r7, #0]
 8002af8:	432e      	orrs	r6, r5
 8002afa:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002afc:	2780      	movs	r7, #128	; 0x80
 8002afe:	0026      	movs	r6, r4
 8002b00:	013f      	lsls	r7, r7, #4
 8002b02:	368c      	adds	r6, #140	; 0x8c
 8002b04:	423a      	tst	r2, r7
 8002b06:	d006      	beq.n	8002b16 <HAL_UART_IRQHandler+0xc6>
 8002b08:	014d      	lsls	r5, r1, #5
 8002b0a:	d504      	bpl.n	8002b16 <HAL_UART_IRQHandler+0xc6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b0c:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	6837      	ldr	r7, [r6, #0]
 8002b12:	433b      	orrs	r3, r7
 8002b14:	6033      	str	r3, [r6, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b16:	6833      	ldr	r3, [r6, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d02d      	beq.n	8002b78 <HAL_UART_IRQHandler+0x128>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	421a      	tst	r2, r3
 8002b20:	d00a      	beq.n	8002b38 <HAL_UART_IRQHandler+0xe8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b22:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0549      	lsls	r1, r1, #21
 8002b28:	4008      	ands	r0, r1
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	d004      	beq.n	8002b38 <HAL_UART_IRQHandler+0xe8>
        if (huart->RxISR != NULL)
 8002b2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_IRQHandler+0xe8>
          huart->RxISR(huart);
 8002b34:	0020      	movs	r0, r4
 8002b36:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b38:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002b3a:	9b01      	ldr	r3, [sp, #4]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b3c:	2740      	movs	r7, #64	; 0x40
      errorcode = huart->ErrorCode;
 8002b3e:	681b      	ldr	r3, [r3, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b40:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b42:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b44:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b46:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002b48:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b4a:	431e      	orrs	r6, r3
 8002b4c:	d019      	beq.n	8002b82 <HAL_UART_IRQHandler+0x132>
        UART_EndRxTransfer(huart);
 8002b4e:	f7ff fe5f 	bl	8002810 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	423a      	tst	r2, r7
 8002b58:	d00f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x12a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002b5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5e:	43ba      	bics	r2, r7
 8002b60:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_UART_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_UART_IRQHandler+0x290>)
 8002b68:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6a:	f7fe fe77 	bl	800185c <HAL_DMA_Abort_IT>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_IRQHandler+0x128>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b72:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002b74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b76:	4798      	blx	r3
}
 8002b78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002b7a:	0020      	movs	r0, r4
 8002b7c:	f7ff ff5a 	bl	8002a34 <HAL_UART_ErrorCallback>
 8002b80:	e7fa      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
        HAL_UART_ErrorCallback(huart);
 8002b82:	f7ff ff57 	bl	8002a34 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	601e      	str	r6, [r3, #0]
 8002b8a:	e7f5      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002b8e:	2e01      	cmp	r6, #1
 8002b90:	d166      	bne.n	8002c60 <HAL_UART_IRQHandler+0x210>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002b92:	2510      	movs	r5, #16
 8002b94:	422a      	tst	r2, r5
 8002b96:	d063      	beq.n	8002c60 <HAL_UART_IRQHandler+0x210>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002b98:	4229      	tst	r1, r5
 8002b9a:	d061      	beq.n	8002c60 <HAL_UART_IRQHandler+0x210>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b9c:	621d      	str	r5, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4008      	ands	r0, r1
 8002ba6:	420a      	tst	r2, r1
 8002ba8:	d03a      	beq.n	8002c20 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002baa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002bac:	6807      	ldr	r7, [r0, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	d0e0      	beq.n	8002b78 <HAL_UART_IRQHandler+0x128>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bb6:	311c      	adds	r1, #28
 8002bb8:	468c      	mov	ip, r1
 8002bba:	44a4      	add	ip, r4
 8002bbc:	4661      	mov	r1, ip
 8002bbe:	8809      	ldrh	r1, [r1, #0]
 8002bc0:	4291      	cmp	r1, r2
 8002bc2:	d9d9      	bls.n	8002b78 <HAL_UART_IRQHandler+0x128>
        huart->RxXferCount = nb_remaining_rx_data;
 8002bc4:	215e      	movs	r1, #94	; 0x5e
 8002bc6:	468c      	mov	ip, r1
 8002bc8:	44a4      	add	ip, r4
 8002bca:	4661      	mov	r1, ip
 8002bcc:	800a      	strh	r2, [r1, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bce:	683f      	ldr	r7, [r7, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	0039      	movs	r1, r7
 8002bd4:	4011      	ands	r1, r2
 8002bd6:	9101      	str	r1, [sp, #4]
 8002bd8:	4217      	tst	r7, r2
 8002bda:	d115      	bne.n	8002c08 <HAL_UART_IRQHandler+0x1b8>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bdc:	681f      	ldr	r7, [r3, #0]
 8002bde:	4941      	ldr	r1, [pc, #260]	; (8002ce4 <HAL_UART_IRQHandler+0x294>)
 8002be0:	400f      	ands	r7, r1
 8002be2:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be4:	689f      	ldr	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	3142      	adds	r1, #66	; 0x42
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	43b7      	bics	r7, r6
 8002bea:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bec:	689e      	ldr	r6, [r3, #8]
 8002bee:	31ff      	adds	r1, #255	; 0xff
 8002bf0:	438e      	bics	r6, r1
          huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	0021      	movs	r1, r4
 8002bf4:	3188      	adds	r1, #136	; 0x88
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	609e      	str	r6, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	600a      	str	r2, [r1, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	9a01      	ldr	r2, [sp, #4]
 8002bfc:	66e2      	str	r2, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	43aa      	bics	r2, r5
 8002c02:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c04:	f7fe fdec 	bl	80017e0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c08:	0023      	movs	r3, r4
 8002c0a:	0022      	movs	r2, r4
 8002c0c:	335e      	adds	r3, #94	; 0x5e
 8002c0e:	325c      	adds	r2, #92	; 0x5c
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	8811      	ldrh	r1, [r2, #0]
 8002c14:	1ac9      	subs	r1, r1, r3
 8002c16:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c18:	0020      	movs	r0, r4
 8002c1a:	f7ff ff17 	bl	8002a4c <HAL_UARTEx_RxEventCallback>
 8002c1e:	e7ab      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c20:	0026      	movs	r6, r4
 8002c22:	365e      	adds	r6, #94	; 0x5e
 8002c24:	8832      	ldrh	r2, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8002c26:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c28:	b292      	uxth	r2, r2
      if (  (huart->RxXferCount > 0U)
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d0a4      	beq.n	8002b78 <HAL_UART_IRQHandler+0x128>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c2e:	0021      	movs	r1, r4
 8002c30:	315c      	adds	r1, #92	; 0x5c
 8002c32:	8809      	ldrh	r1, [r1, #0]
 8002c34:	1a89      	subs	r1, r1, r2
 8002c36:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002c38:	2900      	cmp	r1, #0
 8002c3a:	d09d      	beq.n	8002b78 <HAL_UART_IRQHandler+0x128>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4e2a      	ldr	r6, [pc, #168]	; (8002ce8 <HAL_UART_IRQHandler+0x298>)
 8002c40:	4032      	ands	r2, r6
 8002c42:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4e29      	ldr	r6, [pc, #164]	; (8002cec <HAL_UART_IRQHandler+0x29c>)
 8002c48:	4032      	ands	r2, r6
 8002c4a:	609a      	str	r2, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	0022      	movs	r2, r4
 8002c4e:	2620      	movs	r6, #32
 8002c50:	3288      	adds	r2, #136	; 0x88
 8002c52:	6016      	str	r6, [r2, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c54:	66e0      	str	r0, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c56:	681a      	ldr	r2, [r3, #0]
        huart->RxISR = NULL;
 8002c58:	6720      	str	r0, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5a:	43aa      	bics	r2, r5
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e7db      	b.n	8002c18 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c60:	2580      	movs	r5, #128	; 0x80
 8002c62:	036d      	lsls	r5, r5, #13
 8002c64:	422a      	tst	r2, r5
 8002c66:	d006      	beq.n	8002c76 <HAL_UART_IRQHandler+0x226>
 8002c68:	0246      	lsls	r6, r0, #9
 8002c6a:	d504      	bpl.n	8002c76 <HAL_UART_IRQHandler+0x226>
    HAL_UARTEx_WakeupCallback(huart);
 8002c6c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c6e:	621d      	str	r5, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002c70:	f000 fd12 	bl	8003698 <HAL_UARTEx_WakeupCallback>
    return;
 8002c74:	e780      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c76:	2580      	movs	r5, #128	; 0x80
 8002c78:	422a      	tst	r2, r5
 8002c7a:	d007      	beq.n	8002c8c <HAL_UART_IRQHandler+0x23c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c7c:	2680      	movs	r6, #128	; 0x80
 8002c7e:	0436      	lsls	r6, r6, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c80:	400d      	ands	r5, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c82:	4030      	ands	r0, r6
 8002c84:	4328      	orrs	r0, r5
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_IRQHandler+0x23c>
    if (huart->TxISR != NULL)
 8002c88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002c8a:	e6f6      	b.n	8002a7a <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c8c:	2040      	movs	r0, #64	; 0x40
 8002c8e:	4202      	tst	r2, r0
 8002c90:	d00e      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x260>
 8002c92:	4201      	tst	r1, r0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x260>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4382      	bics	r2, r0
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	0023      	movs	r3, r4
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002ca4:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ca6:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002ca8:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8002caa:	f001 fb29 	bl	8004300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cae:	e763      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cb0:	0213      	lsls	r3, r2, #8
 8002cb2:	d505      	bpl.n	8002cc0 <HAL_UART_IRQHandler+0x270>
 8002cb4:	004b      	lsls	r3, r1, #1
 8002cb6:	d503      	bpl.n	8002cc0 <HAL_UART_IRQHandler+0x270>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cb8:	0020      	movs	r0, r4
 8002cba:	f000 fcef 	bl	800369c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002cbe:	e75b      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cc0:	01d3      	lsls	r3, r2, #7
 8002cc2:	d400      	bmi.n	8002cc6 <HAL_UART_IRQHandler+0x276>
 8002cc4:	e758      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
 8002cc6:	2900      	cmp	r1, #0
 8002cc8:	db00      	blt.n	8002ccc <HAL_UART_IRQHandler+0x27c>
 8002cca:	e755      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ccc:	0020      	movs	r0, r4
 8002cce:	f000 fce4 	bl	800369a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002cd2:	e751      	b.n	8002b78 <HAL_UART_IRQHandler+0x128>
 8002cd4:	0000080f 	.word	0x0000080f
 8002cd8:	10000001 	.word	0x10000001
 8002cdc:	04000120 	.word	0x04000120
 8002ce0:	08002a37 	.word	0x08002a37
 8002ce4:	fffffeff 	.word	0xfffffeff
 8002ce8:	fffffedf 	.word	0xfffffedf
 8002cec:	effffffe 	.word	0xeffffffe

08002cf0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf0:	0001      	movs	r1, r0
 8002cf2:	3188      	adds	r1, #136	; 0x88
 8002cf4:	680a      	ldr	r2, [r1, #0]
{
 8002cf6:	b570      	push	{r4, r5, r6, lr}
 8002cf8:	6803      	ldr	r3, [r0, #0]
 8002cfa:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cfc:	2a22      	cmp	r2, #34	; 0x22
 8002cfe:	d134      	bne.n	8002d6a <UART_RxISR_8BIT+0x7a>
  uint16_t uhMask = huart->Mask;
 8002d00:	0002      	movs	r2, r0
 8002d02:	3260      	adds	r2, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002d0c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8002d0e:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8002d10:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d12:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8002d14:	3301      	adds	r3, #1
 8002d16:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d18:	8813      	ldrh	r3, [r2, #0]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002d20:	8813      	ldrh	r3, [r2, #0]
 8002d22:	b298      	uxth	r0, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11b      	bne.n	8002d60 <UART_RxISR_8BIT+0x70>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	4d12      	ldr	r5, [pc, #72]	; (8002d74 <UART_RxISR_8BIT+0x84>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	402a      	ands	r2, r5
 8002d30:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	3523      	adds	r5, #35	; 0x23
 8002d36:	35ff      	adds	r5, #255	; 0xff
 8002d38:	43aa      	bics	r2, r5
 8002d3a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	600a      	str	r2, [r1, #0]
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      huart->RxISR = NULL;
 8002d42:	6720      	str	r0, [r4, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	42aa      	cmp	r2, r5
 8002d46:	d10c      	bne.n	8002d62 <UART_RxISR_8BIT+0x72>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	2110      	movs	r1, #16
 8002d4a:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d4c:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4e:	438a      	bics	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d52:	0023      	movs	r3, r4
 8002d54:	335c      	adds	r3, #92	; 0x5c
 8002d56:	8819      	ldrh	r1, [r3, #0]
 8002d58:	f7ff fe78 	bl	8002a4c <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8002d62:	0020      	movs	r0, r4
 8002d64:	f001 faf6 	bl	8004354 <HAL_UART_RxCpltCallback>
 8002d68:	e7f8      	b.n	8002d5c <UART_RxISR_8BIT+0x6c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	e7f5      	b.n	8002d60 <UART_RxISR_8BIT+0x70>
 8002d74:	fffffedf 	.word	0xfffffedf

08002d78 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d78:	0001      	movs	r1, r0
 8002d7a:	3188      	adds	r1, #136	; 0x88
 8002d7c:	680a      	ldr	r2, [r1, #0]
{
 8002d7e:	b570      	push	{r4, r5, r6, lr}
 8002d80:	6803      	ldr	r3, [r0, #0]
 8002d82:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d84:	2a22      	cmp	r2, #34	; 0x22
 8002d86:	d132      	bne.n	8002dee <UART_RxISR_16BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8002d88:	0025      	movs	r5, r4
 8002d8a:	3560      	adds	r5, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d8e:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d90:	6da2      	ldr	r2, [r4, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d92:	4028      	ands	r0, r5
 8002d94:	8010      	strh	r0, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002d96:	0020      	movs	r0, r4
    huart->pRxBuffPtr += 2U;
 8002d98:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8002d9a:	305e      	adds	r0, #94	; 0x5e
    huart->pRxBuffPtr += 2U;
 8002d9c:	65a2      	str	r2, [r4, #88]	; 0x58
    huart->RxXferCount--;
 8002d9e:	8802      	ldrh	r2, [r0, #0]
 8002da0:	3a01      	subs	r2, #1
 8002da2:	b292      	uxth	r2, r2
 8002da4:	8002      	strh	r2, [r0, #0]

    if (huart->RxXferCount == 0U)
 8002da6:	8802      	ldrh	r2, [r0, #0]
 8002da8:	b290      	uxth	r0, r2
 8002daa:	2a00      	cmp	r2, #0
 8002dac:	d11a      	bne.n	8002de4 <UART_RxISR_16BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4d11      	ldr	r5, [pc, #68]	; (8002df8 <UART_RxISR_16BIT+0x80>)
 8002db2:	402a      	ands	r2, r5
 8002db4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	3523      	adds	r5, #35	; 0x23
 8002dba:	35ff      	adds	r5, #255	; 0xff
 8002dbc:	43aa      	bics	r2, r5
 8002dbe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	600a      	str	r2, [r1, #0]
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      huart->RxISR = NULL;
 8002dc6:	6720      	str	r0, [r4, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc8:	42aa      	cmp	r2, r5
 8002dca:	d10c      	bne.n	8002de6 <UART_RxISR_16BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dcc:	2110      	movs	r1, #16
 8002dce:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd0:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd6:	0023      	movs	r3, r4
 8002dd8:	335c      	adds	r3, #92	; 0x5c
 8002dda:	8819      	ldrh	r1, [r3, #0]
 8002ddc:	f7ff fe36 	bl	8002a4c <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	2300      	movs	r3, #0
 8002de2:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8002de6:	0020      	movs	r0, r4
 8002de8:	f001 fab4 	bl	8004354 <HAL_UART_RxCpltCallback>
 8002dec:	e7f8      	b.n	8002de0 <UART_RxISR_16BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002dee:	2208      	movs	r2, #8
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	e7f5      	b.n	8002de4 <UART_RxISR_16BIT+0x6c>
 8002df8:	fffffedf 	.word	0xfffffedf

08002dfc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002dfe:	6803      	ldr	r3, [r0, #0]
{
 8002e00:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002e02:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002e04:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002e06:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002e08:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	3288      	adds	r2, #136	; 0x88
 8002e0e:	6812      	ldr	r2, [r2, #0]
{
 8002e10:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e12:	2a22      	cmp	r2, #34	; 0x22
 8002e14:	d000      	beq.n	8002e18 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8002e16:	e08d      	b.n	8002f34 <UART_RxISR_8BIT_FIFOEN+0x138>
  uint16_t  uhMask = huart->Mask;
 8002e18:	0003      	movs	r3, r0
 8002e1a:	3360      	adds	r3, #96	; 0x60
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002e20:	0003      	movs	r3, r0
 8002e22:	3368      	adds	r3, #104	; 0x68
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e28:	0022      	movs	r2, r4
 8002e2a:	9b03      	ldr	r3, [sp, #12]
 8002e2c:	325e      	adds	r2, #94	; 0x5e
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <UART_RxISR_8BIT_FIFOEN+0x3c>
 8002e32:	2320      	movs	r3, #32
 8002e34:	421d      	tst	r5, r3
 8002e36:	d115      	bne.n	8002e64 <UART_RxISR_8BIT_FIFOEN+0x68>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002e38:	8813      	ldrh	r3, [r2, #0]
 8002e3a:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00f      	beq.n	8002e60 <UART_RxISR_8BIT_FIFOEN+0x64>
 8002e40:	0023      	movs	r3, r4
 8002e42:	3368      	adds	r3, #104	; 0x68
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d90a      	bls.n	8002e60 <UART_RxISR_8BIT_FIFOEN+0x64>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	493c      	ldr	r1, [pc, #240]	; (8002f40 <UART_RxISR_8BIT_FIFOEN+0x144>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	400a      	ands	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002e54:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <UART_RxISR_8BIT_FIFOEN+0x148>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e56:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8002e58:	6722      	str	r2, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e60:	b005      	add	sp, #20
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e64:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e66:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e6e:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8002e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e72:	3301      	adds	r3, #1
 8002e74:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002e76:	8813      	ldrh	r3, [r2, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e7e:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002e80:	6822      	ldr	r2, [r4, #0]
 8002e82:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e84:	421d      	tst	r5, r3
 8002e86:	d02d      	beq.n	8002ee4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e88:	3b06      	subs	r3, #6
 8002e8a:	421d      	tst	r5, r3
 8002e8c:	d008      	beq.n	8002ea0 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8002e8e:	9902      	ldr	r1, [sp, #8]
 8002e90:	05c9      	lsls	r1, r1, #23
 8002e92:	d505      	bpl.n	8002ea0 <UART_RxISR_8BIT_FIFOEN+0xa4>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e94:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e96:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e98:	318c      	adds	r1, #140	; 0x8c
 8002e9a:	6808      	ldr	r0, [r1, #0]
 8002e9c:	4303      	orrs	r3, r0
 8002e9e:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	421d      	tst	r5, r3
 8002ea4:	d008      	beq.n	8002eb8 <UART_RxISR_8BIT_FIFOEN+0xbc>
 8002ea6:	07f1      	lsls	r1, r6, #31
 8002ea8:	d506      	bpl.n	8002eb8 <UART_RxISR_8BIT_FIFOEN+0xbc>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eaa:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eac:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eae:	318c      	adds	r1, #140	; 0x8c
 8002eb0:	6808      	ldr	r0, [r1, #0]
 8002eb2:	18db      	adds	r3, r3, r3
 8002eb4:	4303      	orrs	r3, r0
 8002eb6:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eb8:	2304      	movs	r3, #4
 8002eba:	421d      	tst	r5, r3
 8002ebc:	d008      	beq.n	8002ed0 <UART_RxISR_8BIT_FIFOEN+0xd4>
 8002ebe:	07f1      	lsls	r1, r6, #31
 8002ec0:	d506      	bpl.n	8002ed0 <UART_RxISR_8BIT_FIFOEN+0xd4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ec2:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec4:	0022      	movs	r2, r4
 8002ec6:	328c      	adds	r2, #140	; 0x8c
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	3b02      	subs	r3, #2
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed0:	0027      	movs	r7, r4
 8002ed2:	378c      	adds	r7, #140	; 0x8c
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <UART_RxISR_8BIT_FIFOEN+0xe8>
          HAL_UART_ErrorCallback(huart);
 8002eda:	0020      	movs	r0, r4
 8002edc:	f7ff fdaa 	bl	8002a34 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8002ee4:	0023      	movs	r3, r4
 8002ee6:	335e      	adds	r3, #94	; 0x5e
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b299      	uxth	r1, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d19b      	bne.n	8002e28 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	4815      	ldr	r0, [pc, #84]	; (8002f48 <UART_RxISR_8BIT_FIFOEN+0x14c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4002      	ands	r2, r0
 8002ef8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <UART_RxISR_8BIT_FIFOEN+0x150>)
 8002efe:	4002      	ands	r2, r0
 8002f00:	609a      	str	r2, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8002f02:	0022      	movs	r2, r4
 8002f04:	2020      	movs	r0, #32
 8002f06:	3288      	adds	r2, #136	; 0x88
 8002f08:	6010      	str	r0, [r2, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002f0c:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	2a01      	cmp	r2, #1
 8002f10:	d10c      	bne.n	8002f2c <UART_RxISR_8BIT_FIFOEN+0x130>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f12:	2110      	movs	r1, #16
 8002f14:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f16:	0020      	movs	r0, r4
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	438a      	bics	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f1c:	0023      	movs	r3, r4
 8002f1e:	335c      	adds	r3, #92	; 0x5c
 8002f20:	8819      	ldrh	r1, [r3, #0]
 8002f22:	f7ff fd93 	bl	8002a4c <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	2300      	movs	r3, #0
 8002f28:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002f2a:	e77d      	b.n	8002e28 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	f001 fa11 	bl	8004354 <HAL_UART_RxCpltCallback>
 8002f32:	e7f8      	b.n	8002f26 <UART_RxISR_8BIT_FIFOEN+0x12a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f34:	2208      	movs	r2, #8
 8002f36:	6999      	ldr	r1, [r3, #24]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]
}
 8002f3c:	e790      	b.n	8002e60 <UART_RxISR_8BIT_FIFOEN+0x64>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	efffffff 	.word	0xefffffff
 8002f44:	08002cf1 	.word	0x08002cf1
 8002f48:	fffffeff 	.word	0xfffffeff
 8002f4c:	effffffe 	.word	0xeffffffe

08002f50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f52:	6803      	ldr	r3, [r0, #0]
{
 8002f54:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f56:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f58:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f5a:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f5c:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5e:	0002      	movs	r2, r0
 8002f60:	3288      	adds	r2, #136	; 0x88
 8002f62:	6812      	ldr	r2, [r2, #0]
{
 8002f64:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f66:	2a22      	cmp	r2, #34	; 0x22
 8002f68:	d000      	beq.n	8002f6c <UART_RxISR_16BIT_FIFOEN+0x1c>
 8002f6a:	e08b      	b.n	8003084 <UART_RxISR_16BIT_FIFOEN+0x134>
  uint16_t  uhMask = huart->Mask;
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	3360      	adds	r3, #96	; 0x60
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002f74:	0003      	movs	r3, r0
 8002f76:	3368      	adds	r3, #104	; 0x68
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002f7c:	0021      	movs	r1, r4
 8002f7e:	9b03      	ldr	r3, [sp, #12]
 8002f80:	315e      	adds	r1, #94	; 0x5e
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8002f86:	2320      	movs	r3, #32
 8002f88:	421d      	tst	r5, r3
 8002f8a:	d115      	bne.n	8002fb8 <UART_RxISR_16BIT_FIFOEN+0x68>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002f8c:	880b      	ldrh	r3, [r1, #0]
 8002f8e:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00f      	beq.n	8002fb4 <UART_RxISR_16BIT_FIFOEN+0x64>
 8002f94:	0023      	movs	r3, r4
 8002f96:	3368      	adds	r3, #104	; 0x68
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d90a      	bls.n	8002fb4 <UART_RxISR_16BIT_FIFOEN+0x64>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	493b      	ldr	r1, [pc, #236]	; (8003090 <UART_RxISR_16BIT_FIFOEN+0x140>)
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002fa8:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <UART_RxISR_16BIT_FIFOEN+0x144>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002faa:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8002fac:	6722      	str	r2, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002fae:	2220      	movs	r2, #32
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002fb4:	b005      	add	sp, #20
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fb8:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002fba:	9d01      	ldr	r5, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002fbe:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8002fc0:	4028      	ands	r0, r5
 8002fc2:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002fc4:	3202      	adds	r2, #2
 8002fc6:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002fc8:	880a      	ldrh	r2, [r1, #0]
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	800a      	strh	r2, [r1, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002fd0:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002fd2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002fd4:	4215      	tst	r5, r2
 8002fd6:	d02d      	beq.n	8003034 <UART_RxISR_16BIT_FIFOEN+0xe4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fd8:	3a06      	subs	r2, #6
 8002fda:	4215      	tst	r5, r2
 8002fdc:	d008      	beq.n	8002ff0 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8002fde:	9902      	ldr	r1, [sp, #8]
 8002fe0:	05c9      	lsls	r1, r1, #23
 8002fe2:	d505      	bpl.n	8002ff0 <UART_RxISR_16BIT_FIFOEN+0xa0>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe4:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fe6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe8:	318c      	adds	r1, #140	; 0x8c
 8002fea:	6808      	ldr	r0, [r1, #0]
 8002fec:	4302      	orrs	r2, r0
 8002fee:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4215      	tst	r5, r2
 8002ff4:	d008      	beq.n	8003008 <UART_RxISR_16BIT_FIFOEN+0xb8>
 8002ff6:	07f1      	lsls	r1, r6, #31
 8002ff8:	d506      	bpl.n	8003008 <UART_RxISR_16BIT_FIFOEN+0xb8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ffa:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ffc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ffe:	318c      	adds	r1, #140	; 0x8c
 8003000:	6808      	ldr	r0, [r1, #0]
 8003002:	1892      	adds	r2, r2, r2
 8003004:	4302      	orrs	r2, r0
 8003006:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003008:	2204      	movs	r2, #4
 800300a:	4215      	tst	r5, r2
 800300c:	d008      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xd0>
 800300e:	07f1      	lsls	r1, r6, #31
 8003010:	d506      	bpl.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xd0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003012:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003014:	0022      	movs	r2, r4
 8003016:	2302      	movs	r3, #2
 8003018:	328c      	adds	r2, #140	; 0x8c
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003020:	0027      	movs	r7, r4
 8003022:	378c      	adds	r7, #140	; 0x8c
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <UART_RxISR_16BIT_FIFOEN+0xe4>
          HAL_UART_ErrorCallback(huart);
 800302a:	0020      	movs	r0, r4
 800302c:	f7ff fd02 	bl	8002a34 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	2300      	movs	r3, #0
 8003032:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003034:	0023      	movs	r3, r4
 8003036:	335e      	adds	r3, #94	; 0x5e
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b299      	uxth	r1, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d19d      	bne.n	8002f7c <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	4815      	ldr	r0, [pc, #84]	; (8003098 <UART_RxISR_16BIT_FIFOEN+0x148>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4002      	ands	r2, r0
 8003048:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4813      	ldr	r0, [pc, #76]	; (800309c <UART_RxISR_16BIT_FIFOEN+0x14c>)
 800304e:	4002      	ands	r2, r0
 8003050:	609a      	str	r2, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003052:	0022      	movs	r2, r4
 8003054:	2020      	movs	r0, #32
 8003056:	3288      	adds	r2, #136	; 0x88
 8003058:	6010      	str	r0, [r2, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800305c:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305e:	2a01      	cmp	r2, #1
 8003060:	d10c      	bne.n	800307c <UART_RxISR_16BIT_FIFOEN+0x12c>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003062:	2110      	movs	r1, #16
 8003064:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003066:	0020      	movs	r0, r4
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	438a      	bics	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800306c:	0023      	movs	r3, r4
 800306e:	335c      	adds	r3, #92	; 0x5c
 8003070:	8819      	ldrh	r1, [r3, #0]
 8003072:	f7ff fceb 	bl	8002a4c <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	2300      	movs	r3, #0
 8003078:	66e3      	str	r3, [r4, #108]	; 0x6c
 800307a:	e77f      	b.n	8002f7c <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800307c:	0020      	movs	r0, r4
 800307e:	f001 f969 	bl	8004354 <HAL_UART_RxCpltCallback>
 8003082:	e7f8      	b.n	8003076 <UART_RxISR_16BIT_FIFOEN+0x126>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003084:	2208      	movs	r2, #8
 8003086:	6999      	ldr	r1, [r3, #24]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
}
 800308c:	e792      	b.n	8002fb4 <UART_RxISR_16BIT_FIFOEN+0x64>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	efffffff 	.word	0xefffffff
 8003094:	08002d79 	.word	0x08002d79
 8003098:	fffffeff 	.word	0xfffffeff
 800309c:	effffffe 	.word	0xeffffffe

080030a0 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80030a0:	0003      	movs	r3, r0
  temp2 = huart->RxState;
 80030a2:	3088      	adds	r0, #136	; 0x88
  temp1 = huart->gState;
 80030a4:	3308      	adds	r3, #8
 80030a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  temp2 = huart->RxState;
 80030a8:	6800      	ldr	r0, [r0, #0]
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80030aa:	4310      	orrs	r0, r2
}
 80030ac:	4770      	bx	lr
	...

080030b0 <UART_SetConfig>:
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80030b4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b6:	69c3      	ldr	r3, [r0, #28]
 80030b8:	6881      	ldr	r1, [r0, #8]
 80030ba:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 80030bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030be:	4301      	orrs	r1, r0
 80030c0:	6960      	ldr	r0, [r4, #20]
 80030c2:	4301      	orrs	r1, r0
 80030c4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c6:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80030c8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ca:	4d70      	ldr	r5, [pc, #448]	; (800328c <UART_SetConfig+0x1dc>)
 80030cc:	4028      	ands	r0, r5
 80030ce:	4301      	orrs	r1, r0
 80030d0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d2:	6851      	ldr	r1, [r2, #4]
 80030d4:	486e      	ldr	r0, [pc, #440]	; (8003290 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030d6:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	4001      	ands	r1, r0
 80030da:	68e0      	ldr	r0, [r4, #12]
 80030dc:	4301      	orrs	r1, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030de:	486d      	ldr	r0, [pc, #436]	; (8003294 <UART_SetConfig+0x1e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e2:	4282      	cmp	r2, r0
 80030e4:	d001      	beq.n	80030ea <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80030e6:	6a21      	ldr	r1, [r4, #32]
 80030e8:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ea:	6891      	ldr	r1, [r2, #8]
 80030ec:	4e6a      	ldr	r6, [pc, #424]	; (8003298 <UART_SetConfig+0x1e8>)
 80030ee:	4031      	ands	r1, r6
 80030f0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030f2:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f4:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f8:	43a9      	bics	r1, r5
 80030fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030fc:	4329      	orrs	r1, r5
 80030fe:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003100:	4966      	ldr	r1, [pc, #408]	; (800329c <UART_SetConfig+0x1ec>)
 8003102:	428a      	cmp	r2, r1
 8003104:	d116      	bne.n	8003134 <UART_SetConfig+0x84>
 8003106:	2103      	movs	r1, #3
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <UART_SetConfig+0x1f0>)
 800310a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800310c:	400a      	ands	r2, r1
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	3a01      	subs	r2, #1
 8003112:	0209      	lsls	r1, r1, #8
 8003114:	2a02      	cmp	r2, #2
 8003116:	d900      	bls.n	800311a <UART_SetConfig+0x6a>
 8003118:	e08a      	b.n	8003230 <UART_SetConfig+0x180>
 800311a:	4862      	ldr	r0, [pc, #392]	; (80032a4 <UART_SetConfig+0x1f4>)
 800311c:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311e:	428b      	cmp	r3, r1
 8003120:	d060      	beq.n	80031e4 <UART_SetConfig+0x134>
    switch (clocksource)
 8003122:	2808      	cmp	r0, #8
 8003124:	d81c      	bhi.n	8003160 <UART_SetConfig+0xb0>
 8003126:	f7fc fff9 	bl	800011c <__gnu_thumb1_case_uqi>
 800312a:	1bab      	.short	0x1bab
 800312c:	1b7e1b81 	.word	0x1b7e1b81
 8003130:	1b1b      	.short	0x1b1b
 8003132:	6b          	.byte	0x6b
 8003133:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003134:	495c      	ldr	r1, [pc, #368]	; (80032a8 <UART_SetConfig+0x1f8>)
 8003136:	428a      	cmp	r2, r1
 8003138:	d100      	bne.n	800313c <UART_SetConfig+0x8c>
 800313a:	e09d      	b.n	8003278 <UART_SetConfig+0x1c8>
 800313c:	4282      	cmp	r2, r0
 800313e:	d10f      	bne.n	8003160 <UART_SetConfig+0xb0>
 8003140:	22c0      	movs	r2, #192	; 0xc0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <UART_SetConfig+0x1f0>)
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	0109      	lsls	r1, r1, #4
 800314c:	4013      	ands	r3, r2
 800314e:	428b      	cmp	r3, r1
 8003150:	d01b      	beq.n	800318a <UART_SetConfig+0xda>
 8003152:	d807      	bhi.n	8003164 <UART_SetConfig+0xb4>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <UART_SetConfig+0xbe>
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	00d2      	lsls	r2, r2, #3
 800315c:	4293      	cmp	r3, r2
 800315e:	d011      	beq.n	8003184 <UART_SetConfig+0xd4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003160:	2001      	movs	r0, #1
 8003162:	e009      	b.n	8003178 <UART_SetConfig+0xc8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003164:	4293      	cmp	r3, r2
 8003166:	d1fb      	bne.n	8003160 <UART_SetConfig+0xb0>
 8003168:	2680      	movs	r6, #128	; 0x80
 800316a:	0236      	lsls	r6, r6, #8
 800316c:	e00e      	b.n	800318c <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800316e:	f7fe fff9 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8003174:	d10a      	bne.n	800318c <UART_SetConfig+0xdc>
 8003176:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <UART_SetConfig+0x1fc>)
 800317a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8003180:	6763      	str	r3, [r4, #116]	; 0x74
}
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8003184:	f7fe fefc 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003188:	e7f3      	b.n	8003172 <UART_SetConfig+0xc2>
        pclk = (uint32_t) HSI_VALUE;
 800318a:	4e49      	ldr	r6, [pc, #292]	; (80032b0 <UART_SetConfig+0x200>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800318c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800318e:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <UART_SetConfig+0x204>)
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	5a9f      	ldrh	r7, [r3, r2]
 8003194:	0030      	movs	r0, r6
 8003196:	0039      	movs	r1, r7
 8003198:	f7fc ffde 	bl	8000158 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800319c:	2303      	movs	r3, #3
 800319e:	6865      	ldr	r5, [r4, #4]
 80031a0:	436b      	muls	r3, r5
 80031a2:	4283      	cmp	r3, r0
 80031a4:	d8dc      	bhi.n	8003160 <UART_SetConfig+0xb0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031a6:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031a8:	4283      	cmp	r3, r0
 80031aa:	d3d9      	bcc.n	8003160 <UART_SetConfig+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ac:	2300      	movs	r3, #0
 80031ae:	003a      	movs	r2, r7
 80031b0:	0030      	movs	r0, r6
 80031b2:	0019      	movs	r1, r3
 80031b4:	f7fd f946 	bl	8000444 <__aeabi_uldivmod>
 80031b8:	2700      	movs	r7, #0
 80031ba:	0e06      	lsrs	r6, r0, #24
 80031bc:	020b      	lsls	r3, r1, #8
 80031be:	4333      	orrs	r3, r6
 80031c0:	0202      	lsls	r2, r0, #8
 80031c2:	086e      	lsrs	r6, r5, #1
 80031c4:	1992      	adds	r2, r2, r6
 80031c6:	417b      	adcs	r3, r7
 80031c8:	0010      	movs	r0, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	002a      	movs	r2, r5
 80031ce:	003b      	movs	r3, r7
 80031d0:	f7fd f938 	bl	8000444 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <UART_SetConfig+0x208>)
 80031d6:	18c2      	adds	r2, r0, r3
 80031d8:	4b38      	ldr	r3, [pc, #224]	; (80032bc <UART_SetConfig+0x20c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031da:	429a      	cmp	r2, r3
 80031dc:	d8c0      	bhi.n	8003160 <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	60d8      	str	r0, [r3, #12]
 80031e2:	e7c8      	b.n	8003176 <UART_SetConfig+0xc6>
    switch (clocksource)
 80031e4:	2808      	cmp	r0, #8
 80031e6:	d8bb      	bhi.n	8003160 <UART_SetConfig+0xb0>
 80031e8:	f7fc ff8e 	bl	8000108 <__gnu_thumb1_case_sqi>
 80031ec:	ba08ba24 	.word	0xba08ba24
 80031f0:	bababa05 	.word	0xbababa05
 80031f4:	28          	.byte	0x28
 80031f5:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	f7fe fec3 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80031fa:	e01d      	b.n	8003238 <UART_SetConfig+0x188>
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <UART_SetConfig+0x200>)
 80031fe:	e01d      	b.n	800323c <UART_SetConfig+0x18c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003200:	2080      	movs	r0, #128	; 0x80
 8003202:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003206:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <UART_SetConfig+0x204>)
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	5a99      	ldrh	r1, [r3, r2]
 800320c:	f7fc ffa4 	bl	8000158 <__udivsi3>
 8003210:	6865      	ldr	r5, [r4, #4]
 8003212:	086b      	lsrs	r3, r5, #1
 8003214:	18c0      	adds	r0, r0, r3
 8003216:	0029      	movs	r1, r5
 8003218:	f7fc ff9e 	bl	8000158 <__udivsi3>
 800321c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	0002      	movs	r2, r0
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <UART_SetConfig+0x210>)
 8003222:	3a10      	subs	r2, #16
 8003224:	e7d9      	b.n	80031da <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe feab 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
        break;
 800322a:	e02b      	b.n	8003284 <UART_SetConfig+0x1d4>
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4820      	ldr	r0, [pc, #128]	; (80032b0 <UART_SetConfig+0x200>)
 800322e:	e7e9      	b.n	8003204 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003230:	428b      	cmp	r3, r1
 8003232:	d125      	bne.n	8003280 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7fe ff96 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003238:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800323a:	d09c      	beq.n	8003176 <UART_SetConfig+0xc6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800323c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800323e:	491d      	ldr	r1, [pc, #116]	; (80032b4 <UART_SetConfig+0x204>)
 8003240:	0052      	lsls	r2, r2, #1
 8003242:	5a51      	ldrh	r1, [r2, r1]
 8003244:	0018      	movs	r0, r3
 8003246:	f7fc ff87 	bl	8000158 <__udivsi3>
 800324a:	6865      	ldr	r5, [r4, #4]
 800324c:	0040      	lsls	r0, r0, #1
 800324e:	086b      	lsrs	r3, r5, #1
 8003250:	0029      	movs	r1, r5
 8003252:	18c0      	adds	r0, r0, r3
 8003254:	f7fc ff80 	bl	8000158 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	4919      	ldr	r1, [pc, #100]	; (80032c0 <UART_SetConfig+0x210>)
 800325a:	b282      	uxth	r2, r0
 800325c:	3a10      	subs	r2, #16
 800325e:	0403      	lsls	r3, r0, #16
 8003260:	428a      	cmp	r2, r1
 8003262:	d900      	bls.n	8003266 <UART_SetConfig+0x1b6>
 8003264:	e77c      	b.n	8003160 <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003266:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003268:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326a:	4390      	bics	r0, r2
 800326c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800326e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003270:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003272:	4318      	orrs	r0, r3
 8003274:	60d0      	str	r0, [r2, #12]
 8003276:	e77e      	b.n	8003176 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	0212      	lsls	r2, r2, #8
 800327c:	4293      	cmp	r3, r2
 800327e:	d0d9      	beq.n	8003234 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe ff70 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003284:	2800      	cmp	r0, #0
 8003286:	d100      	bne.n	800328a <UART_SetConfig+0x1da>
 8003288:	e775      	b.n	8003176 <UART_SetConfig+0xc6>
 800328a:	e7bb      	b.n	8003204 <UART_SetConfig+0x154>
 800328c:	cfff69f3 	.word	0xcfff69f3
 8003290:	ffffcfff 	.word	0xffffcfff
 8003294:	40008000 	.word	0x40008000
 8003298:	11fff4ff 	.word	0x11fff4ff
 800329c:	40013800 	.word	0x40013800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08006168 	.word	0x08006168
 80032a8:	40004400 	.word	0x40004400
 80032ac:	00010001 	.word	0x00010001
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	0800616c 	.word	0x0800616c
 80032b8:	fffffd00 	.word	0xfffffd00
 80032bc:	000ffcff 	.word	0x000ffcff
 80032c0:	0000ffef 	.word	0x0000ffef

080032c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80032c6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c8:	07da      	lsls	r2, r3, #31
 80032ca:	d506      	bpl.n	80032da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032cc:	6801      	ldr	r1, [r0, #0]
 80032ce:	4c28      	ldr	r4, [pc, #160]	; (8003370 <UART_AdvFeatureConfig+0xac>)
 80032d0:	684a      	ldr	r2, [r1, #4]
 80032d2:	4022      	ands	r2, r4
 80032d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80032d6:	4322      	orrs	r2, r4
 80032d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032da:	079a      	lsls	r2, r3, #30
 80032dc:	d506      	bpl.n	80032ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032de:	6801      	ldr	r1, [r0, #0]
 80032e0:	4c24      	ldr	r4, [pc, #144]	; (8003374 <UART_AdvFeatureConfig+0xb0>)
 80032e2:	684a      	ldr	r2, [r1, #4]
 80032e4:	4022      	ands	r2, r4
 80032e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80032e8:	4322      	orrs	r2, r4
 80032ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ec:	075a      	lsls	r2, r3, #29
 80032ee:	d506      	bpl.n	80032fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f0:	6801      	ldr	r1, [r0, #0]
 80032f2:	4c21      	ldr	r4, [pc, #132]	; (8003378 <UART_AdvFeatureConfig+0xb4>)
 80032f4:	684a      	ldr	r2, [r1, #4]
 80032f6:	4022      	ands	r2, r4
 80032f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80032fa:	4322      	orrs	r2, r4
 80032fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032fe:	071a      	lsls	r2, r3, #28
 8003300:	d506      	bpl.n	8003310 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003302:	6801      	ldr	r1, [r0, #0]
 8003304:	4c1d      	ldr	r4, [pc, #116]	; (800337c <UART_AdvFeatureConfig+0xb8>)
 8003306:	684a      	ldr	r2, [r1, #4]
 8003308:	4022      	ands	r2, r4
 800330a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800330c:	4322      	orrs	r2, r4
 800330e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003310:	06da      	lsls	r2, r3, #27
 8003312:	d506      	bpl.n	8003322 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003314:	6801      	ldr	r1, [r0, #0]
 8003316:	4c1a      	ldr	r4, [pc, #104]	; (8003380 <UART_AdvFeatureConfig+0xbc>)
 8003318:	688a      	ldr	r2, [r1, #8]
 800331a:	4022      	ands	r2, r4
 800331c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800331e:	4322      	orrs	r2, r4
 8003320:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003322:	069a      	lsls	r2, r3, #26
 8003324:	d506      	bpl.n	8003334 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003326:	6801      	ldr	r1, [r0, #0]
 8003328:	4c16      	ldr	r4, [pc, #88]	; (8003384 <UART_AdvFeatureConfig+0xc0>)
 800332a:	688a      	ldr	r2, [r1, #8]
 800332c:	4022      	ands	r2, r4
 800332e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003330:	4322      	orrs	r2, r4
 8003332:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003334:	065a      	lsls	r2, r3, #25
 8003336:	d510      	bpl.n	800335a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	6801      	ldr	r1, [r0, #0]
 800333a:	4d13      	ldr	r5, [pc, #76]	; (8003388 <UART_AdvFeatureConfig+0xc4>)
 800333c:	684a      	ldr	r2, [r1, #4]
 800333e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003340:	402a      	ands	r2, r5
 8003342:	4322      	orrs	r2, r4
 8003344:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	0352      	lsls	r2, r2, #13
 800334a:	4294      	cmp	r4, r2
 800334c:	d105      	bne.n	800335a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800334e:	684a      	ldr	r2, [r1, #4]
 8003350:	4c0e      	ldr	r4, [pc, #56]	; (800338c <UART_AdvFeatureConfig+0xc8>)
 8003352:	4022      	ands	r2, r4
 8003354:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003356:	4322      	orrs	r2, r4
 8003358:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	d506      	bpl.n	800336c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800335e:	6802      	ldr	r2, [r0, #0]
 8003360:	490b      	ldr	r1, [pc, #44]	; (8003390 <UART_AdvFeatureConfig+0xcc>)
 8003362:	6853      	ldr	r3, [r2, #4]
 8003364:	400b      	ands	r3, r1
 8003366:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003368:	430b      	orrs	r3, r1
 800336a:	6053      	str	r3, [r2, #4]
}
 800336c:	bd30      	pop	{r4, r5, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	fffdffff 	.word	0xfffdffff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff7fff 	.word	0xffff7fff
 8003380:	ffffefff 	.word	0xffffefff
 8003384:	ffffdfff 	.word	0xffffdfff
 8003388:	ffefffff 	.word	0xffefffff
 800338c:	ff9fffff 	.word	0xff9fffff
 8003390:	fff7ffff 	.word	0xfff7ffff

08003394 <UART_WaitOnFlagUntilTimeout>:
{
 8003394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003396:	2780      	movs	r7, #128	; 0x80
{
 8003398:	0004      	movs	r4, r0
 800339a:	000d      	movs	r5, r1
 800339c:	0016      	movs	r6, r2
 800339e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	69d3      	ldr	r3, [r2, #28]
 80033a6:	402b      	ands	r3, r5
 80033a8:	1b5b      	subs	r3, r3, r5
 80033aa:	4259      	negs	r1, r3
 80033ac:	414b      	adcs	r3, r1
 80033ae:	42b3      	cmp	r3, r6
 80033b0:	d001      	beq.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80033b2:	2000      	movs	r0, #0
 80033b4:	e01f      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	9b08      	ldr	r3, [sp, #32]
 80033b8:	3301      	adds	r3, #1
 80033ba:	d0f3      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7fd fd64 	bl	8000e88 <HAL_GetTick>
 80033c0:	9b01      	ldr	r3, [sp, #4]
 80033c2:	9a08      	ldr	r2, [sp, #32]
 80033c4:	1ac0      	subs	r0, r0, r3
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	4290      	cmp	r0, r2
 80033ca:	d801      	bhi.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x3c>
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d113      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4916      	ldr	r1, [pc, #88]	; (800342c <UART_WaitOnFlagUntilTimeout+0x98>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	31a3      	adds	r1, #163	; 0xa3
 80033dc:	31ff      	adds	r1, #255	; 0xff
 80033de:	438a      	bics	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80033e2:	0022      	movs	r2, r4
 80033e4:	2320      	movs	r3, #32
 80033e6:	3208      	adds	r2, #8
 80033e8:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	3280      	adds	r2, #128	; 0x80
 80033ec:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 80033ee:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80033f0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80033f2:	3480      	adds	r4, #128	; 0x80
 80033f4:	7023      	strb	r3, [r4, #0]
}
 80033f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033f8:	2104      	movs	r1, #4
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	420a      	tst	r2, r1
 80033fe:	d0d0      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	423a      	tst	r2, r7
 8003404:	d0cd      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003406:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <UART_WaitOnFlagUntilTimeout+0x98>)
 800340c:	400a      	ands	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	31a3      	adds	r1, #163	; 0xa3
 8003414:	31ff      	adds	r1, #255	; 0xff
 8003416:	438a      	bics	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800341a:	0022      	movs	r2, r4
 800341c:	2320      	movs	r3, #32
 800341e:	3208      	adds	r2, #8
 8003420:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003422:	3280      	adds	r2, #128	; 0x80
 8003424:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003426:	6053      	str	r3, [r2, #4]
 8003428:	e7e1      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0x5a>
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	fffffe5f 	.word	0xfffffe5f

08003430 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	0003      	movs	r3, r0
{
 8003432:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	2600      	movs	r6, #0
{
 8003436:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	338c      	adds	r3, #140	; 0x8c
 800343a:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 800343c:	f7fd fd24 	bl	8000e88 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003440:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003442:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	071b      	lsls	r3, r3, #28
 8003448:	d419      	bmi.n	800347e <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	075b      	lsls	r3, r3, #29
 8003450:	d50a      	bpl.n	8003468 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <UART_CheckIdleState+0x68>)
 8003456:	2200      	movs	r2, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	0020      	movs	r0, r4
 800345c:	002b      	movs	r3, r5
 800345e:	03c9      	lsls	r1, r1, #15
 8003460:	f7ff ff98 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 8003464:	2800      	cmp	r0, #0
 8003466:	d115      	bne.n	8003494 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003468:	0022      	movs	r2, r4
 800346a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800346e:	3208      	adds	r2, #8
 8003470:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	3280      	adds	r2, #128	; 0x80
 8003474:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003478:	3480      	adds	r4, #128	; 0x80
 800347a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800347c:	e00b      	b.n	8003496 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <UART_CheckIdleState+0x68>)
 8003482:	0032      	movs	r2, r6
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	0389      	lsls	r1, r1, #14
 8003488:	0003      	movs	r3, r0
 800348a:	0020      	movs	r0, r4
 800348c:	f7ff ff82 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 8003490:	2800      	cmp	r0, #0
 8003492:	d0da      	beq.n	800344a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003494:	2003      	movs	r0, #3
}
 8003496:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003498:	01ffffff 	.word	0x01ffffff

0800349c <HAL_UART_Init>:
{
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
}
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80034a6:	0005      	movs	r5, r0
 80034a8:	3508      	adds	r5, #8
 80034aa:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80034b0:	0002      	movs	r2, r0
 80034b2:	3280      	adds	r2, #128	; 0x80
 80034b4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80034b6:	f7fd fc03 	bl	8000cc0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80034ba:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80034bc:	2101      	movs	r1, #1
 80034be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80034c2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80034c6:	438b      	bics	r3, r1
 80034c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ca:	f7ff fdf1 	bl	80030b0 <UART_SetConfig>
 80034ce:	2801      	cmp	r0, #1
 80034d0:	d0e7      	beq.n	80034a2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 80034d8:	0020      	movs	r0, r4
 80034da:	f7ff fef3 	bl	80032c4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	4907      	ldr	r1, [pc, #28]	; (8003500 <HAL_UART_Init+0x64>)
 80034e2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80034e4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	438a      	bics	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034f2:	2201      	movs	r2, #1
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80034fa:	f7ff ff99 	bl	8003430 <UART_CheckIdleState>
 80034fe:	e7d1      	b.n	80034a4 <HAL_UART_Init+0x8>
 8003500:	ffffb7ff 	.word	0xffffb7ff

08003504 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003504:	0003      	movs	r3, r0
{
 8003506:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->RxISR       = NULL;
 8003508:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 800350a:	2580      	movs	r5, #128	; 0x80
  huart->pRxBuffPtr  = pData;
 800350c:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 800350e:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8003510:	335c      	adds	r3, #92	; 0x5c
 8003512:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003514:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8003516:	016d      	lsls	r5, r5, #5
  huart->RxISR       = NULL;
 8003518:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800351a:	3304      	adds	r3, #4
 800351c:	42a9      	cmp	r1, r5
 800351e:	d136      	bne.n	800358e <UART_Start_Receive_IT+0x8a>
 8003520:	6904      	ldr	r4, [r0, #16]
 8003522:	2c00      	cmp	r4, #0
 8003524:	d131      	bne.n	800358a <UART_Start_Receive_IT+0x86>
 8003526:	4c2a      	ldr	r4, [pc, #168]	; (80035d0 <UART_Start_Receive_IT+0xcc>)
 8003528:	801c      	strh	r4, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	0003      	movs	r3, r0
 800352c:	2400      	movs	r4, #0
 800352e:	338c      	adds	r3, #140	; 0x8c
 8003530:	601c      	str	r4, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003532:	3422      	adds	r4, #34	; 0x22
 8003534:	3b04      	subs	r3, #4
 8003536:	601c      	str	r4, [r3, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	3c21      	subs	r4, #33	; 0x21
 800353c:	689d      	ldr	r5, [r3, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800353e:	2680      	movs	r6, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	432c      	orrs	r4, r5
 8003542:	609c      	str	r4, [r3, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003544:	2580      	movs	r5, #128	; 0x80
 8003546:	0004      	movs	r4, r0
 8003548:	6e47      	ldr	r7, [r0, #100]	; 0x64
 800354a:	05b6      	lsls	r6, r6, #22
 800354c:	016d      	lsls	r5, r5, #5
 800354e:	3480      	adds	r4, #128	; 0x80
 8003550:	42b7      	cmp	r7, r6
 8003552:	d12c      	bne.n	80035ae <UART_Start_Receive_IT+0xaa>
 8003554:	0006      	movs	r6, r0
 8003556:	3668      	adds	r6, #104	; 0x68
 8003558:	8836      	ldrh	r6, [r6, #0]
 800355a:	4296      	cmp	r6, r2
 800355c:	d827      	bhi.n	80035ae <UART_Start_Receive_IT+0xaa>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <UART_Start_Receive_IT+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003560:	42a9      	cmp	r1, r5
 8003562:	d103      	bne.n	800356c <UART_Start_Receive_IT+0x68>
 8003564:	6901      	ldr	r1, [r0, #16]
 8003566:	2900      	cmp	r1, #0
 8003568:	d100      	bne.n	800356c <UART_Start_Receive_IT+0x68>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <UART_Start_Receive_IT+0xd4>)
 800356c:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800356e:	2200      	movs	r2, #0
 8003570:	7022      	strb	r2, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	3201      	adds	r2, #1
 8003576:	32ff      	adds	r2, #255	; 0xff
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	0552      	lsls	r2, r2, #21
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
}
 8003586:	2000      	movs	r0, #0
 8003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UART_MASK_COMPUTATION(huart);
 800358a:	24ff      	movs	r4, #255	; 0xff
 800358c:	e7cc      	b.n	8003528 <UART_Start_Receive_IT+0x24>
 800358e:	2900      	cmp	r1, #0
 8003590:	d104      	bne.n	800359c <UART_Start_Receive_IT+0x98>
 8003592:	6904      	ldr	r4, [r0, #16]
 8003594:	2c00      	cmp	r4, #0
 8003596:	d0f8      	beq.n	800358a <UART_Start_Receive_IT+0x86>
 8003598:	247f      	movs	r4, #127	; 0x7f
 800359a:	e7c5      	b.n	8003528 <UART_Start_Receive_IT+0x24>
 800359c:	2580      	movs	r5, #128	; 0x80
 800359e:	056d      	lsls	r5, r5, #21
 80035a0:	42a9      	cmp	r1, r5
 80035a2:	d1c1      	bne.n	8003528 <UART_Start_Receive_IT+0x24>
 80035a4:	6904      	ldr	r4, [r0, #16]
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	d0f6      	beq.n	8003598 <UART_Start_Receive_IT+0x94>
 80035aa:	243f      	movs	r4, #63	; 0x3f
 80035ac:	e7bc      	b.n	8003528 <UART_Start_Receive_IT+0x24>
      huart->RxISR = UART_RxISR_8BIT;
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <UART_Start_Receive_IT+0xd8>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	42a9      	cmp	r1, r5
 80035b2:	d103      	bne.n	80035bc <UART_Start_Receive_IT+0xb8>
 80035b4:	6901      	ldr	r1, [r0, #16]
 80035b6:	2900      	cmp	r1, #0
 80035b8:	d100      	bne.n	80035bc <UART_Start_Receive_IT+0xb8>
      huart->RxISR = UART_RxISR_16BIT;
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <UART_Start_Receive_IT+0xdc>)
 80035bc:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80035be:	2200      	movs	r2, #0
 80035c0:	7022      	strb	r2, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	3221      	adds	r2, #33	; 0x21
 80035c6:	32ff      	adds	r2, #255	; 0xff
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e7db      	b.n	8003586 <UART_Start_Receive_IT+0x82>
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	000001ff 	.word	0x000001ff
 80035d4:	08002dfd 	.word	0x08002dfd
 80035d8:	08002f51 	.word	0x08002f51
 80035dc:	08002cf1 	.word	0x08002cf1
 80035e0:	08002d79 	.word	0x08002d79

080035e4 <HAL_UART_Receive_IT>:
{
 80035e4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e6:	3088      	adds	r0, #136	; 0x88
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ea:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 80035ec:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ee:	2c20      	cmp	r4, #32
 80035f0:	d11d      	bne.n	800362e <HAL_UART_Receive_IT+0x4a>
      return HAL_ERROR;
 80035f2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d01a      	beq.n	800362e <HAL_UART_Receive_IT+0x4a>
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d018      	beq.n	800362e <HAL_UART_Receive_IT+0x4a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035fc:	2080      	movs	r0, #128	; 0x80
 80035fe:	689c      	ldr	r4, [r3, #8]
 8003600:	0140      	lsls	r0, r0, #5
 8003602:	4284      	cmp	r4, r0
 8003604:	d106      	bne.n	8003614 <HAL_UART_Receive_IT+0x30>
 8003606:	6918      	ldr	r0, [r3, #16]
 8003608:	2800      	cmp	r0, #0
 800360a:	d103      	bne.n	8003614 <HAL_UART_Receive_IT+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 800360c:	2401      	movs	r4, #1
      return HAL_ERROR;
 800360e:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8003610:	4221      	tst	r1, r4
 8003612:	d10c      	bne.n	800362e <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8003614:	001c      	movs	r4, r3
 8003616:	3480      	adds	r4, #128	; 0x80
 8003618:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800361a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800361c:	2d01      	cmp	r5, #1
 800361e:	d006      	beq.n	800362e <HAL_UART_Receive_IT+0x4a>
 8003620:	3801      	subs	r0, #1
 8003622:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	2000      	movs	r0, #0
 8003626:	66d8      	str	r0, [r3, #108]	; 0x6c
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff ff6b 	bl	8003504 <UART_Start_Receive_IT>
}
 800362e:	bd70      	pop	{r4, r5, r6, pc}

08003630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003632:	0004      	movs	r4, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003634:	2208      	movs	r2, #8
 8003636:	4915      	ldr	r1, [pc, #84]	; (800368c <UARTEx_SetNbDataToProcess+0x5c>)
 8003638:	4668      	mov	r0, sp
 800363a:	f002 fd11 	bl	8006060 <memcpy>
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800363e:	2208      	movs	r2, #8
 8003640:	4913      	ldr	r1, [pc, #76]	; (8003690 <UARTEx_SetNbDataToProcess+0x60>)
 8003642:	a802      	add	r0, sp, #8
 8003644:	f002 fd0c 	bl	8006060 <memcpy>

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <UARTEx_SetNbDataToProcess+0x24>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <UARTEx_SetNbDataToProcess+0x64>)
 8003650:	66a3      	str	r3, [r4, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003652:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003654:	466a      	mov	r2, sp
                               (uint16_t)denominator[tx_fifo_threshold];
 8003656:	2608      	movs	r6, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003660:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003662:	1992      	adds	r2, r2, r6
 8003664:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003666:	00c0      	lsls	r0, r0, #3
 8003668:	f7fc fe00 	bl	800026c <__divsi3>
 800366c:	0023      	movs	r3, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800366e:	466a      	mov	r2, sp
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003670:	336a      	adds	r3, #106	; 0x6a
 8003672:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003674:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003676:	0f5b      	lsrs	r3, r3, #29
 8003678:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800367a:	1992      	adds	r2, r2, r6
 800367c:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800367e:	00c0      	lsls	r0, r0, #3
 8003680:	f7fc fdf4 	bl	800026c <__divsi3>
 8003684:	3468      	adds	r4, #104	; 0x68
 8003686:	8020      	strh	r0, [r4, #0]
}
 8003688:	e7e3      	b.n	8003652 <UARTEx_SetNbDataToProcess+0x22>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	0800609c 	.word	0x0800609c
 8003690:	08006184 	.word	0x08006184
 8003694:	00010001 	.word	0x00010001

08003698 <HAL_UARTEx_WakeupCallback>:
}
 8003698:	4770      	bx	lr

0800369a <HAL_UARTEx_RxFifoFullCallback>:
 800369a:	4770      	bx	lr

0800369c <HAL_UARTEx_TxFifoEmptyCallback>:
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_UARTEx_DisableFifoMode>:
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80036a2:	0004      	movs	r4, r0
 80036a4:	3480      	adds	r4, #128	; 0x80
 80036a6:	7822      	ldrb	r2, [r4, #0]
{
 80036a8:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80036aa:	2002      	movs	r0, #2
 80036ac:	2a01      	cmp	r2, #1
 80036ae:	d011      	beq.n	80036d4 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	001d      	movs	r5, r3
 80036b2:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80036b4:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80036b6:	3508      	adds	r5, #8
 80036b8:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80036be:	6810      	ldr	r0, [r2, #0]
 80036c0:	43b0      	bics	r0, r6
 80036c2:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036c4:	4804      	ldr	r0, [pc, #16]	; (80036d8 <HAL_UARTEx_DisableFifoMode+0x38>)
 80036c6:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036c8:	2000      	movs	r0, #0
 80036ca:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036ce:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80036d0:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80036d2:	7020      	strb	r0, [r4, #0]
}
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	dfffffff 	.word	0xdfffffff

080036dc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80036de:	0005      	movs	r5, r0
 80036e0:	3580      	adds	r5, #128	; 0x80
 80036e2:	782b      	ldrb	r3, [r5, #0]
{
 80036e4:	0004      	movs	r4, r0
 80036e6:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80036e8:	2002      	movs	r0, #2
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d018      	beq.n	8003720 <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 80036ee:	0026      	movs	r6, r4
 80036f0:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80036f2:	3801      	subs	r0, #1
 80036f4:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036f6:	3608      	adds	r6, #8
 80036f8:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	4381      	bics	r1, r0
 8003702:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003704:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003706:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003708:	00c9      	lsls	r1, r1, #3
 800370a:	08c9      	lsrs	r1, r1, #3
 800370c:	4311      	orrs	r1, r2
 800370e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003710:	f7ff ff8e 	bl	8003630 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003714:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003716:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003718:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800371a:	2320      	movs	r3, #32
 800371c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800371e:	7028      	strb	r0, [r5, #0]
}
 8003720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003724 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003726:	0005      	movs	r5, r0
 8003728:	3580      	adds	r5, #128	; 0x80
 800372a:	782b      	ldrb	r3, [r5, #0]
{
 800372c:	0004      	movs	r4, r0
 800372e:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003730:	2002      	movs	r0, #2
 8003732:	2b01      	cmp	r3, #1
 8003734:	d018      	beq.n	8003768 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	0026      	movs	r6, r4
 8003738:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800373a:	3801      	subs	r0, #1
 800373c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800373e:	3608      	adds	r6, #8
 8003740:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	4381      	bics	r1, r0
 800374a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	4807      	ldr	r0, [pc, #28]	; (800376c <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8003750:	4001      	ands	r1, r0
 8003752:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 8003754:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003756:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003758:	f7ff ff6a 	bl	8003630 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800375c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800375e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003760:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003762:	2320      	movs	r3, #32
 8003764:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003766:	7028      	strb	r0, [r5, #0]
}
 8003768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	f1ffffff 	.word	0xf1ffffff

08003770 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8003770:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003772:	0006      	movs	r6, r0
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8003774:	2500      	movs	r5, #0
 8003776:	4c11      	ldr	r4, [pc, #68]	; (80037bc <vTimerCallbackT35+0x4c>)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <vTimerCallbackT35+0x50>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	42ab      	cmp	r3, r5
 800377e:	dc00      	bgt.n	8003782 <vTimerCallbackT35+0x12>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
		}

	}
}
 8003780:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	0002      	movs	r2, r0
 8003786:	32bc      	adds	r2, #188	; 0xbc
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	42b2      	cmp	r2, r6
 800378c:	d112      	bne.n	80037b4 <vTimerCallbackT35+0x44>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 800378e:	7802      	ldrb	r2, [r0, #0]
 8003790:	2a04      	cmp	r2, #4
 8003792:	d107      	bne.n	80037a4 <vTimerCallbackT35+0x34>
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003794:	2200      	movs	r2, #0
 8003796:	30c0      	adds	r0, #192	; 0xc0
 8003798:	9200      	str	r2, [sp, #0]
 800379a:	0013      	movs	r3, r2
 800379c:	2103      	movs	r1, #3
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	f002 f956 	bl	8005a50 <xTimerGenericCommand>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80037a4:	2300      	movs	r3, #0
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	2203      	movs	r2, #3
 80037aa:	30b8      	adds	r0, #184	; 0xb8
 80037ac:	0019      	movs	r1, r3
 80037ae:	6800      	ldr	r0, [r0, #0]
 80037b0:	f001 ffde 	bl	8005770 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80037b4:	3501      	adds	r5, #1
 80037b6:	3404      	adds	r4, #4
 80037b8:	e7de      	b.n	8003778 <vTimerCallbackT35+0x8>
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	20001334 	.word	0x20001334
 80037c0:	2000002c 	.word	0x2000002c

080037c4 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	0006      	movs	r6, r0
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80037c8:	2400      	movs	r4, #0
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <vTimerCallbackTimeout+0x34>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	dc00      	bgt.n	80037d4 <vTimerCallbackTimeout+0x10>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
		}

	}

}
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <vTimerCallbackTimeout+0x38>)
 80037d6:	00a3      	lsls	r3, r4, #2
 80037d8:	58d5      	ldr	r5, [r2, r3]
 80037da:	002a      	movs	r2, r5
 80037dc:	32c0      	adds	r2, #192	; 0xc0
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	42b2      	cmp	r2, r6
 80037e2:	d106      	bne.n	80037f2 <vTimerCallbackTimeout+0x2e>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 80037e4:	35b8      	adds	r5, #184	; 0xb8
 80037e6:	2300      	movs	r3, #0
 80037e8:	2203      	movs	r2, #3
 80037ea:	21ff      	movs	r1, #255	; 0xff
 80037ec:	6828      	ldr	r0, [r5, #0]
 80037ee:	f001 ffbf 	bl	8005770 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80037f2:	3401      	adds	r4, #1
 80037f4:	e7e9      	b.n	80037ca <vTimerCallbackTimeout+0x6>
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	2000002c 	.word	0x2000002c
 80037fc:	20001334 	.word	0x20001334

08003800 <RingAdd>:
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8003800:	0002      	movs	r2, r0
{
 8003802:	b510      	push	{r4, lr}
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8003804:	3281      	adds	r2, #129	; 0x81
 8003806:	7813      	ldrb	r3, [r2, #0]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8003808:	247f      	movs	r4, #127	; 0x7f
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800380a:	54c1      	strb	r1, [r0, r3]
	if (xRingBuffer->u8available == MAX_BUFFER)
 800380c:	0001      	movs	r1, r0
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800380e:	3301      	adds	r3, #1
 8003810:	4023      	ands	r3, r4
 8003812:	7013      	strb	r3, [r2, #0]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003814:	3182      	adds	r1, #130	; 0x82
 8003816:	780a      	ldrb	r2, [r1, #0]
 8003818:	2a80      	cmp	r2, #128	; 0x80
 800381a:	d105      	bne.n	8003828 <RingAdd+0x28>
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800381c:	3080      	adds	r0, #128	; 0x80
 800381e:	7803      	ldrb	r3, [r0, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4023      	ands	r3, r4
 8003824:	7003      	strb	r3, [r0, #0]
}
 8003826:	bd10      	pop	{r4, pc}
		xRingBuffer->u8available++;
 8003828:	3201      	adds	r2, #1
 800382a:	700a      	strb	r2, [r1, #0]
}
 800382c:	e7fb      	b.n	8003826 <RingAdd+0x26>

0800382e <RingGetNBytes>:
{
 800382e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003830:	0006      	movs	r6, r0
{
 8003832:	9101      	str	r1, [sp, #4]
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003834:	3682      	adds	r6, #130	; 0x82
{
 8003836:	0004      	movs	r4, r0
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003838:	7830      	ldrb	r0, [r6, #0]
 800383a:	2800      	cmp	r0, #0
 800383c:	d01e      	beq.n	800387c <RingGetNBytes+0x4e>
 800383e:	1e53      	subs	r3, r2, #1
 8003840:	2000      	movs	r0, #0
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	d41a      	bmi.n	800387c <RingGetNBytes+0x4e>
 8003846:	0003      	movs	r3, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003848:	0027      	movs	r7, r4
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800384a:	307f      	adds	r0, #127	; 0x7f
 800384c:	4684      	mov	ip, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800384e:	3780      	adds	r7, #128	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003850:	7835      	ldrb	r5, [r6, #0]
 8003852:	b2d8      	uxtb	r0, r3
 8003854:	4285      	cmp	r5, r0
 8003856:	d90e      	bls.n	8003876 <RingGetNBytes+0x48>
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003858:	783d      	ldrb	r5, [r7, #0]
 800385a:	9901      	ldr	r1, [sp, #4]
 800385c:	5d65      	ldrb	r5, [r4, r5]
 800385e:	3001      	adds	r0, #1
 8003860:	54cd      	strb	r5, [r1, r3]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003862:	4661      	mov	r1, ip
 8003864:	783d      	ldrb	r5, [r7, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	3501      	adds	r5, #1
 800386a:	400d      	ands	r5, r1
 800386c:	703d      	strb	r5, [r7, #0]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800386e:	b2dd      	uxtb	r5, r3
 8003870:	b2c0      	uxtb	r0, r0
 8003872:	42aa      	cmp	r2, r5
 8003874:	d8ec      	bhi.n	8003850 <RingGetNBytes+0x22>
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8003876:	7833      	ldrb	r3, [r6, #0]
 8003878:	1a1b      	subs	r3, r3, r0
 800387a:	7033      	strb	r3, [r6, #0]
}
 800387c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800387e <RingGetAllBytes>:
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800387e:	0003      	movs	r3, r0
{
 8003880:	b510      	push	{r4, lr}
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8003882:	3382      	adds	r3, #130	; 0x82
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	f7ff ffd2 	bl	800382e <RingGetNBytes>
}
 800388a:	bd10      	pop	{r4, pc}

0800388c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	0004      	movs	r4, r0
    bool bBuffOverflow = false;

    if (modH->EN_Port)
 8003890:	68c0      	ldr	r0, [r0, #12]
 8003892:	2800      	cmp	r0, #0
 8003894:	d003      	beq.n	800389e <getRxBuffer+0x12>
    {
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003896:	2200      	movs	r2, #0
 8003898:	8a21      	ldrh	r1, [r4, #16]
 800389a:	f7fe f919 	bl	8001ad0 <HAL_GPIO_WritePin>
return xRingBuffer->u8available;
 800389e:	0023      	movs	r3, r4
    }

    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80038a0:	0025      	movs	r5, r4
return xRingBuffer->u8available;
 80038a2:	0020      	movs	r0, r4
    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80038a4:	0021      	movs	r1, r4
return xRingBuffer->u8available;
 80038a6:	334b      	adds	r3, #75	; 0x4b
 80038a8:	33ff      	adds	r3, #255	; 0xff
    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3593      	adds	r5, #147	; 0x93
 80038ae:	702b      	strb	r3, [r5, #0]
 80038b0:	3113      	adds	r1, #19
return xRingBuffer->u8available;
 80038b2:	30c8      	adds	r0, #200	; 0xc8
    RingGetAllBytes(&modH->xBufferRX, modH->au8Buffer);
 80038b4:	f7ff ffe3 	bl	800387e <RingGetAllBytes>

    modH->u16InCnt++;
 80038b8:	2000      	movs	r0, #0
 80038ba:	349c      	adds	r4, #156	; 0x9c
 80038bc:	8823      	ldrh	r3, [r4, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	8023      	strh	r3, [r4, #0]
    if (bBuffOverflow)
    {
    	modH->u16errCnt++;
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
    }
    return modH->u8BufferSize;
 80038c2:	5628      	ldrsb	r0, [r5, r0]
}
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c8 <ModbusInit>:
{
 80038c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (numberHandlers < MAX_M_HANDLERS)
 80038ca:	4d31      	ldr	r5, [pc, #196]	; (8003990 <ModbusInit+0xc8>)
{
 80038cc:	0004      	movs	r4, r0
  if (numberHandlers < MAX_M_HANDLERS)
 80038ce:	782b      	ldrb	r3, [r5, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d85c      	bhi.n	800398e <ModbusInit+0xc6>
xRingBuffer->u8start = 0;
 80038d4:	0003      	movs	r3, r0
 80038d6:	2700      	movs	r7, #0
 80038d8:	3349      	adds	r3, #73	; 0x49
 80038da:	33ff      	adds	r3, #255	; 0xff
 80038dc:	701f      	strb	r7, [r3, #0]
xRingBuffer->u8end = 0;
 80038de:	705f      	strb	r7, [r3, #1]
xRingBuffer->u8available = 0;
 80038e0:	709f      	strb	r7, [r3, #2]
	  if(modH->uiModbusType == SLAVE_RTU)
 80038e2:	7803      	ldrb	r3, [r0, #0]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d10d      	bne.n	8003904 <ModbusInit+0x3c>
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80038e8:	0001      	movs	r1, r0
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <ModbusInit+0xcc>)
 80038ec:	482a      	ldr	r0, [pc, #168]	; (8003998 <ModbusInit+0xd0>)
 80038ee:	f000 fda7 	bl	8004440 <osThreadNew>
 80038f2:	0023      	movs	r3, r4
 80038f4:	33b8      	adds	r3, #184	; 0xb8
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80038f6:	6018      	str	r0, [r3, #0]
	  if  (modH->myTaskModbusAHandle == NULL)
 80038f8:	0023      	movs	r3, r4
 80038fa:	33b8      	adds	r3, #184	; 0xb8
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d125      	bne.n	800394e <ModbusInit+0x86>
		  while(1); //Error creating modbus task, check heap and stack size
 8003902:	e7fe      	b.n	8003902 <ModbusInit+0x3a>
	  else if (modH->uiModbusType == MASTER_RTU)
 8003904:	2b04      	cmp	r3, #4
 8003906:	d11e      	bne.n	8003946 <ModbusInit+0x7e>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8003908:	0001      	movs	r1, r0
 800390a:	4a24      	ldr	r2, [pc, #144]	; (800399c <ModbusInit+0xd4>)
 800390c:	4824      	ldr	r0, [pc, #144]	; (80039a0 <ModbusInit+0xd8>)
 800390e:	f000 fd97 	bl	8004440 <osThreadNew>
 8003912:	0023      	movs	r3, r4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8003914:	0026      	movs	r6, r4
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8003916:	33b8      	adds	r3, #184	; 0xb8
 8003918:	6018      	str	r0, [r3, #0]
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800391a:	3b16      	subs	r3, #22
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800391c:	8819      	ldrh	r1, [r3, #0]
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <ModbusInit+0xdc>)
 8003920:	36c0      	adds	r6, #192	; 0xc0
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	003a      	movs	r2, r7
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	481f      	ldr	r0, [pc, #124]	; (80039a8 <ModbusInit+0xe0>)
 800392a:	f002 f86b 	bl	8005a04 <xTimerCreate>
 800392e:	6030      	str	r0, [r6, #0]
		  if(modH->xTimerTimeout == NULL)
 8003930:	2800      	cmp	r0, #0
 8003932:	d100      	bne.n	8003936 <ModbusInit+0x6e>
			  while(1); //error creating timer, check heap and stack size
 8003934:	e7fe      	b.n	8003934 <ModbusInit+0x6c>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8003936:	2110      	movs	r1, #16
 8003938:	2002      	movs	r0, #2
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <ModbusInit+0xe4>)
 800393c:	f000 fe2a 	bl	8004594 <osMessageQueueNew>
		  if(modH->QueueTelegramHandle == NULL)
 8003940:	2800      	cmp	r0, #0
 8003942:	d101      	bne.n	8003948 <ModbusInit+0x80>
			  while(1); //error creating queue for telegrams, check heap and stack size
 8003944:	e7fe      	b.n	8003944 <ModbusInit+0x7c>
		  while(1); //Error Modbus type not supported choose a valid Type
 8003946:	e7fe      	b.n	8003946 <ModbusInit+0x7e>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8003948:	0023      	movs	r3, r4
 800394a:	33b4      	adds	r3, #180	; 0xb4
 800394c:	e7d3      	b.n	80038f6 <ModbusInit+0x2e>
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800394e:	0026      	movs	r6, r4
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <ModbusInit+0xe8>)
 8003952:	36bc      	adds	r6, #188	; 0xbc
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	2105      	movs	r1, #5
 800395a:	6833      	ldr	r3, [r6, #0]
 800395c:	4815      	ldr	r0, [pc, #84]	; (80039b4 <ModbusInit+0xec>)
 800395e:	f002 f851 	bl	8005a04 <xTimerCreate>
 8003962:	6030      	str	r0, [r6, #0]
	  if (modH->xTimerT35 == NULL)
 8003964:	2800      	cmp	r0, #0
 8003966:	d100      	bne.n	800396a <ModbusInit+0xa2>
		  while(1); //Error creating the timer, check heap and stack size
 8003968:	e7fe      	b.n	8003968 <ModbusInit+0xa0>
	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800396a:	2101      	movs	r1, #1
 800396c:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <ModbusInit+0xf0>)
 800396e:	0008      	movs	r0, r1
 8003970:	f000 fdc7 	bl	8004502 <osSemaphoreNew>
 8003974:	0023      	movs	r3, r4
 8003976:	33c4      	adds	r3, #196	; 0xc4
 8003978:	6018      	str	r0, [r3, #0]
	  if(modH->ModBusSphrHandle == NULL)
 800397a:	2800      	cmp	r0, #0
 800397c:	d100      	bne.n	8003980 <ModbusInit+0xb8>
		  while(1); //Error creating the semaphore, check heap and stack size
 800397e:	e7fe      	b.n	800397e <ModbusInit+0xb6>
	  mHandlers[numberHandlers] = modH;
 8003980:	782b      	ldrb	r3, [r5, #0]
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <ModbusInit+0xf4>)
 8003984:	0099      	lsls	r1, r3, #2
	  numberHandlers++;
 8003986:	3301      	adds	r3, #1
 8003988:	702b      	strb	r3, [r5, #0]
	  mHandlers[numberHandlers] = modH;
 800398a:	508c      	str	r4, [r1, r2]
}
 800398c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	  while(1); //error no more Modbus handlers supported
 800398e:	e7fe      	b.n	800398e <ModbusInit+0xc6>
 8003990:	2000002c 	.word	0x2000002c
 8003994:	08006214 	.word	0x08006214
 8003998:	08003aed 	.word	0x08003aed
 800399c:	08006238 	.word	0x08006238
 80039a0:	08003fd5 	.word	0x08003fd5
 80039a4:	080037c5 	.word	0x080037c5
 80039a8:	0800618d 	.word	0x0800618d
 80039ac:	080061f4 	.word	0x080061f4
 80039b0:	08003771 	.word	0x08003771
 80039b4:	0800619b 	.word	0x0800619b
 80039b8:	080061e4 	.word	0x080061e4
 80039bc:	20001334 	.word	0x20001334

080039c0 <ModbusStart>:
{
 80039c0:	b510      	push	{r4, lr}
 80039c2:	0004      	movs	r4, r0
	if (modH->EN_Port != NULL )
 80039c4:	68c0      	ldr	r0, [r0, #12]
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d003      	beq.n	80039d2 <ModbusStart+0x12>
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80039ca:	2200      	movs	r2, #0
 80039cc:	8a21      	ldrh	r1, [r4, #16]
 80039ce:	f7fe f87f 	bl	8001ad0 <HAL_GPIO_WritePin>
    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 80039d2:	7823      	ldrb	r3, [r4, #0]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d105      	bne.n	80039e4 <ModbusStart+0x24>
 80039d8:	0023      	movs	r3, r4
 80039da:	3398      	adds	r3, #152	; 0x98
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d100      	bne.n	80039e4 <ModbusStart+0x24>
    	while(1); //ERROR define the DATA pointer shared through Modbus
 80039e2:	e7fe      	b.n	80039e2 <ModbusStart+0x22>
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 80039e4:	6860      	ldr	r0, [r4, #4]
 80039e6:	f7ff fb5b 	bl	80030a0 <HAL_UART_GetState>
 80039ea:	2820      	cmp	r0, #32
 80039ec:	d1fa      	bne.n	80039e4 <ModbusStart+0x24>
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80039ee:	0021      	movs	r1, r4
 80039f0:	2201      	movs	r2, #1
 80039f2:	6860      	ldr	r0, [r4, #4]
 80039f4:	31b2      	adds	r1, #178	; 0xb2
 80039f6:	f7ff fdf5 	bl	80035e4 <HAL_UART_Receive_IT>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d000      	beq.n	8003a00 <ModbusStart+0x40>
        while(1)
 80039fe:	e7fe      	b.n	80039fe <ModbusStart+0x3e>
    modH->u8lastRec = modH->u8BufferSize = 0;
 8003a00:	0023      	movs	r3, r4
 8003a02:	3393      	adds	r3, #147	; 0x93
 8003a04:	7058      	strb	r0, [r3, #1]
 8003a06:	7018      	strb	r0, [r3, #0]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8003a08:	34a0      	adds	r4, #160	; 0xa0
    modH->u8lastRec = modH->u8BufferSize = 0;
 8003a0a:	3301      	adds	r3, #1
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8003a0c:	6098      	str	r0, [r3, #8]
 8003a0e:	8020      	strh	r0, [r4, #0]
}
 8003a10:	bd10      	pop	{r4, pc}
	...

08003a14 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
    for (unsigned char i = 0; i < u8length; i++)
    {
        temp = temp ^ Buffer[i];
 8003a16:	2408      	movs	r4, #8
        for (unsigned char j = 1; j <= 8; j++)
        {
            flag = temp & 0x0001;
 8003a18:	2501      	movs	r5, #1
    temp = 0xFFFF;
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <calcCRC+0x38>)
            temp >>=1;
            if (flag)
                temp ^= 0xA001;
 8003a1c:	4e0c      	ldr	r6, [pc, #48]	; (8003a50 <calcCRC+0x3c>)
 8003a1e:	1841      	adds	r1, r0, r1
    for (unsigned char i = 0; i < u8length; i++)
 8003a20:	4288      	cmp	r0, r1
 8003a22:	d104      	bne.n	8003a2e <calcCRC+0x1a>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8003a24:	0a18      	lsrs	r0, r3, #8
    temp = (temp << 8) | temp2;
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4318      	orrs	r0, r3
    temp &= 0xFFFF;
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8003a2a:	b280      	uxth	r0, r0

}
 8003a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = temp ^ Buffer[i];
 8003a2e:	7802      	ldrb	r2, [r0, #0]
 8003a30:	4053      	eors	r3, r2
 8003a32:	0022      	movs	r2, r4
            flag = temp & 0x0001;
 8003a34:	001f      	movs	r7, r3
            temp >>=1;
 8003a36:	085b      	lsrs	r3, r3, #1
            flag = temp & 0x0001;
 8003a38:	402f      	ands	r7, r5
            if (flag)
 8003a3a:	d000      	beq.n	8003a3e <calcCRC+0x2a>
                temp ^= 0xA001;
 8003a3c:	4073      	eors	r3, r6
        for (unsigned char j = 1; j <= 8; j++)
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d1f6      	bne.n	8003a34 <calcCRC+0x20>
    for (unsigned char i = 0; i < u8length; i++)
 8003a46:	3001      	adds	r0, #1
 8003a48:	e7ea      	b.n	8003a20 <calcCRC+0xc>
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	0000ffff 	.word	0x0000ffff
 8003a50:	0000a001 	.word	0x0000a001

08003a54 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8003a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8003a56:	0006      	movs	r6, r0
 8003a58:	0007      	movs	r7, r0
 8003a5a:	3693      	adds	r6, #147	; 0x93
 8003a5c:	7835      	ldrb	r5, [r6, #0]
 8003a5e:	3713      	adds	r7, #19
{
 8003a60:	0004      	movs	r4, r0
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8003a62:	0029      	movs	r1, r5
 8003a64:	0038      	movs	r0, r7
 8003a66:	f7ff ffd5 	bl	8003a14 <calcCRC>
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8003a6a:	1963      	adds	r3, r4, r5
 8003a6c:	0a02      	lsrs	r2, r0, #8
 8003a6e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8003a70:	1c6b      	adds	r3, r5, #1
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	18e3      	adds	r3, r4, r3
    modH->u8BufferSize++;
 8003a76:	3502      	adds	r5, #2
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003a78:	74d8      	strb	r0, [r3, #19]
    modH->u8BufferSize++;
 8003a7a:	7035      	strb	r5, [r6, #0]
#if ENABLE_USB_CDC ==1
    if(modH->u8TypeHW == USART_HW)
    {
#endif
    	if (modH->EN_Port != NULL)
 8003a7c:	68e0      	ldr	r0, [r4, #12]
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d003      	beq.n	8003a8a <sendTxBuffer+0x36>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8003a82:	2201      	movs	r2, #1
 8003a84:	8a21      	ldrh	r1, [r4, #16]
 8003a86:	f7fe f823 	bl	8001ad0 <HAL_GPIO_WritePin>
        }

        // transfer buffer to serial line
        HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8003a8a:	0039      	movs	r1, r7
 8003a8c:	7832      	ldrb	r2, [r6, #0]
 8003a8e:	6860      	ldr	r0, [r4, #4]
 8003a90:	f7fe ff74 	bl	800297c <HAL_UART_Transmit_IT>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8003a94:	2101      	movs	r1, #1
 8003a96:	2001      	movs	r0, #1
 8003a98:	4249      	negs	r1, r1
 8003a9a:	f001 fe3b 	bl	8005714 <ulTaskNotifyTake>


         if (modH->EN_Port != NULL)
 8003a9e:	68e3      	ldr	r3, [r4, #12]
             //return RS485 transceiver to receive mode

        	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
             #else
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003aa0:	2540      	movs	r5, #64	; 0x40
         if (modH->EN_Port != NULL)
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d117      	bne.n	8003ad6 <sendTxBuffer+0x82>
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
         }


         // set timeout for master query
         if(modH->uiModbusType == MASTER_RTU )
 8003aa6:	7823      	ldrb	r3, [r4, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d10b      	bne.n	8003ac4 <sendTxBuffer+0x70>
         {
 	    	xTimerReset(modH->xTimerTimeout,0);
 8003aac:	0023      	movs	r3, r4
 8003aae:	33c0      	adds	r3, #192	; 0xc0
 8003ab0:	681d      	ldr	r5, [r3, #0]
 8003ab2:	f001 fb75 	bl	80051a0 <xTaskGetTickCount>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	0002      	movs	r2, r0
 8003aba:	2102      	movs	r1, #2
 8003abc:	0028      	movs	r0, r5
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f001 ffc6 	bl	8005a50 <xTimerGenericCommand>

	}
#endif


     modH->u8BufferSize = 0;
 8003ac4:	2300      	movs	r3, #0
     // increase message counter
     modH->u16OutCnt++;
 8003ac6:	349e      	adds	r4, #158	; 0x9e
     modH->u8BufferSize = 0;
 8003ac8:	7033      	strb	r3, [r6, #0]
     modH->u16OutCnt++;
 8003aca:	8823      	ldrh	r3, [r4, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	8023      	strh	r3, [r4, #0]

}
 8003ad0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        		taskYIELD();
 8003ad2:	f002 f931 	bl	8005d38 <vPortYield>
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003ad6:	6863      	ldr	r3, [r4, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	422b      	tst	r3, r5
 8003ade:	d0f8      	beq.n	8003ad2 <sendTxBuffer+0x7e>
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	8a21      	ldrh	r1, [r4, #16]
 8003ae4:	68e0      	ldr	r0, [r4, #12]
 8003ae6:	f7fd fff3 	bl	8001ad0 <HAL_GPIO_WritePin>
 8003aea:	e7dc      	b.n	8003aa6 <sendTxBuffer+0x52>

08003aec <StartTaskModbusSlave>:
{
 8003aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aee:	0004      	movs	r4, r0
 8003af0:	b095      	sub	sp, #84	; 0x54
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8003af2:	2101      	movs	r1, #1
 8003af4:	2001      	movs	r0, #1
 8003af6:	4249      	negs	r1, r1
 8003af8:	f001 fe0c 	bl	8005714 <ulTaskNotifyTake>
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003afc:	0023      	movs	r3, r4
	  modH->i8lastError = 0;
 8003afe:	2200      	movs	r2, #0
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003b00:	334b      	adds	r3, #75	; 0x4b
	  modH->i8lastError = 0;
 8003b02:	74a2      	strb	r2, [r4, #18]
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003b04:	33ff      	adds	r3, #255	; 0xff
 8003b06:	7819      	ldrb	r1, [r3, #0]
 8003b08:	3bb7      	subs	r3, #183	; 0xb7
 8003b0a:	7019      	strb	r1, [r3, #0]
	  if (modH->EN_Port != NULL )
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	4290      	cmp	r0, r2
 8003b10:	d002      	beq.n	8003b18 <StartTaskModbusSlave+0x2c>
	   	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8003b12:	8a21      	ldrh	r1, [r4, #16]
 8003b14:	f7fd ffdc 	bl	8001ad0 <HAL_GPIO_WritePin>
 	  i8state = getRxBuffer(modH);
 8003b18:	0020      	movs	r0, r4
 8003b1a:	f7ff feb7 	bl	800388c <getRxBuffer>
	  if (i8state < 7){
 8003b1e:	2806      	cmp	r0, #6
 8003b20:	dc07      	bgt.n	8003b32 <StartTaskModbusSlave+0x46>
		  modH->i8lastError = ERR_BAD_SIZE;
 8003b22:	23fa      	movs	r3, #250	; 0xfa
		  modH->u16errCnt++;
 8003b24:	0022      	movs	r2, r4
		  modH->i8lastError = ERR_BAD_SIZE;
 8003b26:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 8003b28:	32a0      	adds	r2, #160	; 0xa0
 8003b2a:	8813      	ldrh	r3, [r2, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	8013      	strh	r3, [r2, #0]
		  continue;
 8003b30:	e7df      	b.n	8003af2 <StartTaskModbusSlave+0x6>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8003b32:	7a26      	ldrb	r6, [r4, #8]
 8003b34:	7ce3      	ldrb	r3, [r4, #19]
 8003b36:	42b3      	cmp	r3, r6
 8003b38:	d1db      	bne.n	8003af2 <StartTaskModbusSlave+0x6>
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003b3a:	0023      	movs	r3, r4
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003b3c:	0020      	movs	r0, r4
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003b3e:	3393      	adds	r3, #147	; 0x93
 8003b40:	781d      	ldrb	r5, [r3, #0]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003b42:	3013      	adds	r0, #19
 8003b44:	1ea9      	subs	r1, r5, #2
 8003b46:	b2c9      	uxtb	r1, r1
 8003b48:	f7ff ff64 	bl	8003a14 <calcCRC>
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003b4c:	1965      	adds	r5, r4, r5
 8003b4e:	7c6a      	ldrb	r2, [r5, #17]
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8003b50:	7cab      	ldrb	r3, [r5, #18]
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003b52:	0212      	lsls	r2, r2, #8
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003b54:	4313      	orrs	r3, r2
 8003b56:	4283      	cmp	r3, r0
 8003b58:	d007      	beq.n	8003b6a <StartTaskModbusSlave+0x7e>
	    	modH->u16errCnt ++;
 8003b5a:	0022      	movs	r2, r4
	        return NO_REPLY;
 8003b5c:	25ff      	movs	r5, #255	; 0xff
	    	modH->u16errCnt ++;
 8003b5e:	32a0      	adds	r2, #160	; 0xa0
 8003b60:	8813      	ldrh	r3, [r2, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	8013      	strh	r3, [r2, #0]
		  modH->i8lastError = u8exception;
 8003b66:	74a5      	strb	r5, [r4, #18]
		  continue;
 8003b68:	e7c3      	b.n	8003af2 <StartTaskModbusSlave+0x6>
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	7d23      	ldrb	r3, [r4, #20]
 8003b6e:	49d4      	ldr	r1, [pc, #848]	; (8003ec0 <StartTaskModbusSlave+0x3d4>)
 8003b70:	5c50      	ldrb	r0, [r2, r1]
 8003b72:	4298      	cmp	r0, r3
 8003b74:	d100      	bne.n	8003b78 <StartTaskModbusSlave+0x8c>
 8003b76:	e214      	b.n	8003fa2 <StartTaskModbusSlave+0x4b6>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8003b78:	3201      	adds	r2, #1
 8003b7a:	2a08      	cmp	r2, #8
 8003b7c:	d1f8      	bne.n	8003b70 <StartTaskModbusSlave+0x84>
	    	modH->u16errCnt ++;
 8003b7e:	0021      	movs	r1, r4
 8003b80:	31a0      	adds	r1, #160	; 0xa0
 8003b82:	880a      	ldrh	r2, [r1, #0]
	        return EXC_FUNC_CODE;
 8003b84:	2501      	movs	r5, #1
	    	modH->u16errCnt ++;
 8003b86:	3201      	adds	r2, #1
 8003b88:	800a      	strh	r2, [r1, #0]
	  if (u8exception > 0)
 8003b8a:	e023      	b.n	8003bd4 <StartTaskModbusSlave+0xe8>
	W.u8[0] = L;
 8003b8c:	25ff      	movs	r5, #255	; 0xff
 8003b8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b90:	7da1      	ldrb	r1, [r4, #22]
 8003b92:	43a8      	bics	r0, r5
 8003b94:	4308      	orrs	r0, r1
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003b96:	7d62      	ldrb	r2, [r4, #21]
	W.u8[1] = H;
 8003b98:	49ca      	ldr	r1, [pc, #808]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003b9a:	0212      	lsls	r2, r2, #8
 8003b9c:	4008      	ands	r0, r1
 8003b9e:	4310      	orrs	r0, r2
	return W.u16[0];
 8003ba0:	466a      	mov	r2, sp
	W.u8[1] = H;
 8003ba2:	900b      	str	r0, [sp, #44]	; 0x2c
	return W.u16[0];
 8003ba4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
	W.u8[0] = L;
 8003ba6:	7e27      	ldrb	r7, [r4, #24]
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003ba8:	0912      	lsrs	r2, r2, #4
 8003baa:	4694      	mov	ip, r2
	W.u8[0] = L;
 8003bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8003bae:	7de0      	ldrb	r0, [r4, #23]
	W.u8[0] = L;
 8003bb0:	43aa      	bics	r2, r5
 8003bb2:	0015      	movs	r5, r2
	return W.u16[0];
 8003bb4:	466a      	mov	r2, sp
	W.u8[0] = L;
 8003bb6:	433d      	orrs	r5, r7
	W.u8[1] = H;
 8003bb8:	0200      	lsls	r0, r0, #8
 8003bba:	4029      	ands	r1, r5
 8003bbc:	4301      	orrs	r1, r0
 8003bbe:	910c      	str	r1, [sp, #48]	; 0x30
	return W.u16[0];
 8003bc0:	8e11      	ldrh	r1, [r2, #48]	; 0x30
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003bc2:	0020      	movs	r0, r4
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8003bc4:	0909      	lsrs	r1, r1, #4
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	30b0      	adds	r0, #176	; 0xb0
 8003bca:	8800      	ldrh	r0, [r0, #0]
 8003bcc:	4462      	add	r2, ip
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d220      	bcs.n	8003c14 <StartTaskModbusSlave+0x128>
 8003bd2:	2502      	movs	r5, #2
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8003bd4:	3b80      	subs	r3, #128	; 0x80
 8003bd6:	7523      	strb	r3, [r4, #20]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003bd8:	0023      	movs	r3, r4
 8003bda:	2203      	movs	r2, #3
 8003bdc:	3393      	adds	r3, #147	; 0x93
    modH->au8Buffer[ ID ]      = modH->u8id;
 8003bde:	74e6      	strb	r6, [r4, #19]
    modH->au8Buffer[ 2 ]       = u8exception;
 8003be0:	7565      	strb	r5, [r4, #21]
			  sendTxBuffer(modH);
 8003be2:	0020      	movs	r0, r4
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003be4:	701a      	strb	r2, [r3, #0]
			  sendTxBuffer(modH);
 8003be6:	f7ff ff35 	bl	8003a54 <sendTxBuffer>
 8003bea:	e7bc      	b.n	8003b66 <StartTaskModbusSlave+0x7a>
	W.u8[0] = L;
 8003bec:	20ff      	movs	r0, #255	; 0xff
 8003bee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003bf0:	7da1      	ldrb	r1, [r4, #22]
 8003bf2:	4385      	bics	r5, r0
 8003bf4:	0028      	movs	r0, r5
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003bf6:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003bf8:	4308      	orrs	r0, r1
	W.u8[1] = H;
 8003bfa:	49b2      	ldr	r1, [pc, #712]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003bfc:	0212      	lsls	r2, r2, #8
 8003bfe:	4001      	ands	r1, r0
 8003c00:	4311      	orrs	r1, r2
 8003c02:	910a      	str	r1, [sp, #40]	; 0x28
	return W.u16[0];
 8003c04:	466a      	mov	r2, sp
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003c06:	0021      	movs	r1, r4
	return W.u16[0];
 8003c08:	8d12      	ldrh	r2, [r2, #40]	; 0x28
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003c0a:	31b0      	adds	r1, #176	; 0xb0
 8003c0c:	8809      	ldrh	r1, [r1, #0]
 8003c0e:	0912      	lsrs	r2, r2, #4
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003c10:	4291      	cmp	r1, r2
 8003c12:	d3de      	bcc.n	8003bd2 <StartTaskModbusSlave+0xe6>
	  modH->i8lastError = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	74a3      	strb	r3, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003c18:	0023      	movs	r3, r4
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	33c4      	adds	r3, #196	; 0xc4
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4249      	negs	r1, r1
 8003c22:	f000 ffe2 	bl	8004bea <xQueueSemaphoreTake>
	    switch(modH->au8Buffer[ FUNC ] )
 8003c26:	7d20      	ldrb	r0, [r4, #20]
 8003c28:	3801      	subs	r0, #1
 8003c2a:	280f      	cmp	r0, #15
 8003c2c:	d900      	bls.n	8003c30 <StartTaskModbusSlave+0x144>
 8003c2e:	e0dd      	b.n	8003dec <StartTaskModbusSlave+0x300>
 8003c30:	f7fc fa88 	bl	8000144 <__gnu_thumb1_case_uhi>
 8003c34:	003e003e 	.word	0x003e003e
 8003c38:	00aa00aa 	.word	0x00aa00aa
 8003c3c:	012600f8 	.word	0x012600f8
 8003c40:	00dc00dc 	.word	0x00dc00dc
 8003c44:	00dc00dc 	.word	0x00dc00dc
 8003c48:	00dc00dc 	.word	0x00dc00dc
 8003c4c:	00dc00dc 	.word	0x00dc00dc
 8003c50:	0190014a 	.word	0x0190014a
	W.u8[0] = L;
 8003c54:	20ff      	movs	r0, #255	; 0xff
 8003c56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c58:	7da1      	ldrb	r1, [r4, #22]
 8003c5a:	4385      	bics	r5, r0
 8003c5c:	0028      	movs	r0, r5
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8003c5e:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003c60:	4308      	orrs	r0, r1
	W.u8[1] = H;
 8003c62:	4998      	ldr	r1, [pc, #608]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003c64:	0212      	lsls	r2, r2, #8
 8003c66:	4001      	ands	r1, r0
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	9109      	str	r1, [sp, #36]	; 0x24
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003c6c:	0021      	movs	r1, r4
	return W.u16[0];
 8003c6e:	466a      	mov	r2, sp
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003c70:	31b0      	adds	r1, #176	; 0xb0
	return W.u16[0];
 8003c72:	8c92      	ldrh	r2, [r2, #36]	; 0x24
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003c74:	8809      	ldrh	r1, [r1, #0]
 8003c76:	e7cb      	b.n	8003c10 <StartTaskModbusSlave+0x124>
	W.u8[0] = L;
 8003c78:	20ff      	movs	r0, #255	; 0xff
 8003c7a:	9f08      	ldr	r7, [sp, #32]
 8003c7c:	9d07      	ldr	r5, [sp, #28]
 8003c7e:	4387      	bics	r7, r0
 8003c80:	4385      	bics	r5, r0
 8003c82:	0038      	movs	r0, r7
 8003c84:	7da2      	ldrb	r2, [r4, #22]
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8003c86:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003c88:	4315      	orrs	r5, r2
	W.u8[1] = H;
 8003c8a:	4a8e      	ldr	r2, [pc, #568]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003c8c:	0209      	lsls	r1, r1, #8
 8003c8e:	4015      	ands	r5, r2
 8003c90:	430d      	orrs	r5, r1
 8003c92:	9507      	str	r5, [sp, #28]
	W.u8[0] = L;
 8003c94:	7e25      	ldrb	r5, [r4, #24]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003c96:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003c98:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003c9a:	0209      	lsls	r1, r1, #8
 8003c9c:	4002      	ands	r2, r0
 8003c9e:	430a      	orrs	r2, r1
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003ca0:	9907      	ldr	r1, [sp, #28]
	W.u8[1] = H;
 8003ca2:	9208      	str	r2, [sp, #32]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003ca4:	1852      	adds	r2, r2, r1
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003ca6:	0021      	movs	r1, r4
 8003ca8:	31b0      	adds	r1, #176	; 0xb0
 8003caa:	8809      	ldrh	r1, [r1, #0]
 8003cac:	b292      	uxth	r2, r2
 8003cae:	e7af      	b.n	8003c10 <StartTaskModbusSlave+0x124>
	W.u8[0] = L;
 8003cb0:	20ff      	movs	r0, #255	; 0xff
 8003cb2:	9e06      	ldr	r6, [sp, #24]
 8003cb4:	9905      	ldr	r1, [sp, #20]
 8003cb6:	4386      	bics	r6, r0
 8003cb8:	4381      	bics	r1, r0
 8003cba:	0030      	movs	r0, r6
 8003cbc:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003cbe:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003cc0:	4319      	orrs	r1, r3
	W.u8[1] = H;
 8003cc2:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003cc4:	0212      	lsls	r2, r2, #8
 8003cc6:	4019      	ands	r1, r3
 8003cc8:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003cca:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003ccc:	9105      	str	r1, [sp, #20]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003cce:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003cd0:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003cd2:	0209      	lsls	r1, r1, #8
 8003cd4:	4003      	ands	r3, r0
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	9306      	str	r3, [sp, #24]
	return W.u16[0];
 8003cda:	466b      	mov	r3, sp
 8003cdc:	8b19      	ldrh	r1, [r3, #24]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003cde:	2007      	movs	r0, #7
 8003ce0:	000d      	movs	r5, r1
	return W.u16[0];
 8003ce2:	466a      	mov	r2, sp
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003ce4:	08cb      	lsrs	r3, r1, #3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003ce6:	4005      	ands	r5, r0
	return W.u16[0];
 8003ce8:	8a92      	ldrh	r2, [r2, #20]
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003cea:	b2db      	uxtb	r3, r3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003cec:	9513      	str	r5, [sp, #76]	; 0x4c
 8003cee:	4201      	tst	r1, r0
 8003cf0:	d001      	beq.n	8003cf6 <StartTaskModbusSlave+0x20a>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
    modH->u8BufferSize         = ADD_LO;
 8003cf6:	0027      	movs	r7, r4
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	3793      	adds	r7, #147	; 0x93
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8003cfc:	7563      	strb	r3, [r4, #21]
    modH->u8BufferSize         = ADD_LO;
 8003cfe:	7038      	strb	r0, [r7, #0]
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8003d00:	18e0      	adds	r0, r4, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	1851      	adds	r1, r2, r1
 8003d06:	b289      	uxth	r1, r1
 8003d08:	7543      	strb	r3, [r0, #21]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003d0a:	9112      	str	r1, [sp, #72]	; 0x48
 8003d0c:	9711      	str	r7, [sp, #68]	; 0x44
 8003d0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003d10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003d12:	7809      	ldrb	r1, [r1, #0]
 8003d14:	4290      	cmp	r0, r2
 8003d16:	d10e      	bne.n	8003d36 <StartTaskModbusSlave+0x24a>
            modH->u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8003d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <StartTaskModbusSlave+0x236>
 8003d1e:	3101      	adds	r1, #1
 8003d20:	7039      	strb	r1, [r7, #0]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003d22:	783d      	ldrb	r5, [r7, #0]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        modH->au16regs[ u8StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8003d24:	0020      	movs	r0, r4
 8003d26:	f7ff fe95 	bl	8003a54 <sendTxBuffer>
				modH->i8state = process_FC16(modH);
 8003d2a:	0023      	movs	r3, r4
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003d2c:	3502      	adds	r5, #2
 8003d2e:	b2ed      	uxtb	r5, r5
				modH->i8state = process_FC16(modH);
 8003d30:	33b3      	adds	r3, #179	; 0xb3
 8003d32:	701d      	strb	r5, [r3, #0]
				break;
 8003d34:	e05a      	b.n	8003dec <StartTaskModbusSlave+0x300>
        bitWrite(
 8003d36:	1860      	adds	r0, r4, r1
 8003d38:	7cc6      	ldrb	r6, [r0, #19]
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	4098      	lsls	r0, r3
 8003d3e:	b2c0      	uxtb	r0, r0
 8003d40:	9010      	str	r0, [sp, #64]	; 0x40
 8003d42:	2098      	movs	r0, #152	; 0x98
 8003d44:	4684      	mov	ip, r0
 8003d46:	44a4      	add	ip, r4
 8003d48:	4660      	mov	r0, ip
        u8currentRegister = (uint8_t) (u16coil / 16);
 8003d4a:	0915      	lsrs	r5, r2, #4
        bitWrite(
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	b2ed      	uxtb	r5, r5
 8003d50:	006d      	lsls	r5, r5, #1
 8003d52:	5a2d      	ldrh	r5, [r5, r0]
 8003d54:	200f      	movs	r0, #15
 8003d56:	4010      	ands	r0, r2
 8003d58:	4105      	asrs	r5, r0
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	4205      	tst	r5, r0
 8003d5e:	d00e      	beq.n	8003d7e <StartTaskModbusSlave+0x292>
 8003d60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d62:	1865      	adds	r5, r4, r1
 8003d64:	4330      	orrs	r0, r6
 8003d66:	74e8      	strb	r0, [r5, #19]
        u8bitsno ++;
 8003d68:	3301      	adds	r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
        if (u8bitsno > 7)
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	d903      	bls.n	8003d78 <StartTaskModbusSlave+0x28c>
            modH->u8BufferSize++;
 8003d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d72:	3101      	adds	r1, #1
 8003d74:	7019      	strb	r1, [r3, #0]
            u8bitsno = 0;
 8003d76:	2300      	movs	r3, #0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003d78:	3201      	adds	r2, #1
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	e7c7      	b.n	8003d0e <StartTaskModbusSlave+0x222>
        bitWrite(
 8003d7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d80:	4386      	bics	r6, r0
 8003d82:	1860      	adds	r0, r4, r1
 8003d84:	74c6      	strb	r6, [r0, #19]
 8003d86:	e7ef      	b.n	8003d68 <StartTaskModbusSlave+0x27c>
	W.u8[0] = L;
 8003d88:	20ff      	movs	r0, #255	; 0xff
 8003d8a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d8e:	4386      	bics	r6, r0
 8003d90:	4382      	bics	r2, r0
 8003d92:	0030      	movs	r0, r6
 8003d94:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003d96:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	920e      	str	r2, [sp, #56]	; 0x38
	W.u8[1] = H;
 8003d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d9e:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003da0:	0209      	lsls	r1, r1, #8
 8003da2:	4013      	ands	r3, r2
 8003da4:	4319      	orrs	r1, r3
	W.u8[0] = L;
 8003da6:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003da8:	910e      	str	r1, [sp, #56]	; 0x38
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003daa:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003dac:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003dae:	4002      	ands	r2, r0
 8003db0:	0209      	lsls	r1, r1, #8
 8003db2:	4311      	orrs	r1, r2
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003db4:	b2db      	uxtb	r3, r3
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003db6:	b2d2      	uxtb	r2, r2
	W.u8[1] = H;
 8003db8:	910f      	str	r1, [sp, #60]	; 0x3c
    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8003dba:	0051      	lsls	r1, r2, #1
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003dbc:	189a      	adds	r2, r3, r2
 8003dbe:	9211      	str	r2, [sp, #68]	; 0x44
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003dc0:	2298      	movs	r2, #152	; 0x98
    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8003dc2:	7561      	strb	r1, [r4, #21]
    modH->u8BufferSize         = 3;
 8003dc4:	0021      	movs	r1, r4
 8003dc6:	2003      	movs	r0, #3
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003dc8:	4694      	mov	ip, r2
    modH->u8BufferSize         = 3;
 8003dca:	3193      	adds	r1, #147	; 0x93
 8003dcc:	7008      	strb	r0, [r1, #0]
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003dce:	44a4      	add	ip, r4
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003dd0:	780a      	ldrb	r2, [r1, #0]
 8003dd2:	1c95      	adds	r5, r2, #2
 8003dd4:	b2e8      	uxtb	r0, r5
 8003dd6:	9010      	str	r0, [sp, #64]	; 0x40
 8003dd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	db0f      	blt.n	8003dfe <StartTaskModbusSlave+0x312>
    sendTxBuffer(modH);
 8003dde:	0020      	movs	r0, r4
 8003de0:	f7ff fe38 	bl	8003a54 <sendTxBuffer>
				modH->i8state = process_FC3(modH);
 8003de4:	0023      	movs	r3, r4
 8003de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003de8:	33b3      	adds	r3, #179	; 0xb3
				modH->i8state = process_FC6(modH);
 8003dea:	701a      	strb	r2, [r3, #0]
	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003dec:	0020      	movs	r0, r4
 8003dee:	2300      	movs	r3, #0
 8003df0:	30c4      	adds	r0, #196	; 0xc4
 8003df2:	001a      	movs	r2, r3
 8003df4:	0019      	movs	r1, r3
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	f000 fd98 	bl	800492c <xQueueGenericSend>
	    continue;
 8003dfc:	e679      	b.n	8003af2 <StartTaskModbusSlave+0x6>
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003dfe:	4660      	mov	r0, ip
 8003e00:	6807      	ldr	r7, [r0, #0]
 8003e02:	18a0      	adds	r0, r4, r2
 8003e04:	0005      	movs	r5, r0
 8003e06:	005e      	lsls	r6, r3, #1
 8003e08:	5bb8      	ldrh	r0, [r7, r6]
    	modH->u8BufferSize++;
 8003e0a:	3201      	adds	r2, #1
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003e0c:	0a00      	lsrs	r0, r0, #8
    	modH->u8BufferSize++;
 8003e0e:	b2d2      	uxtb	r2, r2
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003e10:	74e8      	strb	r0, [r5, #19]
    	modH->u8BufferSize++;
 8003e12:	700a      	strb	r2, [r1, #0]
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 8003e14:	5bb8      	ldrh	r0, [r7, r6]
 8003e16:	18a2      	adds	r2, r4, r2
 8003e18:	74d0      	strb	r0, [r2, #19]
    	modH->u8BufferSize++;
 8003e1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003e1c:	3301      	adds	r3, #1
    	modH->u8BufferSize++;
 8003e1e:	700a      	strb	r2, [r1, #0]
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e7d5      	b.n	8003dd0 <StartTaskModbusSlave+0x2e4>
	W.u8[0] = L;
 8003e24:	21ff      	movs	r1, #255	; 0xff
 8003e26:	9804      	ldr	r0, [sp, #16]
 8003e28:	7da2      	ldrb	r2, [r4, #22]
 8003e2a:	4388      	bics	r0, r1
 8003e2c:	0001      	movs	r1, r0
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003e2e:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 8003e30:	4311      	orrs	r1, r2
	W.u8[1] = H;
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	400a      	ands	r2, r1
 8003e38:	431a      	orrs	r2, r3
	return W.u16[0];
 8003e3a:	466b      	mov	r3, sp
	W.u8[1] = H;
 8003e3c:	9204      	str	r2, [sp, #16]
    u8currentBit = (uint8_t) (u16coil % 16);
 8003e3e:	220f      	movs	r2, #15
	return W.u16[0];
 8003e40:	8a19      	ldrh	r1, [r3, #16]
    bitWrite(
 8003e42:	7de5      	ldrb	r5, [r4, #23]
    u8currentRegister = (uint8_t) (u16coil / 16);
 8003e44:	090b      	lsrs	r3, r1, #4
    u8currentBit = (uint8_t) (u16coil % 16);
 8003e46:	4011      	ands	r1, r2
 8003e48:	0022      	movs	r2, r4
 8003e4a:	3298      	adds	r2, #152	; 0x98
 8003e4c:	6810      	ldr	r0, [r2, #0]
 8003e4e:	2201      	movs	r2, #1
    u8currentRegister = (uint8_t) (u16coil / 16);
 8003e50:	b2db      	uxtb	r3, r3
    bitWrite(
 8003e52:	4093      	lsls	r3, r2
 8003e54:	408a      	lsls	r2, r1
 8003e56:	2dff      	cmp	r5, #255	; 0xff
 8003e58:	d10e      	bne.n	8003e78 <StartTaskModbusSlave+0x38c>
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	5ac2      	ldrh	r2, [r0, r3]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	52c2      	strh	r2, [r0, r3]
    modH->u8BufferSize = RESPONSE_SIZE;
 8003e62:	0023      	movs	r3, r4
 8003e64:	2206      	movs	r2, #6
 8003e66:	3393      	adds	r3, #147	; 0x93
 8003e68:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8003e6a:	0020      	movs	r0, r4
 8003e6c:	f7ff fdf2 	bl	8003a54 <sendTxBuffer>
				modH->i8state = process_FC6(modH);
 8003e70:	0023      	movs	r3, r4
 8003e72:	2208      	movs	r2, #8
 8003e74:	33b3      	adds	r3, #179	; 0xb3
 8003e76:	e7b8      	b.n	8003dea <StartTaskModbusSlave+0x2fe>
    bitWrite(
 8003e78:	5ac1      	ldrh	r1, [r0, r3]
 8003e7a:	4391      	bics	r1, r2
 8003e7c:	52c1      	strh	r1, [r0, r3]
    modH->u8BufferSize = 6;
 8003e7e:	e7f0      	b.n	8003e62 <StartTaskModbusSlave+0x376>
	W.u8[0] = L;
 8003e80:	20ff      	movs	r0, #255	; 0xff
 8003e82:	9e03      	ldr	r6, [sp, #12]
 8003e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e86:	4386      	bics	r6, r0
 8003e88:	4382      	bics	r2, r0
 8003e8a:	0030      	movs	r0, r6
 8003e8c:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003e8e:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003e90:	431a      	orrs	r2, r3
 8003e92:	920d      	str	r2, [sp, #52]	; 0x34
	W.u8[1] = H;
 8003e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e96:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <StartTaskModbusSlave+0x3d8>)
 8003e98:	0209      	lsls	r1, r1, #8
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	4319      	orrs	r1, r3
	W.u8[0] = L;
 8003e9e:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003ea0:	910d      	str	r1, [sp, #52]	; 0x34
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003ea2:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003ea4:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003ea6:	0209      	lsls	r1, r1, #8
 8003ea8:	4002      	ands	r2, r0
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	9203      	str	r2, [sp, #12]
    modH->au16regs[ u8add ] = u16val;
 8003eae:	0022      	movs	r2, r4
 8003eb0:	3298      	adds	r2, #152	; 0x98
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	9903      	ldr	r1, [sp, #12]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	52d1      	strh	r1, [r2, r3]
 8003ebc:	e7d1      	b.n	8003e62 <StartTaskModbusSlave+0x376>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	0800620c 	.word	0x0800620c
 8003ec4:	ffff00ff 	.word	0xffff00ff
	W.u8[0] = L;
 8003ec8:	20ff      	movs	r0, #255	; 0xff
 8003eca:	9901      	ldr	r1, [sp, #4]
 8003ecc:	7da2      	ldrb	r2, [r4, #22]
 8003ece:	9e02      	ldr	r6, [sp, #8]
 8003ed0:	4381      	bics	r1, r0
 8003ed2:	4311      	orrs	r1, r2
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003ed4:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 8003ed6:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <StartTaskModbusSlave+0x4e4>)
	W.u8[0] = L;
 8003ed8:	4386      	bics	r6, r0
	W.u8[1] = H;
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	4011      	ands	r1, r2
	W.u8[0] = L;
 8003ede:	0030      	movs	r0, r6
	W.u8[1] = H;
 8003ee0:	4319      	orrs	r1, r3
	return W.u16[0];
 8003ee2:	466b      	mov	r3, sp
	W.u8[0] = L;
 8003ee4:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003ee6:	9101      	str	r1, [sp, #4]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003ee8:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003eea:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003eec:	4002      	ands	r2, r0
	return W.u16[0];
 8003eee:	889b      	ldrh	r3, [r3, #4]
	W.u8[1] = H;
 8003ef0:	0209      	lsls	r1, r1, #8
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	9202      	str	r2, [sp, #8]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003ef6:	18d2      	adds	r2, r2, r3
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	0027      	movs	r7, r4
 8003efc:	9212      	str	r2, [sp, #72]	; 0x48
    u8frameByte = 7;
 8003efe:	2007      	movs	r0, #7
    u8bitsno = 0;
 8003f00:	2200      	movs	r2, #0
 8003f02:	3798      	adds	r7, #152	; 0x98
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003f04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003f06:	428b      	cmp	r3, r1
 8003f08:	d0ab      	beq.n	8003e62 <StartTaskModbusSlave+0x376>
        bitWrite(
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	2501      	movs	r5, #1
 8003f0e:	4019      	ands	r1, r3
 8003f10:	408d      	lsls	r5, r1
 8003f12:	b2a9      	uxth	r1, r5
 8003f14:	9110      	str	r1, [sp, #64]	; 0x40
        u8currentRegister = (uint8_t) (u16coil / 16);
 8003f16:	0919      	lsrs	r1, r3, #4
 8003f18:	683d      	ldr	r5, [r7, #0]
 8003f1a:	b2c9      	uxtb	r1, r1
 8003f1c:	0049      	lsls	r1, r1, #1
 8003f1e:	186e      	adds	r6, r5, r1
 8003f20:	5a69      	ldrh	r1, [r5, r1]
        bTemp = bitRead(
 8003f22:	1825      	adds	r5, r4, r0
 8003f24:	7ced      	ldrb	r5, [r5, #19]
 8003f26:	9111      	str	r1, [sp, #68]	; 0x44
 8003f28:	4115      	asrs	r5, r2
        bitWrite(
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	420d      	tst	r5, r1
 8003f2e:	d00d      	beq.n	8003f4c <StartTaskModbusSlave+0x460>
 8003f30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003f32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f34:	4329      	orrs	r1, r5
        u8bitsno ++;
 8003f36:	3201      	adds	r2, #1
 8003f38:	b2d2      	uxtb	r2, r2
        bitWrite(
 8003f3a:	8031      	strh	r1, [r6, #0]
        if (u8bitsno > 7)
 8003f3c:	2a07      	cmp	r2, #7
 8003f3e:	d902      	bls.n	8003f46 <StartTaskModbusSlave+0x45a>
            u8bitsno = 0;
 8003f40:	2200      	movs	r2, #0
            u8frameByte++;
 8003f42:	3001      	adds	r0, #1
 8003f44:	b2c0      	uxtb	r0, r0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003f46:	3301      	adds	r3, #1
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	e7db      	b.n	8003f04 <StartTaskModbusSlave+0x418>
        bitWrite(
 8003f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003f4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f50:	43a9      	bics	r1, r5
 8003f52:	e7f0      	b.n	8003f36 <StartTaskModbusSlave+0x44a>
    modH->au8Buffer[ NB_HI ]   = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	75e3      	strb	r3, [r4, #23]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003f58:	0023      	movs	r3, r4
 8003f5a:	2006      	movs	r0, #6
 8003f5c:	3393      	adds	r3, #147	; 0x93
        modH->au16regs[ u8StartAdd + i ] = temp;
 8003f5e:	0026      	movs	r6, r4
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8003f60:	7da2      	ldrb	r2, [r4, #22]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8003f62:	7e21      	ldrb	r1, [r4, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003f64:	7018      	strb	r0, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8003f66:	0023      	movs	r3, r4
 8003f68:	0049      	lsls	r1, r1, #1
 8003f6a:	1909      	adds	r1, r1, r4
 8003f6c:	0052      	lsls	r2, r2, #1
 8003f6e:	9110      	str	r1, [sp, #64]	; 0x40
	W.u8[0] = L;
 8003f70:	30f9      	adds	r0, #249	; 0xf9
        modH->au16regs[ u8StartAdd + i ] = temp;
 8003f72:	3698      	adds	r6, #152	; 0x98
    for (i = 0; i < u8regsno; i++)
 8003f74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003f76:	4299      	cmp	r1, r3
 8003f78:	d103      	bne.n	8003f82 <StartTaskModbusSlave+0x496>
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003f7a:	0023      	movs	r3, r4
 8003f7c:	3393      	adds	r3, #147	; 0x93
 8003f7e:	781d      	ldrb	r5, [r3, #0]
 8003f80:	e6d0      	b.n	8003d24 <StartTaskModbusSlave+0x238>
	W.u8[0] = L;
 8003f82:	9d00      	ldr	r5, [sp, #0]
 8003f84:	7edf      	ldrb	r7, [r3, #27]
 8003f86:	4385      	bics	r5, r0
 8003f88:	433d      	orrs	r5, r7
	W.u8[1] = H;
 8003f8a:	002f      	movs	r7, r5
        temp = word(
 8003f8c:	7e99      	ldrb	r1, [r3, #26]
	W.u8[1] = H;
 8003f8e:	4d10      	ldr	r5, [pc, #64]	; (8003fd0 <StartTaskModbusSlave+0x4e4>)
 8003f90:	0209      	lsls	r1, r1, #8
 8003f92:	402f      	ands	r7, r5
 8003f94:	430f      	orrs	r7, r1
        modH->au16regs[ u8StartAdd + i ] = temp;
 8003f96:	6831      	ldr	r1, [r6, #0]
	W.u8[1] = H;
 8003f98:	9700      	str	r7, [sp, #0]
        modH->au16regs[ u8StartAdd + i ] = temp;
 8003f9a:	528f      	strh	r7, [r1, r2]
    for (i = 0; i < u8regsno; i++)
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	3202      	adds	r2, #2
 8003fa0:	e7e8      	b.n	8003f74 <StartTaskModbusSlave+0x488>
	    switch ( modH->au8Buffer[ FUNC ] )
 8003fa2:	1e58      	subs	r0, r3, #1
 8003fa4:	280f      	cmp	r0, #15
 8003fa6:	d900      	bls.n	8003faa <StartTaskModbusSlave+0x4be>
 8003fa8:	e634      	b.n	8003c14 <StartTaskModbusSlave+0x128>
 8003faa:	f7fc f8c1 	bl	8000130 <__gnu_thumb1_case_shi>
 8003fae:	fdef      	.short	0xfdef
 8003fb0:	fe65fdef 	.word	0xfe65fdef
 8003fb4:	fe1ffe65 	.word	0xfe1ffe65
 8003fb8:	fe33fe53 	.word	0xfe33fe53
 8003fbc:	fe33fe33 	.word	0xfe33fe33
 8003fc0:	fe33fe33 	.word	0xfe33fe33
 8003fc4:	fe33fe33 	.word	0xfe33fe33
 8003fc8:	fdeffe33 	.word	0xfdeffe33
 8003fcc:	fe65      	.short	0xfe65
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	ffff00ff 	.word	0xffff00ff

08003fd4 <StartTaskModbusMaster>:
{
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	0004      	movs	r4, r0
 8003fd8:	b08f      	sub	sp, #60	; 0x3c
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003fda:	0023      	movs	r3, r4
 8003fdc:	2201      	movs	r2, #1
 8003fde:	ad0a      	add	r5, sp, #40	; 0x28
 8003fe0:	33b4      	adds	r3, #180	; 0xb4
 8003fe2:	0029      	movs	r1, r5
 8003fe4:	4252      	negs	r2, r2
 8003fe6:	6818      	ldr	r0, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003fe8:	0026      	movs	r6, r4
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003fea:	f000 fd79 	bl	8004ae0 <xQueueReceive>
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003fee:	2101      	movs	r1, #1
	  SendQuery(modH, telegram);
 8003ff0:	782b      	ldrb	r3, [r5, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ff2:	36c4      	adds	r6, #196	; 0xc4
	  SendQuery(modH, telegram);
 8003ff4:	9306      	str	r3, [sp, #24]
 8003ff6:	786b      	ldrb	r3, [r5, #1]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ff8:	4249      	negs	r1, r1
	  SendQuery(modH, telegram);
 8003ffa:	9307      	str	r3, [sp, #28]
 8003ffc:	886b      	ldrh	r3, [r5, #2]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ffe:	6830      	ldr	r0, [r6, #0]
	  SendQuery(modH, telegram);
 8004000:	9308      	str	r3, [sp, #32]
 8004002:	88ad      	ldrh	r5, [r5, #4]
 8004004:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004006:	f000 fdf0 	bl	8004bea <xQueueSemaphoreTake>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800400a:	0022      	movs	r2, r4
 800400c:	2100      	movs	r1, #0
 800400e:	32b3      	adds	r2, #179	; 0xb3
 8004010:	9209      	str	r2, [sp, #36]	; 0x24
 8004012:	5651      	ldrsb	r1, [r2, r1]
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8004014:	7a23      	ldrb	r3, [r4, #8]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8004016:	22fe      	movs	r2, #254	; 0xfe
 8004018:	2900      	cmp	r1, #0
 800401a:	d103      	bne.n	8004024 <StartTaskModbusMaster+0x50>
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800401c:	1e5a      	subs	r2, r3, #1
 800401e:	4193      	sbcs	r3, r2
 8004020:	425b      	negs	r3, r3
 8004022:	b2da      	uxtb	r2, r3
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004024:	9b06      	ldr	r3, [sp, #24]
 8004026:	3b01      	subs	r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2bf6      	cmp	r3, #246	; 0xf6
 800402c:	d824      	bhi.n	8004078 <StartTaskModbusMaster+0xa4>
	if(error)
 800402e:	2a00      	cmp	r2, #0
 8004030:	d024      	beq.n	800407c <StartTaskModbusMaster+0xa8>
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8004032:	2300      	movs	r3, #0
		 modH->i8lastError = error;
 8004034:	74a2      	strb	r2, [r4, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8004036:	0019      	movs	r1, r3
 8004038:	001a      	movs	r2, r3
 800403a:	6830      	ldr	r0, [r6, #0]
 800403c:	f000 fc76 	bl	800492c <xQueueGenericSend>
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004040:	2101      	movs	r1, #1
 8004042:	2001      	movs	r0, #1
 8004044:	4249      	negs	r1, r1
 8004046:	f001 fb65 	bl	8005714 <ulTaskNotifyTake>
	  modH->i8lastError = 0;
 800404a:	2500      	movs	r5, #0
 800404c:	74a5      	strb	r5, [r4, #18]
      if(ulNotificationValue == NO_REPLY)
 800404e:	28ff      	cmp	r0, #255	; 0xff
 8004050:	d000      	beq.n	8004054 <StartTaskModbusMaster+0x80>
 8004052:	e095      	b.n	8004180 <StartTaskModbusMaster+0x1ac>
    	  modH->i8state = COM_IDLE;
 8004054:	0023      	movs	r3, r4
 8004056:	33b3      	adds	r3, #179	; 0xb3
 8004058:	701d      	strb	r5, [r3, #0]
    	  modH->u16errCnt++;
 800405a:	0022      	movs	r2, r4
    	  modH->i8lastError = NO_REPLY;
 800405c:	23ff      	movs	r3, #255	; 0xff
    	  modH->u16errCnt++;
 800405e:	32a0      	adds	r2, #160	; 0xa0
    	  modH->i8lastError = NO_REPLY;
 8004060:	74a3      	strb	r3, [r4, #18]
    	  modH->u16errCnt++;
 8004062:	8813      	ldrh	r3, [r2, #0]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004064:	2101      	movs	r1, #1
    	  modH->u16errCnt++;
 8004066:	3301      	adds	r3, #1
 8004068:	8013      	strh	r3, [r2, #0]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800406a:	002b      	movs	r3, r5
 800406c:	2203      	movs	r2, #3
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800406e:	4249      	negs	r1, r1
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004070:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004072:	f001 fb7d 	bl	8005770 <xTaskGenericNotify>
	  continue;
 8004076:	e7b0      	b.n	8003fda <StartTaskModbusMaster+0x6>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004078:	22f7      	movs	r2, #247	; 0xf7
 800407a:	e7da      	b.n	8004032 <StartTaskModbusMaster+0x5e>
	modH->au16regs = telegram.au16reg;
 800407c:	0023      	movs	r3, r4
 800407e:	3398      	adds	r3, #152	; 0x98
 8004080:	601f      	str	r7, [r3, #0]
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	74e3      	strb	r3, [r4, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8004086:	9b07      	ldr	r3, [sp, #28]
 8004088:	7523      	strb	r3, [r4, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800408a:	9b08      	ldr	r3, [sp, #32]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	7563      	strb	r3, [r4, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8004090:	9b08      	ldr	r3, [sp, #32]
 8004092:	75a3      	strb	r3, [r4, #22]
	switch( telegram.u8fct )
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	280f      	cmp	r0, #15
 800409a:	d810      	bhi.n	80040be <StartTaskModbusMaster+0xea>
 800409c:	f7fc f83e 	bl	800011c <__gnu_thumb1_case_uqi>
 80040a0:	08080808 	.word	0x08080808
 80040a4:	0f0f2921 	.word	0x0f0f2921
 80040a8:	0f0f0f0f 	.word	0x0f0f0f0f
 80040ac:	522e0f0f 	.word	0x522e0f0f
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80040b0:	0a2b      	lsrs	r3, r5, #8
 80040b2:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80040b4:	7625      	strb	r5, [r4, #24]
	    modH->u8BufferSize = 6;
 80040b6:	0023      	movs	r3, r4
 80040b8:	2206      	movs	r2, #6
 80040ba:	3393      	adds	r3, #147	; 0x93
 80040bc:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(modH->ModBusSphrHandle);
 80040be:	0020      	movs	r0, r4
 80040c0:	2300      	movs	r3, #0
 80040c2:	30c4      	adds	r0, #196	; 0xc4
 80040c4:	001a      	movs	r2, r3
 80040c6:	0019      	movs	r1, r3
 80040c8:	6800      	ldr	r0, [r0, #0]
 80040ca:	f000 fc2f 	bl	800492c <xQueueGenericSend>
	sendTxBuffer(modH);
 80040ce:	0020      	movs	r0, r4
 80040d0:	f7ff fcc0 	bl	8003a54 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 80040d4:	0023      	movs	r3, r4
 80040d6:	2201      	movs	r2, #1
 80040d8:	33b3      	adds	r3, #179	; 0xb3
 80040da:	701a      	strb	r2, [r3, #0]
	modH->i8lastError = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	74a3      	strb	r3, [r4, #18]
	return 0;
 80040e0:	e7ae      	b.n	8004040 <StartTaskModbusMaster+0x6c>
	    modH->au8Buffer[ NB_HI ]      = (( telegram.au16reg[0]> 0) ? 0xff : 0);
 80040e2:	883b      	ldrh	r3, [r7, #0]
 80040e4:	1e5a      	subs	r2, r3, #1
 80040e6:	4193      	sbcs	r3, r2
 80040e8:	425b      	negs	r3, r3
 80040ea:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 80040ec:	2300      	movs	r3, #0
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 80040ee:	7623      	strb	r3, [r4, #24]
 80040f0:	e7e1      	b.n	80040b6 <StartTaskModbusMaster+0xe2>
	    modH->au8Buffer[ NB_HI ]      = highByte( telegram.au16reg[0]);
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 80040f8:	883b      	ldrh	r3, [r7, #0]
 80040fa:	e7f8      	b.n	80040ee <StartTaskModbusMaster+0x11a>
	    u8regsno = telegram.u16CoilsNo / 16;
 80040fc:	092b      	lsrs	r3, r5, #4
	    u8bytesno = u8regsno * 2;
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
	    if ((telegram.u16CoilsNo % 16) != 0)
 8004102:	072a      	lsls	r2, r5, #28
 8004104:	d001      	beq.n	800410a <StartTaskModbusMaster+0x136>
	        u8bytesno++;
 8004106:	3301      	adds	r3, #1
 8004108:	b2db      	uxtb	r3, r3
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800410a:	0a2a      	lsrs	r2, r5, #8
	    modH->u8BufferSize = 7;
 800410c:	0021      	movs	r1, r4
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800410e:	75e2      	strb	r2, [r4, #23]
	    modH->u8BufferSize = 7;
 8004110:	2207      	movs	r2, #7
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8004112:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8004114:	3193      	adds	r1, #147	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004116:	b29b      	uxth	r3, r3
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8004118:	7625      	strb	r5, [r4, #24]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800411a:	469c      	mov	ip, r3
	    modH->u8BufferSize = 7;
 800411c:	700a      	strb	r2, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800411e:	2200      	movs	r2, #0
 8004120:	4562      	cmp	r2, ip
 8004122:	d2cc      	bcs.n	80040be <StartTaskModbusMaster+0xea>
	        if(i%2)
 8004124:	2301      	movs	r3, #1
 8004126:	0850      	lsrs	r0, r2, #1
 8004128:	0040      	lsls	r0, r0, #1
 800412a:	5bc5      	ldrh	r5, [r0, r7]
 800412c:	7808      	ldrb	r0, [r1, #0]
 800412e:	1826      	adds	r6, r4, r0
 8004130:	421a      	tst	r2, r3
 8004132:	d005      	beq.n	8004140 <StartTaskModbusMaster+0x16c>
	        modH->u8BufferSize++;
 8004134:	3001      	adds	r0, #1
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004136:	3201      	adds	r2, #1
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 8004138:	74f5      	strb	r5, [r6, #19]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800413a:	b292      	uxth	r2, r2
	        modH->u8BufferSize++;
 800413c:	7008      	strb	r0, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800413e:	e7ef      	b.n	8004120 <StartTaskModbusMaster+0x14c>
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 8004140:	0a2d      	lsrs	r5, r5, #8
 8004142:	e7f7      	b.n	8004134 <StartTaskModbusMaster+0x160>
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004144:	0a2b      	lsrs	r3, r5, #8
 8004146:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8004148:	b2eb      	uxtb	r3, r5
 800414a:	7623      	strb	r3, [r4, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8004150:	0023      	movs	r3, r4
 8004152:	2207      	movs	r2, #7
 8004154:	3393      	adds	r3, #147	; 0x93
 8004156:	701a      	strb	r2, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004158:	003a      	movs	r2, r7
 800415a:	006d      	lsls	r5, r5, #1
 800415c:	197d      	adds	r5, r7, r5
 800415e:	42aa      	cmp	r2, r5
 8004160:	d0ad      	beq.n	80040be <StartTaskModbusMaster+0xea>
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  telegram.au16reg[ i ] );
 8004162:	7818      	ldrb	r0, [r3, #0]
 8004164:	8811      	ldrh	r1, [r2, #0]
 8004166:	1826      	adds	r6, r4, r0
 8004168:	0a09      	lsrs	r1, r1, #8
 800416a:	74f1      	strb	r1, [r6, #19]
	        modH->u8BufferSize++;
 800416c:	1c41      	adds	r1, r0, #1
 800416e:	b2c9      	uxtb	r1, r1
 8004170:	7019      	strb	r1, [r3, #0]
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 8004172:	8816      	ldrh	r6, [r2, #0]
 8004174:	1861      	adds	r1, r4, r1
	        modH->u8BufferSize++;
 8004176:	3002      	adds	r0, #2
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 8004178:	74ce      	strb	r6, [r1, #19]
	        modH->u8BufferSize++;
 800417a:	3202      	adds	r2, #2
 800417c:	7018      	strb	r0, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800417e:	e7ee      	b.n	800415e <StartTaskModbusMaster+0x18a>
      i8state = getRxBuffer(modH);
 8004180:	0020      	movs	r0, r4
 8004182:	f7ff fb83 	bl	800388c <getRxBuffer>
	  if (i8state < 6){
 8004186:	2805      	cmp	r0, #5
 8004188:	dc0c      	bgt.n	80041a4 <StartTaskModbusMaster+0x1d0>
		  modH->i8state = COM_IDLE;
 800418a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		  modH->u16errCnt++;
 800418c:	0022      	movs	r2, r4
		  modH->i8state = COM_IDLE;
 800418e:	701d      	strb	r5, [r3, #0]
		  modH->i8lastError = ERR_BAD_SIZE;
 8004190:	23fa      	movs	r3, #250	; 0xfa
		  modH->u16errCnt++;
 8004192:	32a0      	adds	r2, #160	; 0xa0
		  modH->i8lastError = ERR_BAD_SIZE;
 8004194:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 8004196:	8813      	ldrh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004198:	2106      	movs	r1, #6
		  modH->u16errCnt++;
 800419a:	3301      	adds	r3, #1
 800419c:	8013      	strh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800419e:	002b      	movs	r3, r5
 80041a0:	2203      	movs	r2, #3
 80041a2:	e764      	b.n	800406e <StartTaskModbusMaster+0x9a>
	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80041a4:	0020      	movs	r0, r4
 80041a6:	9500      	str	r5, [sp, #0]
 80041a8:	30c0      	adds	r0, #192	; 0xc0
 80041aa:	002a      	movs	r2, r5
 80041ac:	002b      	movs	r3, r5
 80041ae:	2103      	movs	r1, #3
 80041b0:	6800      	ldr	r0, [r0, #0]
 80041b2:	f001 fc4d 	bl	8005a50 <xTimerGenericCommand>
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80041b6:	0023      	movs	r3, r4
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80041b8:	0020      	movs	r0, r4
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80041ba:	3393      	adds	r3, #147	; 0x93
 80041bc:	781e      	ldrb	r6, [r3, #0]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80041be:	3013      	adds	r0, #19
 80041c0:	1eb1      	subs	r1, r6, #2
 80041c2:	b2c9      	uxtb	r1, r1
 80041c4:	f7ff fc26 	bl	8003a14 <calcCRC>
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80041c8:	19a6      	adds	r6, r4, r6
 80041ca:	7c72      	ldrb	r2, [r6, #17]
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80041cc:	7cb3      	ldrb	r3, [r6, #18]
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80041ce:	0212      	lsls	r2, r2, #8
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80041d0:	4313      	orrs	r3, r2
 80041d2:	4283      	cmp	r3, r0
 80041d4:	d00d      	beq.n	80041f2 <StartTaskModbusMaster+0x21e>
    	modH->u16errCnt ++;
 80041d6:	0022      	movs	r2, r4
 80041d8:	2104      	movs	r1, #4
 80041da:	32a0      	adds	r2, #160	; 0xa0
 80041dc:	8813      	ldrh	r3, [r2, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	8013      	strh	r3, [r2, #0]
        return ERR_BAD_CRC;
 80041e2:	4249      	negs	r1, r1
		 modH->i8state = COM_IDLE;
 80041e4:	0022      	movs	r2, r4
 80041e6:	2300      	movs	r3, #0
 80041e8:	32b3      	adds	r2, #179	; 0xb3
 80041ea:	7013      	strb	r3, [r2, #0]
         modH->i8lastError = u8exception;
 80041ec:	74a1      	strb	r1, [r4, #18]
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80041ee:	2203      	movs	r2, #3
 80041f0:	e73e      	b.n	8004070 <StartTaskModbusMaster+0x9c>
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 80041f2:	2214      	movs	r2, #20
 80041f4:	56a2      	ldrsb	r2, [r4, r2]
 80041f6:	7d23      	ldrb	r3, [r4, #20]
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	da06      	bge.n	800420a <StartTaskModbusMaster+0x236>
    	modH->u16errCnt ++;
 80041fc:	0022      	movs	r2, r4
 80041fe:	32a0      	adds	r2, #160	; 0xa0
 8004200:	8813      	ldrh	r3, [r2, #0]
 8004202:	2105      	movs	r1, #5
 8004204:	3301      	adds	r3, #1
 8004206:	8013      	strh	r3, [r2, #0]
        return ERR_EXCEPTION;
 8004208:	e7eb      	b.n	80041e2 <StartTaskModbusMaster+0x20e>
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <StartTaskModbusMaster+0x324>)
 800420c:	5caa      	ldrb	r2, [r5, r2]
 800420e:	429a      	cmp	r2, r3
 8004210:	d009      	beq.n	8004226 <StartTaskModbusMaster+0x252>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004212:	3501      	adds	r5, #1
 8004214:	2d08      	cmp	r5, #8
 8004216:	d1f8      	bne.n	800420a <StartTaskModbusMaster+0x236>
    	modH->u16errCnt ++;
 8004218:	0022      	movs	r2, r4
 800421a:	32a0      	adds	r2, #160	; 0xa0
 800421c:	8813      	ldrh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 800421e:	2101      	movs	r1, #1
    	modH->u16errCnt ++;
 8004220:	3301      	adds	r3, #1
 8004222:	8013      	strh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 8004224:	e7de      	b.n	80041e4 <StartTaskModbusMaster+0x210>
    return 0; // OK, no exception code thrown
 8004226:	2500      	movs	r5, #0
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004228:	0023      	movs	r3, r4
 800422a:	2101      	movs	r1, #1
 800422c:	33c4      	adds	r3, #196	; 0xc4
	  modH->i8lastError = u8exception;
 800422e:	74a5      	strb	r5, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	4249      	negs	r1, r1
 8004234:	f000 fcd9 	bl	8004bea <xQueueSemaphoreTake>
	  switch( modH->au8Buffer[ FUNC ] )
 8004238:	7d23      	ldrb	r3, [r4, #20]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d806      	bhi.n	800424c <StartTaskModbusMaster+0x278>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03e      	beq.n	80042c0 <StartTaskModbusMaster+0x2ec>
 8004242:	0027      	movs	r7, r4
 8004244:	002b      	movs	r3, r5
 8004246:	20ff      	movs	r0, #255	; 0xff
 8004248:	3798      	adds	r7, #152	; 0x98
 800424a:	e036      	b.n	80042ba <StartTaskModbusMaster+0x2e6>
 800424c:	3b03      	subs	r3, #3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d836      	bhi.n	80042c0 <StartTaskModbusMaster+0x2ec>
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004252:	0021      	movs	r1, r4
	  switch( modH->au8Buffer[ FUNC ] )
 8004254:	002b      	movs	r3, r5
	W.u8[0] = L;
 8004256:	20ff      	movs	r0, #255	; 0xff
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004258:	3198      	adds	r1, #152	; 0x98
 800425a:	b2df      	uxtb	r7, r3
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 800425c:	7d66      	ldrb	r6, [r4, #21]
 800425e:	007a      	lsls	r2, r7, #1
 8004260:	3203      	adds	r2, #3
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	0876      	lsrs	r6, r6, #1
 8004266:	42b7      	cmp	r7, r6
 8004268:	d22a      	bcs.n	80042c0 <StartTaskModbusMaster+0x2ec>
	W.u8[0] = L;
 800426a:	9d03      	ldr	r5, [sp, #12]
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 800426c:	18a7      	adds	r7, r4, r2
 800426e:	7cfa      	ldrb	r2, [r7, #19]
	W.u8[0] = L;
 8004270:	7d3f      	ldrb	r7, [r7, #20]
 8004272:	4385      	bics	r5, r0
 8004274:	433d      	orrs	r5, r7
	W.u8[1] = H;
 8004276:	002f      	movs	r7, r5
 8004278:	4d20      	ldr	r5, [pc, #128]	; (80042fc <StartTaskModbusMaster+0x328>)
 800427a:	0212      	lsls	r2, r2, #8
 800427c:	402f      	ands	r7, r5
 800427e:	4317      	orrs	r7, r2
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004280:	680a      	ldr	r2, [r1, #0]
 8004282:	005e      	lsls	r6, r3, #1
	W.u8[1] = H;
 8004284:	9703      	str	r7, [sp, #12]
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004286:	5397      	strh	r7, [r2, r6]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8004288:	3301      	adds	r3, #1
 800428a:	e7e6      	b.n	800425a <StartTaskModbusMaster+0x286>
        if(i%2)
 800428c:	18e2      	adds	r2, r4, r3
 800428e:	683d      	ldr	r5, [r7, #0]
 8004290:	7d91      	ldrb	r1, [r2, #22]
 8004292:	085a      	lsrs	r2, r3, #1
 8004294:	0052      	lsls	r2, r2, #1
 8004296:	18ae      	adds	r6, r5, r2
 8004298:	5aaa      	ldrh	r2, [r5, r2]
 800429a:	2501      	movs	r5, #1
 800429c:	422b      	tst	r3, r5
 800429e:	d01f      	beq.n	80042e0 <StartTaskModbusMaster+0x30c>
	W.u8[0] = L;
 80042a0:	9d05      	ldr	r5, [sp, #20]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	4385      	bics	r5, r0
 80042a6:	4315      	orrs	r5, r2
	W.u8[1] = H;
 80042a8:	002a      	movs	r2, r5
 80042aa:	4d14      	ldr	r5, [pc, #80]	; (80042fc <StartTaskModbusMaster+0x328>)
 80042ac:	0209      	lsls	r1, r1, #8
 80042ae:	402a      	ands	r2, r5
 80042b0:	430a      	orrs	r2, r1
 80042b2:	9205      	str	r2, [sp, #20]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80042b4:	3301      	adds	r3, #1
        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80042b6:	8032      	strh	r2, [r6, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	7d62      	ldrb	r2, [r4, #21]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d8e5      	bhi.n	800428c <StartTaskModbusMaster+0x2b8>
	  modH->i8state = COM_IDLE;
 80042c0:	0023      	movs	r3, r4
 80042c2:	2500      	movs	r5, #0
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80042c4:	0020      	movs	r0, r4
	  modH->i8state = COM_IDLE;
 80042c6:	33b3      	adds	r3, #179	; 0xb3
 80042c8:	701d      	strb	r5, [r3, #0]
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80042ca:	30c4      	adds	r0, #196	; 0xc4
 80042cc:	002b      	movs	r3, r5
 80042ce:	0029      	movs	r1, r5
 80042d0:	002a      	movs	r2, r5
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	f000 fb2a 	bl	800492c <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80042d8:	2112      	movs	r1, #18
 80042da:	002b      	movs	r3, r5
 80042dc:	5661      	ldrsb	r1, [r4, r1]
 80042de:	e786      	b.n	80041ee <StartTaskModbusMaster+0x21a>
	W.u8[0] = L;
 80042e0:	9d04      	ldr	r5, [sp, #16]
	W.u8[1] = H;
 80042e2:	0a12      	lsrs	r2, r2, #8
	W.u8[0] = L;
 80042e4:	4385      	bics	r5, r0
 80042e6:	430d      	orrs	r5, r1
	W.u8[1] = H;
 80042e8:	0029      	movs	r1, r5
 80042ea:	4d04      	ldr	r5, [pc, #16]	; (80042fc <StartTaskModbusMaster+0x328>)
 80042ec:	0212      	lsls	r2, r2, #8
 80042ee:	4029      	ands	r1, r5
 80042f0:	4311      	orrs	r1, r2
        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80042f2:	000a      	movs	r2, r1
	W.u8[1] = H;
 80042f4:	9104      	str	r1, [sp, #16]
	return W.u16[0];
 80042f6:	e7dd      	b.n	80042b4 <StartTaskModbusMaster+0x2e0>
 80042f8:	0800620c 	.word	0x0800620c
 80042fc:	ffff00ff 	.word	0xffff00ff

08004300 <HAL_UART_TxCpltCallback>:
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004300:	2300      	movs	r3, #0
{
 8004302:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8004304:	4a10      	ldr	r2, [pc, #64]	; (8004348 <HAL_UART_TxCpltCallback+0x48>)
{
 8004306:	b085      	sub	sp, #20
	for (i = 0; i < numberHandlers; i++ )
 8004308:	7811      	ldrb	r1, [r2, #0]
	{
	   	if (mHandlers[i]->port == huart )
 800430a:	4c10      	ldr	r4, [pc, #64]	; (800434c <HAL_UART_TxCpltCallback+0x4c>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800430c:	9303      	str	r3, [sp, #12]
	for (i = 0; i < numberHandlers; i++ )
 800430e:	4299      	cmp	r1, r3
 8004310:	dd11      	ble.n	8004336 <HAL_UART_TxCpltCallback+0x36>
	   	if (mHandlers[i]->port == huart )
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	58a2      	ldr	r2, [r4, r2]
 8004316:	6855      	ldr	r5, [r2, #4]
 8004318:	4285      	cmp	r5, r0
 800431a:	d10e      	bne.n	800433a <HAL_UART_TxCpltCallback+0x3a>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800431c:	32b8      	adds	r2, #184	; 0xb8
 800431e:	ab03      	add	r3, sp, #12
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	0010      	movs	r0, r2
 8004324:	2300      	movs	r3, #0
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	001a      	movs	r2, r3
 800432a:	0019      	movs	r1, r3
 800432c:	f001 fa7a 	bl	8005824 <xTaskGenericNotifyFromISR>

	   		break;

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_UART_TxCpltCallback+0x3e>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8004336:	b005      	add	sp, #20
 8004338:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < numberHandlers; i++ )
 800433a:	3301      	adds	r3, #1
 800433c:	e7e7      	b.n	800430e <HAL_UART_TxCpltCallback+0xe>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_UART_TxCpltCallback+0x50>)
 8004342:	0552      	lsls	r2, r2, #21
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	e7f6      	b.n	8004336 <HAL_UART_TxCpltCallback+0x36>
 8004348:	2000002c 	.word	0x2000002c
 800434c:	20001334 	.word	0x20001334
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004356:	2300      	movs	r3, #0

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_UART_RxCpltCallback+0x68>)
    {
    	if (mHandlers[i]->port == UartHandle  )
 800435a:	4c19      	ldr	r4, [pc, #100]	; (80043c0 <HAL_UART_RxCpltCallback+0x6c>)
    for (i = 0; i < numberHandlers; i++ )
 800435c:	7811      	ldrb	r1, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800435e:	9303      	str	r3, [sp, #12]
    for (i = 0; i < numberHandlers; i++ )
 8004360:	4299      	cmp	r1, r3
 8004362:	dd22      	ble.n	80043aa <HAL_UART_RxCpltCallback+0x56>
    	if (mHandlers[i]->port == UartHandle  )
 8004364:	009d      	lsls	r5, r3, #2
 8004366:	5962      	ldr	r2, [r4, r5]
 8004368:	6856      	ldr	r6, [r2, #4]
 800436a:	4286      	cmp	r6, r0
 800436c:	d11e      	bne.n	80043ac <HAL_UART_RxCpltCallback+0x58>
    	{
    		RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800436e:	0013      	movs	r3, r2
 8004370:	32c8      	adds	r2, #200	; 0xc8
 8004372:	33b2      	adds	r3, #178	; 0xb2
 8004374:	0010      	movs	r0, r2
 8004376:	7819      	ldrb	r1, [r3, #0]
 8004378:	f7ff fa42 	bl	8003800 <RingAdd>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800437c:	5963      	ldr	r3, [r4, r5]
 800437e:	2201      	movs	r2, #1
 8004380:	0019      	movs	r1, r3
 8004382:	6858      	ldr	r0, [r3, #4]
 8004384:	31b2      	adds	r1, #178	; 0xb2
 8004386:	f7ff f92d 	bl	80035e4 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800438a:	5963      	ldr	r3, [r4, r5]
 800438c:	33bc      	adds	r3, #188	; 0xbc
 800438e:	681c      	ldr	r4, [r3, #0]
 8004390:	f000 ff0c 	bl	80051ac <xTaskGetTickCountFromISR>
 8004394:	2300      	movs	r3, #0
 8004396:	0002      	movs	r2, r0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2107      	movs	r1, #7
 800439c:	ab03      	add	r3, sp, #12
 800439e:	0020      	movs	r0, r4
 80043a0:	f001 fb56 	bl	8005a50 <xTimerGenericCommand>
    		break;
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_UART_RxCpltCallback+0x5c>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80043aa:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    for (i = 0; i < numberHandlers; i++ )
 80043ac:	3301      	adds	r3, #1
 80043ae:	e7d7      	b.n	8004360 <HAL_UART_RxCpltCallback+0xc>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <HAL_UART_RxCpltCallback+0x70>)
 80043b4:	0552      	lsls	r2, r2, #21
 80043b6:	601a      	str	r2, [r3, #0]
}
 80043b8:	e7f7      	b.n	80043aa <HAL_UART_RxCpltCallback+0x56>
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	2000002c 	.word	0x2000002c
 80043c0:	20001334 	.word	0x20001334
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 80043ca:	b510      	push	{r4, lr}
  SysTick->CTRL;
 80043cc:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043ce:	f001 f8d5 	bl	800557c <xTaskGetSchedulerState>
 80043d2:	2801      	cmp	r0, #1
 80043d4:	d001      	beq.n	80043da <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 80043d6:	f001 fd05 	bl	8005de4 <xPortSysTickHandler>
  }
}
 80043da:	bd10      	pop	{r4, pc}
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <osKernelInitialize+0x20>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d105      	bne.n	80043fc <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 80043f4:	4770      	bx	lr
    stat = osErrorISR;
 80043f6:	2006      	movs	r0, #6
      stat = osError;
 80043f8:	4240      	negs	r0, r0
  return (stat);
 80043fa:	e7fb      	b.n	80043f4 <osKernelInitialize+0x14>
      stat = osError;
 80043fc:	2001      	movs	r0, #1
 80043fe:	e7fb      	b.n	80043f8 <osKernelInitialize+0x18>
 8004400:	2000028c 	.word	0x2000028c

08004404 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004404:	b510      	push	{r4, lr}
 8004406:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800440a:	2c00      	cmp	r4, #0
 800440c:	d10e      	bne.n	800442c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <osKernelStart+0x34>)
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10d      	bne.n	8004432 <osKernelStart+0x2e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004416:	4909      	ldr	r1, [pc, #36]	; (800443c <osKernelStart+0x38>)
 8004418:	69cb      	ldr	r3, [r1, #28]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004420:	2302      	movs	r3, #2
 8004422:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004424:	f000 fe7e 	bl	8005124 <vTaskStartScheduler>
      stat = osOK;
 8004428:	0020      	movs	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800442a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800442c:	2006      	movs	r0, #6
      stat = osError;
 800442e:	4240      	negs	r0, r0
  return (stat);
 8004430:	e7fb      	b.n	800442a <osKernelStart+0x26>
      stat = osError;
 8004432:	2001      	movs	r0, #1
 8004434:	e7fb      	b.n	800442e <osKernelStart+0x2a>
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	2000028c 	.word	0x2000028c
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004444:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	9105      	str	r1, [sp, #20]
  hTask = NULL;
 800444a:	9207      	str	r2, [sp, #28]
 800444c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004450:	2a00      	cmp	r2, #0
 8004452:	d124      	bne.n	800449e <osThreadNew+0x5e>
 8004454:	2800      	cmp	r0, #0
 8004456:	d022      	beq.n	800449e <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004458:	2c00      	cmp	r4, #0
 800445a:	d038      	beq.n	80044ce <osThreadNew+0x8e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800445c:	69a5      	ldr	r5, [r4, #24]
 800445e:	2d00      	cmp	r5, #0
 8004460:	d100      	bne.n	8004464 <osThreadNew+0x24>
 8004462:	3518      	adds	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004464:	1e69      	subs	r1, r5, #1
 8004466:	002f      	movs	r7, r5
        return (NULL);
 8004468:	2200      	movs	r2, #0
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800446a:	2937      	cmp	r1, #55	; 0x37
 800446c:	d818      	bhi.n	80044a0 <osThreadNew+0x60>
 800446e:	6861      	ldr	r1, [r4, #4]
 8004470:	07cb      	lsls	r3, r1, #31
 8004472:	d415      	bmi.n	80044a0 <osThreadNew+0x60>
      }

      if (attr->stack_size > 0U) {
 8004474:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 8004476:	3280      	adds	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 8004478:	2e00      	cmp	r6, #0
 800447a:	d000      	beq.n	800447e <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800447c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800447e:	68a3      	ldr	r3, [r4, #8]
      if (attr->name != NULL) {
 8004480:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	68e3      	ldr	r3, [r4, #12]
 8004486:	469c      	mov	ip, r3
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <osThreadNew+0x66>
 800448e:	4663      	mov	r3, ip
 8004490:	2b5b      	cmp	r3, #91	; 0x5b
 8004492:	d904      	bls.n	800449e <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004494:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004496:	2c00      	cmp	r4, #0
 8004498:	d001      	beq.n	800449e <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800449a:	2e00      	cmp	r6, #0
 800449c:	d11a      	bne.n	80044d4 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800449e:	9a07      	ldr	r2, [sp, #28]
}
 80044a0:	0010      	movs	r0, r2
 80044a2:	b009      	add	sp, #36	; 0x24
 80044a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044a6:	4663      	mov	r3, ip
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f8      	bne.n	800449e <osThreadNew+0x5e>
      if (mem == 0) {
 80044ac:	6924      	ldr	r4, [r4, #16]
 80044ae:	2c00      	cmp	r4, #0
 80044b0:	d1f5      	bne.n	800449e <osThreadNew+0x5e>
 80044b2:	000c      	movs	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044b4:	a907      	add	r1, sp, #28
 80044b6:	9101      	str	r1, [sp, #4]
 80044b8:	9b05      	ldr	r3, [sp, #20]
 80044ba:	0021      	movs	r1, r4
 80044bc:	b292      	uxth	r2, r2
 80044be:	9700      	str	r7, [sp, #0]
 80044c0:	f000 fe04 	bl	80050cc <xTaskCreate>
 80044c4:	2801      	cmp	r0, #1
 80044c6:	d0ea      	beq.n	800449e <osThreadNew+0x5e>
            hTask = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	9307      	str	r3, [sp, #28]
 80044cc:	e7e7      	b.n	800449e <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;
 80044ce:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 80044d0:	2280      	movs	r2, #128	; 0x80
 80044d2:	e7ef      	b.n	80044b4 <osThreadNew+0x74>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	9401      	str	r4, [sp, #4]
 80044d8:	9302      	str	r3, [sp, #8]
 80044da:	9500      	str	r5, [sp, #0]
 80044dc:	9b05      	ldr	r3, [sp, #20]
 80044de:	f000 fdcf 	bl	8005080 <xTaskCreateStatic>
 80044e2:	9007      	str	r0, [sp, #28]
 80044e4:	e7db      	b.n	800449e <osThreadNew+0x5e>

080044e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044e6:	b510      	push	{r4, lr}
 80044e8:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ec:	2c00      	cmp	r4, #0
 80044ee:	d105      	bne.n	80044fc <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d001      	beq.n	80044f8 <osDelay+0x12>
      vTaskDelay(ticks);
 80044f4:	f000 ff48 	bl	8005388 <vTaskDelay>
    }
  }

  return (stat);
}
 80044f8:	0020      	movs	r0, r4
 80044fa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80044fc:	2406      	movs	r4, #6
 80044fe:	4264      	negs	r4, r4
 8004500:	e7fa      	b.n	80044f8 <osDelay+0x12>

08004502 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004504:	000e      	movs	r6, r1
 8004506:	0015      	movs	r5, r2
 8004508:	f3ef 8105 	mrs	r1, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800450c:	2900      	cmp	r1, #0
 800450e:	d002      	beq.n	8004516 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8004510:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004512:	0020      	movs	r0, r4
 8004514:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004516:	2800      	cmp	r0, #0
 8004518:	d0fa      	beq.n	8004510 <osSemaphoreNew+0xe>
 800451a:	42b0      	cmp	r0, r6
 800451c:	d3f8      	bcc.n	8004510 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800451e:	2a00      	cmp	r2, #0
 8004520:	d01d      	beq.n	800455e <osSemaphoreNew+0x5c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004522:	6893      	ldr	r3, [r2, #8]
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <osSemaphoreNew+0x58>
 800452a:	2a4f      	cmp	r2, #79	; 0x4f
 800452c:	d9f0      	bls.n	8004510 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800452e:	2801      	cmp	r0, #1
 8004530:	d128      	bne.n	8004584 <osSemaphoreNew+0x82>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004532:	2203      	movs	r2, #3
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	000a      	movs	r2, r1
 8004538:	f000 f97d 	bl	8004836 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800453c:	1e04      	subs	r4, r0, #0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800453e:	d0e7      	beq.n	8004510 <osSemaphoreNew+0xe>
 8004540:	2e00      	cmp	r6, #0
 8004542:	d018      	beq.n	8004576 <osSemaphoreNew+0x74>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004544:	2300      	movs	r3, #0
 8004546:	001a      	movs	r2, r3
 8004548:	0019      	movs	r1, r3
 800454a:	f000 f9ef 	bl	800492c <xQueueGenericSend>
 800454e:	2801      	cmp	r0, #1
 8004550:	d011      	beq.n	8004576 <osSemaphoreNew+0x74>
            vSemaphoreDelete (hSemaphore);
 8004552:	0020      	movs	r0, r4
 8004554:	f000 fc16 	bl	8004d84 <vQueueDelete>
 8004558:	e7da      	b.n	8004510 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800455a:	2a00      	cmp	r2, #0
 800455c:	d1d8      	bne.n	8004510 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800455e:	2801      	cmp	r0, #1
 8004560:	d104      	bne.n	800456c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8004562:	2203      	movs	r2, #3
 8004564:	2100      	movs	r1, #0
 8004566:	f000 f997 	bl	8004898 <xQueueGenericCreate>
 800456a:	e7e7      	b.n	800453c <osSemaphoreNew+0x3a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800456c:	0031      	movs	r1, r6
 800456e:	f000 f9cb 	bl	8004908 <xQueueCreateCountingSemaphore>
 8004572:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 8004574:	d0cc      	beq.n	8004510 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8004576:	2d00      	cmp	r5, #0
 8004578:	d10a      	bne.n	8004590 <osSemaphoreNew+0x8e>
        vQueueAddToRegistry (hSemaphore, name);
 800457a:	0029      	movs	r1, r5
 800457c:	0020      	movs	r0, r4
 800457e:	f000 fbdb 	bl	8004d38 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8004582:	e7c6      	b.n	8004512 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004584:	001a      	movs	r2, r3
 8004586:	0031      	movs	r1, r6
 8004588:	f000 f9a9 	bl	80048de <xQueueCreateCountingSemaphoreStatic>
 800458c:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 800458e:	d0bf      	beq.n	8004510 <osSemaphoreNew+0xe>
          name = attr->name;
 8004590:	682d      	ldr	r5, [r5, #0]
 8004592:	e7f2      	b.n	800457a <osSemaphoreNew+0x78>

08004594 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004596:	0014      	movs	r4, r2
 8004598:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800459c:	2e00      	cmp	r6, #0
 800459e:	d002      	beq.n	80045a6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80045a0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80045a2:	0028      	movs	r0, r5
 80045a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d0fa      	beq.n	80045a0 <osMessageQueueNew+0xc>
 80045aa:	2900      	cmp	r1, #0
 80045ac:	d0f8      	beq.n	80045a0 <osMessageQueueNew+0xc>
    if (attr != NULL) {
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	d01c      	beq.n	80045ec <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045b2:	6893      	ldr	r3, [r2, #8]
 80045b4:	68d2      	ldr	r2, [r2, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d010      	beq.n	80045dc <osMessageQueueNew+0x48>
 80045ba:	2a4f      	cmp	r2, #79	; 0x4f
 80045bc:	d9f0      	bls.n	80045a0 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045be:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d0ed      	beq.n	80045a0 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045c4:	000d      	movs	r5, r1
 80045c6:	4345      	muls	r5, r0
 80045c8:	6967      	ldr	r7, [r4, #20]
 80045ca:	42af      	cmp	r7, r5
 80045cc:	d3e8      	bcc.n	80045a0 <osMessageQueueNew+0xc>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045ce:	9600      	str	r6, [sp, #0]
 80045d0:	f000 f931 	bl	8004836 <xQueueGenericCreateStatic>
 80045d4:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80045d6:	d0e3      	beq.n	80045a0 <osMessageQueueNew+0xc>
        name = attr->name;
 80045d8:	6824      	ldr	r4, [r4, #0]
 80045da:	e00e      	b.n	80045fa <osMessageQueueNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d1df      	bne.n	80045a0 <osMessageQueueNew+0xc>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1dc      	bne.n	80045a0 <osMessageQueueNew+0xc>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045e6:	6963      	ldr	r3, [r4, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1d9      	bne.n	80045a0 <osMessageQueueNew+0xc>
          hQueue = xQueueCreate (msg_count, msg_size);
 80045ec:	2200      	movs	r2, #0
 80045ee:	f000 f953 	bl	8004898 <xQueueGenericCreate>
 80045f2:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80045f4:	d0d4      	beq.n	80045a0 <osMessageQueueNew+0xc>
      if (attr != NULL) {
 80045f6:	2c00      	cmp	r4, #0
 80045f8:	d1ee      	bne.n	80045d8 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80045fa:	0021      	movs	r1, r4
 80045fc:	0028      	movs	r0, r5
 80045fe:	f000 fb9b 	bl	8004d38 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8004602:	e7ce      	b.n	80045a2 <osMessageQueueNew+0xe>

08004604 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <vApplicationGetIdleTaskMemory+0x10>)
 8004606:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <vApplicationGetIdleTaskMemory+0x14>)
 800460a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	6013      	str	r3, [r2, #0]
}
 8004610:	4770      	bx	lr
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	20000230 	.word	0x20000230
 8004618:	20000030 	.word	0x20000030

0800461c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <vApplicationGetTimerTaskMemory+0x10>)
 800461e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <vApplicationGetTimerTaskMemory+0x14>)
 8004622:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	4770      	bx	lr
 800462c:	20000690 	.word	0x20000690
 8004630:	20000290 	.word	0x20000290

08004634 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004634:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004636:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004638:	3308      	adds	r3, #8
 800463a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800463c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800463e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004640:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004642:	4252      	negs	r2, r2
 8004644:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004646:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004648:	4770      	bx	lr

0800464a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800464e:	4770      	bx	lr

08004650 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004650:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004652:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004654:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004656:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800465c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800465e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004660:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004662:	3301      	adds	r3, #1
 8004664:	6003      	str	r3, [r0, #0]
}
 8004666:	4770      	bx	lr

08004668 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004668:	0002      	movs	r2, r0
{
 800466a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800466c:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800466e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004670:	1c63      	adds	r3, r4, #1
 8004672:	d10a      	bne.n	800468a <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004674:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800467a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800467c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800467e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004680:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004682:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004684:	3301      	adds	r3, #1
 8004686:	6003      	str	r3, [r0, #0]
}
 8004688:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800468a:	0013      	movs	r3, r2
 800468c:	6852      	ldr	r2, [r2, #4]
 800468e:	6815      	ldr	r5, [r2, #0]
 8004690:	42a5      	cmp	r5, r4
 8004692:	d9fa      	bls.n	800468a <vListInsert+0x22>
 8004694:	e7ef      	b.n	8004676 <vListInsert+0xe>

08004696 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004696:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004698:	6841      	ldr	r1, [r0, #4]
 800469a:	6882      	ldr	r2, [r0, #8]
 800469c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800469e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	4281      	cmp	r1, r0
 80046a4:	d100      	bne.n	80046a8 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a8:	2200      	movs	r2, #0
 80046aa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	3a01      	subs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b2:	6818      	ldr	r0, [r3, #0]
}
 80046b4:	4770      	bx	lr

080046b6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046b6:	b510      	push	{r4, lr}
 80046b8:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046ba:	f001 fb49 	bl	8005d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046be:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80046c0:	f001 fb52 	bl	8005d68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046c4:	4260      	negs	r0, r4
 80046c6:	4160      	adcs	r0, r4

	return xReturn;
}
 80046c8:	bd10      	pop	{r4, pc}

080046ca <prvCopyDataToQueue>:
{
 80046ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046cc:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80046d0:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	d10c      	bne.n	80046f2 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046d8:	6807      	ldr	r7, [r0, #0]
BaseType_t xReturn = pdFALSE;
 80046da:	0015      	movs	r5, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046dc:	2f00      	cmp	r7, #0
 80046de:	d104      	bne.n	80046ea <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046e0:	6880      	ldr	r0, [r0, #8]
 80046e2:	f000 ff99 	bl	8005618 <xTaskPriorityDisinherit>
 80046e6:	0005      	movs	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046e8:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ea:	3601      	adds	r6, #1
}
 80046ec:	0028      	movs	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ee:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	d10c      	bne.n	8004710 <prvCopyDataToQueue+0x46>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046f6:	6840      	ldr	r0, [r0, #4]
 80046f8:	f001 fcb2 	bl	8006060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004700:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004702:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004704:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004706:	4293      	cmp	r3, r2
 8004708:	d3ef      	bcc.n	80046ea <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	e7ec      	b.n	80046ea <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004710:	68c0      	ldr	r0, [r0, #12]
 8004712:	f001 fca5 	bl	8006060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004716:	68e3      	ldr	r3, [r4, #12]
 8004718:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800471a:	4251      	negs	r1, r2
 800471c:	1a9a      	subs	r2, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800471e:	6823      	ldr	r3, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004720:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004722:	429a      	cmp	r2, r3
 8004724:	d202      	bcs.n	800472c <prvCopyDataToQueue+0x62>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	1859      	adds	r1, r3, r1
 800472a:	60e1      	str	r1, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800472c:	2d02      	cmp	r5, #2
 800472e:	d105      	bne.n	800473c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004730:	0033      	movs	r3, r6
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	4193      	sbcs	r3, r2
BaseType_t xReturn = pdFALSE;
 8004736:	2500      	movs	r5, #0
				--uxMessagesWaiting;
 8004738:	1af6      	subs	r6, r6, r3
 800473a:	e7d6      	b.n	80046ea <prvCopyDataToQueue+0x20>
BaseType_t xReturn = pdFALSE;
 800473c:	2500      	movs	r5, #0
 800473e:	e7d4      	b.n	80046ea <prvCopyDataToQueue+0x20>

08004740 <prvCopyDataFromQueue>:
{
 8004740:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004744:	0008      	movs	r0, r1
 8004746:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004748:	2a00      	cmp	r2, #0
 800474a:	d00a      	beq.n	8004762 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800474c:	68d9      	ldr	r1, [r3, #12]
 800474e:	188c      	adds	r4, r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004750:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004752:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004754:	428c      	cmp	r4, r1
 8004756:	d301      	bcc.n	800475c <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800475c:	68d9      	ldr	r1, [r3, #12]
 800475e:	f001 fc7f 	bl	8006060 <memcpy>
}
 8004762:	bd10      	pop	{r4, pc}

08004764 <prvUnlockQueue>:
{
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 8004768:	0026      	movs	r6, r4
 800476a:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 800476c:	f001 faf0 	bl	8005d50 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004770:	7835      	ldrb	r5, [r6, #0]
 8004772:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004774:	2d00      	cmp	r5, #0
 8004776:	dc10      	bgt.n	800479a <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 8004778:	23ff      	movs	r3, #255	; 0xff
 800477a:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 800477c:	0026      	movs	r6, r4
 800477e:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 8004780:	f001 faf2 	bl	8005d68 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004784:	f001 fae4 	bl	8005d50 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004788:	7835      	ldrb	r5, [r6, #0]
 800478a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800478c:	2d00      	cmp	r5, #0
 800478e:	dc11      	bgt.n	80047b4 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8004790:	23ff      	movs	r3, #255	; 0xff
 8004792:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 8004794:	f001 fae8 	bl	8005d68 <vPortExitCritical>
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800479a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0eb      	beq.n	8004778 <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a0:	0020      	movs	r0, r4
 80047a2:	3024      	adds	r0, #36	; 0x24
 80047a4:	f000 fe6a 	bl	800547c <xTaskRemoveFromEventList>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d001      	beq.n	80047b0 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 80047ac:	f000 fee0 	bl	8005570 <vTaskMissedYield>
			--cTxLock;
 80047b0:	3d01      	subs	r5, #1
 80047b2:	e7de      	b.n	8004772 <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ea      	beq.n	8004790 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ba:	0020      	movs	r0, r4
 80047bc:	3010      	adds	r0, #16
 80047be:	f000 fe5d 	bl	800547c <xTaskRemoveFromEventList>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d001      	beq.n	80047ca <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80047c6:	f000 fed3 	bl	8005570 <vTaskMissedYield>
				--cRxLock;
 80047ca:	3d01      	subs	r5, #1
 80047cc:	e7dd      	b.n	800478a <prvUnlockQueue+0x26>

080047ce <xQueueGenericReset>:
{
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	0004      	movs	r4, r0
 80047d2:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d101      	bne.n	80047dc <xQueueGenericReset+0xe>
 80047d8:	b672      	cpsid	i
 80047da:	e7fe      	b.n	80047da <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 80047dc:	f001 fab8 	bl	8005d50 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80047e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	434b      	muls	r3, r1
 80047e8:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ea:	1a5b      	subs	r3, r3, r1
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047f0:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047f2:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047f4:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047f6:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047fc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80047fe:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8004800:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 8004802:	4285      	cmp	r5, r0
 8004804:	d10e      	bne.n	8004824 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	4283      	cmp	r3, r0
 800480a:	d007      	beq.n	800481c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800480c:	0020      	movs	r0, r4
 800480e:	3010      	adds	r0, #16
 8004810:	f000 fe34 	bl	800547c <xTaskRemoveFromEventList>
 8004814:	2800      	cmp	r0, #0
 8004816:	d001      	beq.n	800481c <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 8004818:	f001 fa8e 	bl	8005d38 <vPortYield>
	taskEXIT_CRITICAL();
 800481c:	f001 faa4 	bl	8005d68 <vPortExitCritical>
}
 8004820:	2001      	movs	r0, #1
 8004822:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004824:	0020      	movs	r0, r4
 8004826:	3010      	adds	r0, #16
 8004828:	f7ff ff04 	bl	8004634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800482c:	0020      	movs	r0, r4
 800482e:	3024      	adds	r0, #36	; 0x24
 8004830:	f7ff ff00 	bl	8004634 <vListInitialise>
 8004834:	e7f2      	b.n	800481c <xQueueGenericReset+0x4e>

08004836 <xQueueGenericCreateStatic>:
	{
 8004836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004838:	001c      	movs	r4, r3
 800483a:	ab06      	add	r3, sp, #24
 800483c:	781d      	ldrb	r5, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800483e:	2800      	cmp	r0, #0
 8004840:	d101      	bne.n	8004846 <xQueueGenericCreateStatic+0x10>
 8004842:	b672      	cpsid	i
 8004844:	e7fe      	b.n	8004844 <xQueueGenericCreateStatic+0xe>
		configASSERT( pxStaticQueue != NULL );
 8004846:	2c00      	cmp	r4, #0
 8004848:	d101      	bne.n	800484e <xQueueGenericCreateStatic+0x18>
 800484a:	b672      	cpsid	i
 800484c:	e7fe      	b.n	800484c <xQueueGenericCreateStatic+0x16>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800484e:	2a00      	cmp	r2, #0
 8004850:	d003      	beq.n	800485a <xQueueGenericCreateStatic+0x24>
 8004852:	2900      	cmp	r1, #0
 8004854:	d105      	bne.n	8004862 <xQueueGenericCreateStatic+0x2c>
 8004856:	b672      	cpsid	i
 8004858:	e7fe      	b.n	8004858 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800485a:	2900      	cmp	r1, #0
 800485c:	d001      	beq.n	8004862 <xQueueGenericCreateStatic+0x2c>
 800485e:	b672      	cpsid	i
 8004860:	e7fe      	b.n	8004860 <xQueueGenericCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004862:	2350      	movs	r3, #80	; 0x50
 8004864:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004866:	9b01      	ldr	r3, [sp, #4]
 8004868:	2b50      	cmp	r3, #80	; 0x50
 800486a:	d001      	beq.n	8004870 <xQueueGenericCreateStatic+0x3a>
 800486c:	b672      	cpsid	i
 800486e:	e7fe      	b.n	800486e <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004870:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004872:	0023      	movs	r3, r4
 8004874:	2601      	movs	r6, #1
 8004876:	3346      	adds	r3, #70	; 0x46
 8004878:	701e      	strb	r6, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800487a:	2900      	cmp	r1, #0
 800487c:	d100      	bne.n	8004880 <xQueueGenericCreateStatic+0x4a>
 800487e:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004880:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004882:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004884:	0020      	movs	r0, r4
 8004886:	2101      	movs	r1, #1
 8004888:	6022      	str	r2, [r4, #0]
 800488a:	f7ff ffa0 	bl	80047ce <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800488e:	0023      	movs	r3, r4
 8004890:	334c      	adds	r3, #76	; 0x4c
	}
 8004892:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004894:	701d      	strb	r5, [r3, #0]
	}
 8004896:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08004898 <xQueueGenericCreate>:
	{
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	0006      	movs	r6, r0
 800489c:	000d      	movs	r5, r1
 800489e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d101      	bne.n	80048a8 <xQueueGenericCreate+0x10>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a8:	0008      	movs	r0, r1
 80048aa:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048ac:	3050      	adds	r0, #80	; 0x50
 80048ae:	f001 fb07 	bl	8005ec0 <pvPortMalloc>
 80048b2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80048b4:	d011      	beq.n	80048da <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048b6:	0003      	movs	r3, r0
 80048b8:	2200      	movs	r2, #0
 80048ba:	3346      	adds	r3, #70	; 0x46
 80048bc:	701a      	strb	r2, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80048be:	0003      	movs	r3, r0
 80048c0:	4295      	cmp	r5, r2
 80048c2:	d000      	beq.n	80048c6 <xQueueGenericCreate+0x2e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048c4:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048c6:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048c8:	2101      	movs	r1, #1
 80048ca:	0020      	movs	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 80048cc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048ce:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048d0:	f7ff ff7d 	bl	80047ce <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80048d4:	0023      	movs	r3, r4
 80048d6:	334c      	adds	r3, #76	; 0x4c
 80048d8:	701f      	strb	r7, [r3, #0]
	}
 80048da:	0020      	movs	r0, r4
 80048dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048de <xQueueCreateCountingSemaphoreStatic>:
	{
 80048de:	b513      	push	{r0, r1, r4, lr}
 80048e0:	0013      	movs	r3, r2
 80048e2:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d101      	bne.n	80048ec <xQueueCreateCountingSemaphoreStatic+0xe>
 80048e8:	b672      	cpsid	i
 80048ea:	e7fe      	b.n	80048ea <xQueueCreateCountingSemaphoreStatic+0xc>
		configASSERT( uxInitialCount <= uxMaxCount );
 80048ec:	4288      	cmp	r0, r1
 80048ee:	d201      	bcs.n	80048f4 <xQueueCreateCountingSemaphoreStatic+0x16>
 80048f0:	b672      	cpsid	i
 80048f2:	e7fe      	b.n	80048f2 <xQueueCreateCountingSemaphoreStatic+0x14>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80048f4:	2202      	movs	r2, #2
 80048f6:	9200      	str	r2, [sp, #0]
 80048f8:	2200      	movs	r2, #0
 80048fa:	0011      	movs	r1, r2
 80048fc:	f7ff ff9b 	bl	8004836 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004900:	2800      	cmp	r0, #0
 8004902:	d000      	beq.n	8004906 <xQueueCreateCountingSemaphoreStatic+0x28>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004904:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004906:	bd16      	pop	{r1, r2, r4, pc}

08004908 <xQueueCreateCountingSemaphore>:
	{
 8004908:	b510      	push	{r4, lr}
 800490a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800490c:	2800      	cmp	r0, #0
 800490e:	d101      	bne.n	8004914 <xQueueCreateCountingSemaphore+0xc>
 8004910:	b672      	cpsid	i
 8004912:	e7fe      	b.n	8004912 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004914:	4288      	cmp	r0, r1
 8004916:	d201      	bcs.n	800491c <xQueueCreateCountingSemaphore+0x14>
 8004918:	b672      	cpsid	i
 800491a:	e7fe      	b.n	800491a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800491c:	2202      	movs	r2, #2
 800491e:	2100      	movs	r1, #0
 8004920:	f7ff ffba 	bl	8004898 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004924:	2800      	cmp	r0, #0
 8004926:	d000      	beq.n	800492a <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004928:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800492a:	bd10      	pop	{r4, pc}

0800492c <xQueueGenericSend>:
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	b085      	sub	sp, #20
 8004930:	0004      	movs	r4, r0
 8004932:	000d      	movs	r5, r1
 8004934:	001f      	movs	r7, r3
 8004936:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004938:	2800      	cmp	r0, #0
 800493a:	d101      	bne.n	8004940 <xQueueGenericSend+0x14>
 800493c:	b672      	cpsid	i
 800493e:	e7fe      	b.n	800493e <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004940:	2900      	cmp	r1, #0
 8004942:	d104      	bne.n	800494e <xQueueGenericSend+0x22>
 8004944:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <xQueueGenericSend+0x22>
 800494a:	b672      	cpsid	i
 800494c:	e7fe      	b.n	800494c <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800494e:	2f02      	cmp	r7, #2
 8004950:	d104      	bne.n	800495c <xQueueGenericSend+0x30>
 8004952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <xQueueGenericSend+0x30>
 8004958:	b672      	cpsid	i
 800495a:	e7fe      	b.n	800495a <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495c:	f000 fe0e 	bl	800557c <xTaskGetSchedulerState>
 8004960:	1e06      	subs	r6, r0, #0
 8004962:	d104      	bne.n	800496e <xQueueGenericSend+0x42>
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04d      	beq.n	8004a06 <xQueueGenericSend+0xda>
 800496a:	b672      	cpsid	i
 800496c:	e7fe      	b.n	800496c <xQueueGenericSend+0x40>
 800496e:	2600      	movs	r6, #0
 8004970:	e049      	b.n	8004a06 <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004972:	9b01      	ldr	r3, [sp, #4]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x56>
					taskEXIT_CRITICAL();
 800497a:	f001 f9f5 	bl	8005d68 <vPortExitCritical>
			return errQUEUE_FULL;
 800497e:	2000      	movs	r0, #0
 8004980:	e05c      	b.n	8004a3c <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 8004982:	2e00      	cmp	r6, #0
 8004984:	d102      	bne.n	800498c <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004986:	a802      	add	r0, sp, #8
 8004988:	f000 fdb4 	bl	80054f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800498c:	f001 f9ec 	bl	8005d68 <vPortExitCritical>
		vTaskSuspendAll();
 8004990:	f000 fbfe 	bl	8005190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004994:	f001 f9dc 	bl	8005d50 <vPortEnterCritical>
 8004998:	0022      	movs	r2, r4
 800499a:	3244      	adds	r2, #68	; 0x44
 800499c:	7813      	ldrb	r3, [r2, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	d101      	bne.n	80049a8 <xQueueGenericSend+0x7c>
 80049a4:	2300      	movs	r3, #0
 80049a6:	7013      	strb	r3, [r2, #0]
 80049a8:	0022      	movs	r2, r4
 80049aa:	3245      	adds	r2, #69	; 0x45
 80049ac:	7813      	ldrb	r3, [r2, #0]
 80049ae:	b25b      	sxtb	r3, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	d101      	bne.n	80049b8 <xQueueGenericSend+0x8c>
 80049b4:	2300      	movs	r3, #0
 80049b6:	7013      	strb	r3, [r2, #0]
 80049b8:	f001 f9d6 	bl	8005d68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049bc:	a901      	add	r1, sp, #4
 80049be:	a802      	add	r0, sp, #8
 80049c0:	f000 fda4 	bl	800550c <xTaskCheckForTimeOut>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d13b      	bne.n	8004a40 <xQueueGenericSend+0x114>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c8:	f001 f9c2 	bl	8005d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d110      	bne.n	80049f6 <xQueueGenericSend+0xca>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80049d4:	f001 f9c8 	bl	8005d68 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049d8:	0020      	movs	r0, r4
 80049da:	9901      	ldr	r1, [sp, #4]
 80049dc:	3010      	adds	r0, #16
 80049de:	f000 fd23 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff febe 	bl	8004764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049e8:	f000 fc66 	bl	80052b8 <xTaskResumeAll>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d109      	bne.n	8004a04 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80049f0:	f001 f9a2 	bl	8005d38 <vPortYield>
 80049f4:	e006      	b.n	8004a04 <xQueueGenericSend+0xd8>
	taskEXIT_CRITICAL();
 80049f6:	f001 f9b7 	bl	8005d68 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80049fa:	0020      	movs	r0, r4
 80049fc:	f7ff feb2 	bl	8004764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a00:	f000 fc5a 	bl	80052b8 <xTaskResumeAll>
 8004a04:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004a06:	f001 f9a3 	bl	8005d50 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d301      	bcc.n	8004a16 <xQueueGenericSend+0xea>
 8004a12:	2f02      	cmp	r7, #2
 8004a14:	d1ad      	bne.n	8004972 <xQueueGenericSend+0x46>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a16:	003a      	movs	r2, r7
 8004a18:	0029      	movs	r1, r5
 8004a1a:	0020      	movs	r0, r4
 8004a1c:	f7ff fe55 	bl	80046ca <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <xQueueGenericSend+0x102>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a26:	0020      	movs	r0, r4
 8004a28:	3024      	adds	r0, #36	; 0x24
 8004a2a:	f000 fd27 	bl	800547c <xTaskRemoveFromEventList>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d001      	beq.n	8004a36 <xQueueGenericSend+0x10a>
							queueYIELD_IF_USING_PREEMPTION();
 8004a32:	f001 f981 	bl	8005d38 <vPortYield>
				taskEXIT_CRITICAL();
 8004a36:	f001 f997 	bl	8005d68 <vPortExitCritical>
				return pdPASS;
 8004a3a:	2001      	movs	r0, #1
}
 8004a3c:	b005      	add	sp, #20
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8004a40:	0020      	movs	r0, r4
 8004a42:	f7ff fe8f 	bl	8004764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a46:	f000 fc37 	bl	80052b8 <xTaskResumeAll>
 8004a4a:	e798      	b.n	800497e <xQueueGenericSend+0x52>

08004a4c <xQueueGenericSendFromISR>:
{
 8004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	0004      	movs	r4, r0
 8004a52:	0017      	movs	r7, r2
 8004a54:	001e      	movs	r6, r3
 8004a56:	9101      	str	r1, [sp, #4]
	configASSERT( pxQueue );
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d101      	bne.n	8004a60 <xQueueGenericSendFromISR+0x14>
 8004a5c:	b672      	cpsid	i
 8004a5e:	e7fe      	b.n	8004a5e <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <xQueueGenericSendFromISR+0x24>
 8004a66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <xQueueGenericSendFromISR+0x24>
 8004a6c:	b672      	cpsid	i
 8004a6e:	e7fe      	b.n	8004a6e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a70:	2e02      	cmp	r6, #2
 8004a72:	d104      	bne.n	8004a7e <xQueueGenericSendFromISR+0x32>
 8004a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <xQueueGenericSendFromISR+0x32>
 8004a7a:	b672      	cpsid	i
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a7e:	f001 f981 	bl	8005d84 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a86:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d302      	bcc.n	8004a92 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 8004a8c:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a8e:	2e02      	cmp	r6, #2
 8004a90:	d11b      	bne.n	8004aca <xQueueGenericSendFromISR+0x7e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a92:	0023      	movs	r3, r4
 8004a94:	3345      	adds	r3, #69	; 0x45
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a9a:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a9c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a9e:	0020      	movs	r0, r4
 8004aa0:	9901      	ldr	r1, [sp, #4]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aa4:	f7ff fe11 	bl	80046ca <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004aa8:	1c6b      	adds	r3, r5, #1
 8004aaa:	d114      	bne.n	8004ad6 <xQueueGenericSendFromISR+0x8a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
 8004ab2:	2501      	movs	r5, #1
 8004ab4:	e009      	b.n	8004aca <xQueueGenericSendFromISR+0x7e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	3024      	adds	r0, #36	; 0x24
 8004aba:	f000 fcdf 	bl	800547c <xTaskRemoveFromEventList>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0f7      	beq.n	8004ab2 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
 8004ac2:	2f00      	cmp	r7, #0
 8004ac4:	d0f5      	beq.n	8004ab2 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ac6:	2501      	movs	r5, #1
 8004ac8:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004aca:	9803      	ldr	r0, [sp, #12]
 8004acc:	f001 f95e 	bl	8005d8c <vClearInterruptMaskFromISR>
}
 8004ad0:	0028      	movs	r0, r5
 8004ad2:	b005      	add	sp, #20
 8004ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ad6:	9b02      	ldr	r3, [sp, #8]
 8004ad8:	3501      	adds	r5, #1
 8004ada:	b26d      	sxtb	r5, r5
 8004adc:	701d      	strb	r5, [r3, #0]
 8004ade:	e7e8      	b.n	8004ab2 <xQueueGenericSendFromISR+0x66>

08004ae0 <xQueueReceive>:
{
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	0004      	movs	r4, r0
 8004ae6:	000f      	movs	r7, r1
 8004ae8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d101      	bne.n	8004af2 <xQueueReceive+0x12>
 8004aee:	b672      	cpsid	i
 8004af0:	e7fe      	b.n	8004af0 <xQueueReceive+0x10>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d104      	bne.n	8004b00 <xQueueReceive+0x20>
 8004af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <xQueueReceive+0x20>
 8004afc:	b672      	cpsid	i
 8004afe:	e7fe      	b.n	8004afe <xQueueReceive+0x1e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b00:	f000 fd3c 	bl	800557c <xTaskGetSchedulerState>
 8004b04:	1e06      	subs	r6, r0, #0
 8004b06:	d104      	bne.n	8004b12 <xQueueReceive+0x32>
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d041      	beq.n	8004b92 <xQueueReceive+0xb2>
 8004b0e:	b672      	cpsid	i
 8004b10:	e7fe      	b.n	8004b10 <xQueueReceive+0x30>
 8004b12:	2600      	movs	r6, #0
 8004b14:	e03d      	b.n	8004b92 <xQueueReceive+0xb2>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b16:	9d01      	ldr	r5, [sp, #4]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	d103      	bne.n	8004b24 <xQueueReceive+0x44>
					taskEXIT_CRITICAL();
 8004b1c:	f001 f924 	bl	8005d68 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004b20:	2000      	movs	r0, #0
 8004b22:	e04f      	b.n	8004bc4 <xQueueReceive+0xe4>
				else if( xEntryTimeSet == pdFALSE )
 8004b24:	2e00      	cmp	r6, #0
 8004b26:	d102      	bne.n	8004b2e <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b28:	a802      	add	r0, sp, #8
 8004b2a:	f000 fce3 	bl	80054f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b2e:	f001 f91b 	bl	8005d68 <vPortExitCritical>
		vTaskSuspendAll();
 8004b32:	f000 fb2d 	bl	8005190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b36:	f001 f90b 	bl	8005d50 <vPortEnterCritical>
 8004b3a:	0022      	movs	r2, r4
 8004b3c:	3244      	adds	r2, #68	; 0x44
 8004b3e:	7813      	ldrb	r3, [r2, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	d101      	bne.n	8004b4a <xQueueReceive+0x6a>
 8004b46:	2300      	movs	r3, #0
 8004b48:	7013      	strb	r3, [r2, #0]
 8004b4a:	0022      	movs	r2, r4
 8004b4c:	3245      	adds	r2, #69	; 0x45
 8004b4e:	7813      	ldrb	r3, [r2, #0]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	d101      	bne.n	8004b5a <xQueueReceive+0x7a>
 8004b56:	2300      	movs	r3, #0
 8004b58:	7013      	strb	r3, [r2, #0]
 8004b5a:	f001 f905 	bl	8005d68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5e:	a901      	add	r1, sp, #4
 8004b60:	a802      	add	r0, sp, #8
 8004b62:	f000 fcd3 	bl	800550c <xTaskCheckForTimeOut>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d134      	bne.n	8004bd4 <xQueueReceive+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6a:	0020      	movs	r0, r4
 8004b6c:	f7ff fda3 	bl	80046b6 <prvIsQueueEmpty>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d029      	beq.n	8004bc8 <xQueueReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b74:	0020      	movs	r0, r4
 8004b76:	9901      	ldr	r1, [sp, #4]
 8004b78:	3024      	adds	r0, #36	; 0x24
 8004b7a:	f000 fc55 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7e:	0020      	movs	r0, r4
 8004b80:	f7ff fdf0 	bl	8004764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b84:	f000 fb98 	bl	80052b8 <xTaskResumeAll>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d101      	bne.n	8004b90 <xQueueReceive+0xb0>
					portYIELD_WITHIN_API();
 8004b8c:	f001 f8d4 	bl	8005d38 <vPortYield>
 8004b90:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004b92:	f001 f8dd 	bl	8005d50 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	d0bc      	beq.n	8004b16 <xQueueReceive+0x36>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b9c:	0039      	movs	r1, r7
 8004b9e:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ba0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ba2:	f7ff fdcd 	bl	8004740 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ba6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <xQueueReceive+0xde>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bae:	0020      	movs	r0, r4
 8004bb0:	3010      	adds	r0, #16
 8004bb2:	f000 fc63 	bl	800547c <xTaskRemoveFromEventList>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d001      	beq.n	8004bbe <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 8004bba:	f001 f8bd 	bl	8005d38 <vPortYield>
				taskEXIT_CRITICAL();
 8004bbe:	f001 f8d3 	bl	8005d68 <vPortExitCritical>
				return pdPASS;
 8004bc2:	2001      	movs	r0, #1
}
 8004bc4:	b005      	add	sp, #20
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004bc8:	0020      	movs	r0, r4
 8004bca:	f7ff fdcb 	bl	8004764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bce:	f000 fb73 	bl	80052b8 <xTaskResumeAll>
 8004bd2:	e7dd      	b.n	8004b90 <xQueueReceive+0xb0>
			prvUnlockQueue( pxQueue );
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	f7ff fdc5 	bl	8004764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bda:	f000 fb6d 	bl	80052b8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bde:	0020      	movs	r0, r4
 8004be0:	f7ff fd69 	bl	80046b6 <prvIsQueueEmpty>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0d3      	beq.n	8004b90 <xQueueReceive+0xb0>
 8004be8:	e79a      	b.n	8004b20 <xQueueReceive+0x40>

08004bea <xQueueSemaphoreTake>:
{
 8004bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bec:	b085      	sub	sp, #20
 8004bee:	1e04      	subs	r4, r0, #0
 8004bf0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004bf2:	d101      	bne.n	8004bf8 <xQueueSemaphoreTake+0xe>
 8004bf4:	b672      	cpsid	i
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bf8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	d001      	beq.n	8004c02 <xQueueSemaphoreTake+0x18>
 8004bfe:	b672      	cpsid	i
 8004c00:	e7fe      	b.n	8004c00 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c02:	f000 fcbb 	bl	800557c <xTaskGetSchedulerState>
 8004c06:	1e06      	subs	r6, r0, #0
 8004c08:	d104      	bne.n	8004c14 <xQueueSemaphoreTake+0x2a>
 8004c0a:	9b01      	ldr	r3, [sp, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <xQueueSemaphoreTake+0x30>
 8004c10:	b672      	cpsid	i
 8004c12:	e7fe      	b.n	8004c12 <xQueueSemaphoreTake+0x28>
 8004c14:	002e      	movs	r6, r5
 8004c16:	2701      	movs	r7, #1
 8004c18:	e04d      	b.n	8004cb6 <xQueueSemaphoreTake+0xcc>
 8004c1a:	0005      	movs	r5, r0
 8004c1c:	e7fb      	b.n	8004c16 <xQueueSemaphoreTake+0x2c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <xQueueSemaphoreTake+0x48>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	d001      	beq.n	8004c2c <xQueueSemaphoreTake+0x42>
 8004c28:	b672      	cpsid	i
 8004c2a:	e7fe      	b.n	8004c2a <xQueueSemaphoreTake+0x40>
					taskEXIT_CRITICAL();
 8004c2c:	f001 f89c 	bl	8005d68 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004c30:	e05c      	b.n	8004cec <xQueueSemaphoreTake+0x102>
				else if( xEntryTimeSet == pdFALSE )
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	d102      	bne.n	8004c3c <xQueueSemaphoreTake+0x52>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c36:	a802      	add	r0, sp, #8
 8004c38:	f000 fc5c 	bl	80054f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004c3c:	f001 f894 	bl	8005d68 <vPortExitCritical>
		vTaskSuspendAll();
 8004c40:	f000 faa6 	bl	8005190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c44:	f001 f884 	bl	8005d50 <vPortEnterCritical>
 8004c48:	0022      	movs	r2, r4
 8004c4a:	3244      	adds	r2, #68	; 0x44
 8004c4c:	7813      	ldrb	r3, [r2, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	3301      	adds	r3, #1
 8004c52:	d101      	bne.n	8004c58 <xQueueSemaphoreTake+0x6e>
 8004c54:	2300      	movs	r3, #0
 8004c56:	7013      	strb	r3, [r2, #0]
 8004c58:	0022      	movs	r2, r4
 8004c5a:	3245      	adds	r2, #69	; 0x45
 8004c5c:	7813      	ldrb	r3, [r2, #0]
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	d101      	bne.n	8004c68 <xQueueSemaphoreTake+0x7e>
 8004c64:	2300      	movs	r3, #0
 8004c66:	7013      	strb	r3, [r2, #0]
 8004c68:	f001 f87e 	bl	8005d68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c6c:	a901      	add	r1, sp, #4
 8004c6e:	a802      	add	r0, sp, #8
 8004c70:	f000 fc4c 	bl	800550c <xTaskCheckForTimeOut>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d142      	bne.n	8004cfe <xQueueSemaphoreTake+0x114>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c78:	0020      	movs	r0, r4
 8004c7a:	f7ff fd1c 	bl	80046b6 <prvIsQueueEmpty>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d037      	beq.n	8004cf2 <xQueueSemaphoreTake+0x108>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <xQueueSemaphoreTake+0xae>
						taskENTER_CRITICAL();
 8004c88:	f001 f862 	bl	8005d50 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c8c:	68a0      	ldr	r0, [r4, #8]
 8004c8e:	f000 fc85 	bl	800559c <xTaskPriorityInherit>
 8004c92:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
 8004c94:	f001 f868 	bl	8005d68 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c98:	0020      	movs	r0, r4
 8004c9a:	9901      	ldr	r1, [sp, #4]
 8004c9c:	3024      	adds	r0, #36	; 0x24
 8004c9e:	f000 fbc3 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca2:	0020      	movs	r0, r4
 8004ca4:	f7ff fd5e 	bl	8004764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ca8:	f000 fb06 	bl	80052b8 <xTaskResumeAll>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d101      	bne.n	8004cb4 <xQueueSemaphoreTake+0xca>
					portYIELD_WITHIN_API();
 8004cb0:	f001 f842 	bl	8005d38 <vPortYield>
 8004cb4:	003e      	movs	r6, r7
		taskENTER_CRITICAL();
 8004cb6:	f001 f84b 	bl	8005d50 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ae      	beq.n	8004c1e <xQueueSemaphoreTake+0x34>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <xQueueSemaphoreTake+0xe6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cca:	f000 fd17 	bl	80056fc <pvTaskIncrementMutexHeldCount>
 8004cce:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <xQueueSemaphoreTake+0xfc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	3010      	adds	r0, #16
 8004cda:	f000 fbcf 	bl	800547c <xTaskRemoveFromEventList>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d001      	beq.n	8004ce6 <xQueueSemaphoreTake+0xfc>
						queueYIELD_IF_USING_PREEMPTION();
 8004ce2:	f001 f829 	bl	8005d38 <vPortYield>
				taskEXIT_CRITICAL();
 8004ce6:	f001 f83f 	bl	8005d68 <vPortExitCritical>
				return pdPASS;
 8004cea:	2501      	movs	r5, #1
}
 8004cec:	0028      	movs	r0, r5
 8004cee:	b005      	add	sp, #20
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004cf2:	0020      	movs	r0, r4
 8004cf4:	f7ff fd36 	bl	8004764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf8:	f000 fade 	bl	80052b8 <xTaskResumeAll>
 8004cfc:	e7da      	b.n	8004cb4 <xQueueSemaphoreTake+0xca>
			prvUnlockQueue( pxQueue );
 8004cfe:	0020      	movs	r0, r4
 8004d00:	f7ff fd30 	bl	8004764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d04:	f000 fad8 	bl	80052b8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d08:	0020      	movs	r0, r4
 8004d0a:	f7ff fcd4 	bl	80046b6 <prvIsQueueEmpty>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d0d0      	beq.n	8004cb4 <xQueueSemaphoreTake+0xca>
					if( xInheritanceOccurred != pdFALSE )
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	d0ea      	beq.n	8004cec <xQueueSemaphoreTake+0x102>
						taskENTER_CRITICAL();
 8004d16:	f001 f81b 	bl	8005d50 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d003      	beq.n	8004d28 <xQueueSemaphoreTake+0x13e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d20:	2138      	movs	r1, #56	; 0x38
 8004d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d28:	68a0      	ldr	r0, [r4, #8]
 8004d2a:	f000 fcab 	bl	8005684 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8004d2e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8004d30:	f001 f81a 	bl	8005d68 <vPortExitCritical>
 8004d34:	e7da      	b.n	8004cec <xQueueSemaphoreTake+0x102>
	...

08004d38 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d38:	2300      	movs	r3, #0
	{
 8004d3a:	b570      	push	{r4, r5, r6, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d3c:	4a06      	ldr	r2, [pc, #24]	; (8004d58 <vQueueAddToRegistry+0x20>)
 8004d3e:	00dd      	lsls	r5, r3, #3
 8004d40:	18ac      	adds	r4, r5, r2
 8004d42:	6826      	ldr	r6, [r4, #0]
 8004d44:	2e00      	cmp	r6, #0
 8004d46:	d102      	bne.n	8004d4e <vQueueAddToRegistry+0x16>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d48:	50a9      	str	r1, [r5, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d4a:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d1f4      	bne.n	8004d3e <vQueueAddToRegistry+0x6>
 8004d54:	e7fa      	b.n	8004d4c <vQueueAddToRegistry+0x14>
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	200016fc 	.word	0x200016fc

08004d5c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d5c:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <vQueueUnregisterQueue+0x24>)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	0011      	movs	r1, r2
	{
 8004d62:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004d64:	6854      	ldr	r4, [r2, #4]
 8004d66:	4284      	cmp	r4, r0
 8004d68:	d105      	bne.n	8004d76 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	50ca      	str	r2, [r1, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004d70:	18cb      	adds	r3, r1, r3
 8004d72:	605a      	str	r2, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d74:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d76:	3301      	adds	r3, #1
 8004d78:	3208      	adds	r2, #8
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d1f2      	bne.n	8004d64 <vQueueUnregisterQueue+0x8>
 8004d7e:	e7f9      	b.n	8004d74 <vQueueUnregisterQueue+0x18>
 8004d80:	200016fc 	.word	0x200016fc

08004d84 <vQueueDelete>:
{
 8004d84:	b510      	push	{r4, lr}
 8004d86:	1e04      	subs	r4, r0, #0
	configASSERT( pxQueue );
 8004d88:	d101      	bne.n	8004d8e <vQueueDelete+0xa>
 8004d8a:	b672      	cpsid	i
 8004d8c:	e7fe      	b.n	8004d8c <vQueueDelete+0x8>
		vQueueUnregisterQueue( pxQueue );
 8004d8e:	f7ff ffe5 	bl	8004d5c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d92:	0023      	movs	r3, r4
 8004d94:	3346      	adds	r3, #70	; 0x46
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <vQueueDelete+0x1e>
			vPortFree( pxQueue );
 8004d9c:	0020      	movs	r0, r4
 8004d9e:	f001 f911 	bl	8005fc4 <vPortFree>
}
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	0004      	movs	r4, r0
 8004da8:	0016      	movs	r6, r2
 8004daa:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004dac:	f000 ffd0 	bl	8005d50 <vPortEnterCritical>
 8004db0:	0022      	movs	r2, r4
 8004db2:	3244      	adds	r2, #68	; 0x44
 8004db4:	7813      	ldrb	r3, [r2, #0]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <vQueueWaitForMessageRestricted+0x1c>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	7013      	strb	r3, [r2, #0]
 8004dc0:	0022      	movs	r2, r4
 8004dc2:	3245      	adds	r2, #69	; 0x45
 8004dc4:	7813      	ldrb	r3, [r2, #0]
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <vQueueWaitForMessageRestricted+0x2c>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	7013      	strb	r3, [r2, #0]
 8004dd0:	f000 ffca 	bl	8005d68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <vQueueWaitForMessageRestricted+0x42>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dda:	0020      	movs	r0, r4
 8004ddc:	0032      	movs	r2, r6
 8004dde:	0029      	movs	r1, r5
 8004de0:	3024      	adds	r0, #36	; 0x24
 8004de2:	f000 fb33 	bl	800544c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004de6:	0020      	movs	r0, r4
 8004de8:	f7ff fcbc 	bl	8004764 <prvUnlockQueue>
	}
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08004df0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004df4:	f000 ffac 	bl	8005d50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <prvAddNewTaskToReadyList+0xb4>)
		if( pxCurrentTCB == NULL )
 8004dfa:	4d2b      	ldr	r5, [pc, #172]	; (8004ea8 <prvAddNewTaskToReadyList+0xb8>)
		uxCurrentNumberOfTasks++;
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	3201      	adds	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004e02:	682e      	ldr	r6, [r5, #0]
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	d142      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x9e>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e08:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d11e      	bne.n	8004e4e <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e10:	2714      	movs	r7, #20
 8004e12:	0038      	movs	r0, r7
 8004e14:	4370      	muls	r0, r6
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <prvAddNewTaskToReadyList+0xbc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e18:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e1a:	1818      	adds	r0, r3, r0
 8004e1c:	f7ff fc0a 	bl	8004634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e20:	2e38      	cmp	r6, #56	; 0x38
 8004e22:	d1f6      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x22>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e24:	4f22      	ldr	r7, [pc, #136]	; (8004eb0 <prvAddNewTaskToReadyList+0xc0>)
 8004e26:	0038      	movs	r0, r7
 8004e28:	f7ff fc04 	bl	8004634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e2c:	4e21      	ldr	r6, [pc, #132]	; (8004eb4 <prvAddNewTaskToReadyList+0xc4>)
 8004e2e:	0030      	movs	r0, r6
 8004e30:	f7ff fc00 	bl	8004634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e34:	4820      	ldr	r0, [pc, #128]	; (8004eb8 <prvAddNewTaskToReadyList+0xc8>)
 8004e36:	f7ff fbfd 	bl	8004634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e3a:	4820      	ldr	r0, [pc, #128]	; (8004ebc <prvAddNewTaskToReadyList+0xcc>)
 8004e3c:	f7ff fbfa 	bl	8004634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e40:	481f      	ldr	r0, [pc, #124]	; (8004ec0 <prvAddNewTaskToReadyList+0xd0>)
 8004e42:	f7ff fbf7 	bl	8004634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <prvAddNewTaskToReadyList+0xd4>)
 8004e48:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <prvAddNewTaskToReadyList+0xd8>)
 8004e4c:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <prvAddNewTaskToReadyList+0xdc>)
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <prvAddNewTaskToReadyList+0xe0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e58:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004e5a:	6811      	ldr	r1, [r2, #0]
 8004e5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d900      	bls.n	8004e64 <prvAddNewTaskToReadyList+0x74>
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	2014      	movs	r0, #20
 8004e66:	4358      	muls	r0, r3
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <prvAddNewTaskToReadyList+0xbc>)
 8004e6a:	1d21      	adds	r1, r4, #4
 8004e6c:	1818      	adds	r0, r3, r0
 8004e6e:	f7ff fbef 	bl	8004650 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004e72:	f000 ff79 	bl	8005d68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <prvAddNewTaskToReadyList+0xe4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <prvAddNewTaskToReadyList+0x9c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e7e:	682b      	ldr	r3, [r5, #0]
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d201      	bcs.n	8004e8c <prvAddNewTaskToReadyList+0x9c>
			taskYIELD_IF_USING_PREEMPTION();
 8004e88:	f000 ff56 	bl	8005d38 <vPortYield>
}
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <prvAddNewTaskToReadyList+0xe4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1db      	bne.n	8004e4e <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d8d6      	bhi.n	8004e4e <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8004ea0:	602c      	str	r4, [r5, #0]
 8004ea2:	e7d4      	b.n	8004e4e <prvAddNewTaskToReadyList+0x5e>
 8004ea4:	20000b58 	.word	0x20000b58
 8004ea8:	200006ec 	.word	0x200006ec
 8004eac:	200006f8 	.word	0x200006f8
 8004eb0:	20000b6c 	.word	0x20000b6c
 8004eb4:	20000b80 	.word	0x20000b80
 8004eb8:	20000ba0 	.word	0x20000ba0
 8004ebc:	20000bcc 	.word	0x20000bcc
 8004ec0:	20000bb8 	.word	0x20000bb8
 8004ec4:	200006f0 	.word	0x200006f0
 8004ec8:	200006f4 	.word	0x200006f4
 8004ecc:	20000b64 	.word	0x20000b64
 8004ed0:	20000b68 	.word	0x20000b68
 8004ed4:	20000bb4 	.word	0x20000bb4

08004ed8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed8:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <prvResetNextTaskUnblockTime+0x20>)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvResetNextTaskUnblockTime+0x24>)
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d103      	bne.n	8004eec <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee8:	601a      	str	r2, [r3, #0]
	}
}
 8004eea:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	6852      	ldr	r2, [r2, #4]
 8004ef4:	e7f8      	b.n	8004ee8 <prvResetNextTaskUnblockTime+0x10>
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	200006f0 	.word	0x200006f0
 8004efc:	20000b94 	.word	0x20000b94

08004f00 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f04:	0096      	lsls	r6, r2, #2
 8004f06:	0032      	movs	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004f08:	9000      	str	r0, [sp, #0]
 8004f0a:	000d      	movs	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f0e:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004f10:	9301      	str	r3, [sp, #4]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f12:	f001 f8ae 	bl	8006072 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f18:	3e04      	subs	r6, #4
 8004f1a:	199e      	adds	r6, r3, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f1c:	2307      	movs	r3, #7
 8004f1e:	439e      	bics	r6, r3
 8004f20:	0037      	movs	r7, r6
	if( pcName != NULL )
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	d031      	beq.n	8004f8a <prvInitialiseNewTask.isra.0+0x8a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f26:	0022      	movs	r2, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f28:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f2a:	3234      	adds	r2, #52	; 0x34
 8004f2c:	5ce9      	ldrb	r1, [r5, r3]
 8004f2e:	54d1      	strb	r1, [r2, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8004f30:	5ce9      	ldrb	r1, [r5, r3]
 8004f32:	2900      	cmp	r1, #0
 8004f34:	d002      	beq.n	8004f3c <prvInitialiseNewTask.isra.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f36:	3301      	adds	r3, #1
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d1f7      	bne.n	8004f2c <prvInitialiseNewTask.isra.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f3c:	0023      	movs	r3, r4
 8004f3e:	2200      	movs	r2, #0
 8004f40:	3343      	adds	r3, #67	; 0x43
 8004f42:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f44:	9d08      	ldr	r5, [sp, #32]
 8004f46:	2d37      	cmp	r5, #55	; 0x37
 8004f48:	d900      	bls.n	8004f4c <prvInitialiseNewTask.isra.0+0x4c>
 8004f4a:	2537      	movs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004f4c:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8004f4e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004f50:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f52:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004f54:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f56:	f7ff fb78 	bl	800464a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f5a:	0020      	movs	r0, r4
 8004f5c:	3018      	adds	r0, #24
 8004f5e:	f7ff fb74 	bl	800464a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f62:	2338      	movs	r3, #56	; 0x38
 8004f64:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f66:	0023      	movs	r3, r4
 8004f68:	3358      	adds	r3, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f6a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f6e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004f70:	6566      	str	r6, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f72:	0038      	movs	r0, r7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f74:	701e      	strb	r6, [r3, #0]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f76:	9a01      	ldr	r2, [sp, #4]
 8004f78:	9900      	ldr	r1, [sp, #0]
 8004f7a:	f000 fecb 	bl	8005d14 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f80:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004f82:	42b3      	cmp	r3, r6
 8004f84:	d000      	beq.n	8004f88 <prvInitialiseNewTask.isra.0+0x88>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f86:	601c      	str	r4, [r3, #0]
}
 8004f88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f8a:	0023      	movs	r3, r4
 8004f8c:	3334      	adds	r3, #52	; 0x34
 8004f8e:	701d      	strb	r5, [r3, #0]
 8004f90:	e7d8      	b.n	8004f44 <prvInitialiseNewTask.isra.0+0x44>

08004f92 <prvDeleteTCB>:
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f92:	0003      	movs	r3, r0
	{
 8004f94:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f96:	3359      	adds	r3, #89	; 0x59
 8004f98:	781b      	ldrb	r3, [r3, #0]
	{
 8004f9a:	0004      	movs	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <prvDeleteTCB+0x1c>
				vPortFree( pxTCB->pxStack );
 8004fa0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004fa2:	f001 f80f 	bl	8005fc4 <vPortFree>
				vPortFree( pxTCB );
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f001 f80c 	bl	8005fc4 <vPortFree>
	}
 8004fac:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d0f9      	beq.n	8004fa6 <prvDeleteTCB+0x14>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d0fa      	beq.n	8004fac <prvDeleteTCB+0x1a>
 8004fb6:	b672      	cpsid	i
 8004fb8:	e7fe      	b.n	8004fb8 <prvDeleteTCB+0x26>
	...

08004fbc <prvIdleTask>:
{
 8004fbc:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fbe:	4c10      	ldr	r4, [pc, #64]	; (8005000 <prvIdleTask+0x44>)
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <prvIdleTask+0x48>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d9f7      	bls.n	8004fbe <prvIdleTask+0x2>
				taskYIELD();
 8004fce:	f000 feb3 	bl	8005d38 <vPortYield>
 8004fd2:	e7f4      	b.n	8004fbe <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 8004fd4:	f000 febc 	bl	8005d50 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <prvIdleTask+0x4c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fde:	1d28      	adds	r0, r5, #4
 8004fe0:	f7ff fb59 	bl	8004696 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fe4:	4a09      	ldr	r2, [pc, #36]	; (800500c <prvIdleTask+0x50>)
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004ff2:	f000 feb9 	bl	8005d68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f7ff ffcb 	bl	8004f92 <prvDeleteTCB>
 8004ffc:	e7df      	b.n	8004fbe <prvIdleTask+0x2>
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	20000b5c 	.word	0x20000b5c
 8005004:	200006f8 	.word	0x200006f8
 8005008:	20000bcc 	.word	0x20000bcc
 800500c:	20000b58 	.word	0x20000b58

08005010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005014:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005016:	4d15      	ldr	r5, [pc, #84]	; (800506c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8005018:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501a:	6828      	ldr	r0, [r5, #0]
{
 800501c:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501e:	3004      	adds	r0, #4
 8005020:	f7ff fb39 	bl	8004696 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005024:	1c63      	adds	r3, r4, #1
 8005026:	d107      	bne.n	8005038 <prvAddCurrentTaskToDelayedList+0x28>
 8005028:	2f00      	cmp	r7, #0
 800502a:	d005      	beq.n	8005038 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800502c:	6829      	ldr	r1, [r5, #0]
 800502e:	4810      	ldr	r0, [pc, #64]	; (8005070 <prvAddCurrentTaskToDelayedList+0x60>)
 8005030:	3104      	adds	r1, #4
 8005032:	f7ff fb0d 	bl	8004650 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005038:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800503a:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800503c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800503e:	42a6      	cmp	r6, r4
 8005040:	d906      	bls.n	8005050 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <prvAddCurrentTaskToDelayedList+0x64>)
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	6829      	ldr	r1, [r5, #0]
 8005048:	3104      	adds	r1, #4
 800504a:	f7ff fb0d 	bl	8004668 <vListInsert>
 800504e:	e7f2      	b.n	8005036 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <prvAddCurrentTaskToDelayedList+0x68>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	6829      	ldr	r1, [r5, #0]
 8005056:	3104      	adds	r1, #4
 8005058:	f7ff fb06 	bl	8004668 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <prvAddCurrentTaskToDelayedList+0x6c>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	42a2      	cmp	r2, r4
 8005062:	d9e8      	bls.n	8005036 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8005064:	601c      	str	r4, [r3, #0]
}
 8005066:	e7e6      	b.n	8005036 <prvAddCurrentTaskToDelayedList+0x26>
 8005068:	20000be0 	.word	0x20000be0
 800506c:	200006ec 	.word	0x200006ec
 8005070:	20000bb8 	.word	0x20000bb8
 8005074:	200006f4 	.word	0x200006f4
 8005078:	200006f0 	.word	0x200006f0
 800507c:	20000b94 	.word	0x20000b94

08005080 <xTaskCreateStatic>:
	{
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005088:	2d00      	cmp	r5, #0
 800508a:	d101      	bne.n	8005090 <xTaskCreateStatic+0x10>
 800508c:	b672      	cpsid	i
 800508e:	e7fe      	b.n	800508e <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 8005090:	2c00      	cmp	r4, #0
 8005092:	d101      	bne.n	8005098 <xTaskCreateStatic+0x18>
 8005094:	b672      	cpsid	i
 8005096:	e7fe      	b.n	8005096 <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005098:	265c      	movs	r6, #92	; 0x5c
 800509a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800509c:	9e05      	ldr	r6, [sp, #20]
 800509e:	2e5c      	cmp	r6, #92	; 0x5c
 80050a0:	d001      	beq.n	80050a6 <xTaskCreateStatic+0x26>
 80050a2:	b672      	cpsid	i
 80050a4:	e7fe      	b.n	80050a4 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050a8:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050aa:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ac:	2602      	movs	r6, #2
 80050ae:	3559      	adds	r5, #89	; 0x59
 80050b0:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050b2:	ad04      	add	r5, sp, #16
 80050b4:	9501      	str	r5, [sp, #4]
 80050b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80050b8:	9402      	str	r4, [sp, #8]
 80050ba:	9500      	str	r5, [sp, #0]
 80050bc:	f7ff ff20 	bl	8004f00 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050c0:	0020      	movs	r0, r4
 80050c2:	f7ff fe95 	bl	8004df0 <prvAddNewTaskToReadyList>
	}
 80050c6:	9804      	ldr	r0, [sp, #16]
 80050c8:	b006      	add	sp, #24
 80050ca:	bd70      	pop	{r4, r5, r6, pc}

080050cc <xTaskCreate>:
	{
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ce:	0007      	movs	r7, r0
 80050d0:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050d2:	0090      	lsls	r0, r2, #2
	{
 80050d4:	0016      	movs	r6, r2
 80050d6:	9104      	str	r1, [sp, #16]
 80050d8:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050da:	f000 fef1 	bl	8005ec0 <pvPortMalloc>
 80050de:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 80050e0:	d01d      	beq.n	800511e <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050e2:	205c      	movs	r0, #92	; 0x5c
 80050e4:	f000 feec 	bl	8005ec0 <pvPortMalloc>
 80050e8:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 80050ea:	d015      	beq.n	8005118 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ec:	0003      	movs	r3, r0
 80050ee:	2200      	movs	r2, #0
 80050f0:	3359      	adds	r3, #89	; 0x59
					pxNewTCB->pxStack = pxStack;
 80050f2:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050f4:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f8:	0032      	movs	r2, r6
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fe:	9904      	ldr	r1, [sp, #16]
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	0038      	movs	r0, r7
 8005106:	9b05      	ldr	r3, [sp, #20]
 8005108:	f7ff fefa 	bl	8004f00 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510c:	0020      	movs	r0, r4
 800510e:	f7ff fe6f 	bl	8004df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005112:	2001      	movs	r0, #1
	}
 8005114:	b007      	add	sp, #28
 8005116:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8005118:	0028      	movs	r0, r5
 800511a:	f000 ff53 	bl	8005fc4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800511e:	2001      	movs	r0, #1
 8005120:	4240      	negs	r0, r0
		return xReturn;
 8005122:	e7f7      	b.n	8005114 <xTaskCreate+0x48>

08005124 <vTaskStartScheduler>:
{
 8005124:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005126:	2400      	movs	r4, #0
{
 8005128:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800512a:	aa07      	add	r2, sp, #28
 800512c:	a906      	add	r1, sp, #24
 800512e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005130:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005132:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005134:	f7ff fa66 	bl	8004604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005138:	9b05      	ldr	r3, [sp, #20]
 800513a:	9a07      	ldr	r2, [sp, #28]
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	9b06      	ldr	r3, [sp, #24]
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <vTaskStartScheduler+0x58>)
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	480e      	ldr	r0, [pc, #56]	; (8005180 <vTaskStartScheduler+0x5c>)
 8005146:	0023      	movs	r3, r4
 8005148:	9400      	str	r4, [sp, #0]
 800514a:	f7ff ff99 	bl	8005080 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800514e:	42a0      	cmp	r0, r4
 8005150:	d00e      	beq.n	8005170 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 8005152:	f000 fc29 	bl	80059a8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005156:	2801      	cmp	r0, #1
 8005158:	d10c      	bne.n	8005174 <vTaskStartScheduler+0x50>
		portDISABLE_INTERRUPTS();
 800515a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800515c:	2201      	movs	r2, #1
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <vTaskStartScheduler+0x60>)
 8005160:	4252      	negs	r2, r2
 8005162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <vTaskStartScheduler+0x64>)
 8005166:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <vTaskStartScheduler+0x68>)
 800516a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800516c:	f000 fe66 	bl	8005e3c <xPortStartScheduler>
}
 8005170:	b008      	add	sp, #32
 8005172:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d1fb      	bne.n	8005170 <vTaskStartScheduler+0x4c>
 8005178:	b672      	cpsid	i
 800517a:	e7fe      	b.n	800517a <vTaskStartScheduler+0x56>
 800517c:	0800625c 	.word	0x0800625c
 8005180:	08004fbd 	.word	0x08004fbd
 8005184:	20000b94 	.word	0x20000b94
 8005188:	20000bb4 	.word	0x20000bb4
 800518c:	20000be0 	.word	0x20000be0

08005190 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005190:	4a02      	ldr	r2, [pc, #8]	; (800519c <vTaskSuspendAll+0xc>)
 8005192:	6813      	ldr	r3, [r2, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	4770      	bx	lr
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	20000b60 	.word	0x20000b60

080051a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <xTaskGetTickCount+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
}
 80051a4:	4770      	bx	lr
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	20000be0 	.word	0x20000be0

080051ac <xTaskGetTickCountFromISR>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	; (80051b4 <xTaskGetTickCountFromISR+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	20000be0 	.word	0x20000be0

080051b8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b8:	4b34      	ldr	r3, [pc, #208]	; (800528c <xTaskIncrementTick+0xd4>)
{
 80051ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d15e      	bne.n	8005280 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051c2:	4b33      	ldr	r3, [pc, #204]	; (8005290 <xTaskIncrementTick+0xd8>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	3201      	adds	r2, #1
 80051c8:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 80051ca:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d111      	bne.n	80051f4 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <xTaskIncrementTick+0xdc>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d001      	beq.n	80051de <xTaskIncrementTick+0x26>
 80051da:	b672      	cpsid	i
 80051dc:	e7fe      	b.n	80051dc <xTaskIncrementTick+0x24>
 80051de:	4a2e      	ldr	r2, [pc, #184]	; (8005298 <xTaskIncrementTick+0xe0>)
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	6810      	ldr	r0, [r2, #0]
 80051e4:	6018      	str	r0, [r3, #0]
 80051e6:	6011      	str	r1, [r2, #0]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	; (800529c <xTaskIncrementTick+0xe4>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	f7ff fe72 	bl	8004ed8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051f4:	4e2a      	ldr	r6, [pc, #168]	; (80052a0 <xTaskIncrementTick+0xe8>)
 80051f6:	9a00      	ldr	r2, [sp, #0]
 80051f8:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80051fa:	2400      	movs	r4, #0
 80051fc:	4f29      	ldr	r7, [pc, #164]	; (80052a4 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051fe:	429a      	cmp	r2, r3
 8005200:	d235      	bcs.n	800526e <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	2314      	movs	r3, #20
 8005208:	4353      	muls	r3, r2
 800520a:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <xTaskIncrementTick+0xf0>)
 800520c:	58d3      	ldr	r3, [r2, r3]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d900      	bls.n	8005214 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8005212:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <xTaskIncrementTick+0xf4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d000      	beq.n	800521e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800521c:	2401      	movs	r4, #1
}
 800521e:	0020      	movs	r0, r4
 8005220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005222:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8005224:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800522a:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 800522c:	429a      	cmp	r2, r3
 800522e:	d325      	bcc.n	800527c <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005230:	1d2b      	adds	r3, r5, #4
 8005232:	0018      	movs	r0, r3
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	f7ff fa2e 	bl	8004696 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800523a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005240:	0028      	movs	r0, r5
 8005242:	3018      	adds	r0, #24
 8005244:	f7ff fa27 	bl	8004696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <xTaskIncrementTick+0xf8>)
 800524a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4290      	cmp	r0, r2
 8005250:	d900      	bls.n	8005254 <xTaskIncrementTick+0x9c>
 8005252:	6018      	str	r0, [r3, #0]
 8005254:	2314      	movs	r3, #20
 8005256:	4358      	muls	r0, r3
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <xTaskIncrementTick+0xf0>)
 800525a:	1d29      	adds	r1, r5, #4
 800525c:	1818      	adds	r0, r3, r0
 800525e:	f7ff f9f7 	bl	8004650 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d300      	bcc.n	800526e <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 800526c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <xTaskIncrementTick+0xdc>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	2a00      	cmp	r2, #0
 8005276:	d1d4      	bne.n	8005222 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	2301      	movs	r3, #1
 800527a:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 800527c:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800527e:	e7c0      	b.n	8005202 <xTaskIncrementTick+0x4a>
		++xPendedTicks;
 8005280:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8005282:	2400      	movs	r4, #0
		++xPendedTicks;
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800528a:	e7c8      	b.n	800521e <xTaskIncrementTick+0x66>
 800528c:	20000b60 	.word	0x20000b60
 8005290:	20000be0 	.word	0x20000be0
 8005294:	200006f0 	.word	0x200006f0
 8005298:	200006f4 	.word	0x200006f4
 800529c:	20000b98 	.word	0x20000b98
 80052a0:	20000b94 	.word	0x20000b94
 80052a4:	200006ec 	.word	0x200006ec
 80052a8:	200006f8 	.word	0x200006f8
 80052ac:	20000be4 	.word	0x20000be4
 80052b0:	20000b68 	.word	0x20000b68
 80052b4:	20000b9c 	.word	0x20000b9c

080052b8 <xTaskResumeAll>:
{
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80052ba:	4c2b      	ldr	r4, [pc, #172]	; (8005368 <xTaskResumeAll+0xb0>)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xTaskResumeAll+0xe>
 80052c2:	b672      	cpsid	i
 80052c4:	e7fe      	b.n	80052c4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80052c6:	f000 fd43 	bl	8005d50 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d0:	6824      	ldr	r4, [r4, #0]
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	d004      	beq.n	80052e0 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 80052d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80052d8:	f000 fd46 	bl	8005d68 <vPortExitCritical>
}
 80052dc:	0020      	movs	r0, r4
 80052de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e0:	4b22      	ldr	r3, [pc, #136]	; (800536c <xTaskResumeAll+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f6      	beq.n	80052d6 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 80052e8:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 80052ea:	2701      	movs	r7, #1
 80052ec:	e01d      	b.n	800532a <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f2:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f4:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f6:	3018      	adds	r0, #24
 80052f8:	f7ff f9cd 	bl	8004696 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	0028      	movs	r0, r5
 80052fe:	f7ff f9ca 	bl	8004696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <xTaskResumeAll+0xb8>)
 8005304:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4290      	cmp	r0, r2
 800530a:	d900      	bls.n	800530e <xTaskResumeAll+0x56>
 800530c:	6018      	str	r0, [r3, #0]
 800530e:	4370      	muls	r0, r6
 8005310:	4b18      	ldr	r3, [pc, #96]	; (8005374 <xTaskResumeAll+0xbc>)
 8005312:	0029      	movs	r1, r5
 8005314:	18c0      	adds	r0, r0, r3
 8005316:	f7ff f99b 	bl	8004650 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <xTaskResumeAll+0xc0>)
 800531c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	429a      	cmp	r2, r3
 8005324:	d301      	bcc.n	800532a <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <xTaskResumeAll+0xc4>)
 8005328:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800532a:	4b15      	ldr	r3, [pc, #84]	; (8005380 <xTaskResumeAll+0xc8>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2a00      	cmp	r2, #0
 8005330:	d1dd      	bne.n	80052ee <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 8005332:	2c00      	cmp	r4, #0
 8005334:	d001      	beq.n	800533a <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 8005336:	f7ff fdcf 	bl	8004ed8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800533a:	4d12      	ldr	r5, [pc, #72]	; (8005384 <xTaskResumeAll+0xcc>)
 800533c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800533e:	2c00      	cmp	r4, #0
 8005340:	d00a      	beq.n	8005358 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8005342:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005344:	f7ff ff38 	bl	80051b8 <xTaskIncrementTick>
 8005348:	2800      	cmp	r0, #0
 800534a:	d001      	beq.n	8005350 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <xTaskResumeAll+0xc4>)
 800534e:	601e      	str	r6, [r3, #0]
							--xPendedCounts;
 8005350:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005352:	2c00      	cmp	r4, #0
 8005354:	d1f6      	bne.n	8005344 <xTaskResumeAll+0x8c>
						xPendedTicks = 0;
 8005356:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <xTaskResumeAll+0xc4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ba      	beq.n	80052d6 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8005360:	f000 fcea 	bl	8005d38 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8005364:	2401      	movs	r4, #1
 8005366:	e7b7      	b.n	80052d8 <xTaskResumeAll+0x20>
 8005368:	20000b60 	.word	0x20000b60
 800536c:	20000b58 	.word	0x20000b58
 8005370:	20000b68 	.word	0x20000b68
 8005374:	200006f8 	.word	0x200006f8
 8005378:	200006ec 	.word	0x200006ec
 800537c:	20000be4 	.word	0x20000be4
 8005380:	20000ba0 	.word	0x20000ba0
 8005384:	20000b9c 	.word	0x20000b9c

08005388 <vTaskDelay>:
	{
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800538c:	d102      	bne.n	8005394 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 800538e:	f000 fcd3 	bl	8005d38 <vPortYield>
	}
 8005392:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <vTaskDelay+0x30>)
 8005396:	681d      	ldr	r5, [r3, #0]
 8005398:	2d00      	cmp	r5, #0
 800539a:	d001      	beq.n	80053a0 <vTaskDelay+0x18>
 800539c:	b672      	cpsid	i
 800539e:	e7fe      	b.n	800539e <vTaskDelay+0x16>
			vTaskSuspendAll();
 80053a0:	f7ff fef6 	bl	8005190 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053a4:	0029      	movs	r1, r5
 80053a6:	0020      	movs	r0, r4
 80053a8:	f7ff fe32 	bl	8005010 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80053ac:	f7ff ff84 	bl	80052b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d0ec      	beq.n	800538e <vTaskDelay+0x6>
 80053b4:	e7ed      	b.n	8005392 <vTaskDelay+0xa>
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	20000b60 	.word	0x20000b60

080053bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053bc:	4b15      	ldr	r3, [pc, #84]	; (8005414 <vTaskSwitchContext+0x58>)
{
 80053be:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <vTaskSwitchContext+0x5c>)
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d002      	beq.n	80053ce <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ce:	2514      	movs	r5, #20
 80053d0:	4812      	ldr	r0, [pc, #72]	; (800541c <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 80053d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	4912      	ldr	r1, [pc, #72]	; (8005420 <vTaskSwitchContext+0x64>)
 80053d8:	002b      	movs	r3, r5
 80053da:	4353      	muls	r3, r2
 80053dc:	585c      	ldr	r4, [r3, r1]
 80053de:	2c00      	cmp	r4, #0
 80053e0:	d012      	beq.n	8005408 <vTaskSwitchContext+0x4c>
 80053e2:	18cc      	adds	r4, r1, r3
 80053e4:	6865      	ldr	r5, [r4, #4]
 80053e6:	3308      	adds	r3, #8
 80053e8:	686d      	ldr	r5, [r5, #4]
 80053ea:	185b      	adds	r3, r3, r1
 80053ec:	6065      	str	r5, [r4, #4]
 80053ee:	429d      	cmp	r5, r3
 80053f0:	d101      	bne.n	80053f6 <vTaskSwitchContext+0x3a>
 80053f2:	686b      	ldr	r3, [r5, #4]
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	2314      	movs	r3, #20
 80053f8:	4353      	muls	r3, r2
 80053fa:	18c9      	adds	r1, r1, r3
 80053fc:	684b      	ldr	r3, [r1, #4]
 80053fe:	68d9      	ldr	r1, [r3, #12]
 8005400:	4b08      	ldr	r3, [pc, #32]	; (8005424 <vTaskSwitchContext+0x68>)
 8005402:	6019      	str	r1, [r3, #0]
 8005404:	6002      	str	r2, [r0, #0]
}
 8005406:	e7e1      	b.n	80053cc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005408:	2a00      	cmp	r2, #0
 800540a:	d101      	bne.n	8005410 <vTaskSwitchContext+0x54>
 800540c:	b672      	cpsid	i
 800540e:	e7fe      	b.n	800540e <vTaskSwitchContext+0x52>
 8005410:	3a01      	subs	r2, #1
 8005412:	e7e1      	b.n	80053d8 <vTaskSwitchContext+0x1c>
 8005414:	20000b60 	.word	0x20000b60
 8005418:	20000be4 	.word	0x20000be4
 800541c:	20000b68 	.word	0x20000b68
 8005420:	200006f8 	.word	0x200006f8
 8005424:	200006ec 	.word	0x200006ec

08005428 <vTaskPlaceOnEventList>:
{
 8005428:	b510      	push	{r4, lr}
 800542a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800542c:	2800      	cmp	r0, #0
 800542e:	d101      	bne.n	8005434 <vTaskPlaceOnEventList+0xc>
 8005430:	b672      	cpsid	i
 8005432:	e7fe      	b.n	8005432 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <vTaskPlaceOnEventList+0x20>)
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	3118      	adds	r1, #24
 800543a:	f7ff f915 	bl	8004668 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800543e:	2101      	movs	r1, #1
 8005440:	0020      	movs	r0, r4
 8005442:	f7ff fde5 	bl	8005010 <prvAddCurrentTaskToDelayedList>
}
 8005446:	bd10      	pop	{r4, pc}
 8005448:	200006ec 	.word	0x200006ec

0800544c <vTaskPlaceOnEventListRestricted>:
	{
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	000c      	movs	r4, r1
 8005450:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 8005452:	2800      	cmp	r0, #0
 8005454:	d101      	bne.n	800545a <vTaskPlaceOnEventListRestricted+0xe>
 8005456:	b672      	cpsid	i
 8005458:	e7fe      	b.n	8005458 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <vTaskPlaceOnEventListRestricted+0x2c>)
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	3118      	adds	r1, #24
 8005460:	f7ff f8f6 	bl	8004650 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8005464:	2d00      	cmp	r5, #0
 8005466:	d001      	beq.n	800546c <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
 8005468:	2401      	movs	r4, #1
 800546a:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800546c:	0029      	movs	r1, r5
 800546e:	0020      	movs	r0, r4
 8005470:	f7ff fdce 	bl	8005010 <prvAddCurrentTaskToDelayedList>
	}
 8005474:	bd70      	pop	{r4, r5, r6, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	200006ec 	.word	0x200006ec

0800547c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800547c:	68c3      	ldr	r3, [r0, #12]
{
 800547e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005480:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005482:	2c00      	cmp	r4, #0
 8005484:	d101      	bne.n	800548a <xTaskRemoveFromEventList+0xe>
 8005486:	b672      	cpsid	i
 8005488:	e7fe      	b.n	8005488 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800548a:	0025      	movs	r5, r4
 800548c:	3518      	adds	r5, #24
 800548e:	0028      	movs	r0, r5
 8005490:	f7ff f901 	bl	8004696 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <xTaskRemoveFromEventList+0x60>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11b      	bne.n	80054d4 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800549c:	1d25      	adds	r5, r4, #4
 800549e:	0028      	movs	r0, r5
 80054a0:	f7ff f8f9 	bl	8004696 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054a4:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <xTaskRemoveFromEventList+0x64>)
 80054a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054a8:	6811      	ldr	r1, [r2, #0]
 80054aa:	428b      	cmp	r3, r1
 80054ac:	d900      	bls.n	80054b0 <xTaskRemoveFromEventList+0x34>
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	2014      	movs	r0, #20
 80054b2:	0029      	movs	r1, r5
 80054b4:	4358      	muls	r0, r3
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <xTaskRemoveFromEventList+0x68>)
 80054b8:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054ba:	f7ff f8c9 	bl	8004650 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <xTaskRemoveFromEventList+0x6c>)
 80054c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054c2:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 80054c4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d902      	bls.n	80054d2 <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <xTaskRemoveFromEventList+0x70>)
 80054ce:	3001      	adds	r0, #1
 80054d0:	6018      	str	r0, [r3, #0]
}
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054d4:	0029      	movs	r1, r5
 80054d6:	4806      	ldr	r0, [pc, #24]	; (80054f0 <xTaskRemoveFromEventList+0x74>)
 80054d8:	e7ef      	b.n	80054ba <xTaskRemoveFromEventList+0x3e>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20000b60 	.word	0x20000b60
 80054e0:	20000b68 	.word	0x20000b68
 80054e4:	200006f8 	.word	0x200006f8
 80054e8:	200006ec 	.word	0x200006ec
 80054ec:	20000be4 	.word	0x20000be4
 80054f0:	20000ba0 	.word	0x20000ba0

080054f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <vTaskInternalSetTimeOutState+0x10>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <vTaskInternalSetTimeOutState+0x14>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6043      	str	r3, [r0, #4]
}
 8005500:	4770      	bx	lr
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	20000b98 	.word	0x20000b98
 8005508:	20000be0 	.word	0x20000be0

0800550c <xTaskCheckForTimeOut>:
{
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	0005      	movs	r5, r0
 8005510:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 8005512:	2800      	cmp	r0, #0
 8005514:	d101      	bne.n	800551a <xTaskCheckForTimeOut+0xe>
 8005516:	b672      	cpsid	i
 8005518:	e7fe      	b.n	8005518 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 800551a:	2900      	cmp	r1, #0
 800551c:	d101      	bne.n	8005522 <xTaskCheckForTimeOut+0x16>
 800551e:	b672      	cpsid	i
 8005520:	e7fe      	b.n	8005520 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8005522:	f000 fc15 	bl	8005d50 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <xTaskCheckForTimeOut+0x5c>)
				xReturn = pdFALSE;
 8005528:	2600      	movs	r6, #0
		const TickType_t xConstTickCount = xTickCount;
 800552a:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	d012      	beq.n	8005558 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005532:	480e      	ldr	r0, [pc, #56]	; (800556c <xTaskCheckForTimeOut+0x60>)
 8005534:	682e      	ldr	r6, [r5, #0]
 8005536:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005538:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800553a:	4286      	cmp	r6, r0
 800553c:	d002      	beq.n	8005544 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 800553e:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005540:	428a      	cmp	r2, r1
 8005542:	d909      	bls.n	8005558 <xTaskCheckForTimeOut+0x4c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005544:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005546:	4283      	cmp	r3, r0
 8005548:	d90a      	bls.n	8005560 <xTaskCheckForTimeOut+0x54>
			*pxTicksToWait -= xElapsedTime;
 800554a:	1a5b      	subs	r3, r3, r1
 800554c:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800554e:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8005550:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005552:	f7ff ffcf 	bl	80054f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005556:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8005558:	f000 fc06 	bl	8005d68 <vPortExitCritical>
}
 800555c:	0030      	movs	r0, r6
 800555e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005560:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005562:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8005564:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005566:	e7f7      	b.n	8005558 <xTaskCheckForTimeOut+0x4c>
 8005568:	20000be0 	.word	0x20000be0
 800556c:	20000b98 	.word	0x20000b98

08005570 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005570:	2201      	movs	r2, #1
 8005572:	4b01      	ldr	r3, [pc, #4]	; (8005578 <vTaskMissedYield+0x8>)
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	4770      	bx	lr
 8005578:	20000be4 	.word	0x20000be4

0800557c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800557e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005586:	4b04      	ldr	r3, [pc, #16]	; (8005598 <xTaskGetSchedulerState+0x1c>)
 8005588:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800558a:	4243      	negs	r3, r0
 800558c:	4158      	adcs	r0, r3
 800558e:	0040      	lsls	r0, r0, #1
	}
 8005590:	4770      	bx	lr
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	20000bb4 	.word	0x20000bb4
 8005598:	20000b60 	.word	0x20000b60

0800559c <xTaskPriorityInherit>:
	{
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80055a0:	d027      	beq.n	80055f2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80055a2:	4d1a      	ldr	r5, [pc, #104]	; (800560c <xTaskPriorityInherit+0x70>)
 80055a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d226      	bcs.n	80055fc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055ae:	6983      	ldr	r3, [r0, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	db04      	blt.n	80055be <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b4:	2238      	movs	r2, #56	; 0x38
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055be:	2314      	movs	r3, #20
 80055c0:	434b      	muls	r3, r1
 80055c2:	4e13      	ldr	r6, [pc, #76]	; (8005610 <xTaskPriorityInherit+0x74>)
 80055c4:	6962      	ldr	r2, [r4, #20]
 80055c6:	199b      	adds	r3, r3, r6
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d113      	bne.n	80055f4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055cc:	1d27      	adds	r7, r4, #4
 80055ce:	0038      	movs	r0, r7
 80055d0:	f7ff f861 	bl	8004696 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055da:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4290      	cmp	r0, r2
 80055e0:	d900      	bls.n	80055e4 <xTaskPriorityInherit+0x48>
 80055e2:	6018      	str	r0, [r3, #0]
 80055e4:	2314      	movs	r3, #20
 80055e6:	4358      	muls	r0, r3
 80055e8:	0039      	movs	r1, r7
 80055ea:	1830      	adds	r0, r6, r0
 80055ec:	f7ff f830 	bl	8004650 <vListInsertEnd>
				xReturn = pdTRUE;
 80055f0:	2001      	movs	r0, #1
	}
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055fa:	e7f9      	b.n	80055f0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	4298      	cmp	r0, r3
 8005604:	4180      	sbcs	r0, r0
 8005606:	4240      	negs	r0, r0
 8005608:	e7f3      	b.n	80055f2 <xTaskPriorityInherit+0x56>
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	200006ec 	.word	0x200006ec
 8005610:	200006f8 	.word	0x200006f8
 8005614:	20000b68 	.word	0x20000b68

08005618 <xTaskPriorityDisinherit>:
	{
 8005618:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800561a:	2800      	cmp	r0, #0
 800561c:	d101      	bne.n	8005622 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800561e:	2000      	movs	r0, #0
	}
 8005620:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <xTaskPriorityDisinherit+0x60>)
 8005624:	681c      	ldr	r4, [r3, #0]
 8005626:	4284      	cmp	r4, r0
 8005628:	d001      	beq.n	800562e <xTaskPriorityDisinherit+0x16>
 800562a:	b672      	cpsid	i
 800562c:	e7fe      	b.n	800562c <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 800562e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <xTaskPriorityDisinherit+0x20>
 8005634:	b672      	cpsid	i
 8005636:	e7fe      	b.n	8005636 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005638:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800563a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800563c:	3b01      	subs	r3, #1
 800563e:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005640:	428a      	cmp	r2, r1
 8005642:	d0ec      	beq.n	800561e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ea      	bne.n	800561e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005648:	1d25      	adds	r5, r4, #4
 800564a:	0028      	movs	r0, r5
 800564c:	f7ff f823 	bl	8004696 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005650:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005652:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005654:	1ad2      	subs	r2, r2, r3
 8005656:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800565a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800565c:	6811      	ldr	r1, [r2, #0]
 800565e:	428b      	cmp	r3, r1
 8005660:	d900      	bls.n	8005664 <xTaskPriorityDisinherit+0x4c>
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	2014      	movs	r0, #20
 8005666:	4358      	muls	r0, r3
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <xTaskPriorityDisinherit+0x68>)
 800566a:	0029      	movs	r1, r5
 800566c:	18c0      	adds	r0, r0, r3
 800566e:	f7fe ffef 	bl	8004650 <vListInsertEnd>
					xReturn = pdTRUE;
 8005672:	2001      	movs	r0, #1
		return xReturn;
 8005674:	e7d4      	b.n	8005620 <xTaskPriorityDisinherit+0x8>
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	200006ec 	.word	0x200006ec
 800567c:	20000b68 	.word	0x20000b68
 8005680:	200006f8 	.word	0x200006f8

08005684 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8005688:	d031      	beq.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
 800568a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <vTaskPriorityDisinheritAfterTimeout+0x10>
 8005690:	b672      	cpsid	i
 8005692:	e7fe      	b.n	8005692 <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005694:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005696:	428a      	cmp	r2, r1
 8005698:	d200      	bcs.n	800569c <vTaskPriorityDisinheritAfterTimeout+0x18>
 800569a:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800569c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800569e:	4290      	cmp	r0, r2
 80056a0:	d025      	beq.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d123      	bne.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
 80056a6:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <vTaskPriorityDisinheritAfterTimeout+0x6c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	d101      	bne.n	80056b2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 80056ae:	b672      	cpsid	i
 80056b0:	e7fe      	b.n	80056b0 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b2:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80056b4:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db02      	blt.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ba:	2138      	movs	r1, #56	; 0x38
 80056bc:	1a8a      	subs	r2, r1, r2
 80056be:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056c0:	2314      	movs	r3, #20
 80056c2:	4343      	muls	r3, r0
 80056c4:	4d0b      	ldr	r5, [pc, #44]	; (80056f4 <vTaskPriorityDisinheritAfterTimeout+0x70>)
 80056c6:	6962      	ldr	r2, [r4, #20]
 80056c8:	195b      	adds	r3, r3, r5
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d10f      	bne.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ce:	1d26      	adds	r6, r4, #4
 80056d0:	0030      	movs	r0, r6
 80056d2:	f7fe ffe0 	bl	8004696 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <vTaskPriorityDisinheritAfterTimeout+0x74>)
 80056d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80056da:	6811      	ldr	r1, [r2, #0]
 80056dc:	428b      	cmp	r3, r1
 80056de:	d900      	bls.n	80056e2 <vTaskPriorityDisinheritAfterTimeout+0x5e>
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	2014      	movs	r0, #20
 80056e4:	4358      	muls	r0, r3
 80056e6:	0031      	movs	r1, r6
 80056e8:	1828      	adds	r0, r5, r0
 80056ea:	f7fe ffb1 	bl	8004650 <vListInsertEnd>
	}
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	200006ec 	.word	0x200006ec
 80056f4:	200006f8 	.word	0x200006f8
 80056f8:	20000b68 	.word	0x20000b68

080056fc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <pvTaskIncrementMutexHeldCount+0x14>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	2a00      	cmp	r2, #0
 8005702:	d003      	beq.n	800570c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005704:	6819      	ldr	r1, [r3, #0]
 8005706:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005708:	3201      	adds	r2, #1
 800570a:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800570c:	6818      	ldr	r0, [r3, #0]
	}
 800570e:	4770      	bx	lr
 8005710:	200006ec 	.word	0x200006ec

08005714 <ulTaskNotifyTake>:
	{
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	0006      	movs	r6, r0
 8005718:	000d      	movs	r5, r1
		taskENTER_CRITICAL();
 800571a:	f000 fb19 	bl	8005d50 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800571e:	4c13      	ldr	r4, [pc, #76]	; (800576c <ulTaskNotifyTake+0x58>)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <ulTaskNotifyTake+0x2a>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005728:	2101      	movs	r1, #1
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	3358      	adds	r3, #88	; 0x58
 800572e:	7019      	strb	r1, [r3, #0]
				if( xTicksToWait > ( TickType_t ) 0 )
 8005730:	2d00      	cmp	r5, #0
 8005732:	d004      	beq.n	800573e <ulTaskNotifyTake+0x2a>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005734:	0028      	movs	r0, r5
 8005736:	f7ff fc6b 	bl	8005010 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800573a:	f000 fafd 	bl	8005d38 <vPortYield>
		taskEXIT_CRITICAL();
 800573e:	f000 fb13 	bl	8005d68 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005742:	f000 fb05 	bl	8005d50 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	6d5d      	ldr	r5, [r3, #84]	; 0x54
			if( ulReturn != 0UL )
 800574a:	2d00      	cmp	r5, #0
 800574c:	d005      	beq.n	800575a <ulTaskNotifyTake+0x46>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800574e:	2200      	movs	r2, #0
 8005750:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8005752:	2e00      	cmp	r6, #0
 8005754:	d100      	bne.n	8005758 <ulTaskNotifyTake+0x44>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005756:	1e6a      	subs	r2, r5, #1
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800575a:	2200      	movs	r2, #0
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	3358      	adds	r3, #88	; 0x58
 8005760:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8005762:	f000 fb01 	bl	8005d68 <vPortExitCritical>
	}
 8005766:	0028      	movs	r0, r5
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	200006ec 	.word	0x200006ec

08005770 <xTaskGenericNotify>:
	{
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	0004      	movs	r4, r0
 8005774:	000d      	movs	r5, r1
 8005776:	0016      	movs	r6, r2
 8005778:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 800577a:	2800      	cmp	r0, #0
 800577c:	d101      	bne.n	8005782 <xTaskGenericNotify+0x12>
 800577e:	b672      	cpsid	i
 8005780:	e7fe      	b.n	8005780 <xTaskGenericNotify+0x10>
		taskENTER_CRITICAL();
 8005782:	f000 fae5 	bl	8005d50 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005786:	2f00      	cmp	r7, #0
 8005788:	d001      	beq.n	800578e <xTaskGenericNotify+0x1e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800578a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800578c:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800578e:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005790:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005792:	3258      	adds	r2, #88	; 0x58
 8005794:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005796:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005798:	b2db      	uxtb	r3, r3
			switch( eAction )
 800579a:	2e04      	cmp	r6, #4
 800579c:	d817      	bhi.n	80057ce <xTaskGenericNotify+0x5e>
 800579e:	0030      	movs	r0, r6
 80057a0:	f7fa fcbc 	bl	800011c <__gnu_thumb1_case_uqi>
 80057a4:	0507030a 	.word	0x0507030a
 80057a8:	11          	.byte	0x11
 80057a9:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 80057aa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80057ac:	430d      	orrs	r5, r1
						pxTCB->ulNotifiedValue = ulValue;
 80057ae:	6565      	str	r5, [r4, #84]	; 0x54
 80057b0:	e002      	b.n	80057b8 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 80057b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057b4:	3201      	adds	r2, #1
 80057b6:	6562      	str	r2, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d00d      	beq.n	80057d8 <xTaskGenericNotify+0x68>
 80057bc:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 80057be:	f000 fad3 	bl	8005d68 <vPortExitCritical>
	}
 80057c2:	0020      	movs	r0, r4
 80057c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d1f1      	bne.n	80057ae <xTaskGenericNotify+0x3e>
						xReturn = pdFAIL;
 80057ca:	2400      	movs	r4, #0
 80057cc:	e7f7      	b.n	80057be <xTaskGenericNotify+0x4e>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80057ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057d0:	3201      	adds	r2, #1
 80057d2:	d0f1      	beq.n	80057b8 <xTaskGenericNotify+0x48>
 80057d4:	b672      	cpsid	i
 80057d6:	e7fe      	b.n	80057d6 <xTaskGenericNotify+0x66>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	1d25      	adds	r5, r4, #4
 80057da:	0028      	movs	r0, r5
 80057dc:	f7fe ff5b 	bl	8004696 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80057e0:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <xTaskGenericNotify+0xa8>)
 80057e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057e4:	6811      	ldr	r1, [r2, #0]
 80057e6:	428b      	cmp	r3, r1
 80057e8:	d900      	bls.n	80057ec <xTaskGenericNotify+0x7c>
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	2014      	movs	r0, #20
 80057ee:	4358      	muls	r0, r3
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <xTaskGenericNotify+0xac>)
 80057f2:	0029      	movs	r1, r5
 80057f4:	18c0      	adds	r0, r0, r3
 80057f6:	f7fe ff2b 	bl	8004650 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <xTaskGenericNotify+0x94>
 8005800:	b672      	cpsid	i
 8005802:	e7fe      	b.n	8005802 <xTaskGenericNotify+0x92>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <xTaskGenericNotify+0xb0>)
 8005806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	429a      	cmp	r2, r3
 800580e:	d9d5      	bls.n	80057bc <xTaskGenericNotify+0x4c>
					taskYIELD_IF_USING_PREEMPTION();
 8005810:	f000 fa92 	bl	8005d38 <vPortYield>
 8005814:	e7d2      	b.n	80057bc <xTaskGenericNotify+0x4c>
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	20000b68 	.word	0x20000b68
 800581c:	200006f8 	.word	0x200006f8
 8005820:	200006ec 	.word	0x200006ec

08005824 <xTaskGenericNotifyFromISR>:
	{
 8005824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005826:	0004      	movs	r4, r0
 8005828:	000f      	movs	r7, r1
 800582a:	0015      	movs	r5, r2
 800582c:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 800582e:	2800      	cmp	r0, #0
 8005830:	d101      	bne.n	8005836 <xTaskGenericNotifyFromISR+0x12>
 8005832:	b672      	cpsid	i
 8005834:	e7fe      	b.n	8005834 <xTaskGenericNotifyFromISR+0x10>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005836:	f000 faa5 	bl	8005d84 <ulSetInterruptMaskFromISR>
 800583a:	9001      	str	r0, [sp, #4]
			if( pulPreviousNotificationValue != NULL )
 800583c:	2e00      	cmp	r6, #0
 800583e:	d001      	beq.n	8005844 <xTaskGenericNotifyFromISR+0x20>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005840:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005842:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005844:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005846:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005848:	3258      	adds	r2, #88	; 0x58
 800584a:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800584c:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800584e:	b2db      	uxtb	r3, r3
			switch( eAction )
 8005850:	2d04      	cmp	r5, #4
 8005852:	d818      	bhi.n	8005886 <xTaskGenericNotifyFromISR+0x62>
 8005854:	0028      	movs	r0, r5
 8005856:	f7fa fc61 	bl	800011c <__gnu_thumb1_case_uqi>
 800585a:	0306      	.short	0x0306
 800585c:	140e      	.short	0x140e
 800585e:	12          	.byte	0x12
 800585f:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005860:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005862:	4339      	orrs	r1, r7
 8005864:	6561      	str	r1, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005866:	2b01      	cmp	r3, #1
 8005868:	d012      	beq.n	8005890 <xTaskGenericNotifyFromISR+0x6c>
 800586a:	2401      	movs	r4, #1
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800586c:	9801      	ldr	r0, [sp, #4]
 800586e:	f000 fa8d 	bl	8005d8c <vClearInterruptMaskFromISR>
	}
 8005872:	0020      	movs	r0, r4
 8005874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8005876:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005878:	3201      	adds	r2, #1
 800587a:	6562      	str	r2, [r4, #84]	; 0x54
					break;
 800587c:	e7f3      	b.n	8005866 <xTaskGenericNotifyFromISR+0x42>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800587e:	2b02      	cmp	r3, #2
 8005880:	d032      	beq.n	80058e8 <xTaskGenericNotifyFromISR+0xc4>
						pxTCB->ulNotifiedValue = ulValue;
 8005882:	6567      	str	r7, [r4, #84]	; 0x54
 8005884:	e7ef      	b.n	8005866 <xTaskGenericNotifyFromISR+0x42>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005886:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005888:	3201      	adds	r2, #1
 800588a:	d0ec      	beq.n	8005866 <xTaskGenericNotifyFromISR+0x42>
 800588c:	b672      	cpsid	i
 800588e:	e7fe      	b.n	800588e <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005890:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <xTaskGenericNotifyFromISR+0x76>
 8005896:	b672      	cpsid	i
 8005898:	e7fe      	b.n	8005898 <xTaskGenericNotifyFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <xTaskGenericNotifyFromISR+0xc8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11e      	bne.n	80058e0 <xTaskGenericNotifyFromISR+0xbc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a2:	1d25      	adds	r5, r4, #4
 80058a4:	0028      	movs	r0, r5
 80058a6:	f7fe fef6 	bl	8004696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <xTaskGenericNotifyFromISR+0xcc>)
 80058ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058ae:	6811      	ldr	r1, [r2, #0]
 80058b0:	428b      	cmp	r3, r1
 80058b2:	d900      	bls.n	80058b6 <xTaskGenericNotifyFromISR+0x92>
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	2014      	movs	r0, #20
 80058b8:	0029      	movs	r1, r5
 80058ba:	4358      	muls	r0, r3
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <xTaskGenericNotifyFromISR+0xd0>)
 80058be:	18c0      	adds	r0, r0, r3
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80058c0:	f7fe fec6 	bl	8004650 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <xTaskGenericNotifyFromISR+0xd4>)
 80058c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d9cc      	bls.n	800586a <xTaskGenericNotifyFromISR+0x46>
					if( pxHigherPriorityTaskWoken != NULL )
 80058d0:	9a08      	ldr	r2, [sp, #32]
 80058d2:	2301      	movs	r3, #1
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d000      	beq.n	80058da <xTaskGenericNotifyFromISR+0xb6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80058d8:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <xTaskGenericNotifyFromISR+0xd8>)
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e7c4      	b.n	800586a <xTaskGenericNotifyFromISR+0x46>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80058e0:	0021      	movs	r1, r4
 80058e2:	4807      	ldr	r0, [pc, #28]	; (8005900 <xTaskGenericNotifyFromISR+0xdc>)
 80058e4:	3118      	adds	r1, #24
 80058e6:	e7eb      	b.n	80058c0 <xTaskGenericNotifyFromISR+0x9c>
						xReturn = pdFAIL;
 80058e8:	2400      	movs	r4, #0
 80058ea:	e7bf      	b.n	800586c <xTaskGenericNotifyFromISR+0x48>
 80058ec:	20000b60 	.word	0x20000b60
 80058f0:	20000b68 	.word	0x20000b68
 80058f4:	200006f8 	.word	0x200006f8
 80058f8:	200006ec 	.word	0x200006ec
 80058fc:	20000be4 	.word	0x20000be4
 8005900:	20000ba0 	.word	0x20000ba0

08005904 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005906:	f000 fa23 	bl	8005d50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800590a:	4c10      	ldr	r4, [pc, #64]	; (800594c <prvCheckForValidListAndQueue+0x48>)
 800590c:	6825      	ldr	r5, [r4, #0]
 800590e:	2d00      	cmp	r5, #0
 8005910:	d118      	bne.n	8005944 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 8005912:	4f0f      	ldr	r7, [pc, #60]	; (8005950 <prvCheckForValidListAndQueue+0x4c>)
 8005914:	0038      	movs	r0, r7
 8005916:	f7fe fe8d 	bl	8004634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800591a:	4e0e      	ldr	r6, [pc, #56]	; (8005954 <prvCheckForValidListAndQueue+0x50>)
 800591c:	0030      	movs	r0, r6
 800591e:	f7fe fe89 	bl	8004634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005924:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005926:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800592a:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800592c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800592e:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <prvCheckForValidListAndQueue+0x5c>)
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <prvCheckForValidListAndQueue+0x60>)
 8005932:	9500      	str	r5, [sp, #0]
 8005934:	f7fe ff7f 	bl	8004836 <xQueueGenericCreateStatic>
 8005938:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800593a:	2800      	cmp	r0, #0
 800593c:	d002      	beq.n	8005944 <prvCheckForValidListAndQueue+0x40>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800593e:	490a      	ldr	r1, [pc, #40]	; (8005968 <prvCheckForValidListAndQueue+0x64>)
 8005940:	f7ff f9fa 	bl	8004d38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005944:	f000 fa10 	bl	8005d68 <vPortExitCritical>
}
 8005948:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	20000d0c 	.word	0x20000d0c
 8005950:	20000c90 	.word	0x20000c90
 8005954:	20000ca4 	.word	0x20000ca4
 8005958:	20000be8 	.word	0x20000be8
 800595c:	20000bec 	.word	0x20000bec
 8005960:	20000bf0 	.word	0x20000bf0
 8005964:	20000cbc 	.word	0x20000cbc
 8005968:	08006261 	.word	0x08006261

0800596c <prvInsertTimerInActiveList>:
{
 800596c:	b510      	push	{r4, lr}
 800596e:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005970:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005972:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005974:	4291      	cmp	r1, r2
 8005976:	d80b      	bhi.n	8005990 <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	69a3      	ldr	r3, [r4, #24]
			xProcessTimerNow = pdTRUE;
 800597c:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597e:	429a      	cmp	r2, r3
 8005980:	d205      	bcs.n	800598e <prvInsertTimerInActiveList+0x22>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <prvInsertTimerInActiveList+0x34>)
 8005984:	1d21      	adds	r1, r4, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	f7fe fe6e 	bl	8004668 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800598c:	2000      	movs	r0, #0
}
 800598e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005990:	429a      	cmp	r2, r3
 8005992:	d202      	bcs.n	800599a <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
 8005994:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005996:	4299      	cmp	r1, r3
 8005998:	d2f9      	bcs.n	800598e <prvInsertTimerInActiveList+0x22>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800599a:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <prvInsertTimerInActiveList+0x38>)
 800599c:	1d21      	adds	r1, r4, #4
 800599e:	e7f2      	b.n	8005986 <prvInsertTimerInActiveList+0x1a>
 80059a0:	20000bec 	.word	0x20000bec
 80059a4:	20000be8 	.word	0x20000be8

080059a8 <xTimerCreateTimerTask>:
{
 80059a8:	b510      	push	{r4, lr}
 80059aa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80059ac:	f7ff ffaa 	bl	8005904 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <xTimerCreateTimerTask+0x4c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d017      	beq.n	80059e8 <xTimerCreateTimerTask+0x40>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059b8:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059ba:	aa07      	add	r2, sp, #28
 80059bc:	a906      	add	r1, sp, #24
 80059be:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059c0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059c2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059c4:	f7fe fe2a 	bl	800461c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059c8:	9b05      	ldr	r3, [sp, #20]
 80059ca:	9a07      	ldr	r2, [sp, #28]
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	9b06      	ldr	r3, [sp, #24]
 80059d0:	4909      	ldr	r1, [pc, #36]	; (80059f8 <xTimerCreateTimerTask+0x50>)
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	2302      	movs	r3, #2
 80059d6:	4809      	ldr	r0, [pc, #36]	; (80059fc <xTimerCreateTimerTask+0x54>)
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	0023      	movs	r3, r4
 80059dc:	f7ff fb50 	bl	8005080 <xTaskCreateStatic>
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <xTimerCreateTimerTask+0x58>)
 80059e2:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d101      	bne.n	80059ec <xTimerCreateTimerTask+0x44>
	configASSERT( xReturn );
 80059e8:	b672      	cpsid	i
 80059ea:	e7fe      	b.n	80059ea <xTimerCreateTimerTask+0x42>
}
 80059ec:	2001      	movs	r0, #1
 80059ee:	b008      	add	sp, #32
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	20000d0c 	.word	0x20000d0c
 80059f8:	08006266 	.word	0x08006266
 80059fc:	08005b09 	.word	0x08005b09
 8005a00:	20000d10 	.word	0x20000d10

08005a04 <xTimerCreate>:
	{
 8005a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a06:	0007      	movs	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a08:	202c      	movs	r0, #44	; 0x2c
	{
 8005a0a:	000d      	movs	r5, r1
 8005a0c:	9200      	str	r2, [sp, #0]
 8005a0e:	9301      	str	r3, [sp, #4]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a10:	f000 fa56 	bl	8005ec0 <pvPortMalloc>
 8005a14:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8005a16:	d019      	beq.n	8005a4c <xTimerCreate+0x48>
			pxNewTimer->ucStatus = 0x00;
 8005a18:	0006      	movs	r6, r0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	3628      	adds	r6, #40	; 0x28
 8005a1e:	7033      	strb	r3, [r6, #0]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005a20:	429d      	cmp	r5, r3
 8005a22:	d101      	bne.n	8005a28 <xTimerCreate+0x24>
 8005a24:	b672      	cpsid	i
 8005a26:	e7fe      	b.n	8005a26 <xTimerCreate+0x22>
		prvCheckForValidListAndQueue();
 8005a28:	f7ff ff6c 	bl	8005904 <prvCheckForValidListAndQueue>
		pxNewTimer->pvTimerID = pvTimerID;
 8005a2c:	9b01      	ldr	r3, [sp, #4]
		pxNewTimer->pcTimerName = pcTimerName;
 8005a2e:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8005a30:	61e3      	str	r3, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005a32:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005a34:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005a36:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005a38:	1d20      	adds	r0, r4, #4
 8005a3a:	f7fe fe06 	bl	800464a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <xTimerCreate+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005a44:	2304      	movs	r3, #4
 8005a46:	7832      	ldrb	r2, [r6, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	7033      	strb	r3, [r6, #0]
	}
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005a50 <xTimerGenericCommand>:
{
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	0017      	movs	r7, r2
 8005a54:	0004      	movs	r4, r0
 8005a56:	001a      	movs	r2, r3
 8005a58:	b085      	sub	sp, #20
	configASSERT( xTimer );
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d101      	bne.n	8005a62 <xTimerGenericCommand+0x12>
 8005a5e:	b672      	cpsid	i
 8005a60:	e7fe      	b.n	8005a60 <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <xTimerGenericCommand+0x48>)
 8005a64:	682e      	ldr	r6, [r5, #0]
BaseType_t xReturn = pdFAIL;
 8005a66:	1e30      	subs	r0, r6, #0
	if( xTimerQueue != NULL )
 8005a68:	d00f      	beq.n	8005a8a <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
 8005a6a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a6c:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a6e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a70:	2905      	cmp	r1, #5
 8005a72:	dc0c      	bgt.n	8005a8e <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a74:	f7ff fd82 	bl	800557c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a7c:	2802      	cmp	r0, #2
 8005a7e:	d000      	beq.n	8005a82 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a80:	001a      	movs	r2, r3
 8005a82:	4669      	mov	r1, sp
 8005a84:	6828      	ldr	r0, [r5, #0]
 8005a86:	f7fe ff51 	bl	800492c <xQueueGenericSend>
}
 8005a8a:	b005      	add	sp, #20
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4669      	mov	r1, sp
 8005a92:	f7fe ffdb 	bl	8004a4c <xQueueGenericSendFromISR>
 8005a96:	e7f8      	b.n	8005a8a <xTimerGenericCommand+0x3a>
 8005a98:	20000d0c 	.word	0x20000d0c

08005a9c <prvSwitchTimerLists>:
{
 8005a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a9e:	4d18      	ldr	r5, [pc, #96]	; (8005b00 <prvSwitchTimerLists+0x64>)
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	d104      	bne.n	8005ab2 <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
 8005aa8:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <prvSwitchTimerLists+0x68>)
 8005aaa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005aac:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aae:	6029      	str	r1, [r5, #0]
}
 8005ab0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab6:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab8:	1d27      	adds	r7, r4, #4
 8005aba:	0038      	movs	r0, r7
 8005abc:	f7fe fdeb 	bl	8004696 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ac0:	6a23      	ldr	r3, [r4, #32]
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ac6:	0023      	movs	r3, r4
 8005ac8:	2204      	movs	r2, #4
 8005aca:	3328      	adds	r3, #40	; 0x28
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	4213      	tst	r3, r2
 8005ad0:	d0e5      	beq.n	8005a9e <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ad2:	69a3      	ldr	r3, [r4, #24]
 8005ad4:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
 8005ad6:	429e      	cmp	r6, r3
 8005ad8:	d206      	bcs.n	8005ae8 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ada:	0039      	movs	r1, r7
 8005adc:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ade:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ae0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ae2:	f7fe fdc1 	bl	8004668 <vListInsert>
 8005ae6:	e7da      	b.n	8005a9e <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2100      	movs	r1, #0
 8005aea:	0032      	movs	r2, r6
 8005aec:	000b      	movs	r3, r1
 8005aee:	0020      	movs	r0, r4
 8005af0:	9100      	str	r1, [sp, #0]
 8005af2:	f7ff ffad 	bl	8005a50 <xTimerGenericCommand>
				configASSERT( xResult );
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1d1      	bne.n	8005a9e <prvSwitchTimerLists+0x2>
 8005afa:	b672      	cpsid	i
 8005afc:	e7fe      	b.n	8005afc <prvSwitchTimerLists+0x60>
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	20000be8 	.word	0x20000be8
 8005b04:	20000bec 	.word	0x20000bec

08005b08 <prvTimerTask>:
{
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b0c:	4f65      	ldr	r7, [pc, #404]	; (8005ca4 <prvTimerTask+0x19c>)
 8005b0e:	2601      	movs	r6, #1
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681c      	ldr	r4, [r3, #0]
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d002      	beq.n	8005b1e <prvTimerTask+0x16>
 8005b18:	2600      	movs	r6, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8005b1e:	f7ff fb37 	bl	8005190 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005b22:	f7ff fb3d 	bl	80051a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005b26:	4b60      	ldr	r3, [pc, #384]	; (8005ca8 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005b28:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	9303      	str	r3, [sp, #12]
 8005b2e:	4298      	cmp	r0, r3
 8005b30:	d315      	bcc.n	8005b5e <prvTimerTask+0x56>
	xLastTime = xTimeNow;
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <prvTimerTask+0x1a0>)
 8005b34:	6018      	str	r0, [r3, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b36:	2e00      	cmp	r6, #0
 8005b38:	d019      	beq.n	8005b6e <prvTimerTask+0x66>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b3a:	4b5c      	ldr	r3, [pc, #368]	; (8005cac <prvTimerTask+0x1a4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681e      	ldr	r6, [r3, #0]
 8005b40:	4273      	negs	r3, r6
 8005b42:	415e      	adcs	r6, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b44:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <prvTimerTask+0x1a8>)
 8005b46:	0032      	movs	r2, r6
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	1b61      	subs	r1, r4, r5
 8005b4c:	f7ff f92a 	bl	8004da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b50:	f7ff fbb2 	bl	80052b8 <xTaskResumeAll>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d108      	bne.n	8005b6a <prvTimerTask+0x62>
					portYIELD_WITHIN_API();
 8005b58:	f000 f8ee 	bl	8005d38 <vPortYield>
 8005b5c:	e005      	b.n	8005b6a <prvTimerTask+0x62>
		prvSwitchTimerLists();
 8005b5e:	f7ff ff9d 	bl	8005a9c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <prvTimerTask+0x1a0>)
 8005b64:	601d      	str	r5, [r3, #0]
			( void ) xTaskResumeAll();
 8005b66:	f7ff fba7 	bl	80052b8 <xTaskResumeAll>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b6a:	2702      	movs	r7, #2
 8005b6c:	e032      	b.n	8005bd4 <prvTimerTask+0xcc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b6e:	4284      	cmp	r4, r0
 8005b70:	d8e8      	bhi.n	8005b44 <prvTimerTask+0x3c>
				( void ) xTaskResumeAll();
 8005b72:	f7ff fba1 	bl	80052b8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b7c:	1d38      	adds	r0, r7, #4
 8005b7e:	f7fe fd8a 	bl	8004696 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b82:	003a      	movs	r2, r7
 8005b84:	2104      	movs	r1, #4
 8005b86:	3228      	adds	r2, #40	; 0x28
 8005b88:	7813      	ldrb	r3, [r2, #0]
 8005b8a:	420b      	tst	r3, r1
 8005b8c:	d013      	beq.n	8005bb6 <prvTimerTask+0xae>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	002a      	movs	r2, r5
 8005b92:	18e1      	adds	r1, r4, r3
 8005b94:	0038      	movs	r0, r7
 8005b96:	0023      	movs	r3, r4
 8005b98:	f7ff fee8 	bl	800596c <prvInsertTimerInActiveList>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d00d      	beq.n	8005bbc <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ba0:	0033      	movs	r3, r6
 8005ba2:	0022      	movs	r2, r4
 8005ba4:	0031      	movs	r1, r6
 8005ba6:	0038      	movs	r0, r7
 8005ba8:	9600      	str	r6, [sp, #0]
 8005baa:	f7ff ff51 	bl	8005a50 <xTimerGenericCommand>
			configASSERT( xResult );
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d104      	bne.n	8005bbc <prvTimerTask+0xb4>
 8005bb2:	b672      	cpsid	i
 8005bb4:	e7fe      	b.n	8005bb4 <prvTimerTask+0xac>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	438b      	bics	r3, r1
 8005bba:	7013      	strb	r3, [r2, #0]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bbc:	0038      	movs	r0, r7
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	4798      	blx	r3
}
 8005bc2:	e7d2      	b.n	8005b6a <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc4:	9b05      	ldr	r3, [sp, #20]
 8005bc6:	9907      	ldr	r1, [sp, #28]
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	9303      	str	r3, [sp, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da0b      	bge.n	8005bec <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <prvTimerTask+0x1a8>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	f7fe ff80 	bl	8004ae0 <xQueueReceive>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d093      	beq.n	8005b0c <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005be4:	9b04      	ldr	r3, [sp, #16]
 8005be6:	9806      	ldr	r0, [sp, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dbeb      	blt.n	8005bc4 <prvTimerTask+0xbc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bec:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bee:	6963      	ldr	r3, [r4, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d118      	bne.n	8005c26 <prvTimerTask+0x11e>
	xTimeNow = xTaskGetTickCount();
 8005bf4:	f7ff fad4 	bl	80051a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005bf8:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005bfa:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	4298      	cmp	r0, r3
 8005c02:	d201      	bcs.n	8005c08 <prvTimerTask+0x100>
		prvSwitchTimerLists();
 8005c04:	f7ff ff4a 	bl	8005a9c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <prvTimerTask+0x1a0>)
 8005c0a:	9804      	ldr	r0, [sp, #16]
 8005c0c:	601e      	str	r6, [r3, #0]
			switch( xMessage.xMessageID )
 8005c0e:	2809      	cmp	r0, #9
 8005c10:	d8e0      	bhi.n	8005bd4 <prvTimerTask+0xcc>
 8005c12:	0025      	movs	r5, r4
 8005c14:	3528      	adds	r5, #40	; 0x28
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c16:	782b      	ldrb	r3, [r5, #0]
 8005c18:	f7fa fa80 	bl	800011c <__gnu_thumb1_case_uqi>
 8005c1c:	40090909 	.word	0x40090909
 8005c20:	09093a2a 	.word	0x09093a2a
 8005c24:	2a40      	.short	0x2a40
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c26:	1d20      	adds	r0, r4, #4
 8005c28:	f7fe fd35 	bl	8004696 <uxListRemove>
 8005c2c:	e7e2      	b.n	8005bf4 <prvTimerTask+0xec>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	702b      	strb	r3, [r5, #0]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c34:	69a2      	ldr	r2, [r4, #24]
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	0020      	movs	r0, r4
 8005c3a:	1899      	adds	r1, r3, r2
 8005c3c:	0032      	movs	r2, r6
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	f7ff fe94 	bl	800596c <prvInsertTimerInActiveList>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0c5      	beq.n	8005bd4 <prvTimerTask+0xcc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c48:	6a23      	ldr	r3, [r4, #32]
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	2204      	movs	r2, #4
 8005c50:	782b      	ldrb	r3, [r5, #0]
 8005c52:	4213      	tst	r3, r2
 8005c54:	d0be      	beq.n	8005bd4 <prvTimerTask+0xcc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c56:	2100      	movs	r1, #0
 8005c58:	69a3      	ldr	r3, [r4, #24]
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	18d2      	adds	r2, r2, r3
 8005c60:	9100      	str	r1, [sp, #0]
 8005c62:	000b      	movs	r3, r1
 8005c64:	f7ff fef4 	bl	8005a50 <xTimerGenericCommand>
							configASSERT( xResult );
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1b3      	bne.n	8005bd4 <prvTimerTask+0xcc>
 8005c6c:	b672      	cpsid	i
 8005c6e:	e7fe      	b.n	8005c6e <prvTimerTask+0x166>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c70:	2201      	movs	r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c72:	9905      	ldr	r1, [sp, #20]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c74:	4313      	orrs	r3, r2
 8005c76:	702b      	strb	r3, [r5, #0]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c78:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	d101      	bne.n	8005c82 <prvTimerTask+0x17a>
 8005c7e:	b672      	cpsid	i
 8005c80:	e7fe      	b.n	8005c80 <prvTimerTask+0x178>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c82:	0033      	movs	r3, r6
 8005c84:	0032      	movs	r2, r6
 8005c86:	0020      	movs	r0, r4
 8005c88:	1989      	adds	r1, r1, r6
 8005c8a:	f7ff fe6f 	bl	800596c <prvInsertTimerInActiveList>
					break;
 8005c8e:	e7a1      	b.n	8005bd4 <prvTimerTask+0xcc>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c90:	423b      	tst	r3, r7
 8005c92:	d103      	bne.n	8005c9c <prvTimerTask+0x194>
							vPortFree( pxTimer );
 8005c94:	0020      	movs	r0, r4
 8005c96:	f000 f995 	bl	8005fc4 <vPortFree>
 8005c9a:	e79b      	b.n	8005bd4 <prvTimerTask+0xcc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4393      	bics	r3, r2
 8005ca0:	702b      	strb	r3, [r5, #0]
 8005ca2:	e797      	b.n	8005bd4 <prvTimerTask+0xcc>
 8005ca4:	20000be8 	.word	0x20000be8
 8005ca8:	20000cb8 	.word	0x20000cb8
 8005cac:	20000bec 	.word	0x20000bec
 8005cb0:	20000d0c 	.word	0x20000d0c

08005cb4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8005cb4:	2300      	movs	r3, #0
{
 8005cb6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8005cb8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <prvTaskExitError+0x20>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <prvTaskExitError+0x12>
 8005cc2:	b672      	cpsid	i
 8005cc4:	e7fe      	b.n	8005cc4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8005cc6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005cc8:	9b01      	ldr	r3, [sp, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0fc      	beq.n	8005cc8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cce:	b002      	add	sp, #8
 8005cd0:	4770      	bx	lr
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	2000000c 	.word	0x2000000c
	...

08005ce0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005ce0:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <pxCurrentTCBConst2>)
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	3020      	adds	r0, #32
 8005ce8:	f380 8809 	msr	PSP, r0
 8005cec:	2002      	movs	r0, #2
 8005cee:	f380 8814 	msr	CONTROL, r0
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005cf8:	46ae      	mov	lr, r5
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	bc04      	pop	{r2}
 8005cfe:	b662      	cpsie	i
 8005d00:	4718      	bx	r3
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46c0      	nop			; (mov r8, r8)

08005d10 <pxCurrentTCBConst2>:
 8005d10:	200006ec 	.word	0x200006ec

08005d14 <pxPortInitialiseStack>:
{
 8005d14:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d16:	2480      	movs	r4, #128	; 0x80
 8005d18:	1f03      	subs	r3, r0, #4
 8005d1a:	0464      	lsls	r4, r4, #17
 8005d1c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005d1e:	3b04      	subs	r3, #4
 8005d20:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d22:	4903      	ldr	r1, [pc, #12]	; (8005d30 <pxPortInitialiseStack+0x1c>)
 8005d24:	3b04      	subs	r3, #4
 8005d26:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d28:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8005d2a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bd10      	pop	{r4, pc}
 8005d30:	08005cb5 	.word	0x08005cb5

08005d34 <SVC_Handler>:
}
 8005d34:	4770      	bx	lr
	...

08005d38 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <vPortYield+0x14>)
 8005d3c:	0552      	lsls	r2, r2, #21
 8005d3e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005d40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005d44:	f3bf 8f6f 	isb	sy
}
 8005d48:	4770      	bx	lr
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 8005d50:	b672      	cpsid	i
	uxCriticalNesting++;
 8005d52:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <vPortEnterCritical+0x14>)
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005d5a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005d5e:	f3bf 8f6f 	isb	sy
}
 8005d62:	4770      	bx	lr
 8005d64:	2000000c 	.word	0x2000000c

08005d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <vPortExitCritical+0x18>)
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <vPortExitCritical+0xc>
 8005d70:	b672      	cpsid	i
 8005d72:	e7fe      	b.n	8005d72 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 8005d74:	3b01      	subs	r3, #1
 8005d76:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d100      	bne.n	8005d7e <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 8005d7c:	b662      	cpsie	i
	}
}
 8005d7e:	4770      	bx	lr
 8005d80:	2000000c 	.word	0x2000000c

08005d84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005d84:	f3ef 8010 	mrs	r0, PRIMASK
 8005d88:	b672      	cpsid	i
 8005d8a:	4770      	bx	lr

08005d8c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005d8c:	f380 8810 	msr	PRIMASK, r0
 8005d90:	4770      	bx	lr
	...

08005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005da0:	f3ef 8009 	mrs	r0, PSP
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <pxCurrentTCBConst>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	3820      	subs	r0, #32
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005dae:	4644      	mov	r4, r8
 8005db0:	464d      	mov	r5, r9
 8005db2:	4656      	mov	r6, sl
 8005db4:	465f      	mov	r7, fp
 8005db6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005db8:	b508      	push	{r3, lr}
 8005dba:	b672      	cpsid	i
 8005dbc:	f7ff fafe 	bl	80053bc <vTaskSwitchContext>
 8005dc0:	b662      	cpsie	i
 8005dc2:	bc0c      	pop	{r2, r3}
 8005dc4:	6811      	ldr	r1, [r2, #0]
 8005dc6:	6808      	ldr	r0, [r1, #0]
 8005dc8:	3010      	adds	r0, #16
 8005dca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005dcc:	46a0      	mov	r8, r4
 8005dce:	46a9      	mov	r9, r5
 8005dd0:	46b2      	mov	sl, r6
 8005dd2:	46bb      	mov	fp, r7
 8005dd4:	f380 8809 	msr	PSP, r0
 8005dd8:	3820      	subs	r0, #32
 8005dda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005ddc:	4718      	bx	r3
 8005dde:	46c0      	nop			; (mov r8, r8)

08005de0 <pxCurrentTCBConst>:
 8005de0:	200006ec 	.word	0x200006ec

08005de4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005de4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de6:	f7ff ffcd 	bl	8005d84 <ulSetInterruptMaskFromISR>
 8005dea:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dec:	f7ff f9e4 	bl	80051b8 <xTaskIncrementTick>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d003      	beq.n	8005dfc <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <xPortSysTickHandler+0x20>)
 8005df8:	0552      	lsls	r2, r2, #21
 8005dfa:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005dfc:	0020      	movs	r0, r4
 8005dfe:	f7ff ffc5 	bl	8005d8c <vClearInterruptMaskFromISR>
}
 8005e02:	bd10      	pop	{r4, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e08:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e0a:	21fa      	movs	r1, #250	; 0xfa
{
 8005e0c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e0e:	4a07      	ldr	r2, [pc, #28]	; (8005e2c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e10:	4c07      	ldr	r4, [pc, #28]	; (8005e30 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e12:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e14:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <vPortSetupTimerInterrupt+0x2c>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f7fa f99c 	bl	8000158 <__udivsi3>
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <vPortSetupTimerInterrupt+0x30>)
 8005e22:	3801      	subs	r0, #1
 8005e24:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005e26:	2307      	movs	r3, #7
 8005e28:	6023      	str	r3, [r4, #0]
}
 8005e2a:	bd10      	pop	{r4, pc}
 8005e2c:	e000e018 	.word	0xe000e018
 8005e30:	e000e010 	.word	0xe000e010
 8005e34:	20000000 	.word	0x20000000
 8005e38:	e000e014 	.word	0xe000e014

08005e3c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <xPortStartScheduler+0x34>)
 8005e40:	0412      	lsls	r2, r2, #16
 8005e42:	6819      	ldr	r1, [r3, #0]
{
 8005e44:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e46:	430a      	orrs	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e4a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 8005e4c:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	0612      	lsls	r2, r2, #24
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005e56:	f7ff ffd7 	bl	8005e08 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <xPortStartScheduler+0x38>)
 8005e5c:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8005e5e:	f7ff ff3f 	bl	8005ce0 <vPortStartFirstTask>
	vTaskSwitchContext();
 8005e62:	f7ff faab 	bl	80053bc <vTaskSwitchContext>
	prvTaskExitError();
 8005e66:	f7ff ff25 	bl	8005cb4 <prvTaskExitError>
}
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	e000ed20 	.word	0xe000ed20
 8005e74:	2000000c 	.word	0x2000000c

08005e78 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e78:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <prvInsertBlockIntoFreeList+0x40>)
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4283      	cmp	r3, r0
 8005e82:	d3fb      	bcc.n	8005e7c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e84:	6854      	ldr	r4, [r2, #4]
 8005e86:	1911      	adds	r1, r2, r4
 8005e88:	4288      	cmp	r0, r1
 8005e8a:	d103      	bne.n	8005e94 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e8c:	6841      	ldr	r1, [r0, #4]
 8005e8e:	0010      	movs	r0, r2
 8005e90:	1909      	adds	r1, r1, r4
 8005e92:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e94:	6841      	ldr	r1, [r0, #4]
 8005e96:	1844      	adds	r4, r0, r1
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d107      	bne.n	8005eac <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9c:	4c07      	ldr	r4, [pc, #28]	; (8005ebc <prvInsertBlockIntoFreeList+0x44>)
 8005e9e:	6824      	ldr	r4, [r4, #0]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d003      	beq.n	8005eac <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ea4:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ea6:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ea8:	1861      	adds	r1, r4, r1
 8005eaa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eac:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eae:	4290      	cmp	r0, r2
 8005eb0:	d000      	beq.n	8005eb4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eb2:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	2000132c 	.word	0x2000132c
 8005ebc:	20000d14 	.word	0x20000d14

08005ec0 <pvPortMalloc>:
{
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	0005      	movs	r5, r0
	vTaskSuspendAll();
 8005ec4:	f7ff f964 	bl	8005190 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005ec8:	4a37      	ldr	r2, [pc, #220]	; (8005fa8 <pvPortMalloc+0xe8>)
 8005eca:	4c38      	ldr	r4, [pc, #224]	; (8005fac <pvPortMalloc+0xec>)
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11c      	bne.n	8005f0c <pvPortMalloc+0x4c>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed2:	2007      	movs	r0, #7
	uxAddress = ( size_t ) ucHeap;
 8005ed4:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <pvPortMalloc+0xf0>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	4203      	tst	r3, r0
 8005eda:	d001      	beq.n	8005ee0 <pvPortMalloc+0x20>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005edc:	1819      	adds	r1, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ede:	4381      	bics	r1, r0
	xStart.xBlockSize = ( size_t ) 0;
 8005ee0:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee2:	4e34      	ldr	r6, [pc, #208]	; (8005fb4 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 8005ee4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee6:	6031      	str	r1, [r6, #0]
	uxAddress -= xHeapStructSize;
 8005ee8:	26bf      	movs	r6, #191	; 0xbf
 8005eea:	00f6      	lsls	r6, r6, #3
 8005eec:	199b      	adds	r3, r3, r6
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eee:	2607      	movs	r6, #7
 8005ef0:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8005ef2:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005ef4:	6058      	str	r0, [r3, #4]
	pxEnd = ( void * ) uxAddress;
 8005ef6:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ef8:	1a58      	subs	r0, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005efa:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005efc:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <pvPortMalloc+0xf8>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efe:	6048      	str	r0, [r1, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f00:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f02:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <pvPortMalloc+0xfc>)
 8005f04:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	6023      	str	r3, [r4, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f0c:	6826      	ldr	r6, [r4, #0]
 8005f0e:	4235      	tst	r5, r6
 8005f10:	d146      	bne.n	8005fa0 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
 8005f12:	2d00      	cmp	r5, #0
 8005f14:	d03e      	beq.n	8005f94 <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 8005f16:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f18:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 8005f1a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f1c:	420b      	tst	r3, r1
 8005f1e:	d001      	beq.n	8005f24 <pvPortMalloc+0x64>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f20:	438b      	bics	r3, r1
 8005f22:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d03b      	beq.n	8005fa0 <pvPortMalloc+0xe0>
 8005f28:	4924      	ldr	r1, [pc, #144]	; (8005fbc <pvPortMalloc+0xfc>)
 8005f2a:	680d      	ldr	r5, [r1, #0]
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	d337      	bcc.n	8005fa0 <pvPortMalloc+0xe0>
				pxBlock = xStart.pxNextFreeBlock;
 8005f30:	4920      	ldr	r1, [pc, #128]	; (8005fb4 <pvPortMalloc+0xf4>)
 8005f32:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f34:	6860      	ldr	r0, [r4, #4]
 8005f36:	4298      	cmp	r0, r3
 8005f38:	d203      	bcs.n	8005f42 <pvPortMalloc+0x82>
 8005f3a:	6827      	ldr	r7, [r4, #0]
 8005f3c:	46bc      	mov	ip, r7
 8005f3e:	2f00      	cmp	r7, #0
 8005f40:	d10e      	bne.n	8005f60 <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	42a2      	cmp	r2, r4
 8005f46:	d02b      	beq.n	8005fa0 <pvPortMalloc+0xe0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f48:	680a      	ldr	r2, [r1, #0]
 8005f4a:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f50:	1ac2      	subs	r2, r0, r3
 8005f52:	2a10      	cmp	r2, #16
 8005f54:	d90b      	bls.n	8005f6e <pvPortMalloc+0xae>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f56:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f58:	0741      	lsls	r1, r0, #29
 8005f5a:	d004      	beq.n	8005f66 <pvPortMalloc+0xa6>
 8005f5c:	b672      	cpsid	i
 8005f5e:	e7fe      	b.n	8005f5e <pvPortMalloc+0x9e>
 8005f60:	0021      	movs	r1, r4
 8005f62:	4664      	mov	r4, ip
 8005f64:	e7e6      	b.n	8005f34 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f66:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f68:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f6a:	f7ff ff85 	bl	8005e78 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f6e:	6863      	ldr	r3, [r4, #4]
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <pvPortMalloc+0xfc>)
 8005f72:	1aed      	subs	r5, r5, r3
 8005f74:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f76:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <pvPortMalloc+0xf8>)
 8005f78:	6811      	ldr	r1, [r2, #0]
 8005f7a:	428d      	cmp	r5, r1
 8005f7c:	d200      	bcs.n	8005f80 <pvPortMalloc+0xc0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f7e:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f80:	431e      	orrs	r6, r3
					pxBlock->pxNextFreeBlock = NULL;
 8005f82:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f84:	003d      	movs	r5, r7
					xNumberOfSuccessfulAllocations++;
 8005f86:	4a0e      	ldr	r2, [pc, #56]	; (8005fc0 <pvPortMalloc+0x100>)
					pxBlock->pxNextFreeBlock = NULL;
 8005f88:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005f8a:	6813      	ldr	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f8c:	3508      	adds	r5, #8
					xNumberOfSuccessfulAllocations++;
 8005f8e:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f90:	6066      	str	r6, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 8005f92:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005f94:	f7ff f990 	bl	80052b8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f98:	076b      	lsls	r3, r5, #29
 8005f9a:	d003      	beq.n	8005fa4 <pvPortMalloc+0xe4>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <pvPortMalloc+0xde>
void *pvReturn = NULL;
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	e7f7      	b.n	8005f94 <pvPortMalloc+0xd4>
}
 8005fa4:	0028      	movs	r0, r5
 8005fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa8:	20000d14 	.word	0x20000d14
 8005fac:	20001318 	.word	0x20001318
 8005fb0:	20000d18 	.word	0x20000d18
 8005fb4:	2000132c 	.word	0x2000132c
 8005fb8:	20001320 	.word	0x20001320
 8005fbc:	2000131c 	.word	0x2000131c
 8005fc0:	20001324 	.word	0x20001324

08005fc4 <vPortFree>:
{
 8005fc4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d01f      	beq.n	800600a <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fca:	4a10      	ldr	r2, [pc, #64]	; (800600c <vPortFree+0x48>)
 8005fcc:	3808      	subs	r0, #8
 8005fce:	6843      	ldr	r3, [r0, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	0004      	movs	r4, r0
 8005fd4:	421a      	tst	r2, r3
 8005fd6:	d101      	bne.n	8005fdc <vPortFree+0x18>
 8005fd8:	b672      	cpsid	i
 8005fda:	e7fe      	b.n	8005fda <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fdc:	6801      	ldr	r1, [r0, #0]
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d001      	beq.n	8005fe6 <vPortFree+0x22>
 8005fe2:	b672      	cpsid	i
 8005fe4:	e7fe      	b.n	8005fe4 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fe6:	4393      	bics	r3, r2
 8005fe8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8005fea:	f7ff f8d1 	bl	8005190 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <vPortFree+0x4c>)
 8005ff0:	6863      	ldr	r3, [r4, #4]
 8005ff2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ff4:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ff6:	185b      	adds	r3, r3, r1
 8005ff8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ffa:	f7ff ff3d 	bl	8005e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <vPortFree+0x50>)
 8006000:	6813      	ldr	r3, [r2, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006006:	f7ff f957 	bl	80052b8 <xTaskResumeAll>
}
 800600a:	bd10      	pop	{r4, pc}
 800600c:	20001318 	.word	0x20001318
 8006010:	2000131c 	.word	0x2000131c
 8006014:	20001328 	.word	0x20001328

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	2600      	movs	r6, #0
 800601c:	4d0c      	ldr	r5, [pc, #48]	; (8006050 <__libc_init_array+0x38>)
 800601e:	4c0d      	ldr	r4, [pc, #52]	; (8006054 <__libc_init_array+0x3c>)
 8006020:	1b64      	subs	r4, r4, r5
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	2600      	movs	r6, #0
 800602a:	f000 f82b 	bl	8006084 <_init>
 800602e:	4d0a      	ldr	r5, [pc, #40]	; (8006058 <__libc_init_array+0x40>)
 8006030:	4c0a      	ldr	r4, [pc, #40]	; (800605c <__libc_init_array+0x44>)
 8006032:	1b64      	subs	r4, r4, r5
 8006034:	10a4      	asrs	r4, r4, #2
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	00b3      	lsls	r3, r6, #2
 800603e:	58eb      	ldr	r3, [r5, r3]
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	00b3      	lsls	r3, r6, #2
 8006048:	58eb      	ldr	r3, [r5, r3]
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	08006278 	.word	0x08006278
 8006054:	08006278 	.word	0x08006278
 8006058:	08006278 	.word	0x08006278
 800605c:	0800627c 	.word	0x0800627c

08006060 <memcpy>:
 8006060:	2300      	movs	r3, #0
 8006062:	b510      	push	{r4, lr}
 8006064:	429a      	cmp	r2, r3
 8006066:	d100      	bne.n	800606a <memcpy+0xa>
 8006068:	bd10      	pop	{r4, pc}
 800606a:	5ccc      	ldrb	r4, [r1, r3]
 800606c:	54c4      	strb	r4, [r0, r3]
 800606e:	3301      	adds	r3, #1
 8006070:	e7f8      	b.n	8006064 <memcpy+0x4>

08006072 <memset>:
 8006072:	0003      	movs	r3, r0
 8006074:	1882      	adds	r2, r0, r2
 8006076:	4293      	cmp	r3, r2
 8006078:	d100      	bne.n	800607c <memset+0xa>
 800607a:	4770      	bx	lr
 800607c:	7019      	strb	r1, [r3, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	e7f9      	b.n	8006076 <memset+0x4>
	...

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
