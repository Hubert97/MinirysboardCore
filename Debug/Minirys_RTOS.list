
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006284  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800649c  0800649c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a4  080064a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc8  20000074  08006520  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c3c  08006520  00021c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe82  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003947  00000000  00000000  0003ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00043868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00045058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003915  00000000  00000000  00046700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fd9  00000000  00000000  0004a015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b36d1  00000000  00000000  00063fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001176bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa8  00000000  00000000  00117714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800632c 	.word	0x0800632c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800632c 	.word	0x0800632c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	1c08      	adds	r0, r1, #0
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fbc0 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f81c 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f976 	bl	800091c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000630:	f000 f892 	bl	8000758 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f924 	bl	8000880 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000638:	f000 f8fa 	bl	8000830 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063c:	f003 fb08 	bl	8003c50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <main+0x38>)
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <main+0x3c>)
 8000644:	2100      	movs	r1, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f003 fb4a 	bl	8003ce0 <osThreadNew>
 800064c:	0002      	movs	r2, r0
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <main+0x40>)
 8000650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f003 fb1f 	bl	8003c94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x36>
 8000658:	08006368 	.word	0x08006368
 800065c:	08000a31 	.word	0x08000a31
 8000660:	20001a5c 	.word	0x20001a5c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b0a1      	sub	sp, #132	; 0x84
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	2448      	movs	r4, #72	; 0x48
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2338      	movs	r3, #56	; 0x38
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f005 fd84 	bl	8006182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2338      	movs	r3, #56	; 0x38
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f005 fd7c 	bl	8006182 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2334      	movs	r3, #52	; 0x34
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f005 fd75 	bl	8006182 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f001 faa3 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2208      	movs	r2, #8
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0292      	lsls	r2, r2, #10
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0492      	lsls	r2, r2, #18
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0592      	lsls	r2, r2, #22
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fac5 	bl	8001c80 <HAL_RCC_OscConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f000 f9b3 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	2138      	movs	r1, #56	; 0x38
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2207      	movs	r2, #7
 8000704:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2102      	movs	r1, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fdcf 	bl	80022c0 <HAL_RCC_ClockConfig>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f000 f99d 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <SystemClock_Config+0xf0>)
 800072e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	0018      	movs	r0, r3
 8000740:	f001 ff92 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000748:	f000 f98c 	bl	8000a64 <Error_Handler>
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b021      	add	sp, #132	; 0x84
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	00004001 	.word	0x00004001

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	0018      	movs	r0, r3
 8000762:	230c      	movs	r3, #12
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f005 fd0b 	bl	8006182 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_ADC1_Init+0xcc>)
 800076e:	4a2e      	ldr	r2, [pc, #184]	; (8000828 <MX_ADC1_Init+0xd0>)
 8000770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_ADC1_Init+0xcc>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	05d2      	lsls	r2, r2, #23
 8000778:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_ADC1_Init+0xcc>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <MX_ADC1_Init+0xcc>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_ADC1_Init+0xcc>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <MX_ADC1_Init+0xcc>)
 800078e:	2204      	movs	r2, #4
 8000790:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_ADC1_Init+0xcc>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_ADC1_Init+0xcc>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007c0:	222c      	movs	r2, #44	; 0x2c
 80007c2:	2100      	movs	r1, #0
 80007c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007da:	223c      	movs	r2, #60	; 0x3c
 80007dc:	2100      	movs	r1, #0
 80007de:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_ADC1_Init+0xcc>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fc17 	bl	800101c <HAL_ADC_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007f2:	f000 f937 	bl	8000a64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <MX_ADC1_Init+0xd4>)
 80007fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	1d3a      	adds	r2, r7, #4
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_ADC1_Init+0xcc>)
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fde2 	bl	80013d8 <HAL_ADC_ConfigChannel>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000818:	f000 f924 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b004      	add	sp, #16
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20001aac 	.word	0x20001aac
 8000828:	40012400 	.word	0x40012400
 800082c:	24000200 	.word	0x24000200

08000830 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_TIM17_Init+0x44>)
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_TIM17_Init+0x48>)
 8000838:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM17_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_TIM17_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_TIM17_Init+0x44>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <MX_TIM17_Init+0x4c>)
 800084a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_TIM17_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_TIM17_Init+0x44>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_TIM17_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_TIM17_Init+0x44>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 f8b9 	bl	80029d8 <HAL_TIM_Base_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800086a:	f000 f8fb 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20001a60 	.word	0x20001a60
 8000878:	40014800 	.word	0x40014800
 800087c:	0000ffff 	.word	0x0000ffff

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <MX_USART1_UART_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800088c:	22e1      	movs	r2, #225	; 0xe1
 800088e:	0252      	lsls	r2, r2, #9
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fb22 	bl	8002f14 <HAL_UART_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f8c6 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008da:	2100      	movs	r1, #0
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 f84d 	bl	800397c <HAL_UARTEx_SetTxFifoThreshold>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 f8bd 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f003 f884 	bl	80039fc <HAL_UARTEx_SetRxFifoThreshold>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f8b4 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 f802 	bl	8003908 <HAL_UARTEx_DisableFifoMode>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000908:	f000 f8ac 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20001b10 	.word	0x20001b10
 8000918:	40013800 	.word	0x40013800

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	240c      	movs	r4, #12
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2314      	movs	r3, #20
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f005 fc28 	bl	8006182 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_GPIO_Init+0x104>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000950:	2102      	movs	r1, #2
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	2202      	movs	r2, #2
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000968:	2104      	movs	r1, #4
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0x104>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	2204      	movs	r2, #4
 8000974:	4013      	ands	r3, r2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|LED_R_Pin|ENABLE_SENSORS_Pin, GPIO_PIN_RESET);
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <MX_GPIO_Init+0x108>)
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f912 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000988:	23de      	movs	r3, #222	; 0xde
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <MX_GPIO_Init+0x10c>)
 800098e:	2200      	movs	r2, #0
 8000990:	0019      	movs	r1, r3
 8000992:	f001 f90b 	bl	8001bac <HAL_GPIO_WritePin>
                          |ENABLE_RAIL_12V_Pin|ENABLE_RAIL_5V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x110>)
 8000998:	2200      	movs	r2, #0
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f905 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : POWER_SWITCH_Pin LED_R_Pin ENABLE_SENSORS_Pin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_R_Pin|ENABLE_SENSORS_Pin;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <MX_GPIO_Init+0x108>)
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	193a      	adds	r2, r7, r4
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 ff8e 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin ENABLE_STEPPER_MOTORS_Pin ENABLE_TOFS_Pin PWM_FAN_Pin
                           ENABLE_RAIL_12V_Pin ENABLE_RAIL_5V_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	22de      	movs	r2, #222	; 0xde
 80009ce:	0052      	lsls	r2, r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
                          |ENABLE_RAIL_12V_Pin|ENABLE_RAIL_5V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	000c      	movs	r4, r1
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2201      	movs	r2, #1
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <MX_GPIO_Init+0x10c>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 ff79 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2240      	movs	r2, #64	; 0x40
 80009f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2201      	movs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <MX_GPIO_Init+0x110>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 ff66 	bl	80018e4 <HAL_GPIO_Init>

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b009      	add	sp, #36	; 0x24
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	00008140 	.word	0x00008140
 8000a28:	50000400 	.word	0x50000400
 8000a2c:	50000800 	.word	0x50000800

08000a30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f003 f9e7 	bl	8003e0c <osDelay>
 8000a3e:	e7fb      	b.n	8000a38 <StartDefaultTask+0x8>

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f000 f9c9 	bl	8000de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_MspInit+0x5c>)
 8000a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_MspInit+0x5c>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_MspInit+0x5c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x5c>)
 8000a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_MspInit+0x5c>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0549      	lsls	r1, r1, #21
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_MspInit+0x5c>)
 8000a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	055b      	lsls	r3, r3, #21
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000aaa:	2302      	movs	r3, #2
 8000aac:	425b      	negs	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fef0 	bl	8001898 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 f9af 	bl	8000e20 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b08b      	sub	sp, #44	; 0x2c
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2414      	movs	r4, #20
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2314      	movs	r3, #20
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f005 fb4d 	bl	8006182 <memset>
  if(hadc->Instance==ADC1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_ADC_MspInit+0xb4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d144      	bne.n	8000b7c <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0349      	lsls	r1, r1, #13
 8000afc:	430a      	orrs	r2, r1
 8000afe:	641a      	str	r2, [r3, #64]	; 0x40
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	035b      	lsls	r3, r3, #13
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_ADC_MspInit+0xb8>)
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	2202      	movs	r2, #2
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	22bf      	movs	r2, #191	; 0xbf
 8000b42:	601a      	str	r2, [r3, #0]
                          |BOARD_TEMP_PROBE1_Pin|BOARD_TEMP_PROBE2_Pin|VBAT_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2203      	movs	r2, #3
 8000b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	193a      	adds	r2, r7, r4
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fec3 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2203      	movs	r2, #3
 8000b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2203      	movs	r2, #3
 8000b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_ADC_MspInit+0xbc>)
 8000b74:	0019      	movs	r1, r3
 8000b76:	0010      	movs	r0, r2
 8000b78:	f000 feb4 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b00b      	add	sp, #44	; 0x2c
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	40012400 	.word	0x40012400
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	50000400 	.word	0x50000400

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_TIM_Base_MspInit+0x38>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10d      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	02c9      	lsls	r1, r1, #11
 8000bac:	430a      	orrs	r2, r1
 8000bae:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40014800 	.word	0x40014800
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	2414      	movs	r4, #20
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2314      	movs	r3, #20
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f005 facd 	bl	8006182 <memset>
  if(huart->Instance==USART1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0x90>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d131      	bne.n	8000c56 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	01c9      	lsls	r1, r1, #7
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	01db      	lsls	r3, r3, #7
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	22c0      	movs	r2, #192	; 0xc0
 8000c2a:	00d2      	lsls	r2, r2, #3
 8000c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	0021      	movs	r1, r4
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2202      	movs	r2, #2
 8000c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2201      	movs	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	187a      	adds	r2, r7, r1
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fe47 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b00b      	add	sp, #44	; 0x2c
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40013800 	.word	0x40013800
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f000 fe0a 	bl	8001898 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000c84:	200d      	movs	r0, #13
 8000c86:	f000 fe1c 	bl	80018c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_InitTick+0xa8>)
 8000c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_InitTick+0xa8>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0109      	lsls	r1, r1, #4
 8000c94:	430a      	orrs	r2, r1
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_InitTick+0xa8>)
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	18fa      	adds	r2, r7, r3
 8000caa:	2310      	movs	r3, #16
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fcaf 	bl	8002614 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cb6:	f001 fc97 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	4914      	ldr	r1, [pc, #80]	; (8000d14 <HAL_InitTick+0xac>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fa20 	bl	8000108 <__udivsi3>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_InitTick+0xb4>)
 8000cd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <HAL_InitTick+0xb8>)
 8000cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_InitTick+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_InitTick+0xb0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fe72 	bl	80029d8 <HAL_TIM_Base_Init>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d105      	bne.n	8000d04 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fec4 	bl	8002a88 <HAL_TIM_Base_Start_IT>
 8000d00:	0003      	movs	r3, r0
 8000d02:	e000      	b.n	8000d06 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b00a      	add	sp, #40	; 0x28
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000
 8000d14:	000f4240 	.word	0x000f4240
 8000d18:	20001ba0 	.word	0x20001ba0
 8000d1c:	40012c00 	.word	0x40012c00
 8000d20:	000003e7 	.word	0x000003e7

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 ff02 	bl	8002b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20001ba0 	.word	0x20001ba0

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff fff6 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f005 f9cf 	bl	8006124 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d86:	f7ff fc4b 	bl	8000620 <main>

08000d8a <LoopForever>:

LoopForever:
  b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d98:	080064ac 	.word	0x080064ac
  ldr r2, =_sbss
 8000d9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000da0:	20001c3c 	.word	0x20001c3c

08000da4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_COMP_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_Init+0x3c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Init+0x3c>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0049      	lsls	r1, r1, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f7ff ff50 	bl	8000c68 <HAL_InitTick>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fe4c 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20001bec 	.word	0x20001bec

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20001bec 	.word	0x20001bec

08000e20 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40010000 	.word	0x40010000
 8000e48:	fffff9ff 	.word	0xfffff9ff

08000e4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	fe3fffff 	.word	0xfe3fffff

08000e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	23e0      	movs	r3, #224	; 0xe0
 8000e82:	045b      	lsls	r3, r3, #17
 8000e84:	4013      	ands	r3, r2
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	43d2      	mvns	r2, r2
 8000eac:	401a      	ands	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4099      	lsls	r1, r3
 8000eb8:	000b      	movs	r3, r1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	211f      	movs	r1, #31
 8000edc:	400a      	ands	r2, r1
 8000ede:	210f      	movs	r1, #15
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	0e9b      	lsrs	r3, r3, #26
 8000eec:	210f      	movs	r1, #15
 8000eee:	4019      	ands	r1, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	201f      	movs	r0, #31
 8000ef4:	4003      	ands	r3, r0
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	000b      	movs	r3, r1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	035b      	lsls	r3, r3, #13
 8000f1a:	0b5b      	lsrs	r3, r3, #13
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	0352      	lsls	r2, r2, #13
 8000f3c:	0b52      	lsrs	r2, r2, #13
 8000f3e:	43d2      	mvns	r2, r2
 8000f40:	401a      	ands	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	0212      	lsls	r2, r2, #8
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
 8000f70:	4904      	ldr	r1, [pc, #16]	; (8000f84 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f72:	400b      	ands	r3, r1
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	07ffff00 	.word	0x07ffff00

08000f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <LL_ADC_EnableInternalRegulator+0x24>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0552      	lsls	r2, r2, #21
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	6fffffe8 	.word	0x6fffffe8

08000fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	055b      	lsls	r3, r3, #21
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	055b      	lsls	r3, r3, #21
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d101      	bne.n	8000fce <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <LL_ADC_IsEnabled+0x18>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <LL_ADC_IsEnabled+0x1a>
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2204      	movs	r2, #4
 8001008:	4013      	ands	r3, r2
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	231f      	movs	r3, #31
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1b1      	b.n	80013a6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10a      	bne.n	8001060 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fd3f 	bl	8000ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2254      	movs	r2, #84	; 0x54
 800105c:	2100      	movs	r1, #0
 800105e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffa3 	bl	8000fb0 <LL_ADC_IsInternalRegulatorEnabled>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d115      	bne.n	800109a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff88 	bl	8000f88 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001078:	4bcd      	ldr	r3, [pc, #820]	; (80013b0 <HAL_ADC_Init+0x394>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	49cd      	ldr	r1, [pc, #820]	; (80013b4 <HAL_ADC_Init+0x398>)
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f842 	bl	8000108 <__udivsi3>
 8001084:	0003      	movs	r3, r0
 8001086:	3301      	adds	r3, #1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800108c:	e002      	b.n	8001094 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff86 	bl	8000fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d10f      	bne.n	80010c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	2210      	movs	r2, #16
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	2201      	movs	r2, #1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010c0:	231f      	movs	r3, #31
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ff94 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 80010d2:	0003      	movs	r3, r0
 80010d4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	2210      	movs	r2, #16
 80010dc:	4013      	ands	r3, r2
 80010de:	d000      	beq.n	80010e2 <HAL_ADC_Init+0xc6>
 80010e0:	e154      	b.n	800138c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <HAL_ADC_Init+0xce>
 80010e8:	e150      	b.n	800138c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	4ab2      	ldr	r2, [pc, #712]	; (80013b8 <HAL_ADC_Init+0x39c>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	2202      	movs	r2, #2
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ff6a 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d156      	bne.n	80011b6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2218      	movs	r2, #24
 8001110:	4393      	bics	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	0f9b      	lsrs	r3, r3, #30
 8001126:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800112c:	4313      	orrs	r3, r2
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	223c      	movs	r2, #60	; 0x3c
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d111      	bne.n	8001162 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	0f9b      	lsrs	r3, r3, #30
 8001144:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800114a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001150:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001156:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	2201      	movs	r2, #1
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4a94      	ldr	r2, [pc, #592]	; (80013bc <HAL_ADC_Init+0x3a0>)
 800116a:	4013      	ands	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	430a      	orrs	r2, r1
 8001176:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	23c0      	movs	r3, #192	; 0xc0
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	429a      	cmp	r2, r3
 8001182:	d018      	beq.n	80011b6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	429a      	cmp	r2, r3
 800118e:	d012      	beq.n	80011b6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	061b      	lsls	r3, r3, #24
 8001198:	429a      	cmp	r2, r3
 800119a:	d00c      	beq.n	80011b6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800119c:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_ADC_Init+0x3a4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a88      	ldr	r2, [pc, #544]	; (80013c4 <HAL_ADC_Init+0x3a8>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	23f0      	movs	r3, #240	; 0xf0
 80011ac:	039b      	lsls	r3, r3, #14
 80011ae:	401a      	ands	r2, r3
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <HAL_ADC_Init+0x3a4>)
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e1b      	ldrb	r3, [r3, #24]
 80011ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e9b      	ldrb	r3, [r3, #26]
 80011c8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_ADC_Init+0x1be>
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	e000      	b.n	80011dc <HAL_ADC_Init+0x1c0>
 80011da:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011dc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011e2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da04      	bge.n	80011f6 <HAL_ADC_Init+0x1da>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	085b      	lsrs	r3, r3, #1
 80011f4:	e001      	b.n	80011fa <HAL_ADC_Init+0x1de>
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80011fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	212c      	movs	r1, #44	; 0x2c
 8001200:	5c5b      	ldrb	r3, [r3, r1]
 8001202:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001204:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	5c9b      	ldrb	r3, [r3, r2]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d115      	bne.n	8001242 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e9b      	ldrb	r3, [r3, #26]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0252      	lsls	r2, r2, #9
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	e00b      	b.n	8001242 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	2220      	movs	r2, #32
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123a:	2201      	movs	r2, #1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124e:	23e0      	movs	r3, #224	; 0xe0
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001258:	4313      	orrs	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_ADC_Init+0x3ac>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4a53      	ldr	r2, [pc, #332]	; (80013cc <HAL_ADC_Init+0x3b0>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	430a      	orrs	r2, r1
 800128a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	001a      	movs	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	f7ff fdf9 	bl	8000e8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	494a      	ldr	r1, [pc, #296]	; (80013d0 <HAL_ADC_Init+0x3b4>)
 80012a6:	001a      	movs	r2, r3
 80012a8:	f7ff fdf1 	bl	8000e8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2110      	movs	r1, #16
 80012c0:	4249      	negs	r1, r1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
 80012c6:	e03a      	b.n	800133e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	039b      	lsls	r3, r3, #14
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d134      	bne.n	800133e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e00c      	b.n	80012f4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	220f      	movs	r2, #15
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	d006      	beq.n	80012fc <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3301      	adds	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d9ef      	bls.n	80012da <HAL_ADC_Init+0x2be>
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80012fc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2110      	movs	r1, #16
 8001310:	4249      	negs	r1, r1
 8001312:	430a      	orrs	r2, r1
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
 8001316:	e012      	b.n	800133e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	3b01      	subs	r3, #1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	221c      	movs	r2, #28
 8001328:	4013      	ands	r3, r2
 800132a:	2210      	movs	r2, #16
 800132c:	4252      	negs	r2, r2
 800132e:	409a      	lsls	r2, r3
 8001330:	0011      	movs	r1, r2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <HAL_ADC_Init+0x3b8>)
 8001346:	4013      	ands	r3, r2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	429a      	cmp	r2, r3
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	2203      	movs	r2, #3
 800135a:	4393      	bics	r3, r2
 800135c:	2201      	movs	r2, #1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001364:	e01c      	b.n	80013a0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	2212      	movs	r2, #18
 800136c:	4393      	bics	r3, r2
 800136e:	2210      	movs	r2, #16
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800138a:	e009      	b.n	80013a0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	2210      	movs	r2, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001398:	231f      	movs	r3, #31
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013a0:	231f      	movs	r3, #31
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b008      	add	sp, #32
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000000 	.word	0x20000000
 80013b4:	00030d40 	.word	0x00030d40
 80013b8:	fffffefd 	.word	0xfffffefd
 80013bc:	1ffffc02 	.word	0x1ffffc02
 80013c0:	40012708 	.word	0x40012708
 80013c4:	ffc3ffff 	.word	0xffc3ffff
 80013c8:	fffe0219 	.word	0xfffe0219
 80013cc:	dffffc02 	.word	0xdffffc02
 80013d0:	07ffff04 	.word	0x07ffff04
 80013d4:	833fffe7 	.word	0x833fffe7

080013d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	2317      	movs	r3, #23
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2254      	movs	r2, #84	; 0x54
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x24>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e1c0      	b.n	800177e <HAL_ADC_ConfigChannel+0x3a6>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2254      	movs	r2, #84	; 0x54
 8001400:	2101      	movs	r1, #1
 8001402:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff fdf6 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d000      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x3c>
 8001412:	e1a3      	b.n	800175c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d100      	bne.n	800141e <HAL_ADC_ConfigChannel+0x46>
 800141c:	e143      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	061b      	lsls	r3, r3, #24
 8001426:	429a      	cmp	r2, r3
 8001428:	d004      	beq.n	8001434 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800142e:	4ac1      	ldr	r2, [pc, #772]	; (8001734 <HAL_ADC_ConfigChannel+0x35c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d108      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0019      	movs	r1, r3
 800143e:	0010      	movs	r0, r2
 8001440:	f7ff fd62 	bl	8000f08 <LL_ADC_REG_SetSequencerChAdd>
 8001444:	e0c9      	b.n	80015da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	211f      	movs	r1, #31
 8001450:	400b      	ands	r3, r1
 8001452:	210f      	movs	r1, #15
 8001454:	4099      	lsls	r1, r3
 8001456:	000b      	movs	r3, r1
 8001458:	43db      	mvns	r3, r3
 800145a:	4013      	ands	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	035b      	lsls	r3, r3, #13
 8001464:	0b5b      	lsrs	r3, r3, #13
 8001466:	d105      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x9c>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	221f      	movs	r2, #31
 8001470:	4013      	ands	r3, r2
 8001472:	e098      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d000      	beq.n	8001480 <HAL_ADC_ConfigChannel+0xa8>
 800147e:	e091      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d000      	beq.n	800148c <HAL_ADC_ConfigChannel+0xb4>
 800148a:	e089      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x1c8>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2204      	movs	r2, #4
 8001492:	4013      	ands	r3, r2
 8001494:	d000      	beq.n	8001498 <HAL_ADC_ConfigChannel+0xc0>
 8001496:	e081      	b.n	800159c <HAL_ADC_ConfigChannel+0x1c4>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2208      	movs	r2, #8
 800149e:	4013      	ands	r3, r2
 80014a0:	d000      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0xcc>
 80014a2:	e079      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1c0>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2210      	movs	r2, #16
 80014aa:	4013      	ands	r3, r2
 80014ac:	d000      	beq.n	80014b0 <HAL_ADC_ConfigChannel+0xd8>
 80014ae:	e071      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1bc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2220      	movs	r2, #32
 80014b6:	4013      	ands	r3, r2
 80014b8:	d000      	beq.n	80014bc <HAL_ADC_ConfigChannel+0xe4>
 80014ba:	e069      	b.n	8001590 <HAL_ADC_ConfigChannel+0x1b8>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2240      	movs	r2, #64	; 0x40
 80014c2:	4013      	ands	r3, r2
 80014c4:	d000      	beq.n	80014c8 <HAL_ADC_ConfigChannel+0xf0>
 80014c6:	e061      	b.n	800158c <HAL_ADC_ConfigChannel+0x1b4>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	4013      	ands	r3, r2
 80014d0:	d000      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0xfc>
 80014d2:	e059      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1b0>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d151      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1ac>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d149      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1a8>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	d141      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1a4>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4013      	ands	r3, r2
 8001502:	d139      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1a0>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	4013      	ands	r3, r2
 800150e:	d131      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x19c>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	4013      	ands	r3, r2
 800151a:	d129      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x198>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	4013      	ands	r3, r2
 8001526:	d121      	bne.n	800156c <HAL_ADC_ConfigChannel+0x194>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	4013      	ands	r3, r2
 8001532:	d119      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x190>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	4013      	ands	r3, r2
 800153e:	d111      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x18c>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d109      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x188>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	02db      	lsls	r3, r3, #11
 8001554:	4013      	ands	r3, r2
 8001556:	d001      	beq.n	800155c <HAL_ADC_ConfigChannel+0x184>
 8001558:	2312      	movs	r3, #18
 800155a:	e024      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 800155c:	2300      	movs	r3, #0
 800155e:	e022      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	2311      	movs	r3, #17
 8001562:	e020      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001564:	2310      	movs	r3, #16
 8001566:	e01e      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001568:	230f      	movs	r3, #15
 800156a:	e01c      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 800156c:	230e      	movs	r3, #14
 800156e:	e01a      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001570:	230d      	movs	r3, #13
 8001572:	e018      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001574:	230c      	movs	r3, #12
 8001576:	e016      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001578:	230b      	movs	r3, #11
 800157a:	e014      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 800157c:	230a      	movs	r3, #10
 800157e:	e012      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001580:	2309      	movs	r3, #9
 8001582:	e010      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001584:	2308      	movs	r3, #8
 8001586:	e00e      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001588:	2307      	movs	r3, #7
 800158a:	e00c      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 800158c:	2306      	movs	r3, #6
 800158e:	e00a      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001590:	2305      	movs	r3, #5
 8001592:	e008      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001594:	2304      	movs	r3, #4
 8001596:	e006      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 8001598:	2303      	movs	r3, #3
 800159a:	e004      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1ce>
 80015a4:	2300      	movs	r3, #0
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	6852      	ldr	r2, [r2, #4]
 80015aa:	201f      	movs	r0, #31
 80015ac:	4002      	ands	r2, r0
 80015ae:	4093      	lsls	r3, r2
 80015b0:	000a      	movs	r2, r1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d808      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	001a      	movs	r2, r3
 80015d6:	f7ff fc77 	bl	8000ec8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	001a      	movs	r2, r3
 80015e8:	f7ff fcb2 	bl	8000f50 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db00      	blt.n	80015f6 <HAL_ADC_ConfigChannel+0x21e>
 80015f4:	e0bc      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f6:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fc3b 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 80015fe:	0003      	movs	r3, r0
 8001600:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a4d      	ldr	r2, [pc, #308]	; (800173c <HAL_ADC_ConfigChannel+0x364>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d122      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001614:	d11d      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	0412      	lsls	r2, r2, #16
 800161c:	4313      	orrs	r3, r2
 800161e:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 8001620:	0019      	movs	r1, r3
 8001622:	0010      	movs	r0, r2
 8001624:	f7ff fc12 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_ADC_ConfigChannel+0x368>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4945      	ldr	r1, [pc, #276]	; (8001744 <HAL_ADC_ConfigChannel+0x36c>)
 800162e:	0018      	movs	r0, r3
 8001630:	f7fe fd6a 	bl	8000108 <__udivsi3>
 8001634:	0003      	movs	r3, r0
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	0013      	movs	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	189b      	adds	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001642:	e002      	b.n	800164a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3b01      	subs	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001650:	e08e      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <HAL_ADC_ConfigChannel+0x370>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10e      	bne.n	800167a <HAL_ADC_ConfigChannel+0x2a2>
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	045b      	lsls	r3, r3, #17
 8001662:	4013      	ands	r3, r2
 8001664:	d109      	bne.n	800167a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0452      	lsls	r2, r2, #17
 800166c:	4313      	orrs	r3, r2
 800166e:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 8001670:	0019      	movs	r1, r3
 8001672:	0010      	movs	r0, r2
 8001674:	f7ff fbea 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001678:	e07a      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a33      	ldr	r2, [pc, #204]	; (800174c <HAL_ADC_ConfigChannel+0x374>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d000      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x2ae>
 8001684:	e074      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	03db      	lsls	r3, r3, #15
 800168c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800168e:	d000      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x2ba>
 8001690:	e06e      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	03d2      	lsls	r2, r2, #15
 8001698:	4313      	orrs	r3, r2
 800169a:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 800169c:	0019      	movs	r1, r3
 800169e:	0010      	movs	r0, r2
 80016a0:	f7ff fbd4 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 80016a4:	e064      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d004      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016b6:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_ADC_ConfigChannel+0x35c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d107      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0019      	movs	r1, r3
 80016c6:	0010      	movs	r0, r2
 80016c8:	f7ff fc2f 	bl	8000f2a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da4d      	bge.n	8001770 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fbcc 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_ADC_ConfigChannel+0x364>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d108      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_ADC_ConfigChannel+0x378>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 80016f2:	0019      	movs	r1, r3
 80016f4:	0010      	movs	r0, r2
 80016f6:	f7ff fba9 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 80016fa:	e039      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_ADC_ConfigChannel+0x370>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d108      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_ADC_ConfigChannel+0x37c>)
 800170a:	4013      	ands	r3, r2
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f7ff fb9b 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001716:	e02b      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_ADC_ConfigChannel+0x374>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d126      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <HAL_ADC_ConfigChannel+0x380>)
 8001726:	4013      	ands	r3, r2
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_ADC_ConfigChannel+0x360>)
 800172a:	0019      	movs	r1, r3
 800172c:	0010      	movs	r0, r2
 800172e:	f7ff fb8d 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001732:	e01d      	b.n	8001770 <HAL_ADC_ConfigChannel+0x398>
 8001734:	80000004 	.word	0x80000004
 8001738:	40012708 	.word	0x40012708
 800173c:	b0001000 	.word	0xb0001000
 8001740:	20000000 	.word	0x20000000
 8001744:	00030d40 	.word	0x00030d40
 8001748:	b8004000 	.word	0xb8004000
 800174c:	b4002000 	.word	0xb4002000
 8001750:	ff7fffff 	.word	0xff7fffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	2220      	movs	r2, #32
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001768:	2317      	movs	r3, #23
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2254      	movs	r2, #84	; 0x54
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001778:	2317      	movs	r3, #23
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	781b      	ldrb	r3, [r3, #0]
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b006      	add	sp, #24
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	d809      	bhi.n	80017b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	231f      	movs	r3, #31
 80017a4:	401a      	ands	r2, r3
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_EnableIRQ+0x30>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b7f      	cmp	r3, #127	; 0x7f
 80017d0:	d828      	bhi.n	8001824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <__NVIC_SetPriority+0xd4>)
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	33c0      	adds	r3, #192	; 0xc0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	589b      	ldr	r3, [r3, r2]
 80017e2:	1dfa      	adds	r2, r7, #7
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	0011      	movs	r1, r2
 80017e8:	2203      	movs	r2, #3
 80017ea:	400a      	ands	r2, r1
 80017ec:	00d2      	lsls	r2, r2, #3
 80017ee:	21ff      	movs	r1, #255	; 0xff
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	43d2      	mvns	r2, r2
 80017f6:	401a      	ands	r2, r3
 80017f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	22ff      	movs	r2, #255	; 0xff
 8001800:	401a      	ands	r2, r3
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	2303      	movs	r3, #3
 800180a:	4003      	ands	r3, r0
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	481f      	ldr	r0, [pc, #124]	; (8001890 <__NVIC_SetPriority+0xd4>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	430a      	orrs	r2, r1
 800181c:	33c0      	adds	r3, #192	; 0xc0
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001822:	e031      	b.n	8001888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0019      	movs	r1, r3
 800182c:	230f      	movs	r3, #15
 800182e:	400b      	ands	r3, r1
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3306      	adds	r3, #6
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1dfa      	adds	r2, r7, #7
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	0011      	movs	r1, r2
 8001844:	2203      	movs	r2, #3
 8001846:	400a      	ands	r2, r1
 8001848:	00d2      	lsls	r2, r2, #3
 800184a:	21ff      	movs	r1, #255	; 0xff
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	401a      	ands	r2, r3
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	2303      	movs	r3, #3
 8001866:	4003      	ands	r3, r0
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <__NVIC_SetPriority+0xd8>)
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	001c      	movs	r4, r3
 8001874:	230f      	movs	r3, #15
 8001876:	4023      	ands	r3, r4
 8001878:	3b08      	subs	r3, #8
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	430a      	orrs	r2, r1
 800187e:	3306      	adds	r3, #6
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	18c3      	adds	r3, r0, r3
 8001884:	3304      	adds	r3, #4
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b003      	add	sp, #12
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	210f      	movs	r1, #15
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff81 	bl	80017bc <__NVIC_SetPriority>
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	0002      	movs	r2, r0
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff57 	bl	8001788 <__NVIC_EnableIRQ>
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e147      	b.n	8001b84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x28>
 800190a:	e138      	b.n	8001b7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_GPIO_Init+0x40>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	2201      	movs	r2, #1
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b03      	cmp	r3, #3
 8001990:	d017      	beq.n	80019c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	58d3      	ldr	r3, [r2, r3]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2107      	movs	r1, #7
 80019fa:	400b      	ands	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	401a      	ands	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x174>
 8001a56:	e092      	b.n	8001b7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a58:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3318      	adds	r3, #24
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	589b      	ldr	r3, [r3, r2]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	220f      	movs	r2, #15
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	23a0      	movs	r3, #160	; 0xa0
 8001a80:	05db      	lsls	r3, r3, #23
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1ca>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <HAL_GPIO_Init+0x2bc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1c6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a44      	ldr	r2, [pc, #272]	; (8001ba4 <HAL_GPIO_Init+0x2c0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1c2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_GPIO_Init+0x2c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1be>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	00d2      	lsls	r2, r2, #3
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ac0:	4936      	ldr	r1, [pc, #216]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	58d3      	ldr	r3, [r2, r3]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af4:	4929      	ldr	r1, [pc, #164]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001afe:	2384      	movs	r3, #132	; 0x84
 8001b00:	58d3      	ldr	r3, [r2, r3]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b22:	491e      	ldr	r1, [pc, #120]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b24:	2284      	movs	r2, #132	; 0x84
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	035b      	lsls	r3, r3, #13
 8001b42:	4013      	ands	r3, r2
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	039b      	lsls	r3, r3, #14
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	40da      	lsrs	r2, r3
 8001b8c:	1e13      	subs	r3, r2, #0
 8001b8e:	d000      	beq.n	8001b92 <HAL_GPIO_Init+0x2ae>
 8001b90:	e6b0      	b.n	80018f4 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b006      	add	sp, #24
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	50000400 	.word	0x50000400
 8001ba4:	50000800 	.word	0x50000800
 8001ba8:	50000c00 	.word	0x50000c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	0008      	movs	r0, r1
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	1c7b      	adds	r3, r7, #1
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	1c7b      	adds	r3, r7, #1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bcc:	1cbb      	adds	r3, r7, #2
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d11f      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	0013      	movs	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4912      	ldr	r1, [pc, #72]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fa74 	bl	8000108 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c26:	e008      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e001      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e009      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	401a      	ands	r2, r3
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	fffff9ff 	.word	0xfffff9ff
 8001c60:	20000000 	.word	0x20000000
 8001c64:	000f4240 	.word	0x000f4240

08001c68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	23e0      	movs	r3, #224	; 0xe0
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	4013      	ands	r3, r2
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e304      	b.n	800229c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1e>
 8001c9c:	e07c      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2238      	movs	r2, #56	; 0x38
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4bc0      	ldr	r3, [pc, #768]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3e>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d10b      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	4bb9      	ldr	r3, [pc, #740]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d062      	beq.n	8001d96 <HAL_RCC_OscConfig+0x116>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d15e      	bne.n	8001d96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2df      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x78>
 8001ce8:	4bb0      	ldr	r3, [pc, #704]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4baf      	ldr	r3, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0249      	lsls	r1, r1, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e020      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	23a0      	movs	r3, #160	; 0xa0
 8001cfe:	02db      	lsls	r3, r3, #11
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10e      	bne.n	8001d22 <HAL_RCC_OscConfig+0xa2>
 8001d04:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	02c9      	lsls	r1, r1, #11
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001d22:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	49a1      	ldr	r1, [pc, #644]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4b9f      	ldr	r3, [pc, #636]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d34:	499f      	ldr	r1, [pc, #636]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f863 	bl	8000e0c <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f85e 	bl	8000e0c <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e29e      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4b93      	ldr	r3, [pc, #588]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xcc>
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f84e 	bl	8000e0c <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff f849 	bl	8000e0c <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e289      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d88:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0xf6>
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_RCC_OscConfig+0x124>
 8001da2:	e099      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da4:	4b81      	ldr	r3, [pc, #516]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2238      	movs	r2, #56	; 0x38
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x144>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d002      	beq.n	8001dca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d135      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x162>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e25c      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a74      	ldr	r2, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e12:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x340>)
 8001e1e:	40da      	lsrs	r2, r3
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x344>)
 8001e22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x348>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7fe ff1d 	bl	8000c68 <HAL_InitTick>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d051      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e232      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ffd4 	bl	8000e0c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe ffcf 	bl	8000e0c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e20f      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	4949      	ldr	r1, [pc, #292]	; (8001fcc <HAL_RCC_OscConfig+0x34c>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffae 	bl	8000e0c <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7fe ffa9 	bl	8000e0c <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1e9      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x236>
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d047      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2238      	movs	r2, #56	; 0x38
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b18      	cmp	r3, #24
 8001eec:	d10a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d138      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e1cb      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff78 	bl	8000e0c <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe ff73 	bl	8000e0c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1b3      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2a2>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe ff5e 	bl	8000e0c <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7fe ff59 	bl	8000e0c <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e199      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2fe>
 8001f7c:	e0c6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2238      	movs	r2, #56	; 0x38
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d11e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x31e>
 8001f9c:	e0b6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d000      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x328>
 8001fa6:	e0b1      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e177      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	fffbffff 	.word	0xfffbffff
 8001fb8:	ffff80ff 	.word	0xffff80ff
 8001fbc:	ffffc7ff 	.word	0xffffc7ff
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd0:	4bb4      	ldr	r3, [pc, #720]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8001fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	055b      	lsls	r3, r3, #21
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x360>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x362>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4baf      	ldr	r3, [pc, #700]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8001fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fea:	4bae      	ldr	r3, [pc, #696]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0549      	lsls	r1, r1, #21
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ff4:	4bab      	ldr	r3, [pc, #684]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8001ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4ba7      	ldr	r3, [pc, #668]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d11a      	bne.n	800204c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4ba4      	ldr	r3, [pc, #656]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4ba3      	ldr	r3, [pc, #652]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0049      	lsls	r1, r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002024:	f7fe fef2 	bl	8000e0c <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe feed 	bl	8000e0c <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e12d      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	4b99      	ldr	r3, [pc, #612]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x3e2>
 8002054:	4b93      	ldr	r3, [pc, #588]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002058:	4b92      	ldr	r3, [pc, #584]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800205a:	2101      	movs	r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x404>
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800206c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800206e:	4b8d      	ldr	r3, [pc, #564]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002070:	2104      	movs	r1, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002084:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002088:	4b86      	ldr	r3, [pc, #536]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002094:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe feb2 	bl	8000e0c <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fead 	bl	8000e0c <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0ec      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x42e>
 80020cc:	e013      	b.n	80020f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe fe9d 	bl	8000e0c <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d6:	e009      	b.n	80020ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fe98 	bl	8000e0c <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4a72      	ldr	r2, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0d7      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002104:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002106:	496a      	ldr	r1, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x630>)
 8002108:	400a      	ands	r2, r1
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <HAL_RCC_OscConfig+0x496>
 8002114:	e0c1      	b.n	800229a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	; 0x38
 800211c:	4013      	ands	r3, r2
 800211e:	2b10      	cmp	r3, #16
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x4a4>
 8002122:	e081      	b.n	8002228 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d156      	bne.n	80021da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002132:	4960      	ldr	r1, [pc, #384]	; (80022b4 <HAL_RCC_OscConfig+0x634>)
 8002134:	400a      	ands	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fe68 	bl	8000e0c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fe63 	bl	8000e0c <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0a3      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	049b      	lsls	r3, r3, #18
 800215c:	4013      	ands	r3, r2
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_RCC_OscConfig+0x638>)
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	431a      	orrs	r2, r3
 800218e:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0449      	lsls	r1, r1, #17
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0549      	lsls	r1, r1, #21
 80021ac:	430a      	orrs	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fe2c 	bl	8000e0c <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fe27 	bl	8000e0c <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e067      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	049b      	lsls	r3, r3, #18
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x53a>
 80021d8:	e05f      	b.n	800229a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021e0:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x634>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021ec:	2103      	movs	r1, #3
 80021ee:	438a      	bics	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 80021f8:	4930      	ldr	r1, [pc, #192]	; (80022bc <HAL_RCC_OscConfig+0x63c>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe fe05 	bl	8000e0c <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fe00 	bl	8000e0c <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e040      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	049b      	lsls	r3, r3, #18
 8002222:	4013      	ands	r3, r2
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x588>
 8002226:	e038      	b.n	800229a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e033      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2203      	movs	r2, #3
 800223e:	401a      	ands	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d126      	bne.n	8002296 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2270      	movs	r2, #112	; 0x70
 800224c:	401a      	ands	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d11f      	bne.n	8002296 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	23fe      	movs	r3, #254	; 0xfe
 800225a:	01db      	lsls	r3, r3, #7
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d116      	bne.n	8002296 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	23f8      	movs	r3, #248	; 0xf8
 800226c:	039b      	lsls	r3, r3, #14
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	23e0      	movs	r3, #224	; 0xe0
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	0f5b      	lsrs	r3, r3, #29
 800228c:	075a      	lsls	r2, r3, #29
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b008      	add	sp, #32
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40007000 	.word	0x40007000
 80022ac:	00001388 	.word	0x00001388
 80022b0:	efffffff 	.word	0xefffffff
 80022b4:	feffffff 	.word	0xfeffffff
 80022b8:	11c1808c 	.word	0x11c1808c
 80022bc:	eefeffff 	.word	0xeefeffff

080022c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0e9      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2207      	movs	r2, #7
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d91e      	bls.n	8002320 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2207      	movs	r2, #7
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022f4:	f7fe fd8a 	bl	8000e0c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022fc:	e009      	b.n	8002312 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fe:	f7fe fd85 	bl	8000e0c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_RCC_ClockConfig+0x1f4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0ca      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002312:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d015      	beq.n	8002356 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d006      	beq.n	8002342 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002334:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b5f      	ldr	r3, [pc, #380]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 800233a:	21e0      	movs	r1, #224	; 0xe0
 800233c:	01c9      	lsls	r1, r1, #7
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_ClockConfig+0x1fc>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d057      	beq.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	029b      	lsls	r3, r3, #10
 8002370:	4013      	ands	r3, r2
 8002372:	d12b      	bne.n	80023cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e097      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	049b      	lsls	r3, r3, #18
 8002388:	4013      	ands	r3, r2
 800238a:	d11f      	bne.n	80023cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e08b      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	d113      	bne.n	80023cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e07f      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d106      	bne.n	80023be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	2202      	movs	r2, #2
 80023b6:	4013      	ands	r3, r2
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e074      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e06d      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2207      	movs	r2, #7
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd14 	bl	8000e0c <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7fe fd0f 	bl	8000e0c <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <HAL_RCC_ClockConfig+0x1f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e054      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2238      	movs	r2, #56	; 0x38
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	429a      	cmp	r2, r3
 800240e:	d1ec      	bne.n	80023ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2207      	movs	r2, #7
 8002416:	4013      	ands	r3, r2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d21e      	bcs.n	800245c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2207      	movs	r2, #7
 8002424:	4393      	bics	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002430:	f7fe fcec 	bl	8000e0c <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002438:	e009      	b.n	800244e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243a:	f7fe fce7 	bl	8000e0c <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e02c      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4013      	ands	r3, r2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2204      	movs	r2, #4
 8002462:	4013      	ands	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_RCC_ClockConfig+0x200>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800247a:	f000 f829 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800247e:	0001      	movs	r1, r0
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	220f      	movs	r2, #15
 8002488:	401a      	ands	r2, r3
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x204>)
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	58d3      	ldr	r3, [r2, r3]
 8002490:	221f      	movs	r2, #31
 8002492:	4013      	ands	r3, r2
 8002494:	000a      	movs	r2, r1
 8002496:	40da      	lsrs	r2, r3
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x208>)
 800249a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_ClockConfig+0x20c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fe fbe1 	bl	8000c68 <HAL_InitTick>
 80024a6:	0003      	movs	r3, r0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40022000 	.word	0x40022000
 80024b4:	00001388 	.word	0x00001388
 80024b8:	40021000 	.word	0x40021000
 80024bc:	fffff0ff 	.word	0xfffff0ff
 80024c0:	ffff8fff 	.word	0xffff8fff
 80024c4:	0800638c 	.word	0x0800638c
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2238      	movs	r2, #56	; 0x38
 80024dc:	4013      	ands	r3, r2
 80024de:	d10f      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0adb      	lsrs	r3, r3, #11
 80024e6:	2207      	movs	r2, #7
 80024e8:	4013      	ands	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	4835      	ldr	r0, [pc, #212]	; (80025cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80024f6:	f7fd fe07 	bl	8000108 <__udivsi3>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e05d      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2238      	movs	r2, #56	; 0x38
 8002506:	4013      	ands	r3, r2
 8002508:	2b08      	cmp	r3, #8
 800250a:	d102      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e054      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2238      	movs	r2, #56	; 0x38
 8002518:	4013      	ands	r3, r2
 800251a:	2b10      	cmp	r3, #16
 800251c:	d138      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2203      	movs	r2, #3
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	2207      	movs	r2, #7
 8002530:	4013      	ands	r3, r2
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d10d      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	4824      	ldr	r0, [pc, #144]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002540:	f7fd fde2 	bl	8000108 <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	0019      	movs	r1, r3
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	227f      	movs	r2, #127	; 0x7f
 8002550:	4013      	ands	r3, r2
 8002552:	434b      	muls	r3, r1
 8002554:	617b      	str	r3, [r7, #20]
        break;
 8002556:	e00d      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	481c      	ldr	r0, [pc, #112]	; (80025cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800255c:	f7fd fdd4 	bl	8000108 <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	0019      	movs	r1, r3
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	227f      	movs	r2, #127	; 0x7f
 800256c:	4013      	ands	r3, r2
 800256e:	434b      	muls	r3, r1
 8002570:	617b      	str	r3, [r7, #20]
        break;
 8002572:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0f5b      	lsrs	r3, r3, #29
 800257a:	2207      	movs	r2, #7
 800257c:	4013      	ands	r3, r2
 800257e:	3301      	adds	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f7fd fdbf 	bl	8000108 <__udivsi3>
 800258a:	0003      	movs	r3, r0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e015      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2238      	movs	r2, #56	; 0x38
 8002596:	4013      	ands	r3, r2
 8002598:	2b20      	cmp	r3, #32
 800259a:	d103      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2238      	movs	r2, #56	; 0x38
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b18      	cmp	r3, #24
 80025ae:	d103      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025b0:	23fa      	movs	r3, #250	; 0xfa
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e001      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b006      	add	sp, #24
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	007a1200 	.word	0x007a1200

080025d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025ec:	f7ff fff2 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f0:	0004      	movs	r4, r0
 80025f2:	f7ff fb39 	bl	8001c68 <LL_RCC_GetAPB1Prescaler>
 80025f6:	0003      	movs	r3, r0
 80025f8:	0b1a      	lsrs	r2, r3, #12
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	58d3      	ldr	r3, [r2, r3]
 8002600:	221f      	movs	r2, #31
 8002602:	4013      	ands	r3, r2
 8002604:	40dc      	lsrs	r4, r3
 8002606:	0023      	movs	r3, r4
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	080063cc 	.word	0x080063cc

08002614 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_RCC_GetClockConfig+0x4c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2207      	movs	r2, #7
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_GetClockConfig+0x4c>)
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	23f0      	movs	r3, #240	; 0xf0
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	401a      	ands	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_RCC_GetClockConfig+0x4c>)
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	23e0      	movs	r3, #224	; 0xe0
 8002644:	01db      	lsls	r3, r3, #7
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetClockConfig+0x50>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2207      	movs	r2, #7
 8002652:	401a      	ands	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002670:	2313      	movs	r3, #19
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002678:	2312      	movs	r3, #18
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800268c:	e0a3      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2011      	movs	r0, #17
 8002690:	183b      	adds	r3, r7, r0
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4bc3      	ldr	r3, [pc, #780]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	4013      	ands	r3, r2
 80026a0:	d110      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4bc0      	ldr	r3, [pc, #768]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a6:	4bbf      	ldr	r3, [pc, #764]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b0:	4bbc      	ldr	r3, [pc, #752]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4bb8      	ldr	r3, [pc, #736]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4bb7      	ldr	r3, [pc, #732]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fb9b 	bl	8000e0c <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026da:	e00b      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fb96 	bl	8000e0c <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d904      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026ea:	2313      	movs	r3, #19
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
        break;
 80026f2:	e005      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026f4:	4bac      	ldr	r3, [pc, #688]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0ed      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002700:	2313      	movs	r3, #19
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d154      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800270a:	4ba6      	ldr	r3, [pc, #664]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800270e:	23c0      	movs	r3, #192	; 0xc0
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4013      	ands	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d019      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	429a      	cmp	r2, r3
 8002724:	d014      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002726:	4b9f      	ldr	r3, [pc, #636]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	4aa0      	ldr	r2, [pc, #640]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800272c:	4013      	ands	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002730:	4b9c      	ldr	r3, [pc, #624]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002734:	4b9b      	ldr	r3, [pc, #620]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800273e:	4b99      	ldr	r3, [pc, #612]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002742:	4b98      	ldr	r3, [pc, #608]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002744:	499a      	ldr	r1, [pc, #616]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002746:	400a      	ands	r2, r1
 8002748:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800274a:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d016      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fb58 	bl	8000e0c <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002760:	e00c      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fb53 	bl	8000e0c <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a91      	ldr	r2, [pc, #580]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d904      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002772:	2313      	movs	r3, #19
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2203      	movs	r2, #3
 8002778:	701a      	strb	r2, [r3, #0]
            break;
 800277a:	e004      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277c:	4b89      	ldr	r3, [pc, #548]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2202      	movs	r2, #2
 8002782:	4013      	ands	r3, r2
 8002784:	d0ed      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002786:	2313      	movs	r3, #19
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	4a85      	ldr	r2, [pc, #532]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002796:	4013      	ands	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a0:	430a      	orrs	r2, r1
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027a4:	e00c      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a6:	2312      	movs	r3, #18
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2213      	movs	r2, #19
 80027ac:	18ba      	adds	r2, r7, r2
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e005      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	2312      	movs	r3, #18
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2213      	movs	r2, #19
 80027ba:	18ba      	adds	r2, r7, r2
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c0:	2311      	movs	r3, #17
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ce:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d0:	4979      	ldr	r1, [pc, #484]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80027d2:	400a      	ands	r2, r1
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	2203      	movs	r2, #3
 80027e6:	4393      	bics	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fe:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	220c      	movs	r2, #12
 8002804:	4393      	bics	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280e:	430a      	orrs	r2, r1
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2210      	movs	r2, #16
 8002818:	4013      	ands	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282c:	430a      	orrs	r2, r1
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	4a5f      	ldr	r2, [pc, #380]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800284c:	430a      	orrs	r2, r1
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4013      	ands	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800286c:	430a      	orrs	r2, r1
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	4013      	ands	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	01db      	lsls	r3, r3, #7
 8002896:	4013      	ands	r3, r2
 8002898:	d015      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800289a:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	0899      	lsrs	r1, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d106      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	0249      	lsls	r1, r1, #9
 80028c2:	430a      	orrs	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	031b      	lsls	r3, r3, #12
 80028ce:	4013      	ands	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	4393      	bics	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	039b      	lsls	r3, r3, #14
 80028ee:	4013      	ands	r3, r2
 80028f0:	d016      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	4a35      	ldr	r2, [pc, #212]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002902:	430a      	orrs	r2, r1
 8002904:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	03db      	lsls	r3, r3, #15
 800290e:	429a      	cmp	r2, r3
 8002910:	d106      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0449      	lsls	r1, r1, #17
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	03db      	lsls	r3, r3, #15
 8002928:	4013      	ands	r3, r2
 800292a:	d016      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293c:	430a      	orrs	r2, r1
 800293e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	045b      	lsls	r3, r3, #17
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	0449      	lsls	r1, r1, #17
 8002956:	430a      	orrs	r2, r1
 8002958:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d016      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002976:	430a      	orrs	r2, r1
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	429a      	cmp	r2, r3
 8002984:	d106      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0249      	lsls	r1, r1, #9
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002994:	2312      	movs	r3, #18
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	fffffcff 	.word	0xfffffcff
 80029b0:	fffeffff 	.word	0xfffeffff
 80029b4:	00001388 	.word	0x00001388
 80029b8:	efffffff 	.word	0xefffffff
 80029bc:	fffff3ff 	.word	0xfffff3ff
 80029c0:	fff3ffff 	.word	0xfff3ffff
 80029c4:	ffcfffff 	.word	0xffcfffff
 80029c8:	ffffcfff 	.word	0xffffcfff
 80029cc:	ffbfffff 	.word	0xffbfffff
 80029d0:	feffffff 	.word	0xfeffffff
 80029d4:	ffff3fff 	.word	0xffff3fff

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e04a      	b.n	8002a80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223d      	movs	r2, #61	; 0x3d
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223c      	movs	r2, #60	; 0x3c
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fe f8c5 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223d      	movs	r2, #61	; 0x3d
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f000 f9e3 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2248      	movs	r2, #72	; 0x48
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223e      	movs	r2, #62	; 0x3e
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	; 0x41
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2242      	movs	r2, #66	; 0x42
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2243      	movs	r2, #67	; 0x43
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2244      	movs	r2, #68	; 0x44
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2245      	movs	r2, #69	; 0x45
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2246      	movs	r2, #70	; 0x46
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2247      	movs	r2, #71	; 0x47
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223d      	movs	r2, #61	; 0x3d
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	223d      	movs	r2, #61	; 0x3d
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e042      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	223d      	movs	r2, #61	; 0x3d
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_TIM_Base_Start_IT+0xa8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00f      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x5a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	05db      	lsls	r3, r3, #23
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x5a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_Base_Start_IT+0xac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x5a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d116      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_Base_Start_IT+0xb4>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d016      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x9a>
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	025b      	lsls	r3, r3, #9
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d011      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	00010007 	.word	0x00010007

08002b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d124      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d11d      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f916 	bl	8002db4 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e007      	b.n	8002b9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f909 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f915 	bl	8002dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d125      	bne.n	8002bfa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	4252      	negs	r2, r2
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f8e9 	bl	8002db4 <HAL_TIM_IC_CaptureCallback>
 8002be2:	e007      	b.n	8002bf4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8dc 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 f8e8 	bl	8002dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2208      	movs	r2, #8
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d124      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11d      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2209      	movs	r2, #9
 8002c1c:	4252      	negs	r2, r2
 8002c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2204      	movs	r2, #4
 8002c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f8bd 	bl	8002db4 <HAL_TIM_IC_CaptureCallback>
 8002c3a:	e007      	b.n	8002c4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f8b0 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f8bc 	bl	8002dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d125      	bne.n	8002cac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2210      	movs	r2, #16
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d11e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2211      	movs	r2, #17
 8002c74:	4252      	negs	r2, r2
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	23c0      	movs	r3, #192	; 0xc0
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f890 	bl	8002db4 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e007      	b.n	8002ca6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f883 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f88f 	bl	8002dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10f      	bne.n	8002cda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d108      	bne.n	8002cda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4252      	negs	r2, r2
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7fd feb3 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d10f      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d108      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2281      	movs	r2, #129	; 0x81
 8002cfc:	4252      	negs	r2, r2
 8002cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f8f6 	bl	8002ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	401a      	ands	r2, r3
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d10e      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_TIM_IRQHandler+0x260>)
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f8e5 	bl	8002f04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d10f      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d108      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2241      	movs	r2, #65	; 0x41
 8002d5c:	4252      	negs	r2, r2
 8002d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 f836 	bl	8002dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d10f      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d108      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2221      	movs	r2, #33	; 0x21
 8002d8a:	4252      	negs	r2, r2
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f8a7 	bl	8002ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	fffffeff 	.word	0xfffffeff

08002da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d008      	beq.n	8002e0e <TIM_Base_SetConfig+0x2a>
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	05db      	lsls	r3, r3, #23
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d003      	beq.n	8002e0e <TIM_Base_SetConfig+0x2a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <TIM_Base_SetConfig+0xe8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2270      	movs	r2, #112	; 0x70
 8002e12:	4393      	bics	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d013      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0xe8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00f      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <TIM_Base_SetConfig+0xec>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <TIM_Base_SetConfig+0xf0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <TIM_Base_SetConfig+0xf4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0x76>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <TIM_Base_SetConfig+0xf8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <TIM_Base_SetConfig+0xfc>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	4393      	bics	r3, r2
 8002e72:	001a      	movs	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <TIM_Base_SetConfig+0xce>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <TIM_Base_SetConfig+0xf0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <TIM_Base_SetConfig+0xce>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <TIM_Base_SetConfig+0xf4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_Base_SetConfig+0xce>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <TIM_Base_SetConfig+0xf8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d103      	bne.n	8002eba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	615a      	str	r2, [r3, #20]
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40002000 	.word	0x40002000
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800
 8002ee0:	fffffcff 	.word	0xfffffcff

08002ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e046      	b.n	8002fb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2284      	movs	r2, #132	; 0x84
 8002f2a:	589b      	ldr	r3, [r3, r2]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7fd fe48 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2284      	movs	r2, #132	; 0x84
 8002f44:	2124      	movs	r1, #36	; 0x24
 8002f46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f830 	bl	8002fc0 <UART_SetConfig>
 8002f60:	0003      	movs	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e024      	b.n	8002fb4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 fb01 	bl	800357c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	490d      	ldr	r1, [pc, #52]	; (8002fbc <HAL_UART_Init+0xa8>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	212a      	movs	r1, #42	; 0x2a
 8002f96:	438a      	bics	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fb99 	bl	80036e4 <UART_CheckIdleState>
 8002fb2:	0003      	movs	r3, r0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	ffffb7ff 	.word	0xffffb7ff

08002fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b090      	sub	sp, #64	; 0x40
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc8:	231a      	movs	r3, #26
 8002fca:	2220      	movs	r2, #32
 8002fcc:	4694      	mov	ip, r2
 8002fce:	44bc      	add	ip, r7
 8002fd0:	4463      	add	r3, ip
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4ab9      	ldr	r2, [pc, #740]	; (80032dc <UART_SetConfig+0x31c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003000:	430b      	orrs	r3, r1
 8003002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4ab5      	ldr	r2, [pc, #724]	; (80032e0 <UART_SetConfig+0x320>)
 800300c:	4013      	ands	r3, r2
 800300e:	0018      	movs	r0, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	0003      	movs	r3, r0
 800301a:	430b      	orrs	r3, r1
 800301c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4aae      	ldr	r2, [pc, #696]	; (80032e4 <UART_SetConfig+0x324>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003034:	4313      	orrs	r3, r2
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4aaa      	ldr	r2, [pc, #680]	; (80032e8 <UART_SetConfig+0x328>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304a:	430b      	orrs	r3, r1
 800304c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	220f      	movs	r2, #15
 8003056:	4393      	bics	r3, r2
 8003058:	0018      	movs	r0, r3
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	0003      	movs	r3, r0
 8003064:	430b      	orrs	r3, r1
 8003066:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a9f      	ldr	r2, [pc, #636]	; (80032ec <UART_SetConfig+0x32c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d136      	bne.n	80030e0 <UART_SetConfig+0x120>
 8003072:	4b9f      	ldr	r3, [pc, #636]	; (80032f0 <UART_SetConfig+0x330>)
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	2203      	movs	r2, #3
 8003078:	4013      	ands	r3, r2
 800307a:	2b03      	cmp	r3, #3
 800307c:	d020      	beq.n	80030c0 <UART_SetConfig+0x100>
 800307e:	d827      	bhi.n	80030d0 <UART_SetConfig+0x110>
 8003080:	2b02      	cmp	r3, #2
 8003082:	d00d      	beq.n	80030a0 <UART_SetConfig+0xe0>
 8003084:	d824      	bhi.n	80030d0 <UART_SetConfig+0x110>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <UART_SetConfig+0xd0>
 800308a:	2b01      	cmp	r3, #1
 800308c:	d010      	beq.n	80030b0 <UART_SetConfig+0xf0>
 800308e:	e01f      	b.n	80030d0 <UART_SetConfig+0x110>
 8003090:	231b      	movs	r3, #27
 8003092:	2220      	movs	r2, #32
 8003094:	4694      	mov	ip, r2
 8003096:	44bc      	add	ip, r7
 8003098:	4463      	add	r3, ip
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e0c5      	b.n	800322c <UART_SetConfig+0x26c>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2220      	movs	r2, #32
 80030a4:	4694      	mov	ip, r2
 80030a6:	44bc      	add	ip, r7
 80030a8:	4463      	add	r3, ip
 80030aa:	2202      	movs	r2, #2
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e0bd      	b.n	800322c <UART_SetConfig+0x26c>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2220      	movs	r2, #32
 80030b4:	4694      	mov	ip, r2
 80030b6:	44bc      	add	ip, r7
 80030b8:	4463      	add	r3, ip
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e0b5      	b.n	800322c <UART_SetConfig+0x26c>
 80030c0:	231b      	movs	r3, #27
 80030c2:	2220      	movs	r2, #32
 80030c4:	4694      	mov	ip, r2
 80030c6:	44bc      	add	ip, r7
 80030c8:	4463      	add	r3, ip
 80030ca:	2208      	movs	r2, #8
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e0ad      	b.n	800322c <UART_SetConfig+0x26c>
 80030d0:	231b      	movs	r3, #27
 80030d2:	2220      	movs	r2, #32
 80030d4:	4694      	mov	ip, r2
 80030d6:	44bc      	add	ip, r7
 80030d8:	4463      	add	r3, ip
 80030da:	2210      	movs	r2, #16
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e0a5      	b.n	800322c <UART_SetConfig+0x26c>
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <UART_SetConfig+0x334>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d136      	bne.n	8003158 <UART_SetConfig+0x198>
 80030ea:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <UART_SetConfig+0x330>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	220c      	movs	r2, #12
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d020      	beq.n	8003138 <UART_SetConfig+0x178>
 80030f6:	d827      	bhi.n	8003148 <UART_SetConfig+0x188>
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d00d      	beq.n	8003118 <UART_SetConfig+0x158>
 80030fc:	d824      	bhi.n	8003148 <UART_SetConfig+0x188>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <UART_SetConfig+0x148>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d010      	beq.n	8003128 <UART_SetConfig+0x168>
 8003106:	e01f      	b.n	8003148 <UART_SetConfig+0x188>
 8003108:	231b      	movs	r3, #27
 800310a:	2220      	movs	r2, #32
 800310c:	4694      	mov	ip, r2
 800310e:	44bc      	add	ip, r7
 8003110:	4463      	add	r3, ip
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e089      	b.n	800322c <UART_SetConfig+0x26c>
 8003118:	231b      	movs	r3, #27
 800311a:	2220      	movs	r2, #32
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e081      	b.n	800322c <UART_SetConfig+0x26c>
 8003128:	231b      	movs	r3, #27
 800312a:	2220      	movs	r2, #32
 800312c:	4694      	mov	ip, r2
 800312e:	44bc      	add	ip, r7
 8003130:	4463      	add	r3, ip
 8003132:	2204      	movs	r2, #4
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e079      	b.n	800322c <UART_SetConfig+0x26c>
 8003138:	231b      	movs	r3, #27
 800313a:	2220      	movs	r2, #32
 800313c:	4694      	mov	ip, r2
 800313e:	44bc      	add	ip, r7
 8003140:	4463      	add	r3, ip
 8003142:	2208      	movs	r2, #8
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e071      	b.n	800322c <UART_SetConfig+0x26c>
 8003148:	231b      	movs	r3, #27
 800314a:	2220      	movs	r2, #32
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2210      	movs	r2, #16
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e069      	b.n	800322c <UART_SetConfig+0x26c>
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a66      	ldr	r2, [pc, #408]	; (80032f8 <UART_SetConfig+0x338>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d107      	bne.n	8003172 <UART_SetConfig+0x1b2>
 8003162:	231b      	movs	r3, #27
 8003164:	2220      	movs	r2, #32
 8003166:	4694      	mov	ip, r2
 8003168:	44bc      	add	ip, r7
 800316a:	4463      	add	r3, ip
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e05c      	b.n	800322c <UART_SetConfig+0x26c>
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a61      	ldr	r2, [pc, #388]	; (80032fc <UART_SetConfig+0x33c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d107      	bne.n	800318c <UART_SetConfig+0x1cc>
 800317c:	231b      	movs	r3, #27
 800317e:	2220      	movs	r2, #32
 8003180:	4694      	mov	ip, r2
 8003182:	44bc      	add	ip, r7
 8003184:	4463      	add	r3, ip
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e04f      	b.n	800322c <UART_SetConfig+0x26c>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <UART_SetConfig+0x324>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d143      	bne.n	800321e <UART_SetConfig+0x25e>
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <UART_SetConfig+0x330>)
 8003198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800319a:	23c0      	movs	r3, #192	; 0xc0
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	22c0      	movs	r2, #192	; 0xc0
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d02a      	beq.n	80031fe <UART_SetConfig+0x23e>
 80031a8:	22c0      	movs	r2, #192	; 0xc0
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d82e      	bhi.n	800320e <UART_SetConfig+0x24e>
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d012      	beq.n	80031de <UART_SetConfig+0x21e>
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	4293      	cmp	r3, r2
 80031be:	d826      	bhi.n	800320e <UART_SetConfig+0x24e>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <UART_SetConfig+0x20e>
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	00d2      	lsls	r2, r2, #3
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d010      	beq.n	80031ee <UART_SetConfig+0x22e>
 80031cc:	e01f      	b.n	800320e <UART_SetConfig+0x24e>
 80031ce:	231b      	movs	r3, #27
 80031d0:	2220      	movs	r2, #32
 80031d2:	4694      	mov	ip, r2
 80031d4:	44bc      	add	ip, r7
 80031d6:	4463      	add	r3, ip
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e026      	b.n	800322c <UART_SetConfig+0x26c>
 80031de:	231b      	movs	r3, #27
 80031e0:	2220      	movs	r2, #32
 80031e2:	4694      	mov	ip, r2
 80031e4:	44bc      	add	ip, r7
 80031e6:	4463      	add	r3, ip
 80031e8:	2202      	movs	r2, #2
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e01e      	b.n	800322c <UART_SetConfig+0x26c>
 80031ee:	231b      	movs	r3, #27
 80031f0:	2220      	movs	r2, #32
 80031f2:	4694      	mov	ip, r2
 80031f4:	44bc      	add	ip, r7
 80031f6:	4463      	add	r3, ip
 80031f8:	2204      	movs	r2, #4
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e016      	b.n	800322c <UART_SetConfig+0x26c>
 80031fe:	231b      	movs	r3, #27
 8003200:	2220      	movs	r2, #32
 8003202:	4694      	mov	ip, r2
 8003204:	44bc      	add	ip, r7
 8003206:	4463      	add	r3, ip
 8003208:	2208      	movs	r2, #8
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e00e      	b.n	800322c <UART_SetConfig+0x26c>
 800320e:	231b      	movs	r3, #27
 8003210:	2220      	movs	r2, #32
 8003212:	4694      	mov	ip, r2
 8003214:	44bc      	add	ip, r7
 8003216:	4463      	add	r3, ip
 8003218:	2210      	movs	r2, #16
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e006      	b.n	800322c <UART_SetConfig+0x26c>
 800321e:	231b      	movs	r3, #27
 8003220:	2220      	movs	r2, #32
 8003222:	4694      	mov	ip, r2
 8003224:	44bc      	add	ip, r7
 8003226:	4463      	add	r3, ip
 8003228:	2210      	movs	r2, #16
 800322a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <UART_SetConfig+0x324>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d000      	beq.n	8003238 <UART_SetConfig+0x278>
 8003236:	e0ad      	b.n	8003394 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003238:	231b      	movs	r3, #27
 800323a:	2220      	movs	r2, #32
 800323c:	4694      	mov	ip, r2
 800323e:	44bc      	add	ip, r7
 8003240:	4463      	add	r3, ip
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d015      	beq.n	8003274 <UART_SetConfig+0x2b4>
 8003248:	dc18      	bgt.n	800327c <UART_SetConfig+0x2bc>
 800324a:	2b04      	cmp	r3, #4
 800324c:	d00d      	beq.n	800326a <UART_SetConfig+0x2aa>
 800324e:	dc15      	bgt.n	800327c <UART_SetConfig+0x2bc>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <UART_SetConfig+0x29a>
 8003254:	2b02      	cmp	r3, #2
 8003256:	d005      	beq.n	8003264 <UART_SetConfig+0x2a4>
 8003258:	e010      	b.n	800327c <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325a:	f7ff f9c5 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 800325e:	0003      	movs	r3, r0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003262:	e015      	b.n	8003290 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <UART_SetConfig+0x340>)
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003268:	e012      	b.n	8003290 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326a:	f7ff f931 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800326e:	0003      	movs	r3, r0
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003272:	e00d      	b.n	8003290 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800327a:	e009      	b.n	8003290 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003280:	231a      	movs	r3, #26
 8003282:	2220      	movs	r2, #32
 8003284:	4694      	mov	ip, r2
 8003286:	44bc      	add	ip, r7
 8003288:	4463      	add	r3, ip
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
        break;
 800328e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d100      	bne.n	8003298 <UART_SetConfig+0x2d8>
 8003296:	e154      	b.n	8003542 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <UART_SetConfig+0x344>)
 800329e:	0052      	lsls	r2, r2, #1
 80032a0:	5ad3      	ldrh	r3, [r2, r3]
 80032a2:	0019      	movs	r1, r3
 80032a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032a6:	f7fc ff2f 	bl	8000108 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	0013      	movs	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d305      	bcc.n	80032ca <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d91e      	bls.n	8003308 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80032ca:	231a      	movs	r3, #26
 80032cc:	2220      	movs	r2, #32
 80032ce:	4694      	mov	ip, r2
 80032d0:	44bc      	add	ip, r7
 80032d2:	4463      	add	r3, ip
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e133      	b.n	8003542 <UART_SetConfig+0x582>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	cfff69f3 	.word	0xcfff69f3
 80032e0:	ffffcfff 	.word	0xffffcfff
 80032e4:	40008000 	.word	0x40008000
 80032e8:	11fff4ff 	.word	0x11fff4ff
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40004800 	.word	0x40004800
 80032fc:	40004c00 	.word	0x40004c00
 8003300:	00f42400 	.word	0x00f42400
 8003304:	080063ec 	.word	0x080063ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003314:	4b97      	ldr	r3, [pc, #604]	; (8003574 <UART_SetConfig+0x5b4>)
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	5ad3      	ldrh	r3, [r2, r3]
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	69b8      	ldr	r0, [r7, #24]
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	f7fd f864 	bl	80003f4 <__aeabi_uldivmod>
 800332c:	0002      	movs	r2, r0
 800332e:	000b      	movs	r3, r1
 8003330:	0e11      	lsrs	r1, r2, #24
 8003332:	021d      	lsls	r5, r3, #8
 8003334:	430d      	orrs	r5, r1
 8003336:	0214      	lsls	r4, r2, #8
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68b8      	ldr	r0, [r7, #8]
 8003346:	68f9      	ldr	r1, [r7, #12]
 8003348:	1900      	adds	r0, r0, r4
 800334a:	4169      	adcs	r1, r5
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f7fd f84b 	bl	80003f4 <__aeabi_uldivmod>
 800335e:	0002      	movs	r2, r0
 8003360:	000b      	movs	r3, r1
 8003362:	0013      	movs	r3, r2
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003368:	23c0      	movs	r3, #192	; 0xc0
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d309      	bcc.n	8003384 <UART_SetConfig+0x3c4>
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	035b      	lsls	r3, r3, #13
 8003376:	429a      	cmp	r2, r3
 8003378:	d204      	bcs.n	8003384 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	e0de      	b.n	8003542 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8003384:	231a      	movs	r3, #26
 8003386:	2220      	movs	r2, #32
 8003388:	4694      	mov	ip, r2
 800338a:	44bc      	add	ip, r7
 800338c:	4463      	add	r3, ip
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e0d6      	b.n	8003542 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	429a      	cmp	r2, r3
 800339e:	d000      	beq.n	80033a2 <UART_SetConfig+0x3e2>
 80033a0:	e074      	b.n	800348c <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80033a2:	231b      	movs	r3, #27
 80033a4:	2220      	movs	r2, #32
 80033a6:	4694      	mov	ip, r2
 80033a8:	44bc      	add	ip, r7
 80033aa:	4463      	add	r3, ip
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d015      	beq.n	80033de <UART_SetConfig+0x41e>
 80033b2:	dc18      	bgt.n	80033e6 <UART_SetConfig+0x426>
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d00d      	beq.n	80033d4 <UART_SetConfig+0x414>
 80033b8:	dc15      	bgt.n	80033e6 <UART_SetConfig+0x426>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <UART_SetConfig+0x404>
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d005      	beq.n	80033ce <UART_SetConfig+0x40e>
 80033c2:	e010      	b.n	80033e6 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c4:	f7ff f910 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 80033c8:	0003      	movs	r3, r0
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033cc:	e015      	b.n	80033fa <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <UART_SetConfig+0x5b8>)
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d2:	e012      	b.n	80033fa <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d4:	f7ff f87c 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 80033d8:	0003      	movs	r3, r0
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033dc:	e00d      	b.n	80033fa <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e4:	e009      	b.n	80033fa <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033ea:	231a      	movs	r3, #26
 80033ec:	2220      	movs	r2, #32
 80033ee:	4694      	mov	ip, r2
 80033f0:	44bc      	add	ip, r7
 80033f2:	4463      	add	r3, ip
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
        break;
 80033f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <UART_SetConfig+0x442>
 8003400:	e09f      	b.n	8003542 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <UART_SetConfig+0x5b4>)
 8003408:	0052      	lsls	r2, r2, #1
 800340a:	5ad3      	ldrh	r3, [r2, r3]
 800340c:	0019      	movs	r1, r3
 800340e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003410:	f7fc fe7a 	bl	8000108 <__udivsi3>
 8003414:	0003      	movs	r3, r0
 8003416:	005a      	lsls	r2, r3, #1
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	18d2      	adds	r2, r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0019      	movs	r1, r3
 8003426:	0010      	movs	r0, r2
 8003428:	f7fc fe6e 	bl	8000108 <__udivsi3>
 800342c:	0003      	movs	r3, r0
 800342e:	b29b      	uxth	r3, r3
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d921      	bls.n	800347c <UART_SetConfig+0x4bc>
 8003438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	429a      	cmp	r2, r3
 8003440:	d21c      	bcs.n	800347c <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	b29a      	uxth	r2, r3
 8003446:	200e      	movs	r0, #14
 8003448:	2420      	movs	r4, #32
 800344a:	193b      	adds	r3, r7, r4
 800344c:	181b      	adds	r3, r3, r0
 800344e:	210f      	movs	r1, #15
 8003450:	438a      	bics	r2, r1
 8003452:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	2207      	movs	r2, #7
 800345c:	4013      	ands	r3, r2
 800345e:	b299      	uxth	r1, r3
 8003460:	193b      	adds	r3, r7, r4
 8003462:	181b      	adds	r3, r3, r0
 8003464:	193a      	adds	r2, r7, r4
 8003466:	1812      	adds	r2, r2, r0
 8003468:	8812      	ldrh	r2, [r2, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	193a      	adds	r2, r7, r4
 8003474:	1812      	adds	r2, r2, r0
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	e062      	b.n	8003542 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 800347c:	231a      	movs	r3, #26
 800347e:	2220      	movs	r2, #32
 8003480:	4694      	mov	ip, r2
 8003482:	44bc      	add	ip, r7
 8003484:	4463      	add	r3, ip
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e05a      	b.n	8003542 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 800348c:	231b      	movs	r3, #27
 800348e:	2220      	movs	r2, #32
 8003490:	4694      	mov	ip, r2
 8003492:	44bc      	add	ip, r7
 8003494:	4463      	add	r3, ip
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d015      	beq.n	80034c8 <UART_SetConfig+0x508>
 800349c:	dc18      	bgt.n	80034d0 <UART_SetConfig+0x510>
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d00d      	beq.n	80034be <UART_SetConfig+0x4fe>
 80034a2:	dc15      	bgt.n	80034d0 <UART_SetConfig+0x510>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <UART_SetConfig+0x4ee>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d005      	beq.n	80034b8 <UART_SetConfig+0x4f8>
 80034ac:	e010      	b.n	80034d0 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ae:	f7ff f89b 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 80034b2:	0003      	movs	r3, r0
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b6:	e015      	b.n	80034e4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <UART_SetConfig+0x5b8>)
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034bc:	e012      	b.n	80034e4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7ff f807 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 80034c2:	0003      	movs	r3, r0
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c6:	e00d      	b.n	80034e4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ce:	e009      	b.n	80034e4 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034d4:	231a      	movs	r3, #26
 80034d6:	2220      	movs	r2, #32
 80034d8:	4694      	mov	ip, r2
 80034da:	44bc      	add	ip, r7
 80034dc:	4463      	add	r3, ip
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
        break;
 80034e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02b      	beq.n	8003542 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <UART_SetConfig+0x5b4>)
 80034f0:	0052      	lsls	r2, r2, #1
 80034f2:	5ad3      	ldrh	r3, [r2, r3]
 80034f4:	0019      	movs	r1, r3
 80034f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034f8:	f7fc fe06 	bl	8000108 <__udivsi3>
 80034fc:	0003      	movs	r3, r0
 80034fe:	001a      	movs	r2, r3
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	18d2      	adds	r2, r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0019      	movs	r1, r3
 800350e:	0010      	movs	r0, r2
 8003510:	f7fc fdfa 	bl	8000108 <__udivsi3>
 8003514:	0003      	movs	r3, r0
 8003516:	b29b      	uxth	r3, r3
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	2b0f      	cmp	r3, #15
 800351e:	d909      	bls.n	8003534 <UART_SetConfig+0x574>
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	025b      	lsls	r3, r3, #9
 8003526:	429a      	cmp	r2, r3
 8003528:	d204      	bcs.n	8003534 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e006      	b.n	8003542 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8003534:	231a      	movs	r3, #26
 8003536:	2220      	movs	r2, #32
 8003538:	4694      	mov	ip, r2
 800353a:	44bc      	add	ip, r7
 800353c:	4463      	add	r3, ip
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	226a      	movs	r2, #106	; 0x6a
 8003546:	2101      	movs	r1, #1
 8003548:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2268      	movs	r2, #104	; 0x68
 800354e:	2101      	movs	r1, #1
 8003550:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2200      	movs	r2, #0
 8003556:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	2200      	movs	r2, #0
 800355c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800355e:	231a      	movs	r3, #26
 8003560:	2220      	movs	r2, #32
 8003562:	4694      	mov	ip, r2
 8003564:	44bc      	add	ip, r7
 8003566:	4463      	add	r3, ip
 8003568:	781b      	ldrb	r3, [r3, #0]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b010      	add	sp, #64	; 0x40
 8003570:	bdb0      	pop	{r4, r5, r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	080063ec 	.word	0x080063ec
 8003578:	00f42400 	.word	0x00f42400

0800357c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d00b      	beq.n	80035a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <UART_AdvFeatureConfig+0x144>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <UART_AdvFeatureConfig+0x148>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	2204      	movs	r2, #4
 80035ce:	4013      	ands	r3, r2
 80035d0:	d00b      	beq.n	80035ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <UART_AdvFeatureConfig+0x14c>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2208      	movs	r2, #8
 80035f0:	4013      	ands	r3, r2
 80035f2:	d00b      	beq.n	800360c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a34      	ldr	r2, [pc, #208]	; (80036cc <UART_AdvFeatureConfig+0x150>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2210      	movs	r2, #16
 8003612:	4013      	ands	r3, r2
 8003614:	d00b      	beq.n	800362e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <UART_AdvFeatureConfig+0x154>)
 800361e:	4013      	ands	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	2220      	movs	r2, #32
 8003634:	4013      	ands	r3, r2
 8003636:	d00b      	beq.n	8003650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <UART_AdvFeatureConfig+0x158>)
 8003640:	4013      	ands	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	4013      	ands	r3, r2
 8003658:	d01d      	beq.n	8003696 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <UART_AdvFeatureConfig+0x15c>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	035b      	lsls	r3, r3, #13
 800367a:	429a      	cmp	r2, r3
 800367c:	d10b      	bne.n	8003696 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <UART_AdvFeatureConfig+0x160>)
 8003686:	4013      	ands	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	4013      	ands	r3, r2
 800369e:	d00b      	beq.n	80036b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <UART_AdvFeatureConfig+0x164>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	0019      	movs	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	fffdffff 	.word	0xfffdffff
 80036c4:	fffeffff 	.word	0xfffeffff
 80036c8:	fffbffff 	.word	0xfffbffff
 80036cc:	ffff7fff 	.word	0xffff7fff
 80036d0:	ffffefff 	.word	0xffffefff
 80036d4:	ffffdfff 	.word	0xffffdfff
 80036d8:	ffefffff 	.word	0xffefffff
 80036dc:	ff9fffff 	.word	0xff9fffff
 80036e0:	fff7ffff 	.word	0xfff7ffff

080036e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	228c      	movs	r2, #140	; 0x8c
 80036f0:	2100      	movs	r1, #0
 80036f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f4:	f7fd fb8a 	bl	8000e0c <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	4013      	ands	r3, r2
 8003706:	2b08      	cmp	r3, #8
 8003708:	d10c      	bne.n	8003724 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	0391      	lsls	r1, r2, #14
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <UART_CheckIdleState+0x90>)
 8003714:	9200      	str	r2, [sp, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	f000 f82e 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d001      	beq.n	8003724 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e023      	b.n	800376c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2204      	movs	r2, #4
 800372c:	4013      	ands	r3, r2
 800372e:	2b04      	cmp	r3, #4
 8003730:	d10c      	bne.n	800374c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	03d1      	lsls	r1, r2, #15
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <UART_CheckIdleState+0x90>)
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	f000 f81a 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d001      	beq.n	800374c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e00f      	b.n	800376c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2284      	movs	r2, #132	; 0x84
 8003750:	2120      	movs	r1, #32
 8003752:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2288      	movs	r2, #136	; 0x88
 8003758:	2120      	movs	r1, #32
 800375a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	01ffffff 	.word	0x01ffffff

08003778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b094      	sub	sp, #80	; 0x50
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	e0a7      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	3301      	adds	r3, #1
 800378e:	d100      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003790:	e0a3      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fd fb3b 	bl	8000e0c <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13f      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
 80037b2:	2301      	movs	r3, #1
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	494e      	ldr	r1, [pc, #312]	; (8003904 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	f383 8810 	msr	PRIMASK, r3
}
 80037d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
 80037e4:	2301      	movs	r3, #1
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2101      	movs	r1, #1
 80037fc:	438a      	bics	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003806:	f383 8810 	msr	PRIMASK, r3
}
 800380a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2284      	movs	r2, #132	; 0x84
 8003810:	2120      	movs	r1, #32
 8003812:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2288      	movs	r2, #136	; 0x88
 8003818:	2120      	movs	r1, #32
 800381a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e069      	b.n	80038fc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2204      	movs	r2, #4
 8003830:	4013      	ands	r3, r2
 8003832:	d052      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	401a      	ands	r2, r3
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	429a      	cmp	r2, r3
 8003846:	d148      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	613b      	str	r3, [r7, #16]
  return(result);
 8003858:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4924      	ldr	r1, [pc, #144]	; (8003904 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003874:	400a      	ands	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003884:	f3ef 8310 	mrs	r3, PRIMASK
 8003888:	61fb      	str	r3, [r7, #28]
  return(result);
 800388a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
 800388e:	2301      	movs	r3, #1
 8003890:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2101      	movs	r1, #1
 80038a6:	438a      	bics	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2284      	movs	r2, #132	; 0x84
 80038ba:	2120      	movs	r1, #32
 80038bc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2288      	movs	r2, #136	; 0x88
 80038c2:	2120      	movs	r1, #32
 80038c4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	228c      	movs	r2, #140	; 0x8c
 80038ca:	2120      	movs	r1, #32
 80038cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e010      	b.n	80038fc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	425a      	negs	r2, r3
 80038ea:	4153      	adcs	r3, r2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	001a      	movs	r2, r3
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d100      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0x182>
 80038f8:	e747      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b014      	add	sp, #80	; 0x50
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffffe5f 	.word	0xfffffe5f

08003908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UARTEx_DisableFifoMode+0x16>
 800391a:	2302      	movs	r3, #2
 800391c:	e027      	b.n	800396e <HAL_UARTEx_DisableFifoMode+0x66>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2280      	movs	r2, #128	; 0x80
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2284      	movs	r2, #132	; 0x84
 800392a:	2124      	movs	r1, #36	; 0x24
 800392c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	438a      	bics	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <HAL_UARTEx_DisableFifoMode+0x70>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2284      	movs	r2, #132	; 0x84
 8003960:	2120      	movs	r1, #32
 8003962:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	dfffffff 	.word	0xdfffffff

0800397c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e02e      	b.n	80039f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2284      	movs	r2, #132	; 0x84
 80039a0:	2124      	movs	r1, #36	; 0x24
 80039a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	08d9      	lsrs	r1, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f854 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2284      	movs	r2, #132	; 0x84
 80039e4:	2120      	movs	r1, #32
 80039e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e02f      	b.n	8003a74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	2124      	movs	r1, #36	; 0x24
 8003a22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f813 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2284      	movs	r2, #132	; 0x84
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	f1ffffff 	.word	0xf1ffffff

08003a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	226a      	movs	r2, #106	; 0x6a
 8003a94:	2101      	movs	r1, #1
 8003a96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2268      	movs	r2, #104	; 0x68
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003aa0:	e043      	b.n	8003b2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003aa2:	260f      	movs	r6, #15
 8003aa4:	19bb      	adds	r3, r7, r6
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aaa:	200e      	movs	r0, #14
 8003aac:	183b      	adds	r3, r7, r0
 8003aae:	2208      	movs	r2, #8
 8003ab0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	240d      	movs	r4, #13
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	0f5b      	lsrs	r3, r3, #29
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	250c      	movs	r5, #12
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	197a      	adds	r2, r7, r5
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	4914      	ldr	r1, [pc, #80]	; (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	435a      	muls	r2, r3
 8003ae8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	197b      	adds	r3, r7, r5
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af2:	0019      	movs	r1, r3
 8003af4:	f7fc fb92 	bl	800021c <__divsi3>
 8003af8:	0003      	movs	r3, r0
 8003afa:	b299      	uxth	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	226a      	movs	r2, #106	; 0x6a
 8003b00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b02:	19bb      	adds	r3, r7, r6
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	193a      	adds	r2, r7, r4
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
 8003b0e:	435a      	muls	r2, r3
 8003b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	f7fc fb7e 	bl	800021c <__divsi3>
 8003b20:	0003      	movs	r3, r0
 8003b22:	b299      	uxth	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2268      	movs	r2, #104	; 0x68
 8003b28:	5299      	strh	r1, [r3, r2]
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b005      	add	sp, #20
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	08006404 	.word	0x08006404
 8003b38:	0800640c 	.word	0x0800640c

08003b3c <__NVIC_SetPriority>:
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	0002      	movs	r2, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b50:	d828      	bhi.n	8003ba4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <__NVIC_SetPriority+0xd4>)
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	33c0      	adds	r3, #192	; 0xc0
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	589b      	ldr	r3, [r3, r2]
 8003b62:	1dfa      	adds	r2, r7, #7
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	0011      	movs	r1, r2
 8003b68:	2203      	movs	r2, #3
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	00d2      	lsls	r2, r2, #3
 8003b6e:	21ff      	movs	r1, #255	; 0xff
 8003b70:	4091      	lsls	r1, r2
 8003b72:	000a      	movs	r2, r1
 8003b74:	43d2      	mvns	r2, r2
 8003b76:	401a      	ands	r2, r3
 8003b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	401a      	ands	r2, r3
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	0018      	movs	r0, r3
 8003b88:	2303      	movs	r3, #3
 8003b8a:	4003      	ands	r3, r0
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b90:	481f      	ldr	r0, [pc, #124]	; (8003c10 <__NVIC_SetPriority+0xd4>)
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	33c0      	adds	r3, #192	; 0xc0
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	501a      	str	r2, [r3, r0]
}
 8003ba2:	e031      	b.n	8003c08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ba4:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <__NVIC_SetPriority+0xd8>)
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	0019      	movs	r1, r3
 8003bac:	230f      	movs	r3, #15
 8003bae:	400b      	ands	r3, r1
 8003bb0:	3b08      	subs	r3, #8
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3306      	adds	r3, #6
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	18d3      	adds	r3, r2, r3
 8003bba:	3304      	adds	r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1dfa      	adds	r2, r7, #7
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	21ff      	movs	r1, #255	; 0xff
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	43d2      	mvns	r2, r2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	401a      	ands	r2, r3
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	2303      	movs	r3, #3
 8003be6:	4003      	ands	r3, r0
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bec:	4809      	ldr	r0, [pc, #36]	; (8003c14 <__NVIC_SetPriority+0xd8>)
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	001c      	movs	r4, r3
 8003bf4:	230f      	movs	r3, #15
 8003bf6:	4023      	ands	r3, r4
 8003bf8:	3b08      	subs	r3, #8
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	3306      	adds	r3, #6
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	18c3      	adds	r3, r0, r3
 8003c04:	3304      	adds	r3, #4
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b003      	add	sp, #12
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Handler+0x1c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c20:	f001 fbbe 	bl	80053a0 <xTaskGetSchedulerState>
 8003c24:	0003      	movs	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c2a:	f002 f88d 	bl	8005d48 <xPortSysTickHandler>
  }
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	425b      	negs	r3, r3
 8003c40:	2100      	movs	r1, #0
 8003c42:	0018      	movs	r0, r3
 8003c44:	f7ff ff7a 	bl	8003b3c <__NVIC_SetPriority>
#endif
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c56:	f3ef 8305 	mrs	r3, IPSR
 8003c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c62:	2306      	movs	r3, #6
 8003c64:	425b      	negs	r3, r3
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	e00c      	b.n	8003c84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <osKernelInitialize+0x40>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <osKernelInitialize+0x40>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e002      	b.n	8003c84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	425b      	negs	r3, r3
 8003c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000090 	.word	0x20000090

08003c94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9a:	f3ef 8305 	mrs	r3, IPSR
 8003c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003ca0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ca6:	2306      	movs	r3, #6
 8003ca8:	425b      	negs	r3, r3
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	e010      	b.n	8003cd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <osKernelStart+0x48>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d109      	bne.n	8003cca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cb6:	f7ff ffbf 	bl	8003c38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <osKernelStart+0x48>)
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cc0:	f000 ff84 	bl	8004bcc <vTaskStartScheduler>
      stat = osOK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	e002      	b.n	8003cd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	425b      	negs	r3, r3
 8003cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cd0:	687b      	ldr	r3, [r7, #4]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	20000090 	.word	0x20000090

08003ce0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b08e      	sub	sp, #56	; 0x38
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf0:	f3ef 8305 	mrs	r3, IPSR
 8003cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8003cf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d000      	beq.n	8003cfe <osThreadNew+0x1e>
 8003cfc:	e081      	b.n	8003e02 <osThreadNew+0x122>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d100      	bne.n	8003d06 <osThreadNew+0x26>
 8003d04:	e07d      	b.n	8003e02 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d0a:	2318      	movs	r3, #24
 8003d0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	425b      	negs	r3, r3
 8003d16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d044      	beq.n	8003da8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <osThreadNew+0x4c>
        name = attr->name;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <osThreadNew+0x70>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b38      	cmp	r3, #56	; 0x38
 8003d44:	d804      	bhi.n	8003d50 <osThreadNew+0x70>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d001      	beq.n	8003d54 <osThreadNew+0x74>
        return (NULL);
 8003d50:	2300      	movs	r3, #0
 8003d52:	e057      	b.n	8003e04 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <osThreadNew+0xaa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2bbb      	cmp	r3, #187	; 0xbb
 8003d72:	d90a      	bls.n	8003d8a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <osThreadNew+0xaa>
        mem = 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e010      	b.n	8003dac <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <osThreadNew+0xcc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <osThreadNew+0xcc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <osThreadNew+0xcc>
          mem = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e001      	b.n	8003dac <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d112      	bne.n	8003dd8 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dba:	68bd      	ldr	r5, [r7, #8]
 8003dbc:	6a3c      	ldr	r4, [r7, #32]
 8003dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	9201      	str	r2, [sp, #4]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	002b      	movs	r3, r5
 8003dcc:	0022      	movs	r2, r4
 8003dce:	f000 fd3e 	bl	800484e <xTaskCreateStatic>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e014      	b.n	8003e02 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d111      	bne.n	8003e02 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68bc      	ldr	r4, [r7, #8]
 8003de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	2310      	movs	r3, #16
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	0023      	movs	r3, r4
 8003df4:	f000 fd6f 	bl	80048d6 <xTaskCreate>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <osThreadNew+0x122>
            hTask = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e02:	693b      	ldr	r3, [r7, #16]
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b00a      	add	sp, #40	; 0x28
 8003e0a:	bdb0      	pop	{r4, r5, r7, pc}

08003e0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e14:	f3ef 8305 	mrs	r3, IPSR
 8003e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <osDelay+0x1c>
    stat = osErrorISR;
 8003e20:	2306      	movs	r3, #6
 8003e22:	425b      	negs	r3, r3
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e008      	b.n	8003e3a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <osDelay+0x2e>
      vTaskDelay(ticks);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 fea3 	bl	8004b80 <vTaskDelay>
    }
  }

  return (stat);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <vApplicationGetIdleTaskMemory+0x28>)
 8003e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20000094 	.word	0x20000094
 8003e70:	20000150 	.word	0x20000150

08003e74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <vApplicationGetTimerTaskMemory+0x28>)
 8003e84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0052      	lsls	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000350 	.word	0x20000350
 8003ea0:	2000040c 	.word	0x2000040c

08003ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4252      	negs	r2, r2
 8003ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	001a      	movs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	d103      	bne.n	8003f58 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e00c      	b.n	8003f72 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e002      	b.n	8003f66 <vListInsert+0x2c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d2f6      	bcs.n	8003f60 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6892      	ldr	r2, [r2, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6852      	ldr	r2, [r2, #4]
 8003fc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d103      	bne.n	8003fda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1e5a      	subs	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xQueueGenericReset+0x18>
 800400a:	b672      	cpsid	i
 800400c:	e7fe      	b.n	800400c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800400e:	f001 fe3f 	bl	8005c90 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	434b      	muls	r3, r1
 8004020:	18d2      	adds	r2, r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	1e59      	subs	r1, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	434b      	muls	r3, r1
 8004044:	18d2      	adds	r2, r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2244      	movs	r2, #68	; 0x44
 800404e:	21ff      	movs	r1, #255	; 0xff
 8004050:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2245      	movs	r2, #69	; 0x45
 8004056:	21ff      	movs	r1, #255	; 0xff
 8004058:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3310      	adds	r3, #16
 800406c:	0018      	movs	r0, r3
 800406e:	f000 ffff 	bl	8005070 <xTaskRemoveFromEventList>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d00c      	beq.n	8004090 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004076:	f001 fdfb 	bl	8005c70 <vPortYield>
 800407a:	e009      	b.n	8004090 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3310      	adds	r3, #16
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff ff0f 	bl	8003ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3324      	adds	r3, #36	; 0x24
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff ff0a 	bl	8003ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004090:	f001 fe10 	bl	8005cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004094:	2301      	movs	r3, #1
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}

0800409e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800409e:	b590      	push	{r4, r7, lr}
 80040a0:	b089      	sub	sp, #36	; 0x24
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <xQueueGenericCreateStatic+0x18>
 80040b2:	b672      	cpsid	i
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <xQueueGenericCreateStatic+0x22>
 80040bc:	b672      	cpsid	i
 80040be:	e7fe      	b.n	80040be <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <xQueueGenericCreateStatic+0x2e>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <xQueueGenericCreateStatic+0x32>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <xQueueGenericCreateStatic+0x34>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <xQueueGenericCreateStatic+0x3c>
 80040d6:	b672      	cpsid	i
 80040d8:	e7fe      	b.n	80040d8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <xQueueGenericCreateStatic+0x48>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <xQueueGenericCreateStatic+0x4c>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <xQueueGenericCreateStatic+0x4e>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueGenericCreateStatic+0x56>
 80040f0:	b672      	cpsid	i
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040f4:	2350      	movs	r3, #80	; 0x50
 80040f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b50      	cmp	r3, #80	; 0x50
 80040fc:	d001      	beq.n	8004102 <xQueueGenericCreateStatic+0x64>
 80040fe:	b672      	cpsid	i
 8004100:	e7fe      	b.n	8004100 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004102:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2246      	movs	r2, #70	; 0x46
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004116:	2328      	movs	r3, #40	; 0x28
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	781c      	ldrb	r4, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0023      	movs	r3, r4
 8004128:	f000 f805 	bl	8004136 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800412c:	697b      	ldr	r3, [r7, #20]
	}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b007      	add	sp, #28
 8004134:	bd90      	pop	{r4, r7, pc}

08004136 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	001a      	movs	r2, r3
 8004144:	1cfb      	adds	r3, r7, #3
 8004146:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e002      	b.n	800415c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2101      	movs	r1, #1
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff ff42 	bl	8003ff6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1cfa      	adds	r2, r7, #3
 8004176:	214c      	movs	r1, #76	; 0x4c
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b004      	add	sp, #16
 8004182:	bd80      	pop	{r7, pc}

08004184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <xQueueGenericSend+0x20>
 80041a0:	b672      	cpsid	i
 80041a2:	e7fe      	b.n	80041a2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <xQueueGenericSend+0x2e>
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSend+0x32>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSend+0x34>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <xQueueGenericSend+0x3c>
 80041bc:	b672      	cpsid	i
 80041be:	e7fe      	b.n	80041be <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d103      	bne.n	80041ce <xQueueGenericSend+0x4a>
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericSend+0x4e>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericSend+0x50>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <xQueueGenericSend+0x58>
 80041d8:	b672      	cpsid	i
 80041da:	e7fe      	b.n	80041da <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041dc:	f001 f8e0 	bl	80053a0 <xTaskGetSchedulerState>
 80041e0:	1e03      	subs	r3, r0, #0
 80041e2:	d102      	bne.n	80041ea <xQueueGenericSend+0x66>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <xQueueGenericSend+0x6a>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <xQueueGenericSend+0x6c>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <xQueueGenericSend+0x74>
 80041f4:	b672      	cpsid	i
 80041f6:	e7fe      	b.n	80041f6 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041f8:	f001 fd4a 	bl	8005c90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <xQueueGenericSend+0x8a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d11e      	bne.n	800424c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 f9a2 	bl	800455e <prvCopyDataToQueue>
 800421a:	0003      	movs	r3, r0
 800421c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	0018      	movs	r0, r3
 800422c:	f000 ff20 	bl	8005070 <xTaskRemoveFromEventList>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d007      	beq.n	8004244 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004234:	f001 fd1c 	bl	8005c70 <vPortYield>
 8004238:	e004      	b.n	8004244 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004240:	f001 fd16 	bl	8005c70 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004244:	f001 fd36 	bl	8005cb4 <vPortExitCritical>
				return pdPASS;
 8004248:	2301      	movs	r3, #1
 800424a:	e05b      	b.n	8004304 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004252:	f001 fd2f 	bl	8005cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004256:	2300      	movs	r3, #0
 8004258:	e054      	b.n	8004304 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004260:	2314      	movs	r3, #20
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	0018      	movs	r0, r3
 8004266:	f000 ff5f 	bl	8005128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800426e:	f001 fd21 	bl	8005cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004272:	f000 fd09 	bl	8004c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004276:	f001 fd0b 	bl	8005c90 <vPortEnterCritical>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2244      	movs	r2, #68	; 0x44
 800427e:	5c9b      	ldrb	r3, [r3, r2]
 8004280:	b25b      	sxtb	r3, r3
 8004282:	3301      	adds	r3, #1
 8004284:	d103      	bne.n	800428e <xQueueGenericSend+0x10a>
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2244      	movs	r2, #68	; 0x44
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	2245      	movs	r2, #69	; 0x45
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	b25b      	sxtb	r3, r3
 8004296:	3301      	adds	r3, #1
 8004298:	d103      	bne.n	80042a2 <xQueueGenericSend+0x11e>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2245      	movs	r2, #69	; 0x45
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]
 80042a2:	f001 fd07 	bl	8005cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a6:	1d3a      	adds	r2, r7, #4
 80042a8:	2314      	movs	r3, #20
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 ff4e 	bl	8005150 <xTaskCheckForTimeOut>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d11e      	bne.n	80042f6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 fa54 	bl	8004768 <prvIsQueueFull>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d011      	beq.n	80042e8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	3310      	adds	r3, #16
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 fe8b 	bl	8004fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f9d3 	bl	8004680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042da:	f000 fce1 	bl	8004ca0 <xTaskResumeAll>
 80042de:	1e03      	subs	r3, r0, #0
 80042e0:	d18a      	bne.n	80041f8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80042e2:	f001 fcc5 	bl	8005c70 <vPortYield>
 80042e6:	e787      	b.n	80041f8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 f9c8 	bl	8004680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042f0:	f000 fcd6 	bl	8004ca0 <xTaskResumeAll>
 80042f4:	e780      	b.n	80041f8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 f9c1 	bl	8004680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fe:	f000 fccf 	bl	8004ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b00a      	add	sp, #40	; 0x28
 800430a:	bd80      	pop	{r7, pc}

0800430c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b08b      	sub	sp, #44	; 0x2c
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <xQueueGenericSendFromISR+0x1c>
 8004324:	b672      	cpsid	i
 8004326:	e7fe      	b.n	8004326 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <xQueueGenericSendFromISR+0x2a>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <xQueueGenericSendFromISR+0x2e>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericSendFromISR+0x30>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <xQueueGenericSendFromISR+0x38>
 8004340:	b672      	cpsid	i
 8004342:	e7fe      	b.n	8004342 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d103      	bne.n	8004352 <xQueueGenericSendFromISR+0x46>
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <xQueueGenericSendFromISR+0x4a>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <xQueueGenericSendFromISR+0x4c>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <xQueueGenericSendFromISR+0x54>
 800435c:	b672      	cpsid	i
 800435e:	e7fe      	b.n	800435e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004360:	f001 fcc0 	bl	8005ce4 <ulSetInterruptMaskFromISR>
 8004364:	0003      	movs	r3, r0
 8004366:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <xQueueGenericSendFromISR+0x6e>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d131      	bne.n	80043de <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800437a:	241b      	movs	r4, #27
 800437c:	193b      	adds	r3, r7, r4
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	2145      	movs	r1, #69	; 0x45
 8004382:	5c52      	ldrb	r2, [r2, r1]
 8004384:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f8e3 	bl	800455e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004398:	193b      	adds	r3, r7, r4
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b25b      	sxtb	r3, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	d111      	bne.n	80043c6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 fe5e 	bl	8005070 <xTaskRemoveFromEventList>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d00f      	beq.n	80043d8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e008      	b.n	80043d8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043c6:	231b      	movs	r3, #27
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	b259      	sxtb	r1, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2245      	movs	r2, #69	; 0x45
 80043d6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80043d8:	2301      	movs	r3, #1
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80043dc:	e001      	b.n	80043e2 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f001 fc83 	bl	8005cf0 <vClearInterruptMaskFromISR>

	return xReturn;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b00b      	add	sp, #44	; 0x2c
 80043f2:	bd90      	pop	{r4, r7, pc}

080043f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <xQueueReceive+0x1e>
 800440e:	b672      	cpsid	i
 8004410:	e7fe      	b.n	8004410 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <xQueueReceive+0x2c>
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <xQueueReceive+0x30>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <xQueueReceive+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <xQueueReceive+0x3a>
 800442a:	b672      	cpsid	i
 800442c:	e7fe      	b.n	800442c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800442e:	f000 ffb7 	bl	80053a0 <xTaskGetSchedulerState>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d102      	bne.n	800443c <xQueueReceive+0x48>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <xQueueReceive+0x4c>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <xQueueReceive+0x4e>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueReceive+0x56>
 8004446:	b672      	cpsid	i
 8004448:	e7fe      	b.n	8004448 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800444a:	f001 fc21 	bl	8005c90 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01a      	beq.n	8004490 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f000 f8e7 	bl	8004634 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	3310      	adds	r3, #16
 800447a:	0018      	movs	r0, r3
 800447c:	f000 fdf8 	bl	8005070 <xTaskRemoveFromEventList>
 8004480:	1e03      	subs	r3, r0, #0
 8004482:	d001      	beq.n	8004488 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004484:	f001 fbf4 	bl	8005c70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004488:	f001 fc14 	bl	8005cb4 <vPortExitCritical>
				return pdPASS;
 800448c:	2301      	movs	r3, #1
 800448e:	e062      	b.n	8004556 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004496:	f001 fc0d 	bl	8005cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800449a:	2300      	movs	r3, #0
 800449c:	e05b      	b.n	8004556 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044a4:	2314      	movs	r3, #20
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fe3d 	bl	8005128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044b2:	f001 fbff 	bl	8005cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044b6:	f000 fbe7 	bl	8004c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ba:	f001 fbe9 	bl	8005c90 <vPortEnterCritical>
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	2244      	movs	r2, #68	; 0x44
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	d103      	bne.n	80044d2 <xQueueReceive+0xde>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2244      	movs	r2, #68	; 0x44
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2245      	movs	r2, #69	; 0x45
 80044d6:	5c9b      	ldrb	r3, [r3, r2]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	d103      	bne.n	80044e6 <xQueueReceive+0xf2>
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	2245      	movs	r2, #69	; 0x45
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]
 80044e6:	f001 fbe5 	bl	8005cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ea:	1d3a      	adds	r2, r7, #4
 80044ec:	2314      	movs	r3, #20
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 fe2c 	bl	8005150 <xTaskCheckForTimeOut>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d11e      	bne.n	800453a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 f91c 	bl	800473c <prvIsQueueEmpty>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d011      	beq.n	800452c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	3324      	adds	r3, #36	; 0x24
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fd69 	bl	8004fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 f8b1 	bl	8004680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800451e:	f000 fbbf 	bl	8004ca0 <xTaskResumeAll>
 8004522:	1e03      	subs	r3, r0, #0
 8004524:	d191      	bne.n	800444a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004526:	f001 fba3 	bl	8005c70 <vPortYield>
 800452a:	e78e      	b.n	800444a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f8a6 	bl	8004680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004534:	f000 fbb4 	bl	8004ca0 <xTaskResumeAll>
 8004538:	e787      	b.n	800444a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f89f 	bl	8004680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004542:	f000 fbad 	bl	8004ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f8f7 	bl	800473c <prvIsQueueEmpty>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d100      	bne.n	8004554 <xQueueReceive+0x160>
 8004552:	e77a      	b.n	800444a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b00a      	add	sp, #40	; 0x28
 800455c:	bd80      	pop	{r7, pc}

0800455e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10e      	bne.n	800459a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d14e      	bne.n	8004622 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 ff25 	bl	80053d8 <xTaskPriorityDisinherit>
 800458e:	0003      	movs	r3, r0
 8004590:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	e043      	b.n	8004622 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d119      	bne.n	80045d4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6858      	ldr	r0, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	0019      	movs	r1, r3
 80045ac:	f001 fde0 	bl	8006170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	18d2      	adds	r2, r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d32b      	bcc.n	8004622 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e026      	b.n	8004622 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68d8      	ldr	r0, [r3, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	0019      	movs	r1, r3
 80045e0:	f001 fdc6 	bl	8006170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	425b      	negs	r3, r3
 80045ee:	18d2      	adds	r2, r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d207      	bcs.n	8004610 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	425b      	negs	r3, r3
 800460a:	18d2      	adds	r2, r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d105      	bne.n	8004622 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	3b01      	subs	r3, #1
 8004620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800462a:	697b      	ldr	r3, [r7, #20]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b006      	add	sp, #24
 8004632:	bd80      	pop	{r7, pc}

08004634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	18d2      	adds	r2, r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	d303      	bcc.n	8004668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68d9      	ldr	r1, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	0018      	movs	r0, r3
 8004674:	f001 fd7c 	bl	8006170 <memcpy>
	}
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004688:	f001 fb02 	bl	8005c90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800468c:	230f      	movs	r3, #15
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	2145      	movs	r1, #69	; 0x45
 8004694:	5c52      	ldrb	r2, [r2, r1]
 8004696:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004698:	e013      	b.n	80046c2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3324      	adds	r3, #36	; 0x24
 80046a6:	0018      	movs	r0, r3
 80046a8:	f000 fce2 	bl	8005070 <xTaskRemoveFromEventList>
 80046ac:	1e03      	subs	r3, r0, #0
 80046ae:	d001      	beq.n	80046b4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046b0:	f000 fd9e 	bl	80051f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046b4:	210f      	movs	r1, #15
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	dce5      	bgt.n	800469a <prvUnlockQueue+0x1a>
 80046ce:	e000      	b.n	80046d2 <prvUnlockQueue+0x52>
					break;
 80046d0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2245      	movs	r2, #69	; 0x45
 80046d6:	21ff      	movs	r1, #255	; 0xff
 80046d8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80046da:	f001 faeb 	bl	8005cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046de:	f001 fad7 	bl	8005c90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046e2:	230e      	movs	r3, #14
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	2144      	movs	r1, #68	; 0x44
 80046ea:	5c52      	ldrb	r2, [r2, r1]
 80046ec:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ee:	e013      	b.n	8004718 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3310      	adds	r3, #16
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fcb7 	bl	8005070 <xTaskRemoveFromEventList>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d001      	beq.n	800470a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004706:	f000 fd73 	bl	80051f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800470a:	210e      	movs	r1, #14
 800470c:	187b      	adds	r3, r7, r1
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	3b01      	subs	r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	187b      	adds	r3, r7, r1
 8004716:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004718:	230e      	movs	r3, #14
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b25b      	sxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	dce5      	bgt.n	80046f0 <prvUnlockQueue+0x70>
 8004724:	e000      	b.n	8004728 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004726:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2244      	movs	r2, #68	; 0x44
 800472c:	21ff      	movs	r1, #255	; 0xff
 800472e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004730:	f001 fac0 	bl	8005cb4 <vPortExitCritical>
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}

0800473c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004744:	f001 faa4 	bl	8005c90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004750:	2301      	movs	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e001      	b.n	800475a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800475a:	f001 faab 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b004      	add	sp, #16
 8004766:	bd80      	pop	{r7, pc}

08004768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004770:	f001 fa8e 	bl	8005c90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	429a      	cmp	r2, r3
 800477e:	d102      	bne.n	8004786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e001      	b.n	800478a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800478a:	f001 fa93 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}

08004798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e015      	b.n	80047d4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <vQueueAddToRegistry+0x4c>)
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	00d2      	lsls	r2, r2, #3
 80047ae:	58d3      	ldr	r3, [r2, r3]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <vQueueAddToRegistry+0x4c>)
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	00d2      	lsls	r2, r2, #3
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <vQueueAddToRegistry+0x4c>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	3304      	adds	r3, #4
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047cc:	e006      	b.n	80047dc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d9e6      	bls.n	80047a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20001bf0 	.word	0x20001bf0

080047e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047f8:	f001 fa4a 	bl	8005c90 <vPortEnterCritical>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2244      	movs	r2, #68	; 0x44
 8004800:	5c9b      	ldrb	r3, [r3, r2]
 8004802:	b25b      	sxtb	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	d103      	bne.n	8004810 <vQueueWaitForMessageRestricted+0x28>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2244      	movs	r2, #68	; 0x44
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2245      	movs	r2, #69	; 0x45
 8004814:	5c9b      	ldrb	r3, [r3, r2]
 8004816:	b25b      	sxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	d103      	bne.n	8004824 <vQueueWaitForMessageRestricted+0x3c>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2245      	movs	r2, #69	; 0x45
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]
 8004824:	f001 fa46 	bl	8005cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	0018      	movs	r0, r3
 800483a:	f000 fbf3 	bl	8005024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0018      	movs	r0, r3
 8004842:	f7ff ff1d 	bl	8004680 <prvUnlockQueue>
	}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b006      	add	sp, #24
 800484c:	bd80      	pop	{r7, pc}

0800484e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b08d      	sub	sp, #52	; 0x34
 8004852:	af04      	add	r7, sp, #16
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <xTaskCreateStatic+0x18>
 8004862:	b672      	cpsid	i
 8004864:	e7fe      	b.n	8004864 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xTaskCreateStatic+0x22>
 800486c:	b672      	cpsid	i
 800486e:	e7fe      	b.n	800486e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004870:	23bc      	movs	r3, #188	; 0xbc
 8004872:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2bbc      	cmp	r3, #188	; 0xbc
 8004878:	d001      	beq.n	800487e <xTaskCreateStatic+0x30>
 800487a:	b672      	cpsid	i
 800487c:	e7fe      	b.n	800487c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800487e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <xTaskCreateStatic+0x7a>
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01d      	beq.n	80048c8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004894:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	22b9      	movs	r2, #185	; 0xb9
 800489a:	2102      	movs	r1, #2
 800489c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800489e:	683c      	ldr	r4, [r7, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9303      	str	r3, [sp, #12]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	9302      	str	r3, [sp, #8]
 80048ae:	2318      	movs	r3, #24
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	0023      	movs	r3, r4
 80048ba:	f000 f859 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f8f5 	bl	8004ab0 <prvAddNewTaskToReadyList>
 80048c6:	e001      	b.n	80048cc <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048cc:	69bb      	ldr	r3, [r7, #24]
	}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b009      	add	sp, #36	; 0x24
 80048d4:	bd90      	pop	{r4, r7, pc}

080048d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048d6:	b590      	push	{r4, r7, lr}
 80048d8:	b08d      	sub	sp, #52	; 0x34
 80048da:	af04      	add	r7, sp, #16
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	1dbb      	adds	r3, r7, #6
 80048e4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048e6:	1dbb      	adds	r3, r7, #6
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f001 fa67 	bl	8005dc0 <pvPortMalloc>
 80048f2:	0003      	movs	r3, r0
 80048f4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048fc:	20bc      	movs	r0, #188	; 0xbc
 80048fe:	f001 fa5f 	bl	8005dc0 <pvPortMalloc>
 8004902:	0003      	movs	r3, r0
 8004904:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
 8004912:	e006      	b.n	8004922 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	0018      	movs	r0, r3
 8004918:	f001 fafe 	bl	8005f18 <vPortFree>
 800491c:	e001      	b.n	8004922 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01a      	beq.n	800495e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	22b9      	movs	r2, #185	; 0xb9
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	683c      	ldr	r4, [r7, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	0023      	movs	r3, r4
 800494c:	f000 f810 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	0018      	movs	r0, r3
 8004954:	f000 f8ac 	bl	8004ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e002      	b.n	8004964 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800495e:	2301      	movs	r3, #1
 8004960:	425b      	negs	r3, r3
 8004962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004964:	69bb      	ldr	r3, [r7, #24]
	}
 8004966:	0018      	movs	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	b009      	add	sp, #36	; 0x24
 800496c:	bd90      	pop	{r4, r7, pc}
	...

08004970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	001a      	movs	r2, r3
 8004988:	21a5      	movs	r1, #165	; 0xa5
 800498a:	f001 fbfa 	bl	8006182 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4942      	ldr	r1, [pc, #264]	; (8004aa0 <prvInitialiseNewTask+0x130>)
 8004996:	468c      	mov	ip, r1
 8004998:	4463      	add	r3, ip
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2207      	movs	r2, #7
 80049a4:	4393      	bics	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2207      	movs	r2, #7
 80049ac:	4013      	ands	r3, r2
 80049ae:	d001      	beq.n	80049b4 <prvInitialiseNewTask+0x44>
 80049b0:	b672      	cpsid	i
 80049b2:	e7fe      	b.n	80049b2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e013      	b.n	80049e8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	18d3      	adds	r3, r2, r3
 80049c6:	7818      	ldrb	r0, [r3, #0]
 80049c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ca:	2134      	movs	r1, #52	; 0x34
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	18d3      	adds	r3, r2, r3
 80049d0:	185b      	adds	r3, r3, r1
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	18d3      	adds	r3, r2, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3301      	adds	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d9e8      	bls.n	80049c0 <prvInitialiseNewTask+0x50>
 80049ee:	e000      	b.n	80049f2 <prvInitialiseNewTask+0x82>
			{
				break;
 80049f0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	2243      	movs	r2, #67	; 0x43
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]
 80049fa:	e003      	b.n	8004a04 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2234      	movs	r2, #52	; 0x34
 8004a00:	2100      	movs	r1, #0
 8004a02:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b37      	cmp	r3, #55	; 0x37
 8004a08:	d901      	bls.n	8004a0e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a0a:	2337      	movs	r3, #55	; 0x37
 8004a0c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	3304      	adds	r3, #4
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff fa5b 	bl	8003ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	3318      	adds	r3, #24
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7ff fa56 	bl	8003ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2238      	movs	r2, #56	; 0x38
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	22b4      	movs	r2, #180	; 0xb4
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	22b8      	movs	r2, #184	; 0xb8
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	3354      	adds	r3, #84	; 0x54
 8004a5e:	2260      	movs	r2, #96	; 0x60
 8004a60:	2100      	movs	r1, #0
 8004a62:	0018      	movs	r0, r3
 8004a64:	f001 fb8d 	bl	8006182 <memset>
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <prvInitialiseNewTask+0x134>)
 8004a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <prvInitialiseNewTask+0x138>)
 8004a72:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <prvInitialiseNewTask+0x13c>)
 8004a78:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f001 f86b 	bl	8005b5c <pxPortInitialiseStack>
 8004a86:	0002      	movs	r2, r0
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b006      	add	sp, #24
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	3fffffff 	.word	0x3fffffff
 8004aa4:	0800645c 	.word	0x0800645c
 8004aa8:	0800647c 	.word	0x0800647c
 8004aac:	0800643c 	.word	0x0800643c

08004ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ab8:	f001 f8ea 	bl	8005c90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <prvAddNewTaskToReadyList+0xb8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <prvAddNewTaskToReadyList+0xb8>)
 8004ac4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <prvAddNewTaskToReadyList+0xbc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ace:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <prvAddNewTaskToReadyList+0xbc>)
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad4:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <prvAddNewTaskToReadyList+0xb8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d110      	bne.n	8004afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004adc:	f000 fba2 	bl	8005224 <prvInitialiseTaskLists>
 8004ae0:	e00d      	b.n	8004afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <prvAddNewTaskToReadyList+0xc0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <prvAddNewTaskToReadyList+0xbc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d802      	bhi.n	8004afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004af8:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <prvAddNewTaskToReadyList+0xbc>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004b06:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d903      	bls.n	8004b24 <prvAddNewTaskToReadyList+0x74>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	0013      	movs	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <prvAddNewTaskToReadyList+0xcc>)
 8004b32:	189a      	adds	r2, r3, r2
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	0019      	movs	r1, r3
 8004b3a:	0010      	movs	r0, r2
 8004b3c:	f7ff f9db 	bl	8003ef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 f8b8 	bl	8005cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <prvAddNewTaskToReadyList+0xc0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <prvAddNewTaskToReadyList+0xbc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d201      	bcs.n	8004b5e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b5a:	f001 f889 	bl	8005c70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	20000ce0 	.word	0x20000ce0
 8004b6c:	2000080c 	.word	0x2000080c
 8004b70:	20000cec 	.word	0x20000cec
 8004b74:	20000cfc 	.word	0x20000cfc
 8004b78:	20000ce8 	.word	0x20000ce8
 8004b7c:	20000810 	.word	0x20000810

08004b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <vTaskDelay+0x48>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <vTaskDelay+0x1e>
 8004b9a:	b672      	cpsid	i
 8004b9c:	e7fe      	b.n	8004b9c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004b9e:	f000 f873 	bl	8004c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fc72 	bl	8005490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bac:	f000 f878 	bl	8004ca0 <xTaskResumeAll>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004bba:	f001 f859 	bl	8005c70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	20000d08 	.word	0x20000d08

08004bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bda:	003a      	movs	r2, r7
 8004bdc:	1d39      	adds	r1, r7, #4
 8004bde:	2308      	movs	r3, #8
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7ff f92e 	bl	8003e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004be8:	683c      	ldr	r4, [r7, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	491e      	ldr	r1, [pc, #120]	; (8004c68 <vTaskStartScheduler+0x9c>)
 8004bf0:	481e      	ldr	r0, [pc, #120]	; (8004c6c <vTaskStartScheduler+0xa0>)
 8004bf2:	9202      	str	r2, [sp, #8]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	f7ff fe26 	bl	800484e <xTaskCreateStatic>
 8004c02:	0002      	movs	r2, r0
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <vTaskStartScheduler+0xa4>)
 8004c06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <vTaskStartScheduler+0xa4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e001      	b.n	8004c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d103      	bne.n	8004c28 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004c20:	f000 fc8a 	bl	8005538 <xTimerCreateTimerTask>
 8004c24:	0003      	movs	r3, r0
 8004c26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d113      	bne.n	8004c56 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004c2e:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <vTaskStartScheduler+0xa8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3354      	adds	r3, #84	; 0x54
 8004c36:	001a      	movs	r2, r3
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <vTaskStartScheduler+0xac>)
 8004c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <vTaskStartScheduler+0xb0>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	4252      	negs	r2, r2
 8004c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <vTaskStartScheduler+0xb4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <vTaskStartScheduler+0xb8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c50:	f000 ffea 	bl	8005c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c54:	e004      	b.n	8004c60 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <vTaskStartScheduler+0x94>
 8004c5c:	b672      	cpsid	i
 8004c5e:	e7fe      	b.n	8004c5e <vTaskStartScheduler+0x92>
}
 8004c60:	46c0      	nop			; (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b005      	add	sp, #20
 8004c66:	bd90      	pop	{r4, r7, pc}
 8004c68:	08006350 	.word	0x08006350
 8004c6c:	08005205 	.word	0x08005205
 8004c70:	20000d04 	.word	0x20000d04
 8004c74:	2000080c 	.word	0x2000080c
 8004c78:	20000010 	.word	0x20000010
 8004c7c:	20000d00 	.word	0x20000d00
 8004c80:	20000cec 	.word	0x20000cec
 8004c84:	20000ce4 	.word	0x20000ce4

08004c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <vTaskSuspendAll+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <vTaskSuspendAll+0x14>)
 8004c94:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000d08 	.word	0x20000d08

08004ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cae:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <xTaskResumeAll+0xf8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <xTaskResumeAll+0x1a>
 8004cb6:	b672      	cpsid	i
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cba:	f000 ffe9 	bl	8005c90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <xTaskResumeAll+0xf8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <xTaskResumeAll+0xf8>)
 8004cc6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b33      	ldr	r3, [pc, #204]	; (8004d98 <xTaskResumeAll+0xf8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d15b      	bne.n	8004d88 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <xTaskResumeAll+0xfc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d057      	beq.n	8004d88 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd8:	e02f      	b.n	8004d3a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <xTaskResumeAll+0x100>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7ff f95d 	bl	8003fa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff f958 	bl	8003fa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <xTaskResumeAll+0x104>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d903      	bls.n	8004d0a <xTaskResumeAll+0x6a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <xTaskResumeAll+0x104>)
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	0013      	movs	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	189b      	adds	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <xTaskResumeAll+0x108>)
 8004d18:	189a      	adds	r2, r3, r2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	0019      	movs	r1, r3
 8004d20:	0010      	movs	r0, r2
 8004d22:	f7ff f8e8 	bl	8003ef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <xTaskResumeAll+0x10c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <xTaskResumeAll+0x110>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <xTaskResumeAll+0x100>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1cb      	bne.n	8004cda <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d48:	f000 fb0c 	bl	8005364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <xTaskResumeAll+0x114>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00f      	beq.n	8004d78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d58:	f000 f83c 	bl	8004dd4 <xTaskIncrementTick>
 8004d5c:	1e03      	subs	r3, r0, #0
 8004d5e:	d002      	beq.n	8004d66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <xTaskResumeAll+0x110>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f2      	bne.n	8004d58 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xTaskResumeAll+0x114>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <xTaskResumeAll+0x110>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d84:	f000 ff74 	bl	8005c70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d88:	f000 ff94 	bl	8005cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	20000d08 	.word	0x20000d08
 8004d9c:	20000ce0 	.word	0x20000ce0
 8004da0:	20000ca0 	.word	0x20000ca0
 8004da4:	20000ce8 	.word	0x20000ce8
 8004da8:	20000810 	.word	0x20000810
 8004dac:	2000080c 	.word	0x2000080c
 8004db0:	20000cf4 	.word	0x20000cf4
 8004db4:	20000cf0 	.word	0x20000cf0

08004db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <xTaskGetTickCount+0x18>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dc4:	687b      	ldr	r3, [r7, #4]
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000ce4 	.word	0x20000ce4

08004dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <xTaskIncrementTick+0x134>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d000      	beq.n	8004de8 <xTaskIncrementTick+0x14>
 8004de6:	e084      	b.n	8004ef2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004de8:	4b48      	ldr	r3, [pc, #288]	; (8004f0c <xTaskIncrementTick+0x138>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004df0:	4b46      	ldr	r3, [pc, #280]	; (8004f0c <xTaskIncrementTick+0x138>)
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d117      	bne.n	8004e2c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dfc:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <xTaskIncrementTick+0x13c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <xTaskIncrementTick+0x36>
 8004e06:	b672      	cpsid	i
 8004e08:	e7fe      	b.n	8004e08 <xTaskIncrementTick+0x34>
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <xTaskIncrementTick+0x13c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <xTaskIncrementTick+0x140>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <xTaskIncrementTick+0x13c>)
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <xTaskIncrementTick+0x140>)
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	4b3e      	ldr	r3, [pc, #248]	; (8004f18 <xTaskIncrementTick+0x144>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	4b3c      	ldr	r3, [pc, #240]	; (8004f18 <xTaskIncrementTick+0x144>)
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f000 fa9c 	bl	8005364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <xTaskIncrementTick+0x148>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d349      	bcc.n	8004eca <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e36:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <xTaskIncrementTick+0x13c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <xTaskIncrementTick+0x148>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	4252      	negs	r2, r2
 8004e46:	601a      	str	r2, [r3, #0]
					break;
 8004e48:	e03f      	b.n	8004eca <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <xTaskIncrementTick+0x13c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d203      	bcs.n	8004e6a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <xTaskIncrementTick+0x148>)
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e68:	e02f      	b.n	8004eca <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7ff f899 	bl	8003fa6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3318      	adds	r3, #24
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7ff f890 	bl	8003fa6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <xTaskIncrementTick+0x14c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d903      	bls.n	8004e9a <xTaskIncrementTick+0xc6>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <xTaskIncrementTick+0x14c>)
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	0013      	movs	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <xTaskIncrementTick+0x150>)
 8004ea8:	189a      	adds	r2, r3, r2
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3304      	adds	r3, #4
 8004eae:	0019      	movs	r1, r3
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	f7ff f820 	bl	8003ef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <xTaskIncrementTick+0x154>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3b8      	bcc.n	8004e36 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec8:	e7b5      	b.n	8004e36 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <xTaskIncrementTick+0x154>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	4914      	ldr	r1, [pc, #80]	; (8004f24 <xTaskIncrementTick+0x150>)
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	585b      	ldr	r3, [r3, r1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d901      	bls.n	8004ee4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e004      	b.n	8004efc <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <xTaskIncrementTick+0x15c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <xTaskIncrementTick+0x15c>)
 8004efa:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004efc:	697b      	ldr	r3, [r7, #20]
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b006      	add	sp, #24
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	20000d08 	.word	0x20000d08
 8004f0c:	20000ce4 	.word	0x20000ce4
 8004f10:	20000c98 	.word	0x20000c98
 8004f14:	20000c9c 	.word	0x20000c9c
 8004f18:	20000cf8 	.word	0x20000cf8
 8004f1c:	20000d00 	.word	0x20000d00
 8004f20:	20000ce8 	.word	0x20000ce8
 8004f24:	20000810 	.word	0x20000810
 8004f28:	2000080c 	.word	0x2000080c
 8004f2c:	20000cf4 	.word	0x20000cf4
 8004f30:	20000cf0 	.word	0x20000cf0

08004f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <vTaskSwitchContext+0x9c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <vTaskSwitchContext+0xa0>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f48:	e03d      	b.n	8004fc6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <vTaskSwitchContext+0xa0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <vTaskSwitchContext+0xa4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e007      	b.n	8004f68 <vTaskSwitchContext+0x34>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <vTaskSwitchContext+0x2e>
 8004f5e:	b672      	cpsid	i
 8004f60:	e7fe      	b.n	8004f60 <vTaskSwitchContext+0x2c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	491c      	ldr	r1, [pc, #112]	; (8004fdc <vTaskSwitchContext+0xa8>)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	0013      	movs	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	585b      	ldr	r3, [r3, r1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ee      	beq.n	8004f58 <vTaskSwitchContext+0x24>
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	0013      	movs	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	189b      	adds	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <vTaskSwitchContext+0xa8>)
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d104      	bne.n	8004faa <vTaskSwitchContext+0x76>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <vTaskSwitchContext+0xac>)
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <vTaskSwitchContext+0xa4>)
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <vTaskSwitchContext+0xac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3354      	adds	r3, #84	; 0x54
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <vTaskSwitchContext+0xb0>)
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000d08 	.word	0x20000d08
 8004fd4:	20000cf4 	.word	0x20000cf4
 8004fd8:	20000ce8 	.word	0x20000ce8
 8004fdc:	20000810 	.word	0x20000810
 8004fe0:	2000080c 	.word	0x2000080c
 8004fe4:	20000010 	.word	0x20000010

08004fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <vTaskPlaceOnEventList+0x14>
 8004ff8:	b672      	cpsid	i
 8004ffa:	e7fe      	b.n	8004ffa <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <vTaskPlaceOnEventList+0x38>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3318      	adds	r3, #24
 8005002:	001a      	movs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f7fe ff96 	bl	8003f3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2101      	movs	r1, #1
 8005012:	0018      	movs	r0, r3
 8005014:	f000 fa3c 	bl	8005490 <prvAddCurrentTaskToDelayedList>
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	2000080c 	.word	0x2000080c

08005024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <vTaskPlaceOnEventListRestricted+0x16>
 8005036:	b672      	cpsid	i
 8005038:	e7fe      	b.n	8005038 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <vTaskPlaceOnEventListRestricted+0x48>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3318      	adds	r3, #24
 8005040:	001a      	movs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	0011      	movs	r1, r2
 8005046:	0018      	movs	r0, r3
 8005048:	f7fe ff55 	bl	8003ef6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005052:	2301      	movs	r3, #1
 8005054:	425b      	negs	r3, r3
 8005056:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0011      	movs	r1, r2
 800505e:	0018      	movs	r0, r3
 8005060:	f000 fa16 	bl	8005490 <prvAddCurrentTaskToDelayedList>
	}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b004      	add	sp, #16
 800506a:	bd80      	pop	{r7, pc}
 800506c:	2000080c 	.word	0x2000080c

08005070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <xTaskRemoveFromEventList+0x1a>
 8005086:	b672      	cpsid	i
 8005088:	e7fe      	b.n	8005088 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	3318      	adds	r3, #24
 800508e:	0018      	movs	r0, r3
 8005090:	f7fe ff89 	bl	8003fa6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <xTaskRemoveFromEventList+0xa0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11d      	bne.n	80050d8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3304      	adds	r3, #4
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe ff80 	bl	8003fa6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <xTaskRemoveFromEventList+0xa4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d903      	bls.n	80050ba <xTaskRemoveFromEventList+0x4a>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b6:	4b17      	ldr	r3, [pc, #92]	; (8005114 <xTaskRemoveFromEventList+0xa4>)
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	0013      	movs	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a14      	ldr	r2, [pc, #80]	; (8005118 <xTaskRemoveFromEventList+0xa8>)
 80050c8:	189a      	adds	r2, r3, r2
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	0019      	movs	r1, r3
 80050d0:	0010      	movs	r0, r2
 80050d2:	f7fe ff10 	bl	8003ef6 <vListInsertEnd>
 80050d6:	e007      	b.n	80050e8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	3318      	adds	r3, #24
 80050dc:	001a      	movs	r2, r3
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <xTaskRemoveFromEventList+0xac>)
 80050e0:	0011      	movs	r1, r2
 80050e2:	0018      	movs	r0, r3
 80050e4:	f7fe ff07 	bl	8003ef6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <xTaskRemoveFromEventList+0xb0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d905      	bls.n	8005102 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <xTaskRemoveFromEventList+0xb4>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e001      	b.n	8005106 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b004      	add	sp, #16
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000d08 	.word	0x20000d08
 8005114:	20000ce8 	.word	0x20000ce8
 8005118:	20000810 	.word	0x20000810
 800511c:	20000ca0 	.word	0x20000ca0
 8005120:	2000080c 	.word	0x2000080c
 8005124:	20000cf4 	.word	0x20000cf4

08005128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <vTaskInternalSetTimeOutState+0x20>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <vTaskInternalSetTimeOutState+0x24>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	605a      	str	r2, [r3, #4]
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000cf8 	.word	0x20000cf8
 800514c:	20000ce4 	.word	0x20000ce4

08005150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <xTaskCheckForTimeOut+0x14>
 8005160:	b672      	cpsid	i
 8005162:	e7fe      	b.n	8005162 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xTaskCheckForTimeOut+0x1e>
 800516a:	b672      	cpsid	i
 800516c:	e7fe      	b.n	800516c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800516e:	f000 fd8f 	bl	8005c90 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <xTaskCheckForTimeOut+0x98>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	d102      	bne.n	8005190 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e024      	b.n	80051da <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b15      	ldr	r3, [pc, #84]	; (80051ec <xTaskCheckForTimeOut+0x9c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d007      	beq.n	80051ac <xTaskCheckForTimeOut+0x5c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e016      	b.n	80051da <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d20c      	bcs.n	80051d0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad2      	subs	r2, r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f7ff ffaf 	bl	8005128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e004      	b.n	80051da <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051d6:	2301      	movs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80051da:	f000 fd6b 	bl	8005cb4 <vPortExitCritical>

	return xReturn;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000ce4 	.word	0x20000ce4
 80051ec:	20000cf8 	.word	0x20000cf8

080051f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <vTaskMissedYield+0x10>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000cf4 	.word	0x20000cf4

08005204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800520c:	f000 f84e 	bl	80052ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <prvIdleTask+0x1c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d9f9      	bls.n	800520c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005218:	f000 fd2a 	bl	8005c70 <vPortYield>
		prvCheckTasksWaitingTermination();
 800521c:	e7f6      	b.n	800520c <prvIdleTask+0x8>
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	20000810 	.word	0x20000810

08005224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	e00c      	b.n	800524a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	0013      	movs	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	189b      	adds	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4a14      	ldr	r2, [pc, #80]	; (800528c <prvInitialiseTaskLists+0x68>)
 800523c:	189b      	adds	r3, r3, r2
 800523e:	0018      	movs	r0, r3
 8005240:	f7fe fe30 	bl	8003ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3301      	adds	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b37      	cmp	r3, #55	; 0x37
 800524e:	d9ef      	bls.n	8005230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <prvInitialiseTaskLists+0x6c>)
 8005252:	0018      	movs	r0, r3
 8005254:	f7fe fe26 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <prvInitialiseTaskLists+0x70>)
 800525a:	0018      	movs	r0, r3
 800525c:	f7fe fe22 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <prvInitialiseTaskLists+0x74>)
 8005262:	0018      	movs	r0, r3
 8005264:	f7fe fe1e 	bl	8003ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <prvInitialiseTaskLists+0x78>)
 800526a:	0018      	movs	r0, r3
 800526c:	f7fe fe1a 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <prvInitialiseTaskLists+0x7c>)
 8005272:	0018      	movs	r0, r3
 8005274:	f7fe fe16 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <prvInitialiseTaskLists+0x80>)
 800527a:	4a05      	ldr	r2, [pc, #20]	; (8005290 <prvInitialiseTaskLists+0x6c>)
 800527c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <prvInitialiseTaskLists+0x84>)
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <prvInitialiseTaskLists+0x70>)
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000810 	.word	0x20000810
 8005290:	20000c70 	.word	0x20000c70
 8005294:	20000c84 	.word	0x20000c84
 8005298:	20000ca0 	.word	0x20000ca0
 800529c:	20000cb4 	.word	0x20000cb4
 80052a0:	20000ccc 	.word	0x20000ccc
 80052a4:	20000c98 	.word	0x20000c98
 80052a8:	20000c9c 	.word	0x20000c9c

080052ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052b2:	e01a      	b.n	80052ea <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80052b4:	f000 fcec 	bl	8005c90 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <prvCheckTasksWaitingTermination+0x50>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7fe fe6e 	bl	8003fa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <prvCheckTasksWaitingTermination+0x54>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <prvCheckTasksWaitingTermination+0x54>)
 80052d2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <prvCheckTasksWaitingTermination+0x58>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <prvCheckTasksWaitingTermination+0x58>)
 80052dc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80052de:	f000 fce9 	bl	8005cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f80f 	bl	8005308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <prvCheckTasksWaitingTermination+0x58>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e0      	bne.n	80052b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000cb4 	.word	0x20000cb4
 8005300:	20000ce0 	.word	0x20000ce0
 8005304:	20000cc8 	.word	0x20000cc8

08005308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3354      	adds	r3, #84	; 0x54
 8005314:	0018      	movs	r0, r3
 8005316:	f000 ff49 	bl	80061ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	22b9      	movs	r2, #185	; 0xb9
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	0018      	movs	r0, r3
 800532a:	f000 fdf5 	bl	8005f18 <vPortFree>
				vPortFree( pxTCB );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	f000 fdf1 	bl	8005f18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005336:	e010      	b.n	800535a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	22b9      	movs	r2, #185	; 0xb9
 800533c:	5c9b      	ldrb	r3, [r3, r2]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d104      	bne.n	800534c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0018      	movs	r0, r3
 8005346:	f000 fde7 	bl	8005f18 <vPortFree>
	}
 800534a:	e006      	b.n	800535a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	22b9      	movs	r2, #185	; 0xb9
 8005350:	5c9b      	ldrb	r3, [r3, r2]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d001      	beq.n	800535a <prvDeleteTCB+0x52>
 8005356:	b672      	cpsid	i
 8005358:	e7fe      	b.n	8005358 <prvDeleteTCB+0x50>
	}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b002      	add	sp, #8
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <prvResetNextTaskUnblockTime+0x34>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <prvResetNextTaskUnblockTime+0x38>)
 8005376:	2201      	movs	r2, #1
 8005378:	4252      	negs	r2, r2
 800537a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800537c:	e008      	b.n	8005390 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <prvResetNextTaskUnblockTime+0x34>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <prvResetNextTaskUnblockTime+0x38>)
 800538e:	601a      	str	r2, [r3, #0]
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000c98 	.word	0x20000c98
 800539c:	20000d00 	.word	0x20000d00

080053a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <xTaskGetSchedulerState+0x30>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053ae:	2301      	movs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	e008      	b.n	80053c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <xTaskGetSchedulerState+0x34>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053bc:	2302      	movs	r3, #2
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	e001      	b.n	80053c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053c6:	687b      	ldr	r3, [r7, #4]
	}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b002      	add	sp, #8
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000cec 	.word	0x20000cec
 80053d4:	20000d08 	.word	0x20000d08

080053d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d044      	beq.n	8005478 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053ee:	4b25      	ldr	r3, [pc, #148]	; (8005484 <xTaskPriorityDisinherit+0xac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <xTaskPriorityDisinherit+0x24>
 80053f8:	b672      	cpsid	i
 80053fa:	e7fe      	b.n	80053fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <xTaskPriorityDisinherit+0x30>
 8005404:	b672      	cpsid	i
 8005406:	e7fe      	b.n	8005406 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	1e5a      	subs	r2, r3, #1
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	429a      	cmp	r2, r3
 800541c:	d02c      	beq.n	8005478 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	2b00      	cmp	r3, #0
 8005424:	d128      	bne.n	8005478 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3304      	adds	r3, #4
 800542a:	0018      	movs	r0, r3
 800542c:	f7fe fdbb 	bl	8003fa6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	2238      	movs	r2, #56	; 0x38
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <xTaskPriorityDisinherit+0xb0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d903      	bls.n	8005458 <xTaskPriorityDisinherit+0x80>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <xTaskPriorityDisinherit+0xb0>)
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	0013      	movs	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	189b      	adds	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <xTaskPriorityDisinherit+0xb4>)
 8005466:	189a      	adds	r2, r3, r2
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	3304      	adds	r3, #4
 800546c:	0019      	movs	r1, r3
 800546e:	0010      	movs	r0, r2
 8005470:	f7fe fd41 	bl	8003ef6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005478:	68fb      	ldr	r3, [r7, #12]
	}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b004      	add	sp, #16
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	2000080c 	.word	0x2000080c
 8005488:	20000ce8 	.word	0x20000ce8
 800548c:	20000810 	.word	0x20000810

08005490 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <prvAddCurrentTaskToDelayedList+0x90>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3304      	adds	r3, #4
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7fe fd7d 	bl	8003fa6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	d10b      	bne.n	80054ca <prvAddCurrentTaskToDelayedList+0x3a>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <prvAddCurrentTaskToDelayedList+0x98>)
 80054c0:	0011      	movs	r1, r2
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7fe fd17 	bl	8003ef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054c8:	e026      	b.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d209      	bcs.n	80054f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <prvAddCurrentTaskToDelayedList+0x9c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3304      	adds	r3, #4
 80054ec:	0019      	movs	r1, r3
 80054ee:	0010      	movs	r0, r2
 80054f0:	f7fe fd23 	bl	8003f3a <vListInsert>
}
 80054f4:	e010      	b.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3304      	adds	r3, #4
 8005500:	0019      	movs	r1, r3
 8005502:	0010      	movs	r0, r2
 8005504:	f7fe fd19 	bl	8003f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	429a      	cmp	r2, r3
 8005510:	d202      	bcs.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	601a      	str	r2, [r3, #0]
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000ce4 	.word	0x20000ce4
 8005524:	2000080c 	.word	0x2000080c
 8005528:	20000ccc 	.word	0x20000ccc
 800552c:	20000c9c 	.word	0x20000c9c
 8005530:	20000c98 	.word	0x20000c98
 8005534:	20000d00 	.word	0x20000d00

08005538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005542:	f000 fac9 	bl	8005ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <xTimerCreateTimerTask+0x6c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d020      	beq.n	8005590 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005556:	003a      	movs	r2, r7
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	2308      	movs	r3, #8
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	0018      	movs	r0, r3
 8005560:	f7fe fc88 	bl	8003e74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005564:	683c      	ldr	r4, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	490f      	ldr	r1, [pc, #60]	; (80055a8 <xTimerCreateTimerTask+0x70>)
 800556c:	480f      	ldr	r0, [pc, #60]	; (80055ac <xTimerCreateTimerTask+0x74>)
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2302      	movs	r3, #2
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	0022      	movs	r2, r4
 800557a:	f7ff f968 	bl	800484e <xTaskCreateStatic>
 800557e:	0002      	movs	r2, r0
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <xTimerCreateTimerTask+0x78>)
 8005582:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <xTimerCreateTimerTask+0x78>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <xTimerCreateTimerTask+0x62>
 8005596:	b672      	cpsid	i
 8005598:	e7fe      	b.n	8005598 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b005      	add	sp, #20
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	20000d3c 	.word	0x20000d3c
 80055a8:	08006358 	.word	0x08006358
 80055ac:	080056d1 	.word	0x080056d1
 80055b0:	20000d40 	.word	0x20000d40

080055b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b08b      	sub	sp, #44	; 0x2c
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xTimerGenericCommand+0x1c>
 80055cc:	b672      	cpsid	i
 80055ce:	e7fe      	b.n	80055ce <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <xTimerGenericCommand+0x90>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d030      	beq.n	800563a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055d8:	2414      	movs	r4, #20
 80055da:	193b      	adds	r3, r7, r4
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055e0:	193b      	adds	r3, r7, r4
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	dc19      	bgt.n	8005626 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055f2:	f7ff fed5 	bl	80053a0 <xTaskGetSchedulerState>
 80055f6:	0003      	movs	r3, r0
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d109      	bne.n	8005610 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <xTimerGenericCommand+0x90>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005602:	1939      	adds	r1, r7, r4
 8005604:	2300      	movs	r3, #0
 8005606:	f7fe fdbd 	bl	8004184 <xQueueGenericSend>
 800560a:	0003      	movs	r3, r0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e014      	b.n	800563a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <xTimerGenericCommand+0x90>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	2314      	movs	r3, #20
 8005616:	18f9      	adds	r1, r7, r3
 8005618:	2300      	movs	r3, #0
 800561a:	2200      	movs	r2, #0
 800561c:	f7fe fdb2 	bl	8004184 <xQueueGenericSend>
 8005620:	0003      	movs	r3, r0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	e009      	b.n	800563a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005626:	4b07      	ldr	r3, [pc, #28]	; (8005644 <xTimerGenericCommand+0x90>)
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	2314      	movs	r3, #20
 800562e:	18f9      	adds	r1, r7, r3
 8005630:	2300      	movs	r3, #0
 8005632:	f7fe fe6b 	bl	800430c <xQueueGenericSendFromISR>
 8005636:	0003      	movs	r3, r0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b00b      	add	sp, #44	; 0x2c
 8005642:	bd90      	pop	{r4, r7, pc}
 8005644:	20000d3c 	.word	0x20000d3c

08005648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af02      	add	r7, sp, #8
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <prvProcessExpiredTimer+0x84>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3304      	adds	r3, #4
 8005660:	0018      	movs	r0, r3
 8005662:	f7fe fca0 	bl	8003fa6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2228      	movs	r2, #40	; 0x28
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	001a      	movs	r2, r3
 800566e:	2304      	movs	r3, #4
 8005670:	4013      	ands	r3, r2
 8005672:	d019      	beq.n	80056a8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	18d1      	adds	r1, r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f8c3 	bl	800580c <prvInsertTimerInActiveList>
 8005686:	1e03      	subs	r3, r0, #0
 8005688:	d017      	beq.n	80056ba <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2300      	movs	r3, #0
 8005694:	2100      	movs	r1, #0
 8005696:	f7ff ff8d 	bl	80055b4 <xTimerGenericCommand>
 800569a:	0003      	movs	r3, r0
 800569c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <prvProcessExpiredTimer+0x72>
 80056a4:	b672      	cpsid	i
 80056a6:	e7fe      	b.n	80056a6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2228      	movs	r2, #40	; 0x28
 80056ac:	5c9b      	ldrb	r3, [r3, r2]
 80056ae:	2201      	movs	r2, #1
 80056b0:	4393      	bics	r3, r2
 80056b2:	b2d9      	uxtb	r1, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2228      	movs	r2, #40	; 0x28
 80056b8:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	0010      	movs	r0, r2
 80056c2:	4798      	blx	r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b004      	add	sp, #16
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000d34 	.word	0x20000d34

080056d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056d8:	2308      	movs	r3, #8
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f853 	bl	8005788 <prvGetNextExpireTime>
 80056e2:	0003      	movs	r3, r0
 80056e4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 f803 	bl	80056f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056f2:	f000 f8cd 	bl	8005890 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f6:	e7ef      	b.n	80056d8 <prvTimerTask+0x8>

080056f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005702:	f7ff fac1 	bl	8004c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005706:	2308      	movs	r3, #8
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f85e 	bl	80057cc <prvSampleTimeNow>
 8005710:	0003      	movs	r3, r0
 8005712:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d12b      	bne.n	8005772 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10c      	bne.n	800573a <prvProcessTimerOrBlockTask+0x42>
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d808      	bhi.n	800573a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005728:	f7ff faba 	bl	8004ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0011      	movs	r1, r2
 8005732:	0018      	movs	r0, r3
 8005734:	f7ff ff88 	bl	8005648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005738:	e01d      	b.n	8005776 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <prvProcessTimerOrBlockTask+0x88>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <prvProcessTimerOrBlockTask+0x56>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <prvProcessTimerOrBlockTask+0x58>
 800574e:	2300      	movs	r3, #0
 8005750:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <prvProcessTimerOrBlockTask+0x8c>)
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	0019      	movs	r1, r3
 8005760:	f7ff f842 	bl	80047e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005764:	f7ff fa9c 	bl	8004ca0 <xTaskResumeAll>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d104      	bne.n	8005776 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800576c:	f000 fa80 	bl	8005c70 <vPortYield>
}
 8005770:	e001      	b.n	8005776 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8005772:	f7ff fa95 	bl	8004ca0 <xTaskResumeAll>
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b004      	add	sp, #16
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	20000d38 	.word	0x20000d38
 8005784:	20000d3c 	.word	0x20000d3c

08005788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <prvGetNextExpireTime+0x40>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <prvGetNextExpireTime+0x16>
 800579a:	2201      	movs	r2, #1
 800579c:	e000      	b.n	80057a0 <prvGetNextExpireTime+0x18>
 800579e:	2200      	movs	r2, #0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <prvGetNextExpireTime+0x40>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e001      	b.n	80057bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b004      	add	sp, #16
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	20000d34 	.word	0x20000d34

080057cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057d4:	f7ff faf0 	bl	8004db8 <xTaskGetTickCount>
 80057d8:	0003      	movs	r3, r0
 80057da:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <prvSampleTimeNow+0x3c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d205      	bcs.n	80057f2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80057e6:	f000 f919 	bl	8005a1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	e002      	b.n	80057f8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <prvSampleTimeNow+0x3c>)
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000d44 	.word	0x20000d44

0800580c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d812      	bhi.n	8005858 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e01b      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <prvInsertTimerInActiveList+0x7c>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3304      	adds	r3, #4
 800584e:	0019      	movs	r1, r3
 8005850:	0010      	movs	r0, r2
 8005852:	f7fe fb72 	bl	8003f3a <vListInsert>
 8005856:	e012      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d206      	bcs.n	800586e <prvInsertTimerInActiveList+0x62>
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e007      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <prvInsertTimerInActiveList+0x80>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	0019      	movs	r1, r3
 8005878:	0010      	movs	r0, r2
 800587a:	f7fe fb5e 	bl	8003f3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800587e:	697b      	ldr	r3, [r7, #20]
}
 8005880:	0018      	movs	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	b006      	add	sp, #24
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000d38 	.word	0x20000d38
 800588c:	20000d34 	.word	0x20000d34

08005890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b08d      	sub	sp, #52	; 0x34
 8005894:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005896:	e0ac      	b.n	80059f2 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005898:	2208      	movs	r2, #8
 800589a:	18bb      	adds	r3, r7, r2
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da0f      	bge.n	80058c2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058a2:	18bb      	adds	r3, r7, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <prvProcessReceivedCommands+0x22>
 80058ae:	b672      	cpsid	i
 80058b0:	e7fe      	b.n	80058b0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	6858      	ldr	r0, [r3, #4]
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0019      	movs	r1, r3
 80058c0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058c2:	2208      	movs	r2, #8
 80058c4:	18bb      	adds	r3, r7, r2
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da00      	bge.n	80058ce <prvProcessReceivedCommands+0x3e>
 80058cc:	e090      	b.n	80059f0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058ce:	18bb      	adds	r3, r7, r2
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	3304      	adds	r3, #4
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7fe fb60 	bl	8003fa6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff ff6f 	bl	80057cc <prvSampleTimeNow>
 80058ee:	0003      	movs	r3, r0
 80058f0:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80058f2:	2308      	movs	r3, #8
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b09      	cmp	r3, #9
 80058fa:	d900      	bls.n	80058fe <prvProcessReceivedCommands+0x6e>
 80058fc:	e079      	b.n	80059f2 <prvProcessReceivedCommands+0x162>
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	4b44      	ldr	r3, [pc, #272]	; (8005a14 <prvProcessReceivedCommands+0x184>)
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2228      	movs	r2, #40	; 0x28
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	2201      	movs	r2, #1
 8005910:	4313      	orrs	r3, r2
 8005912:	b2d9      	uxtb	r1, r3
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2228      	movs	r2, #40	; 0x28
 8005918:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800591a:	2408      	movs	r4, #8
 800591c:	193b      	adds	r3, r7, r4
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	18d1      	adds	r1, r2, r3
 8005926:	193b      	adds	r3, r7, r4
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	6a38      	ldr	r0, [r7, #32]
 800592e:	f7ff ff6d 	bl	800580c <prvInsertTimerInActiveList>
 8005932:	1e03      	subs	r3, r0, #0
 8005934:	d05d      	beq.n	80059f2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	0010      	movs	r0, r2
 800593e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2228      	movs	r2, #40	; 0x28
 8005944:	5c9b      	ldrb	r3, [r3, r2]
 8005946:	001a      	movs	r2, r3
 8005948:	2304      	movs	r3, #4
 800594a:	4013      	ands	r3, r2
 800594c:	d051      	beq.n	80059f2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800594e:	193b      	adds	r3, r7, r4
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	18d2      	adds	r2, r2, r3
 8005958:	6a38      	ldr	r0, [r7, #32]
 800595a:	2300      	movs	r3, #0
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	2100      	movs	r1, #0
 8005962:	f7ff fe27 	bl	80055b4 <xTimerGenericCommand>
 8005966:	0003      	movs	r3, r0
 8005968:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d140      	bne.n	80059f2 <prvProcessReceivedCommands+0x162>
 8005970:	b672      	cpsid	i
 8005972:	e7fe      	b.n	8005972 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2228      	movs	r2, #40	; 0x28
 8005978:	5c9b      	ldrb	r3, [r3, r2]
 800597a:	2201      	movs	r2, #1
 800597c:	4393      	bics	r3, r2
 800597e:	b2d9      	uxtb	r1, r3
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2228      	movs	r2, #40	; 0x28
 8005984:	5499      	strb	r1, [r3, r2]
					break;
 8005986:	e034      	b.n	80059f2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2228      	movs	r2, #40	; 0x28
 800598c:	5c9b      	ldrb	r3, [r3, r2]
 800598e:	2201      	movs	r2, #1
 8005990:	4313      	orrs	r3, r2
 8005992:	b2d9      	uxtb	r1, r3
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2228      	movs	r2, #40	; 0x28
 8005998:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800599a:	2308      	movs	r3, #8
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <prvProcessReceivedCommands+0x120>
 80059ac:	b672      	cpsid	i
 80059ae:	e7fe      	b.n	80059ae <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	18d1      	adds	r1, r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	6a38      	ldr	r0, [r7, #32]
 80059be:	f7ff ff25 	bl	800580c <prvInsertTimerInActiveList>
					break;
 80059c2:	e016      	b.n	80059f2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2228      	movs	r2, #40	; 0x28
 80059c8:	5c9b      	ldrb	r3, [r3, r2]
 80059ca:	001a      	movs	r2, r3
 80059cc:	2302      	movs	r3, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	d104      	bne.n	80059dc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fa9f 	bl	8005f18 <vPortFree>
 80059da:	e00a      	b.n	80059f2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2228      	movs	r2, #40	; 0x28
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	2201      	movs	r2, #1
 80059e4:	4393      	bics	r3, r2
 80059e6:	b2d9      	uxtb	r1, r3
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2228      	movs	r2, #40	; 0x28
 80059ec:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059ee:	e000      	b.n	80059f2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059f0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <prvProcessReceivedCommands+0x188>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2208      	movs	r2, #8
 80059f8:	18b9      	adds	r1, r7, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fe fcf9 	bl	80043f4 <xQueueReceive>
 8005a02:	1e03      	subs	r3, r0, #0
 8005a04:	d000      	beq.n	8005a08 <prvProcessReceivedCommands+0x178>
 8005a06:	e747      	b.n	8005898 <prvProcessReceivedCommands+0x8>
	}
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b00b      	add	sp, #44	; 0x2c
 8005a10:	bd90      	pop	{r4, r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	08006414 	.word	0x08006414
 8005a18:	20000d3c 	.word	0x20000d3c

08005a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a22:	e041      	b.n	8005aa8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a24:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2e:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7fe fab2 	bl	8003fa6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	0010      	movs	r0, r2
 8005a4a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2228      	movs	r2, #40	; 0x28
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	001a      	movs	r2, r3
 8005a54:	2304      	movs	r3, #4
 8005a56:	4013      	ands	r3, r2
 8005a58:	d026      	beq.n	8005aa8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	18d3      	adds	r3, r2, r3
 8005a62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d90e      	bls.n	8005a8a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	0019      	movs	r1, r3
 8005a82:	0010      	movs	r0, r2
 8005a84:	f7fe fa59 	bl	8003f3a <vListInsert>
 8005a88:	e00e      	b.n	8005aa8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	f7ff fd8d 	bl	80055b4 <xTimerGenericCommand>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <prvSwitchTimerLists+0x8c>
 8005aa4:	b672      	cpsid	i
 8005aa6:	e7fe      	b.n	8005aa6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1b8      	bne.n	8005a24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <prvSwitchTimerLists+0xb8>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <prvSwitchTimerLists+0xb4>)
 8005abe:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005ac0:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <prvSwitchTimerLists+0xb8>)
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	601a      	str	r2, [r3, #0]
}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b006      	add	sp, #24
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	20000d34 	.word	0x20000d34
 8005ad4:	20000d38 	.word	0x20000d38

08005ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ade:	f000 f8d7 	bl	8005c90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <prvCheckForValidListAndQueue+0x64>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d123      	bne.n	8005b32 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <prvCheckForValidListAndQueue+0x68>)
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fe f9d9 	bl	8003ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvCheckForValidListAndQueue+0x6c>)
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fe f9d5 	bl	8003ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <prvCheckForValidListAndQueue+0x70>)
 8005afc:	4a10      	ldr	r2, [pc, #64]	; (8005b40 <prvCheckForValidListAndQueue+0x68>)
 8005afe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <prvCheckForValidListAndQueue+0x74>)
 8005b02:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <prvCheckForValidListAndQueue+0x6c>)
 8005b04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <prvCheckForValidListAndQueue+0x78>)
 8005b08:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <prvCheckForValidListAndQueue+0x7c>)
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	9100      	str	r1, [sp, #0]
 8005b0e:	2110      	movs	r1, #16
 8005b10:	200a      	movs	r0, #10
 8005b12:	f7fe fac4 	bl	800409e <xQueueGenericCreateStatic>
 8005b16:	0002      	movs	r2, r0
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <prvCheckForValidListAndQueue+0x64>)
 8005b1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b1c:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <prvCheckForValidListAndQueue+0x64>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <prvCheckForValidListAndQueue+0x64>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <prvCheckForValidListAndQueue+0x80>)
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7fe fe33 	bl	8004798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b32:	f000 f8bf 	bl	8005cb4 <vPortExitCritical>
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000d3c 	.word	0x20000d3c
 8005b40:	20000d0c 	.word	0x20000d0c
 8005b44:	20000d20 	.word	0x20000d20
 8005b48:	20000d34 	.word	0x20000d34
 8005b4c:	20000d38 	.word	0x20000d38
 8005b50:	20000de8 	.word	0x20000de8
 8005b54:	20000d48 	.word	0x20000d48
 8005b58:	08006360 	.word	0x08006360

08005b5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	0452      	lsls	r2, r2, #17
 8005b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3b04      	subs	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b04      	subs	r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <pxPortInitialiseStack+0x50>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3b14      	subs	r3, #20
 8005b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3b20      	subs	r3, #32
 8005b9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b004      	add	sp, #16
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	08005bb1 	.word	0x08005bb1

08005bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <prvTaskExitError+0x2c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <prvTaskExitError+0x16>
 8005bc2:	b672      	cpsid	i
 8005bc4:	e7fe      	b.n	8005bc4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005bc6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0fc      	beq.n	8005bca <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	2000000c 	.word	0x2000000c

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	0000      	movs	r0, r0
 8005bec:	0000      	movs	r0, r0
	...

08005bf0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <pxCurrentTCBConst2>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	3020      	adds	r0, #32
 8005bf8:	f380 8809 	msr	PSP, r0
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f380 8814 	msr	CONTROL, r0
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005c08:	46ae      	mov	lr, r5
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	bc04      	pop	{r2}
 8005c0e:	b662      	cpsie	i
 8005c10:	4718      	bx	r3
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46c0      	nop			; (mov r8, r8)

08005c20 <pxCurrentTCBConst2>:
 8005c20:	2000080c 	.word	0x2000080c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46c0      	nop			; (mov r8, r8)

08005c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c32:	21ff      	movs	r1, #255	; 0xff
 8005c34:	0409      	lsls	r1, r1, #16
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c40:	21ff      	movs	r1, #255	; 0xff
 8005c42:	0609      	lsls	r1, r1, #24
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c48:	f000 f898 	bl	8005d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <xPortStartScheduler+0x44>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005c52:	f7ff ffcd 	bl	8005bf0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c56:	f7ff f96d 	bl	8004f34 <vTaskSwitchContext>
	prvTaskExitError();
 8005c5a:	f7ff ffa9 	bl	8005bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	e000ed20 	.word	0xe000ed20
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <vPortYield+0x1c>)
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	0552      	lsls	r2, r2, #21
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c80:	f3bf 8f6f 	isb	sy
}
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005c94:	b672      	cpsid	i
	uxCriticalNesting++;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vPortEnterCritical+0x20>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <vPortEnterCritical+0x20>)
 8005c9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005ca0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ca4:	f3bf 8f6f 	isb	sy
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	2000000c 	.word	0x2000000c

08005cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <vPortExitCritical+0x10>
 8005cc0:	b672      	cpsid	i
 8005cc2:	e7fe      	b.n	8005cc2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005ccc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d100      	bne.n	8005cd8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005cd6:	b662      	cpsie	i
	}
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	2000000c 	.word	0x2000000c

08005ce4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005ce4:	f3ef 8010 	mrs	r0, PRIMASK
 8005ce8:	b672      	cpsid	i
 8005cea:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	0018      	movs	r0, r3

08005cf0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005cf0:	f380 8810 	msr	PRIMASK, r0
 8005cf4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
	...

08005d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d00:	f3ef 8009 	mrs	r0, PSP
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <pxCurrentTCBConst>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	3820      	subs	r0, #32
 8005d0a:	6010      	str	r0, [r2, #0]
 8005d0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d0e:	4644      	mov	r4, r8
 8005d10:	464d      	mov	r5, r9
 8005d12:	4656      	mov	r6, sl
 8005d14:	465f      	mov	r7, fp
 8005d16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d18:	b508      	push	{r3, lr}
 8005d1a:	b672      	cpsid	i
 8005d1c:	f7ff f90a 	bl	8004f34 <vTaskSwitchContext>
 8005d20:	b662      	cpsie	i
 8005d22:	bc0c      	pop	{r2, r3}
 8005d24:	6811      	ldr	r1, [r2, #0]
 8005d26:	6808      	ldr	r0, [r1, #0]
 8005d28:	3010      	adds	r0, #16
 8005d2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d2c:	46a0      	mov	r8, r4
 8005d2e:	46a9      	mov	r9, r5
 8005d30:	46b2      	mov	sl, r6
 8005d32:	46bb      	mov	fp, r7
 8005d34:	f380 8809 	msr	PSP, r0
 8005d38:	3820      	subs	r0, #32
 8005d3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d3c:	4718      	bx	r3
 8005d3e:	46c0      	nop			; (mov r8, r8)

08005d40 <pxCurrentTCBConst>:
 8005d40:	2000080c 	.word	0x2000080c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46c0      	nop			; (mov r8, r8)

08005d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d4e:	f7ff ffc9 	bl	8005ce4 <ulSetInterruptMaskFromISR>
 8005d52:	0003      	movs	r3, r0
 8005d54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d56:	f7ff f83d 	bl	8004dd4 <xTaskIncrementTick>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d003      	beq.n	8005d66 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <xPortSysTickHandler+0x30>)
 8005d60:	2280      	movs	r2, #128	; 0x80
 8005d62:	0552      	lsls	r2, r2, #21
 8005d64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7ff ffc1 	bl	8005cf0 <vClearInterruptMaskFromISR>
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b002      	add	sp, #8
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <vPortSetupTimerInterrupt+0x38>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <vPortSetupTimerInterrupt+0x3c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	22fa      	movs	r2, #250	; 0xfa
 8005d92:	0091      	lsls	r1, r2, #2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fa f9b7 	bl	8000108 <__udivsi3>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <vPortSetupTimerInterrupt+0x40>)
 8005da0:	3a01      	subs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005da6:	2207      	movs	r2, #7
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000e010 	.word	0xe000e010
 8005db4:	e000e018 	.word	0xe000e018
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	e000e014 	.word	0xe000e014

08005dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005dcc:	f7fe ff5c 	bl	8004c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dd0:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <pvPortMalloc+0x140>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dd8:	f000 f8ec 	bl	8005fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ddc:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <pvPortMalloc+0x144>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4013      	ands	r3, r2
 8005de4:	d000      	beq.n	8005de8 <pvPortMalloc+0x28>
 8005de6:	e07e      	b.n	8005ee6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d012      	beq.n	8005e14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005dee:	2208      	movs	r2, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	189b      	adds	r3, r3, r2
 8005df4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2207      	movs	r2, #7
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d00a      	beq.n	8005e14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2207      	movs	r2, #7
 8005e02:	4393      	bics	r3, r2
 8005e04:	3308      	adds	r3, #8
 8005e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d001      	beq.n	8005e14 <pvPortMalloc+0x54>
 8005e10:	b672      	cpsid	i
 8005e12:	e7fe      	b.n	8005e12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d065      	beq.n	8005ee6 <pvPortMalloc+0x126>
 8005e1a:	4b3b      	ldr	r3, [pc, #236]	; (8005f08 <pvPortMalloc+0x148>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d860      	bhi.n	8005ee6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e24:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <pvPortMalloc+0x14c>)
 8005e26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005e28:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <pvPortMalloc+0x14c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e2e:	e004      	b.n	8005e3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d903      	bls.n	8005e4c <pvPortMalloc+0x8c>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f1      	bne.n	8005e30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e4c:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <pvPortMalloc+0x140>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d047      	beq.n	8005ee6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	2308      	movs	r3, #8
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d916      	bls.n	8005ea6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	18d3      	adds	r3, r2, r3
 8005e7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2207      	movs	r2, #7
 8005e84:	4013      	ands	r3, r2
 8005e86:	d001      	beq.n	8005e8c <pvPortMalloc+0xcc>
 8005e88:	b672      	cpsid	i
 8005e8a:	e7fe      	b.n	8005e8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f000 f8e7 	bl	8006074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <pvPortMalloc+0x148>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <pvPortMalloc+0x148>)
 8005eb2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eb4:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <pvPortMalloc+0x148>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <pvPortMalloc+0x150>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d203      	bcs.n	8005ec8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <pvPortMalloc+0x148>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <pvPortMalloc+0x150>)
 8005ec6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <pvPortMalloc+0x144>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005edc:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <pvPortMalloc+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <pvPortMalloc+0x154>)
 8005ee4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ee6:	f7fe fedb 	bl	8004ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2207      	movs	r2, #7
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d001      	beq.n	8005ef6 <pvPortMalloc+0x136>
 8005ef2:	b672      	cpsid	i
 8005ef4:	e7fe      	b.n	8005ef4 <pvPortMalloc+0x134>
	return pvReturn;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b006      	add	sp, #24
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20001a40 	.word	0x20001a40
 8005f04:	20001a54 	.word	0x20001a54
 8005f08:	20001a44 	.word	0x20001a44
 8005f0c:	20001a38 	.word	0x20001a38
 8005f10:	20001a48 	.word	0x20001a48
 8005f14:	20001a4c 	.word	0x20001a4c

08005f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d03a      	beq.n	8005fa0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	425b      	negs	r3, r3
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <vPortFree+0x90>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4013      	ands	r3, r2
 8005f42:	d101      	bne.n	8005f48 <vPortFree+0x30>
 8005f44:	b672      	cpsid	i
 8005f46:	e7fe      	b.n	8005f46 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <vPortFree+0x3c>
 8005f50:	b672      	cpsid	i
 8005f52:	e7fe      	b.n	8005f52 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <vPortFree+0x90>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d01f      	beq.n	8005fa0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11b      	bne.n	8005fa0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <vPortFree+0x90>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f78:	f7fe fe86 	bl	8004c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <vPortFree+0x94>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	18d2      	adds	r2, r2, r3
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <vPortFree+0x94>)
 8005f88:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 f871 	bl	8006074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <vPortFree+0x98>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <vPortFree+0x98>)
 8005f9a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8005f9c:	f7fe fe80 	bl	8004ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20001a54 	.word	0x20001a54
 8005fac:	20001a44 	.word	0x20001a44
 8005fb0:	20001a50 	.word	0x20001a50

08005fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fba:	23c0      	movs	r3, #192	; 0xc0
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fc0:	4b26      	ldr	r3, [pc, #152]	; (800605c <prvHeapInit+0xa8>)
 8005fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2207      	movs	r2, #7
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d00c      	beq.n	8005fe6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3307      	adds	r3, #7
 8005fd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	4393      	bics	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <prvHeapInit+0xa8>)
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <prvHeapInit+0xac>)
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <prvHeapInit+0xac>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ffe:	2208      	movs	r2, #8
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2207      	movs	r2, #7
 800600a:	4393      	bics	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <prvHeapInit+0xb0>)
 8006012:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <prvHeapInit+0xb0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800601c:	4b11      	ldr	r3, [pc, #68]	; (8006064 <prvHeapInit+0xb0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	1ad2      	subs	r2, r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <prvHeapInit+0xb0>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvHeapInit+0xb4>)
 8006040:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <prvHeapInit+0xb8>)
 8006048:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <prvHeapInit+0xbc>)
 800604c:	2280      	movs	r2, #128	; 0x80
 800604e:	0612      	lsls	r2, r2, #24
 8006050:	601a      	str	r2, [r3, #0]
}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b004      	add	sp, #16
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	20000e38 	.word	0x20000e38
 8006060:	20001a38 	.word	0x20001a38
 8006064:	20001a40 	.word	0x20001a40
 8006068:	20001a48 	.word	0x20001a48
 800606c:	20001a44 	.word	0x20001a44
 8006070:	20001a54 	.word	0x20001a54

08006074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <prvInsertBlockIntoFreeList+0xa8>)
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e002      	b.n	8006088 <prvInsertBlockIntoFreeList+0x14>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d8f7      	bhi.n	8006082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	18d3      	adds	r3, r2, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d108      	bne.n	80060b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	18d2      	adds	r2, r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	18d2      	adds	r2, r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d118      	bne.n	80060fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b14      	ldr	r3, [pc, #80]	; (8006120 <prvInsertBlockIntoFreeList+0xac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d00d      	beq.n	80060f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	18d2      	adds	r2, r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e008      	b.n	8006104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060f2:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvInsertBlockIntoFreeList+0xac>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e003      	b.n	8006104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d002      	beq.n	8006112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	46bd      	mov	sp, r7
 8006116:	b004      	add	sp, #16
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	20001a38 	.word	0x20001a38
 8006120:	20001a40 	.word	0x20001a40

08006124 <__libc_init_array>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	2600      	movs	r6, #0
 8006128:	4d0c      	ldr	r5, [pc, #48]	; (800615c <__libc_init_array+0x38>)
 800612a:	4c0d      	ldr	r4, [pc, #52]	; (8006160 <__libc_init_array+0x3c>)
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	42a6      	cmp	r6, r4
 8006132:	d109      	bne.n	8006148 <__libc_init_array+0x24>
 8006134:	2600      	movs	r6, #0
 8006136:	f000 f8f9 	bl	800632c <_init>
 800613a:	4d0a      	ldr	r5, [pc, #40]	; (8006164 <__libc_init_array+0x40>)
 800613c:	4c0a      	ldr	r4, [pc, #40]	; (8006168 <__libc_init_array+0x44>)
 800613e:	1b64      	subs	r4, r4, r5
 8006140:	10a4      	asrs	r4, r4, #2
 8006142:	42a6      	cmp	r6, r4
 8006144:	d105      	bne.n	8006152 <__libc_init_array+0x2e>
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	00b3      	lsls	r3, r6, #2
 800614a:	58eb      	ldr	r3, [r5, r3]
 800614c:	4798      	blx	r3
 800614e:	3601      	adds	r6, #1
 8006150:	e7ee      	b.n	8006130 <__libc_init_array+0xc>
 8006152:	00b3      	lsls	r3, r6, #2
 8006154:	58eb      	ldr	r3, [r5, r3]
 8006156:	4798      	blx	r3
 8006158:	3601      	adds	r6, #1
 800615a:	e7f2      	b.n	8006142 <__libc_init_array+0x1e>
 800615c:	080064a4 	.word	0x080064a4
 8006160:	080064a4 	.word	0x080064a4
 8006164:	080064a4 	.word	0x080064a4
 8006168:	080064a8 	.word	0x080064a8

0800616c <__retarget_lock_acquire_recursive>:
 800616c:	4770      	bx	lr

0800616e <__retarget_lock_release_recursive>:
 800616e:	4770      	bx	lr

08006170 <memcpy>:
 8006170:	2300      	movs	r3, #0
 8006172:	b510      	push	{r4, lr}
 8006174:	429a      	cmp	r2, r3
 8006176:	d100      	bne.n	800617a <memcpy+0xa>
 8006178:	bd10      	pop	{r4, pc}
 800617a:	5ccc      	ldrb	r4, [r1, r3]
 800617c:	54c4      	strb	r4, [r0, r3]
 800617e:	3301      	adds	r3, #1
 8006180:	e7f8      	b.n	8006174 <memcpy+0x4>

08006182 <memset>:
 8006182:	0003      	movs	r3, r0
 8006184:	1882      	adds	r2, r0, r2
 8006186:	4293      	cmp	r3, r2
 8006188:	d100      	bne.n	800618c <memset+0xa>
 800618a:	4770      	bx	lr
 800618c:	7019      	strb	r1, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	e7f9      	b.n	8006186 <memset+0x4>

08006192 <cleanup_glue>:
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	000d      	movs	r5, r1
 8006196:	6809      	ldr	r1, [r1, #0]
 8006198:	0004      	movs	r4, r0
 800619a:	2900      	cmp	r1, #0
 800619c:	d001      	beq.n	80061a2 <cleanup_glue+0x10>
 800619e:	f7ff fff8 	bl	8006192 <cleanup_glue>
 80061a2:	0029      	movs	r1, r5
 80061a4:	0020      	movs	r0, r4
 80061a6:	f000 f877 	bl	8006298 <_free_r>
 80061aa:	bd70      	pop	{r4, r5, r6, pc}

080061ac <_reclaim_reent>:
 80061ac:	4b31      	ldr	r3, [pc, #196]	; (8006274 <_reclaim_reent+0xc8>)
 80061ae:	b570      	push	{r4, r5, r6, lr}
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	0004      	movs	r4, r0
 80061b4:	4283      	cmp	r3, r0
 80061b6:	d049      	beq.n	800624c <_reclaim_reent+0xa0>
 80061b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <_reclaim_reent+0x28>
 80061be:	2500      	movs	r5, #0
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	42ab      	cmp	r3, r5
 80061c4:	d147      	bne.n	8006256 <_reclaim_reent+0xaa>
 80061c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	2900      	cmp	r1, #0
 80061cc:	d002      	beq.n	80061d4 <_reclaim_reent+0x28>
 80061ce:	0020      	movs	r0, r4
 80061d0:	f000 f862 	bl	8006298 <_free_r>
 80061d4:	6961      	ldr	r1, [r4, #20]
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d002      	beq.n	80061e0 <_reclaim_reent+0x34>
 80061da:	0020      	movs	r0, r4
 80061dc:	f000 f85c 	bl	8006298 <_free_r>
 80061e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d002      	beq.n	80061ec <_reclaim_reent+0x40>
 80061e6:	0020      	movs	r0, r4
 80061e8:	f000 f856 	bl	8006298 <_free_r>
 80061ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d002      	beq.n	80061f8 <_reclaim_reent+0x4c>
 80061f2:	0020      	movs	r0, r4
 80061f4:	f000 f850 	bl	8006298 <_free_r>
 80061f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d002      	beq.n	8006204 <_reclaim_reent+0x58>
 80061fe:	0020      	movs	r0, r4
 8006200:	f000 f84a 	bl	8006298 <_free_r>
 8006204:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006206:	2900      	cmp	r1, #0
 8006208:	d002      	beq.n	8006210 <_reclaim_reent+0x64>
 800620a:	0020      	movs	r0, r4
 800620c:	f000 f844 	bl	8006298 <_free_r>
 8006210:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006212:	2900      	cmp	r1, #0
 8006214:	d002      	beq.n	800621c <_reclaim_reent+0x70>
 8006216:	0020      	movs	r0, r4
 8006218:	f000 f83e 	bl	8006298 <_free_r>
 800621c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800621e:	2900      	cmp	r1, #0
 8006220:	d002      	beq.n	8006228 <_reclaim_reent+0x7c>
 8006222:	0020      	movs	r0, r4
 8006224:	f000 f838 	bl	8006298 <_free_r>
 8006228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622a:	2900      	cmp	r1, #0
 800622c:	d002      	beq.n	8006234 <_reclaim_reent+0x88>
 800622e:	0020      	movs	r0, r4
 8006230:	f000 f832 	bl	8006298 <_free_r>
 8006234:	69a3      	ldr	r3, [r4, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <_reclaim_reent+0xa0>
 800623a:	0020      	movs	r0, r4
 800623c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800623e:	4798      	blx	r3
 8006240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006242:	2900      	cmp	r1, #0
 8006244:	d002      	beq.n	800624c <_reclaim_reent+0xa0>
 8006246:	0020      	movs	r0, r4
 8006248:	f7ff ffa3 	bl	8006192 <cleanup_glue>
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	5949      	ldr	r1, [r1, r5]
 8006250:	2900      	cmp	r1, #0
 8006252:	d108      	bne.n	8006266 <_reclaim_reent+0xba>
 8006254:	3504      	adds	r5, #4
 8006256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	2d80      	cmp	r5, #128	; 0x80
 800625c:	d1f7      	bne.n	800624e <_reclaim_reent+0xa2>
 800625e:	0020      	movs	r0, r4
 8006260:	f000 f81a 	bl	8006298 <_free_r>
 8006264:	e7af      	b.n	80061c6 <_reclaim_reent+0x1a>
 8006266:	680e      	ldr	r6, [r1, #0]
 8006268:	0020      	movs	r0, r4
 800626a:	f000 f815 	bl	8006298 <_free_r>
 800626e:	0031      	movs	r1, r6
 8006270:	e7ee      	b.n	8006250 <_reclaim_reent+0xa4>
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	20000010 	.word	0x20000010

08006278 <__malloc_lock>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4802      	ldr	r0, [pc, #8]	; (8006284 <__malloc_lock+0xc>)
 800627c:	f7ff ff76 	bl	800616c <__retarget_lock_acquire_recursive>
 8006280:	bd10      	pop	{r4, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20001c34 	.word	0x20001c34

08006288 <__malloc_unlock>:
 8006288:	b510      	push	{r4, lr}
 800628a:	4802      	ldr	r0, [pc, #8]	; (8006294 <__malloc_unlock+0xc>)
 800628c:	f7ff ff6f 	bl	800616e <__retarget_lock_release_recursive>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	20001c34 	.word	0x20001c34

08006298 <_free_r>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	0005      	movs	r5, r0
 800629c:	2900      	cmp	r1, #0
 800629e:	d010      	beq.n	80062c2 <_free_r+0x2a>
 80062a0:	1f0c      	subs	r4, r1, #4
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da00      	bge.n	80062aa <_free_r+0x12>
 80062a8:	18e4      	adds	r4, r4, r3
 80062aa:	0028      	movs	r0, r5
 80062ac:	f7ff ffe4 	bl	8006278 <__malloc_lock>
 80062b0:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <_free_r+0x90>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <_free_r+0x2c>
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6014      	str	r4, [r2, #0]
 80062bc:	0028      	movs	r0, r5
 80062be:	f7ff ffe3 	bl	8006288 <__malloc_unlock>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x42>
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	1860      	adds	r0, r4, r1
 80062cc:	4283      	cmp	r3, r0
 80062ce:	d1f3      	bne.n	80062b8 <_free_r+0x20>
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	1841      	adds	r1, r0, r1
 80062d6:	6021      	str	r1, [r4, #0]
 80062d8:	e7ee      	b.n	80062b8 <_free_r+0x20>
 80062da:	001a      	movs	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <_free_r+0x4e>
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	d9f9      	bls.n	80062da <_free_r+0x42>
 80062e6:	6811      	ldr	r1, [r2, #0]
 80062e8:	1850      	adds	r0, r2, r1
 80062ea:	42a0      	cmp	r0, r4
 80062ec:	d10b      	bne.n	8006306 <_free_r+0x6e>
 80062ee:	6820      	ldr	r0, [r4, #0]
 80062f0:	1809      	adds	r1, r1, r0
 80062f2:	1850      	adds	r0, r2, r1
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	4283      	cmp	r3, r0
 80062f8:	d1e0      	bne.n	80062bc <_free_r+0x24>
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	1841      	adds	r1, r0, r1
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	6053      	str	r3, [r2, #4]
 8006304:	e7da      	b.n	80062bc <_free_r+0x24>
 8006306:	42a0      	cmp	r0, r4
 8006308:	d902      	bls.n	8006310 <_free_r+0x78>
 800630a:	230c      	movs	r3, #12
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	e7d5      	b.n	80062bc <_free_r+0x24>
 8006310:	6821      	ldr	r1, [r4, #0]
 8006312:	1860      	adds	r0, r4, r1
 8006314:	4283      	cmp	r3, r0
 8006316:	d103      	bne.n	8006320 <_free_r+0x88>
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	1841      	adds	r1, r0, r1
 800631e:	6021      	str	r1, [r4, #0]
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	6054      	str	r4, [r2, #4]
 8006324:	e7ca      	b.n	80062bc <_free_r+0x24>
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20001a58 	.word	0x20001a58

0800632c <_init>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006332:	bc08      	pop	{r3}
 8006334:	469e      	mov	lr, r3
 8006336:	4770      	bx	lr

08006338 <_fini>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr
