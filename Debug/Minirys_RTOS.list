
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a4  080063a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ac  080063ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000164c  20000074  08006428  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c0  08006428  000216c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003246c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056ea  00000000  00000000  00052508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00057bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b2b4  00000000  00000000  00059118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000289f1  00000000  00000000  000743cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000aa492  00000000  00000000  0009cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014724f  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0001a5c8  00000000  00000000  001472a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002ed8  00000000  00000000  00161870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000043c0  00000000  00000000  00164748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006188 	.word	0x08006188

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08006188 	.word	0x08006188

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__gnu_thumb1_case_uhi>:
 8000144:	b403      	push	{r0, r1}
 8000146:	4671      	mov	r1, lr
 8000148:	0849      	lsrs	r1, r1, #1
 800014a:	0040      	lsls	r0, r0, #1
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	5a09      	ldrh	r1, [r1, r0]
 8000150:	0049      	lsls	r1, r1, #1
 8000152:	448e      	add	lr, r1
 8000154:	bc03      	pop	{r0, r1}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f8f0 	bl	8000440 <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__divsi3>:
 800026c:	4603      	mov	r3, r0
 800026e:	430b      	orrs	r3, r1
 8000270:	d47f      	bmi.n	8000372 <__divsi3+0x106>
 8000272:	2200      	movs	r2, #0
 8000274:	0843      	lsrs	r3, r0, #1
 8000276:	428b      	cmp	r3, r1
 8000278:	d374      	bcc.n	8000364 <__divsi3+0xf8>
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d35f      	bcc.n	8000340 <__divsi3+0xd4>
 8000280:	0a03      	lsrs	r3, r0, #8
 8000282:	428b      	cmp	r3, r1
 8000284:	d344      	bcc.n	8000310 <__divsi3+0xa4>
 8000286:	0b03      	lsrs	r3, r0, #12
 8000288:	428b      	cmp	r3, r1
 800028a:	d328      	bcc.n	80002de <__divsi3+0x72>
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d30d      	bcc.n	80002ae <__divsi3+0x42>
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	ba12      	rev	r2, r2
 8000298:	0c03      	lsrs	r3, r0, #16
 800029a:	428b      	cmp	r3, r1
 800029c:	d302      	bcc.n	80002a4 <__divsi3+0x38>
 800029e:	1212      	asrs	r2, r2, #8
 80002a0:	0209      	lsls	r1, r1, #8
 80002a2:	d065      	beq.n	8000370 <__divsi3+0x104>
 80002a4:	0b03      	lsrs	r3, r0, #12
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d319      	bcc.n	80002de <__divsi3+0x72>
 80002aa:	e000      	b.n	80002ae <__divsi3+0x42>
 80002ac:	0a09      	lsrs	r1, r1, #8
 80002ae:	0bc3      	lsrs	r3, r0, #15
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x4c>
 80002b4:	03cb      	lsls	r3, r1, #15
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b83      	lsrs	r3, r0, #14
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x58>
 80002c0:	038b      	lsls	r3, r1, #14
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b43      	lsrs	r3, r0, #13
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x64>
 80002cc:	034b      	lsls	r3, r1, #13
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x70>
 80002d8:	030b      	lsls	r3, r1, #12
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0ac3      	lsrs	r3, r0, #11
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x7c>
 80002e4:	02cb      	lsls	r3, r1, #11
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a83      	lsrs	r3, r0, #10
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x88>
 80002f0:	028b      	lsls	r3, r1, #10
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a43      	lsrs	r3, r0, #9
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0x94>
 80002fc:	024b      	lsls	r3, r1, #9
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	0a03      	lsrs	r3, r0, #8
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__divsi3+0xa0>
 8000308:	020b      	lsls	r3, r1, #8
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	d2cd      	bcs.n	80002ac <__divsi3+0x40>
 8000310:	09c3      	lsrs	r3, r0, #7
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xae>
 8000316:	01cb      	lsls	r3, r1, #7
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0983      	lsrs	r3, r0, #6
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xba>
 8000322:	018b      	lsls	r3, r1, #6
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0943      	lsrs	r3, r0, #5
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xc6>
 800032e:	014b      	lsls	r3, r1, #5
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xd2>
 800033a:	010b      	lsls	r3, r1, #4
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	08c3      	lsrs	r3, r0, #3
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xde>
 8000346:	00cb      	lsls	r3, r1, #3
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0883      	lsrs	r3, r0, #2
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xea>
 8000352:	008b      	lsls	r3, r1, #2
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0843      	lsrs	r3, r0, #1
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__divsi3+0xf6>
 800035e:	004b      	lsls	r3, r1, #1
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	1a41      	subs	r1, r0, r1
 8000366:	d200      	bcs.n	800036a <__divsi3+0xfe>
 8000368:	4601      	mov	r1, r0
 800036a:	4152      	adcs	r2, r2
 800036c:	4610      	mov	r0, r2
 800036e:	4770      	bx	lr
 8000370:	e05d      	b.n	800042e <__divsi3+0x1c2>
 8000372:	0fca      	lsrs	r2, r1, #31
 8000374:	d000      	beq.n	8000378 <__divsi3+0x10c>
 8000376:	4249      	negs	r1, r1
 8000378:	1003      	asrs	r3, r0, #32
 800037a:	d300      	bcc.n	800037e <__divsi3+0x112>
 800037c:	4240      	negs	r0, r0
 800037e:	4053      	eors	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	469c      	mov	ip, r3
 8000384:	0903      	lsrs	r3, r0, #4
 8000386:	428b      	cmp	r3, r1
 8000388:	d32d      	bcc.n	80003e6 <__divsi3+0x17a>
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d312      	bcc.n	80003b6 <__divsi3+0x14a>
 8000390:	22fc      	movs	r2, #252	; 0xfc
 8000392:	0189      	lsls	r1, r1, #6
 8000394:	ba12      	rev	r2, r2
 8000396:	0a03      	lsrs	r3, r0, #8
 8000398:	428b      	cmp	r3, r1
 800039a:	d30c      	bcc.n	80003b6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d308      	bcc.n	80003b6 <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d304      	bcc.n	80003b6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	d03a      	beq.n	8000426 <__divsi3+0x1ba>
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	e000      	b.n	80003b6 <__divsi3+0x14a>
 80003b4:	0989      	lsrs	r1, r1, #6
 80003b6:	09c3      	lsrs	r3, r0, #7
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x154>
 80003bc:	01cb      	lsls	r3, r1, #7
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0983      	lsrs	r3, r0, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x160>
 80003c8:	018b      	lsls	r3, r1, #6
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0943      	lsrs	r3, r0, #5
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x16c>
 80003d4:	014b      	lsls	r3, r1, #5
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0903      	lsrs	r3, r0, #4
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x178>
 80003e0:	010b      	lsls	r3, r1, #4
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	08c3      	lsrs	r3, r0, #3
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x184>
 80003ec:	00cb      	lsls	r3, r1, #3
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	0883      	lsrs	r3, r0, #2
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x190>
 80003f8:	008b      	lsls	r3, r1, #2
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	d2d9      	bcs.n	80003b4 <__divsi3+0x148>
 8000400:	0843      	lsrs	r3, r0, #1
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__divsi3+0x19e>
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	d200      	bcs.n	8000412 <__divsi3+0x1a6>
 8000410:	4601      	mov	r1, r0
 8000412:	4663      	mov	r3, ip
 8000414:	4152      	adcs	r2, r2
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	4610      	mov	r0, r2
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x1b4>
 800041c:	4240      	negs	r0, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d500      	bpl.n	8000424 <__divsi3+0x1b8>
 8000422:	4249      	negs	r1, r1
 8000424:	4770      	bx	lr
 8000426:	4663      	mov	r3, ip
 8000428:	105b      	asrs	r3, r3, #1
 800042a:	d300      	bcc.n	800042e <__divsi3+0x1c2>
 800042c:	4240      	negs	r0, r0
 800042e:	b501      	push	{r0, lr}
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f805 	bl	8000440 <__aeabi_idiv0>
 8000436:	bd02      	pop	{r1, pc}

08000438 <__aeabi_idivmod>:
 8000438:	2900      	cmp	r1, #0
 800043a:	d0f8      	beq.n	800042e <__divsi3+0x1c2>
 800043c:	e716      	b.n	800026c <__divsi3>
 800043e:	4770      	bx	lr

08000440 <__aeabi_idiv0>:
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_uldivmod>:
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <__aeabi_uldivmod+0x28>
 8000448:	2a00      	cmp	r2, #0
 800044a:	d10f      	bne.n	800046c <__aeabi_uldivmod+0x28>
 800044c:	2900      	cmp	r1, #0
 800044e:	d100      	bne.n	8000452 <__aeabi_uldivmod+0xe>
 8000450:	2800      	cmp	r0, #0
 8000452:	d002      	beq.n	800045a <__aeabi_uldivmod+0x16>
 8000454:	2100      	movs	r1, #0
 8000456:	43c9      	mvns	r1, r1
 8000458:	1c08      	adds	r0, r1, #0
 800045a:	b407      	push	{r0, r1, r2}
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <__aeabi_uldivmod+0x24>)
 800045e:	a102      	add	r1, pc, #8	; (adr r1, 8000468 <__aeabi_uldivmod+0x24>)
 8000460:	1840      	adds	r0, r0, r1
 8000462:	9002      	str	r0, [sp, #8]
 8000464:	bd03      	pop	{r0, r1, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	ffffffd9 	.word	0xffffffd9
 800046c:	b403      	push	{r0, r1}
 800046e:	4668      	mov	r0, sp
 8000470:	b501      	push	{r0, lr}
 8000472:	9802      	ldr	r0, [sp, #8]
 8000474:	f000 f806 	bl	8000484 <__udivmoddi4>
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	469e      	mov	lr, r3
 800047c:	b002      	add	sp, #8
 800047e:	bc0c      	pop	{r2, r3}
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <start_main_logic_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_main_logic_loop */
void start_main_logic_loop(void *argument)
{
 8000670:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f003 feaf 	bl	80043d6 <osDelay>
  for(;;)
 8000678:	e7fb      	b.n	8000672 <start_main_logic_loop+0x2>
	...

0800067c <SystemClock_Config>:
{
 800067c:	b510      	push	{r4, lr}
 800067e:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	2238      	movs	r2, #56	; 0x38
 8000682:	2100      	movs	r1, #0
 8000684:	a810      	add	r0, sp, #64	; 0x40
 8000686:	f005 fcaa 	bl	8005fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	2210      	movs	r2, #16
 800068c:	2100      	movs	r1, #0
 800068e:	a801      	add	r0, sp, #4
 8000690:	f005 fca5 	bl	8005fde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	222c      	movs	r2, #44	; 0x2c
 8000696:	2100      	movs	r1, #0
 8000698:	a805      	add	r0, sp, #20
 800069a:	f005 fca0 	bl	8005fde <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	2080      	movs	r0, #128	; 0x80
 80006a0:	0080      	lsls	r0, r0, #2
 80006a2:	f001 f86b 	bl	800177c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006b0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006b2:	3308      	adds	r3, #8
 80006b4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	029b      	lsls	r3, r3, #10
 80006ba:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	049b      	lsls	r3, r3, #18
 80006c0:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006c2:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006c8:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006d4:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f001 f87d 	bl	80017d4 <HAL_RCC_OscConfig>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006de:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e8:	2101      	movs	r1, #1
 80006ea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	f001 fada 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x80>
 80006f8:	b672      	cpsid	i
  while (1)
 80006fa:	e7fe      	b.n	80006fa <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SystemClock_Config+0x9c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006fe:	9006      	str	r0, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000700:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000704:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	f001 fbab 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	2800      	cmp	r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x96>
 800070e:	b672      	cpsid	i
  while (1)
 8000710:	e7fe      	b.n	8000710 <SystemClock_Config+0x94>
}
 8000712:	b01e      	add	sp, #120	; 0x78
 8000714:	bd10      	pop	{r4, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	00004001 	.word	0x00004001

0800071c <main>:
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2501      	movs	r5, #1
{
 8000720:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000722:	f000 fae9 	bl	8000cf8 <HAL_Init>
  SystemClock_Config();
 8000726:	f7ff ffa9 	bl	800067c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	2214      	movs	r2, #20
 800072c:	2100      	movs	r1, #0
 800072e:	a805      	add	r0, sp, #20
 8000730:	f005 fc55 	bl	8005fde <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000736:	27de      	movs	r7, #222	; 0xde
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4ea9      	ldr	r6, [pc, #676]	; (80009e0 <main+0x2c4>)
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800073a:	007f      	lsls	r7, r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800073e:	48a9      	ldr	r0, [pc, #676]	; (80009e4 <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	432b      	orrs	r3, r5
 8000742:	6373      	str	r3, [r6, #52]	; 0x34
 8000744:	6b73      	ldr	r3, [r6, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	402b      	ands	r3, r5
 800074a:	9302      	str	r3, [sp, #8]
 800074c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8000750:	430a      	orrs	r2, r1
 8000752:	6372      	str	r2, [r6, #52]	; 0x34
 8000754:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000756:	400b      	ands	r3, r1
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800075e:	1849      	adds	r1, r1, r1
 8000760:	430a      	orrs	r2, r1
 8000762:	6372      	str	r2, [r6, #52]	; 0x34
 8000764:	6b73      	ldr	r3, [r6, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000766:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	400b      	ands	r3, r1
 800076a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800076c:	0039      	movs	r1, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000770:	f000 fffe 	bl	8001770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|ENABLE_SENSORS_Pin, GPIO_PIN_RESET);
 8000774:	2181      	movs	r1, #129	; 0x81
 8000776:	20a0      	movs	r0, #160	; 0xa0
 8000778:	2200      	movs	r2, #0
 800077a:	0209      	lsls	r1, r1, #8
 800077c:	05c0      	lsls	r0, r0, #23
 800077e:	f000 fff7 	bl	8001770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	4898      	ldr	r0, [pc, #608]	; (80009e8 <main+0x2cc>)
 8000788:	f000 fff2 	bl	8001770 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 800078c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 800078e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 8000790:	a905      	add	r1, sp, #20
 8000792:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 8000794:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 800079a:	f000 ff3b 	bl	8001614 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	4891      	ldr	r0, [pc, #580]	; (80009e4 <main+0x2c8>)
 80007a0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80007a2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f000 ff33 	bl	8001614 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80007ae:	2281      	movs	r2, #129	; 0x81
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80007b2:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	a905      	add	r1, sp, #20
 80007b6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80007b8:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f000 ff28 	bl	8001614 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_G_Pin;
 80007c4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80007c6:	4888      	ldr	r0, [pc, #544]	; (80009e8 <main+0x2cc>)
 80007c8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_G_Pin;
 80007ca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f000 ff1f 	bl	8001614 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80007d8:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	432b      	orrs	r3, r5
 80007dc:	63b3      	str	r3, [r6, #56]	; 0x38
 80007de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80007e0:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80007e4:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80007ea:	f000 fd97 	bl	800131c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ee:	2009      	movs	r0, #9
 80007f0:	f000 fdbe 	bl	8001370 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f4:	220c      	movs	r2, #12
 80007f6:	0021      	movs	r1, r4
 80007f8:	a805      	add	r0, sp, #20
 80007fa:	f005 fbf0 	bl	8005fde <memset>
  hadc1.Instance = ADC1;
 80007fe:	4e7b      	ldr	r6, [pc, #492]	; (80009ec <main+0x2d0>)
 8000800:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <main+0x2d4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	0030      	movs	r0, r6
  hadc1.Instance = ADC1;
 8000804:	6033      	str	r3, [r6, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	6073      	str	r3, [r6, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	061b      	lsls	r3, r3, #24
 8000810:	6133      	str	r3, [r6, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000812:	2308      	movs	r3, #8
 8000814:	6173      	str	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000816:	1973      	adds	r3, r6, r5
 8000818:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800081a:	0033      	movs	r3, r6
 800081c:	332c      	adds	r3, #44	; 0x2c
 800081e:	701d      	strb	r5, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000820:	2307      	movs	r3, #7
 8000822:	6373      	str	r3, [r6, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000824:	0033      	movs	r3, r6
 8000826:	333c      	adds	r3, #60	; 0x3c
 8000828:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800082a:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082c:	8334      	strh	r4, [r6, #24]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800082e:	059b      	lsls	r3, r3, #22
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000830:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000832:	60f4      	str	r4, [r6, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000834:	76b5      	strb	r5, [r6, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	61f5      	str	r5, [r6, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083c:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800083e:	64f3      	str	r3, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	f000 fa84 	bl	8000d4c <HAL_ADC_Init>
 8000844:	42a0      	cmp	r0, r4
 8000846:	d001      	beq.n	800084c <main+0x130>
 8000848:	b672      	cpsid	i
  while (1)
 800084a:	e7fe      	b.n	800084a <main+0x12e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	0030      	movs	r0, r6
 800084e:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 8000850:	9505      	str	r5, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000852:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	f000 fbb2 	bl	8000fbc <HAL_ADC_ConfigChannel>
 8000858:	2800      	cmp	r0, #0
 800085a:	d001      	beq.n	8000860 <main+0x144>
 800085c:	b672      	cpsid	i
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x142>
  sConfig.Channel = ADC_CHANNEL_1;
 8000860:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <main+0x2d8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	0030      	movs	r0, r6
 8000864:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 8000866:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	f000 fba8 	bl	8000fbc <HAL_ADC_ConfigChannel>
 800086c:	2800      	cmp	r0, #0
 800086e:	d001      	beq.n	8000874 <main+0x158>
 8000870:	b672      	cpsid	i
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x156>
  sConfig.Channel = ADC_CHANNEL_2;
 8000874:	4b60      	ldr	r3, [pc, #384]	; (80009f8 <main+0x2dc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	0030      	movs	r0, r6
 8000878:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_2;
 800087a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	f000 fb9e 	bl	8000fbc <HAL_ADC_ConfigChannel>
 8000880:	2800      	cmp	r0, #0
 8000882:	d001      	beq.n	8000888 <main+0x16c>
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x16a>
  sConfig.Channel = ADC_CHANNEL_3;
 8000888:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <main+0x2e0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	0030      	movs	r0, r6
 800088c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_3;
 800088e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	f000 fb94 	bl	8000fbc <HAL_ADC_ConfigChannel>
 8000894:	2800      	cmp	r0, #0
 8000896:	d001      	beq.n	800089c <main+0x180>
 8000898:	b672      	cpsid	i
  while (1)
 800089a:	e7fe      	b.n	800089a <main+0x17e>
  sConfig.Channel = ADC_CHANNEL_4;
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <main+0x2e4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	0030      	movs	r0, r6
 80008a0:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 80008a2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	f000 fb8a 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d001      	beq.n	80008b0 <main+0x194>
 80008ac:	b672      	cpsid	i
  while (1)
 80008ae:	e7fe      	b.n	80008ae <main+0x192>
  sConfig.Channel = ADC_CHANNEL_5;
 80008b0:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <main+0x2e8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	0030      	movs	r0, r6
 80008b4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 80008b6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	f000 fb80 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d001      	beq.n	80008c4 <main+0x1a8>
 80008c0:	b672      	cpsid	i
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <main+0x1a6>
  sConfig.Channel = ADC_CHANNEL_7;
 80008c4:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <main+0x2ec>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c6:	0030      	movs	r0, r6
 80008c8:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_7;
 80008ca:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	f000 fb76 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d001      	beq.n	80008d8 <main+0x1bc>
 80008d4:	b672      	cpsid	i
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <main+0x1ba>
  sConfig.Channel = ADC_CHANNEL_8;
 80008d8:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <main+0x2f0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	0030      	movs	r0, r6
 80008dc:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_8;
 80008de:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e0:	f000 fb6c 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d001      	beq.n	80008ec <main+0x1d0>
 80008e8:	b672      	cpsid	i
  while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x1ce>
  sConfig.Channel = ADC_CHANNEL_9;
 80008ec:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <main+0x2f4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ee:	0030      	movs	r0, r6
 80008f0:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_9;
 80008f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	f000 fb62 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d001      	beq.n	8000900 <main+0x1e4>
 80008fc:	b672      	cpsid	i
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x1e2>
  sConfig.Channel = ADC_CHANNEL_16;
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <main+0x2f8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	0030      	movs	r0, r6
 8000904:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_16;
 8000906:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	f000 fb58 	bl	8000fbc <HAL_ADC_ConfigChannel>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <main+0x1f8>
 8000910:	b672      	cpsid	i
  while (1)
 8000912:	e7fe      	b.n	8000912 <main+0x1f6>
  htim17.Instance = TIM17;
 8000914:	4840      	ldr	r0, [pc, #256]	; (8000a18 <main+0x2fc>)
 8000916:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <main+0x300>)
  htim17.Init.Prescaler = 0;
 8000918:	6043      	str	r3, [r0, #4]
  htim17.Instance = TIM17;
 800091a:	6002      	str	r2, [r0, #0]
  htim17.Init.Period = 65535;
 800091c:	4a40      	ldr	r2, [pc, #256]	; (8000a20 <main+0x304>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000920:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000924:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000928:	f001 fcc0 	bl	80022ac <HAL_TIM_Base_Init>
 800092c:	2800      	cmp	r0, #0
 800092e:	d001      	beq.n	8000934 <main+0x218>
 8000930:	b672      	cpsid	i
  while (1)
 8000932:	e7fe      	b.n	8000932 <main+0x216>
  huart1.Instance = USART1;
 8000934:	4c3b      	ldr	r4, [pc, #236]	; (8000a24 <main+0x308>)
 8000936:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <main+0x30c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000938:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 800093a:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 800093c:	23e1      	movs	r3, #225	; 0xe1
 800093e:	025b      	lsls	r3, r3, #9
 8000940:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000942:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000948:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800094a:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094c:	6220      	str	r0, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094e:	6260      	str	r0, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000952:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	f002 fc87 	bl	8003268 <HAL_UART_Init>
 800095a:	1e01      	subs	r1, r0, #0
 800095c:	d001      	beq.n	8000962 <main+0x246>
 800095e:	b672      	cpsid	i
  while (1)
 8000960:	e7fe      	b.n	8000960 <main+0x244>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000962:	0020      	movs	r0, r4
 8000964:	f002 fdc6 	bl	80034f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	1e01      	subs	r1, r0, #0
 800096a:	d001      	beq.n	8000970 <main+0x254>
 800096c:	b672      	cpsid	i
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x252>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000970:	0020      	movs	r0, r4
 8000972:	f002 fde3 	bl	800353c <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	2800      	cmp	r0, #0
 8000978:	d001      	beq.n	800097e <main+0x262>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x260>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800097e:	0020      	movs	r0, r4
 8000980:	f002 fd9a 	bl	80034b8 <HAL_UARTEx_DisableFifoMode>
 8000984:	1e07      	subs	r7, r0, #0
 8000986:	d001      	beq.n	800098c <main+0x270>
 8000988:	b672      	cpsid	i
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x26e>
  modbus_h.uModbusType = MB_SLAVE;
 800098c:	2303      	movs	r3, #3
 800098e:	4d27      	ldr	r5, [pc, #156]	; (8000a2c <main+0x310>)
  modbus_h.u16timeOut = 1000;
 8000990:	22fa      	movs	r2, #250	; 0xfa
  modbus_h.uModbusType = MB_SLAVE;
 8000992:	702b      	strb	r3, [r5, #0]
  modbus_h.u8id = 10; //Modbus slave ID
 8000994:	3307      	adds	r3, #7
 8000996:	722b      	strb	r3, [r5, #8]
  modbus_h.u16timeOut = 1000;
 8000998:	002b      	movs	r3, r5
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	33a2      	adds	r3, #162	; 0xa2
 800099e:	801a      	strh	r2, [r3, #0]
  modbus_h.u16regs = ModbusDATA;
 80009a0:	002b      	movs	r3, r5
 80009a2:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <main+0x314>)
 80009a4:	3398      	adds	r3, #152	; 0x98
 80009a6:	601a      	str	r2, [r3, #0]
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80009a8:	002b      	movs	r3, r5
 80009aa:	2210      	movs	r2, #16
 80009ac:	33a4      	adds	r3, #164	; 0xa4
  modbus_h.EN_Port = NULL;
 80009ae:	60e8      	str	r0, [r5, #12]
  ModbusInit(&modbus_h);
 80009b0:	0028      	movs	r0, r5
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80009b2:	801a      	strh	r2, [r3, #0]
  modbus_h.port =  &huart1;
 80009b4:	606c      	str	r4, [r5, #4]
  ModbusInit(&modbus_h);
 80009b6:	f002 feb9 	bl	800372c <ModbusInit>
  ModbusStart(&modbus_h);
 80009ba:	0028      	movs	r0, r5
 80009bc:	f002 ff34 	bl	8003828 <ModbusStart>
   HAL_ADC_Start(&hadc1);
 80009c0:	0030      	movs	r0, r6
 80009c2:	f000 fc7d 	bl	80012c0 <HAL_ADC_Start>
  osKernelInitialize();
 80009c6:	f003 fc83 	bl	80042d0 <osKernelInitialize>
  main_logic_loopHandle = osThreadNew(start_main_logic_loop, NULL, &main_logic_loop_attributes);
 80009ca:	0039      	movs	r1, r7
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <main+0x318>)
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <main+0x31c>)
 80009d0:	f003 fcae 	bl	8004330 <osThreadNew>
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <main+0x320>)
 80009d6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80009d8:	f003 fc8c 	bl	80042f4 <osKernelStart>
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x2c0>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000400 	.word	0x50000400
 80009e8:	50000800 	.word	0x50000800
 80009ec:	200012d4 	.word	0x200012d4
 80009f0:	40012400 	.word	0x40012400
 80009f4:	04000002 	.word	0x04000002
 80009f8:	08000004 	.word	0x08000004
 80009fc:	0c000008 	.word	0x0c000008
 8000a00:	10000010 	.word	0x10000010
 8000a04:	14000020 	.word	0x14000020
 8000a08:	1c000080 	.word	0x1c000080
 8000a0c:	20000100 	.word	0x20000100
 8000a10:	24000200 	.word	0x24000200
 8000a14:	40010000 	.word	0x40010000
 8000a18:	20001068 	.word	0x20001068
 8000a1c:	40014800 	.word	0x40014800
 8000a20:	0000ffff 	.word	0x0000ffff
 8000a24:	20001338 	.word	0x20001338
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	20001190 	.word	0x20001190
 8000a30:	200010b4 	.word	0x200010b4
 8000a34:	080061b0 	.word	0x080061b0
 8000a38:	08000671 	.word	0x08000671
 8000a3c:	20001064 	.word	0x20001064

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000a42:	6802      	ldr	r2, [r0, #0]
{
 8000a44:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000a4a:	f000 f969 	bl	8000d20 <HAL_IncTick>
}
 8000a4e:	bd10      	pop	{r4, pc}
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <Error_Handler>:
 8000a54:	b672      	cpsid	i
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x2>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_MspInit+0x34>)
 8000a5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000a60:	4301      	orrs	r1, r0
 8000a62:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4002      	ands	r2, r0
 8000a6c:	9200      	str	r2, [sp, #0]
 8000a6e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a72:	1800      	adds	r0, r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	430a      	orrs	r2, r1
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a7a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a80:	2103      	movs	r1, #3
 8000a82:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a86:	f000 fc49 	bl	800131c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bd07      	pop	{r0, r1, r2, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0005      	movs	r5, r0
 8000a94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	2214      	movs	r2, #20
 8000a98:	2100      	movs	r1, #0
 8000a9a:	a803      	add	r0, sp, #12
 8000a9c:	f005 fa9f 	bl	8005fde <memset>
  if(hadc->Instance==ADC1)
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_ADC_MspInit+0xa8>)
 8000aa2:	682a      	ldr	r2, [r5, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d145      	bne.n	8000b34 <HAL_ADC_MspInit+0xa4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aa8:	2080      	movs	r0, #128	; 0x80
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <HAL_ADC_MspInit+0xac>)
 8000aac:	0340      	lsls	r0, r0, #13
 8000aae:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
                          |BOARD_TEMP_PROBE1_Pin|BOARD_TEMP_PROBE2_Pin|VBAT_1_Pin|BAT_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ab2:	4301      	orrs	r1, r0
 8000ab4:	6419      	str	r1, [r3, #64]	; 0x40
 8000ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aba:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2001      	movs	r0, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8000abe:	9200      	str	r2, [sp, #0]
 8000ac0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ac4:	4301      	orrs	r1, r0
 8000ac6:	6359      	str	r1, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000acc:	4002      	ands	r2, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_ADC_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000aea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f000 fd91 	bl	8001614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	4814      	ldr	r0, [pc, #80]	; (8000b44 <HAL_ADC_MspInit+0xb4>)
 8000af4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000af6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f000 fd8a 	bl	8001614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b00:	4c11      	ldr	r4, [pc, #68]	; (8000b48 <HAL_ADC_MspInit+0xb8>)
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b04:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000b06:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b0c:	337b      	adds	r3, #123	; 0x7b
 8000b0e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	3380      	adds	r3, #128	; 0x80
 8000b12:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b1a:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1c:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1e:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b20:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b22:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b24:	f000 fc4a 	bl	80013bc <HAL_DMA_Init>
 8000b28:	42b0      	cmp	r0, r6
 8000b2a:	d001      	beq.n	8000b30 <HAL_ADC_MspInit+0xa0>
    {
      Error_Handler();
 8000b2c:	f7ff ff92 	bl	8000a54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b30:	652c      	str	r4, [r5, #80]	; 0x50
 8000b32:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b34:	b008      	add	sp, #32
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	000010bf 	.word	0x000010bf
 8000b44:	50000400 	.word	0x50000400
 8000b48:	200013c8 	.word	0x200013c8
 8000b4c:	40020008 	.word	0x40020008

08000b50 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM17)
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_TIM_Base_MspInit+0x24>)
 8000b52:	6802      	ldr	r2, [r0, #0]
{
 8000b54:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM17)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d109      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b5a:	2080      	movs	r0, #128	; 0x80
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_TIM_Base_MspInit+0x28>)
 8000b5e:	02c0      	lsls	r0, r0, #11
 8000b60:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b62:	4301      	orrs	r1, r0
 8000b64:	6411      	str	r1, [r2, #64]	; 0x40
 8000b66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b68:	4003      	ands	r3, r0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b6e:	b002      	add	sp, #8
 8000b70:	4770      	bx	lr
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40014800 	.word	0x40014800
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	0004      	movs	r4, r0
 8000b80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	2214      	movs	r2, #20
 8000b84:	2100      	movs	r1, #0
 8000b86:	a803      	add	r0, sp, #12
 8000b88:	f005 fa29 	bl	8005fde <memset>
  if(huart->Instance==USART1)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_UART_MspInit+0x6c>)
 8000b8e:	6822      	ldr	r2, [r4, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d127      	bne.n	8000be4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x70>)
 8000b98:	01c0      	lsls	r0, r0, #7
 8000b9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	4301      	orrs	r1, r0
 8000ba0:	6419      	str	r1, [r3, #64]	; 0x40
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	4002      	ands	r2, r0
 8000ba6:	9201      	str	r2, [sp, #4]
 8000ba8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2201      	movs	r2, #1
 8000bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	6359      	str	r1, [r3, #52]	; 0x34
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4013      	ands	r3, r2
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bbe:	23c0      	movs	r3, #192	; 0xc0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bca:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f000 fd20 	bl	8001614 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000bd4:	201b      	movs	r0, #27
 8000bd6:	0022      	movs	r2, r4
 8000bd8:	2103      	movs	r1, #3
 8000bda:	f000 fb9f 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bde:	201b      	movs	r0, #27
 8000be0:	f000 fbc6 	bl	8001370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000be4:	b008      	add	sp, #32
 8000be6:	bd10      	pop	{r4, pc}
 8000be8:	40013800 	.word	0x40013800
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	0001      	movs	r1, r0
 8000bf4:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	200d      	movs	r0, #13
 8000bfa:	f000 fb8f 	bl	800131c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000bfe:	200d      	movs	r0, #13
 8000c00:	f000 fbb6 	bl	8001370 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_InitTick+0x68>)
 8000c08:	0100      	lsls	r0, r0, #4
 8000c0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c0c:	4301      	orrs	r1, r0
 8000c0e:	6411      	str	r1, [r2, #64]	; 0x40
 8000c10:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c12:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c14:	4003      	ands	r3, r0
 8000c16:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f001 f906 	bl	8001e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c20:	f001 f8f0 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c24:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <HAL_InitTick+0x6c>)
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8000c2a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_InitTick+0x78>)
 8000c2e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c30:	f7ff fa92 	bl	8000158 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000c34:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c36:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c38:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c3a:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000c3c:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c40:	f001 fb34 	bl	80022ac <HAL_TIM_Base_Init>
 8000c44:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	f001 f9fd 	bl	800204c <HAL_TIM_Base_Start_IT>
}
 8000c52:	b006      	add	sp, #24
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	20001624 	.word	0x20001624
 8000c60:	40012c00 	.word	0x40012c00
 8000c64:	000f4240 	.word	0x000f4240
 8000c68:	000003e7 	.word	0x000003e7

08000c6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler>

08000c6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler>

08000c70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Channel1_IRQHandler+0xc>)
 8000c74:	f000 fc7a 	bl	800156c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	200013c8 	.word	0x200013c8

08000c80 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000c80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c82:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8000c84:	f001 fa16 	bl	80020b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20001624 	.word	0x20001624

08000c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <USART1_IRQHandler+0xc>)
 8000c94:	f001 fd18 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20001338 	.word	0x20001338

08000ca0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff fffa 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f005 f955 	bl	8005f80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cd6:	f7ff fd21 	bl	800071c <main>

08000cda <LoopForever>:

LoopForever:
  b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce8:	080063b4 	.word	0x080063b4
  ldr r2, =_sbss
 8000cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf0:	200016c0 	.word	0x200016c0

08000cf4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_IRQHandler>
	...

08000cf8 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_Init+0x24>)
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	6811      	ldr	r1, [r2, #0]
{
 8000d00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d02:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d04:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d06:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d08:	f7ff ff72 	bl	8000bf0 <HAL_InitTick>
 8000d0c:	1e04      	subs	r4, r0, #0
 8000d0e:	d103      	bne.n	8000d18 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fea2 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000d14:	0020      	movs	r0, r4
 8000d16:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000d18:	2401      	movs	r4, #1
 8000d1a:	e7fb      	b.n	8000d14 <HAL_Init+0x1c>
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_IncTick+0x10>)
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <HAL_IncTick+0x14>)
 8000d24:	6811      	ldr	r1, [r2, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	185b      	adds	r3, r3, r1
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	4770      	bx	lr
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	20001670 	.word	0x20001670
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <HAL_GetTick+0x8>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
}
 8000d3c:	4770      	bx	lr
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20001670 	.word	0x20001670

08000d44 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d44:	6880      	ldr	r0, [r0, #8]
 8000d46:	0740      	lsls	r0, r0, #29
 8000d48:	0fc0      	lsrs	r0, r0, #31
}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d4c:	2300      	movs	r3, #0
{
 8000d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d50:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000d52:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000d54:	3301      	adds	r3, #1
{
 8000d56:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 8000d58:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000d5a:	d100      	bne.n	8000d5e <HAL_ADC_Init+0x12>
 8000d5c:	e0c1      	b.n	8000ee2 <HAL_ADC_Init+0x196>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d5e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d105      	bne.n	8000d70 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d64:	f7ff fe94 	bl	8000a90 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d68:	0023      	movs	r3, r4
 8000d6a:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6c:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000d6e:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d70:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d72:	6826      	ldr	r6, [r4, #0]
 8000d74:	055b      	lsls	r3, r3, #21
 8000d76:	68b2      	ldr	r2, [r6, #8]
 8000d78:	421a      	tst	r2, r3
 8000d7a:	d100      	bne.n	8000d7e <HAL_ADC_Init+0x32>
 8000d7c:	e0b4      	b.n	8000ee8 <HAL_ADC_Init+0x19c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	68b3      	ldr	r3, [r6, #8]
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	d408      	bmi.n	8000d9a <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d88:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d8c:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d8e:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d90:	4313      	orrs	r3, r2
 8000d92:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000d96:	432b      	orrs	r3, r5
 8000d98:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d9a:	0030      	movs	r0, r6
 8000d9c:	f7ff ffd2 	bl	8000d44 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000da0:	2310      	movs	r3, #16
 8000da2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000da4:	401a      	ands	r2, r3
 8000da6:	4310      	orrs	r0, r2
 8000da8:	d000      	beq.n	8000dac <HAL_ADC_Init+0x60>
 8000daa:	e0ec      	b.n	8000f86 <HAL_ADC_Init+0x23a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dae:	4a79      	ldr	r2, [pc, #484]	; (8000f94 <HAL_ADC_Init+0x248>)
  uint32_t tmpCFGR2 = 0UL;
 8000db0:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	401a      	ands	r2, r3
 8000db4:	2302      	movs	r3, #2
 8000db6:	4313      	orrs	r3, r2
 8000db8:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	07d2      	lsls	r2, r2, #31
 8000dc0:	d431      	bmi.n	8000e26 <HAL_ADC_Init+0xda>

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dc2:	0026      	movs	r6, r4
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	3118      	adds	r1, #24
 8000dc8:	438a      	bics	r2, r1
 8000dca:	68a1      	ldr	r1, [r4, #8]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000dcc:	363c      	adds	r6, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	60da      	str	r2, [r3, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dd2:	6862      	ldr	r2, [r4, #4]
 8000dd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8000dd6:	7835      	ldrb	r5, [r6, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dd8:	0f97      	lsrs	r7, r2, #30
 8000dda:	07bf      	lsls	r7, r7, #30
 8000ddc:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8000dde:	9502      	str	r5, [sp, #8]
 8000de0:	2d01      	cmp	r5, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_ADC_Init+0xaa>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000de4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000de6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000de8:	4335      	orrs	r5, r6
 8000dea:	4329      	orrs	r1, r5
 8000dec:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000dee:	4329      	orrs	r1, r5
 8000df0:	9d02      	ldr	r5, [sp, #8]
 8000df2:	4339      	orrs	r1, r7
 8000df4:	4329      	orrs	r1, r5
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000df6:	691e      	ldr	r6, [r3, #16]
 8000df8:	4f67      	ldr	r7, [pc, #412]	; (8000f98 <HAL_ADC_Init+0x24c>)
 8000dfa:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000dfc:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000dfe:	430e      	orrs	r6, r1
 8000e00:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e02:	0056      	lsls	r6, r2, #1
 8000e04:	0876      	lsrs	r6, r6, #1
 8000e06:	05ff      	lsls	r7, r7, #23
 8000e08:	42be      	cmp	r6, r7
 8000e0a:	d00c      	beq.n	8000e26 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e0c:	2680      	movs	r6, #128	; 0x80
 8000e0e:	0636      	lsls	r6, r6, #24
 8000e10:	42b2      	cmp	r2, r6
 8000e12:	d008      	beq.n	8000e26 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e14:	4e61      	ldr	r6, [pc, #388]	; (8000f9c <HAL_ADC_Init+0x250>)
 8000e16:	4f62      	ldr	r7, [pc, #392]	; (8000fa0 <HAL_ADC_Init+0x254>)
 8000e18:	6835      	ldr	r5, [r6, #0]
 8000e1a:	402f      	ands	r7, r5
 8000e1c:	25f0      	movs	r5, #240	; 0xf0
 8000e1e:	03ad      	lsls	r5, r5, #14
 8000e20:	402a      	ands	r2, r5
 8000e22:	433a      	orrs	r2, r7
 8000e24:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e26:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e28:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e2a:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e2c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e2e:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e30:	7ea2      	ldrb	r2, [r4, #26]
 8000e32:	4694      	mov	ip, r2
 8000e34:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_ADC_Init+0xf4>
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	0152      	lsls	r2, r2, #5
 8000e40:	68e5      	ldr	r5, [r4, #12]
 8000e42:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e44:	6925      	ldr	r5, [r4, #16]
 8000e46:	433e      	orrs	r6, r7
 8000e48:	9603      	str	r6, [sp, #12]
 8000e4a:	9502      	str	r5, [sp, #8]
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	da60      	bge.n	8000f12 <HAL_ADC_Init+0x1c6>
 8000e50:	006f      	lsls	r7, r5, #1
 8000e52:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e54:	0026      	movs	r6, r4
 8000e56:	362c      	adds	r6, #44	; 0x2c
 8000e58:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e5a:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e5c:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e5e:	432e      	orrs	r6, r5
 8000e60:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e62:	1c66      	adds	r6, r4, #1
 8000e64:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e66:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e68:	2e01      	cmp	r6, #1
 8000e6a:	d105      	bne.n	8000e78 <HAL_ADC_Init+0x12c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e6c:	4665      	mov	r5, ip
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d152      	bne.n	8000f18 <HAL_ADC_Init+0x1cc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e72:	2680      	movs	r6, #128	; 0x80
 8000e74:	0276      	lsls	r6, r6, #9
 8000e76:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_ADC_Init+0x13e>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e7e:	27e0      	movs	r7, #224	; 0xe0
 8000e80:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000e82:	007f      	lsls	r7, r7, #1
 8000e84:	403e      	ands	r6, r7
 8000e86:	432e      	orrs	r6, r5
 8000e88:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000e8a:	68de      	ldr	r6, [r3, #12]
 8000e8c:	4f45      	ldr	r7, [pc, #276]	; (8000fa4 <HAL_ADC_Init+0x258>)
  MODIFY_REG(ADCx->SMPR,
 8000e8e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000e90:	403e      	ands	r6, r7
 8000e92:	4316      	orrs	r6, r2
 8000e94:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000e96:	691e      	ldr	r6, [r3, #16]
 8000e98:	4f43      	ldr	r7, [pc, #268]	; (8000fa8 <HAL_ADC_Init+0x25c>)
 8000e9a:	403e      	ands	r6, r7
 8000e9c:	4331      	orrs	r1, r6
 8000e9e:	2607      	movs	r6, #7
 8000ea0:	2770      	movs	r7, #112	; 0x70
 8000ea2:	6119      	str	r1, [r3, #16]
 8000ea4:	6959      	ldr	r1, [r3, #20]
 8000ea6:	43b1      	bics	r1, r6
 8000ea8:	4329      	orrs	r1, r5
 8000eaa:	6159      	str	r1, [r3, #20]
 8000eac:	695e      	ldr	r6, [r3, #20]
 8000eae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000eb0:	43be      	bics	r6, r7
 8000eb2:	0109      	lsls	r1, r1, #4
 8000eb4:	4331      	orrs	r1, r6
 8000eb6:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000eb8:	9902      	ldr	r1, [sp, #8]
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	d134      	bne.n	8000f28 <HAL_ADC_Init+0x1dc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ebe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ec0:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000ec2:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000ec4:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4938      	ldr	r1, [pc, #224]	; (8000fac <HAL_ADC_Init+0x260>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d14d      	bne.n	8000f6c <HAL_ADC_Init+0x220>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed2:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed4:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ed8:	4393      	bics	r3, r2
 8000eda:	001a      	movs	r2, r3
 8000edc:	2301      	movs	r3, #1
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8000ee2:	9801      	ldr	r0, [sp, #4]
 8000ee4:	b007      	add	sp, #28
 8000ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8000ee8:	68b2      	ldr	r2, [r6, #8]
 8000eea:	4931      	ldr	r1, [pc, #196]	; (8000fb0 <HAL_ADC_Init+0x264>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_ADC_Init+0x268>)
 8000ef4:	4930      	ldr	r1, [pc, #192]	; (8000fb8 <HAL_ADC_Init+0x26c>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f7ff f92e 	bl	8000158 <__udivsi3>
 8000efc:	3001      	adds	r0, #1
 8000efe:	0040      	lsls	r0, r0, #1
 8000f00:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 8000f02:	9b05      	ldr	r3, [sp, #20]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d100      	bne.n	8000f0a <HAL_ADC_Init+0x1be>
 8000f08:	e739      	b.n	8000d7e <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8000f0a:	9b05      	ldr	r3, [sp, #20]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	9305      	str	r3, [sp, #20]
 8000f10:	e7f7      	b.n	8000f02 <HAL_ADC_Init+0x1b6>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f12:	2780      	movs	r7, #128	; 0x80
 8000f14:	03bf      	lsls	r7, r7, #14
 8000f16:	e79d      	b.n	8000e54 <HAL_ADC_Init+0x108>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f18:	2720      	movs	r7, #32
 8000f1a:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8000f1c:	432f      	orrs	r7, r5
 8000f1e:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f20:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8000f22:	433e      	orrs	r6, r7
 8000f24:	65e6      	str	r6, [r4, #92]	; 0x5c
 8000f26:	e7a7      	b.n	8000e78 <HAL_ADC_Init+0x12c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	9d02      	ldr	r5, [sp, #8]
 8000f2c:	0389      	lsls	r1, r1, #14
 8000f2e:	428d      	cmp	r5, r1
 8000f30:	d1c9      	bne.n	8000ec6 <HAL_ADC_Init+0x17a>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000f32:	270f      	movs	r7, #15
 8000f34:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000f36:	0035      	movs	r5, r6
 8000f38:	0081      	lsls	r1, r0, #2
 8000f3a:	40cd      	lsrs	r5, r1
 8000f3c:	0029      	movs	r1, r5
 8000f3e:	4039      	ands	r1, r7
 8000f40:	290f      	cmp	r1, #15
 8000f42:	d00d      	beq.n	8000f60 <HAL_ADC_Init+0x214>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000f44:	3001      	adds	r0, #1
 8000f46:	2808      	cmp	r0, #8
 8000f48:	d1f5      	bne.n	8000f36 <HAL_ADC_Init+0x1ea>
        MODIFY_REG(hadc->Instance->CHSELR,
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f4e:	69e1      	ldr	r1, [r4, #28]
 8000f50:	3901      	subs	r1, #1
 8000f52:	0089      	lsls	r1, r1, #2
 8000f54:	4001      	ands	r1, r0
 8000f56:	382c      	subs	r0, #44	; 0x2c
 8000f58:	4088      	lsls	r0, r1
 8000f5a:	0001      	movs	r1, r0
 8000f5c:	4331      	orrs	r1, r6
 8000f5e:	e7b1      	b.n	8000ec4 <HAL_ADC_Init+0x178>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000f60:	2801      	cmp	r0, #1
 8000f62:	d1f2      	bne.n	8000f4a <HAL_ADC_Init+0x1fe>
        SET_BIT(hadc->Instance->CHSELR,
 8000f64:	2110      	movs	r1, #16
 8000f66:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f68:	4249      	negs	r1, r1
 8000f6a:	e7aa      	b.n	8000ec2 <HAL_ADC_Init+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	2212      	movs	r2, #18
 8000f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f70:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000f72:	4393      	bics	r3, r2
 8000f74:	001a      	movs	r2, r3
 8000f76:	2310      	movs	r3, #16
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8000f7e:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f80:	432b      	orrs	r3, r5
 8000f82:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8000f84:	e7ad      	b.n	8000ee2 <HAL_ADC_Init+0x196>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f86:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	e7a7      	b.n	8000ee2 <HAL_ADC_Init+0x196>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	fffffefd 	.word	0xfffffefd
 8000f98:	1ffffc02 	.word	0x1ffffc02
 8000f9c:	40012708 	.word	0x40012708
 8000fa0:	ffc3ffff 	.word	0xffc3ffff
 8000fa4:	fffe0219 	.word	0xfffe0219
 8000fa8:	dffffc02 	.word	0xdffffc02
 8000fac:	833fffe7 	.word	0x833fffe7
 8000fb0:	6fffffe8 	.word	0x6fffffe8
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	00030d40 	.word	0x00030d40

08000fbc <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fbc:	2300      	movs	r3, #0
{
 8000fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc0:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000fc2:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	3354      	adds	r3, #84	; 0x54
 8000fc8:	781a      	ldrb	r2, [r3, #0]
{
 8000fca:	0005      	movs	r5, r0
 8000fcc:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	2a01      	cmp	r2, #1
 8000fd2:	d100      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x1a>
 8000fd4:	e0c3      	b.n	800115e <HAL_ADC_ConfigChannel+0x1a2>
 8000fd6:	2401      	movs	r4, #1
 8000fd8:	701c      	strb	r4, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fda:	6828      	ldr	r0, [r5, #0]
 8000fdc:	f7ff feb2 	bl	8000d44 <LL_ADC_REG_IsConversionOngoing>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d000      	beq.n	8000fe6 <HAL_ADC_ConfigChannel+0x2a>
 8000fe4:	e0f9      	b.n	80011da <HAL_ADC_ConfigChannel+0x21e>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	6873      	ldr	r3, [r6, #4]
 8000fea:	0612      	lsls	r2, r2, #24
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	2304      	movs	r3, #4
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	692f      	ldr	r7, [r5, #16]
 8000ff4:	9a01      	ldr	r2, [sp, #4]
 8000ff6:	439f      	bics	r7, r3
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	2a02      	cmp	r2, #2
 8000ffc:	d100      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x44>
 8000ffe:	e0c2      	b.n	8001186 <HAL_ADC_ConfigChannel+0x1ca>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001000:	0359      	lsls	r1, r3, #13
 8001002:	0b49      	lsrs	r1, r1, #13
 8001004:	682a      	ldr	r2, [r5, #0]
 8001006:	9102      	str	r1, [sp, #8]
 8001008:	4567      	cmp	r7, ip
 800100a:	d10f      	bne.n	800102c <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800100c:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 800100e:	4301      	orrs	r1, r0
 8001010:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8001012:	68b1      	ldr	r1, [r6, #8]
 8001014:	6954      	ldr	r4, [r2, #20]
 8001016:	0218      	lsls	r0, r3, #8
 8001018:	4e73      	ldr	r6, [pc, #460]	; (80011e8 <HAL_ADC_ConfigChannel+0x22c>)
 800101a:	4001      	ands	r1, r0
 800101c:	4031      	ands	r1, r6
 800101e:	4384      	bics	r4, r0
 8001020:	4321      	orrs	r1, r4
 8001022:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001024:	2b00      	cmp	r3, #0
 8001026:	db64      	blt.n	80010f2 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2000      	movs	r0, #0
}
 800102a:	e095      	b.n	8001158 <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800102c:	211f      	movs	r1, #31
 800102e:	9f01      	ldr	r7, [sp, #4]
 8001030:	400f      	ands	r7, r1
 8001032:	46bc      	mov	ip, r7
 8001034:	270f      	movs	r7, #15
 8001036:	4661      	mov	r1, ip
 8001038:	408f      	lsls	r7, r1
 800103a:	43f9      	mvns	r1, r7
 800103c:	9103      	str	r1, [sp, #12]
 800103e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001040:	43b9      	bics	r1, r7
 8001042:	000f      	movs	r7, r1
 8001044:	9902      	ldr	r1, [sp, #8]
 8001046:	2900      	cmp	r1, #0
 8001048:	d114      	bne.n	8001074 <HAL_ADC_ConfigChannel+0xb8>
 800104a:	0e98      	lsrs	r0, r3, #26
 800104c:	311f      	adds	r1, #31
 800104e:	4008      	ands	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001054:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001056:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001058:	0889      	lsrs	r1, r1, #2
 800105a:	69e8      	ldr	r0, [r5, #28]
 800105c:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800105e:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001060:	4281      	cmp	r1, r0
 8001062:	d8d6      	bhi.n	8001012 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001064:	4664      	mov	r4, ip
 8001066:	0099      	lsls	r1, r3, #2
 8001068:	0f09      	lsrs	r1, r1, #28
 800106a:	40a1      	lsls	r1, r4
 800106c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800106e:	9c03      	ldr	r4, [sp, #12]
 8001070:	4020      	ands	r0, r4
 8001072:	e7cc      	b.n	800100e <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001074:	4223      	tst	r3, r4
 8001076:	d1eb      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 8001078:	2102      	movs	r1, #2
 800107a:	0020      	movs	r0, r4
 800107c:	420b      	tst	r3, r1
 800107e:	d1e7      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 8001080:	0008      	movs	r0, r1
 8001082:	1849      	adds	r1, r1, r1
 8001084:	420b      	tst	r3, r1
 8001086:	d1e3      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 8001088:	3001      	adds	r0, #1
 800108a:	0719      	lsls	r1, r3, #28
 800108c:	d4e0      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 800108e:	3001      	adds	r0, #1
 8001090:	06d9      	lsls	r1, r3, #27
 8001092:	d4dd      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 8001094:	3001      	adds	r0, #1
 8001096:	0699      	lsls	r1, r3, #26
 8001098:	d4da      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 800109a:	3001      	adds	r0, #1
 800109c:	0659      	lsls	r1, r3, #25
 800109e:	d4d7      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010a0:	3001      	adds	r0, #1
 80010a2:	0619      	lsls	r1, r3, #24
 80010a4:	d4d4      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010a6:	3001      	adds	r0, #1
 80010a8:	05d9      	lsls	r1, r3, #23
 80010aa:	d4d1      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010ac:	3001      	adds	r0, #1
 80010ae:	0599      	lsls	r1, r3, #22
 80010b0:	d4ce      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010b2:	3001      	adds	r0, #1
 80010b4:	0559      	lsls	r1, r3, #21
 80010b6:	d4cb      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010b8:	3001      	adds	r0, #1
 80010ba:	0519      	lsls	r1, r3, #20
 80010bc:	d4c8      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010be:	3001      	adds	r0, #1
 80010c0:	04d9      	lsls	r1, r3, #19
 80010c2:	d4c5      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010c4:	3001      	adds	r0, #1
 80010c6:	0499      	lsls	r1, r3, #18
 80010c8:	d4c2      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010ca:	3001      	adds	r0, #1
 80010cc:	0459      	lsls	r1, r3, #17
 80010ce:	d4bf      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010d0:	3001      	adds	r0, #1
 80010d2:	0419      	lsls	r1, r3, #16
 80010d4:	d4bc      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010d6:	3001      	adds	r0, #1
 80010d8:	03d9      	lsls	r1, r3, #15
 80010da:	d4b9      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010dc:	3001      	adds	r0, #1
 80010de:	0399      	lsls	r1, r3, #14
 80010e0:	d4b6      	bmi.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0018      	movs	r0, r3
 80010e6:	02c9      	lsls	r1, r1, #11
 80010e8:	4008      	ands	r0, r1
 80010ea:	420b      	tst	r3, r1
 80010ec:	d0b0      	beq.n	8001050 <HAL_ADC_ConfigChannel+0x94>
 80010ee:	2012      	movs	r0, #18
 80010f0:	e7ae      	b.n	8001050 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010f2:	24e0      	movs	r4, #224	; 0xe0
 80010f4:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_ADC_ConfigChannel+0x230>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010f6:	483e      	ldr	r0, [pc, #248]	; (80011f0 <HAL_ADC_ConfigChannel+0x234>)
 80010f8:	6811      	ldr	r1, [r2, #0]
 80010fa:	0464      	lsls	r4, r4, #17
 80010fc:	400c      	ands	r4, r1
 80010fe:	4283      	cmp	r3, r0
 8001100:	d11a      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001106:	4219      	tst	r1, r3
 8001108:	d18e      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	4839      	ldr	r0, [pc, #228]	; (80011f4 <HAL_ADC_ConfigChannel+0x238>)
 800110e:	4001      	ands	r1, r0
 8001110:	4321      	orrs	r1, r4
 8001112:	4319      	orrs	r1, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_ADC_ConfigChannel+0x23c>)
 8001116:	6011      	str	r1, [r2, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	4938      	ldr	r1, [pc, #224]	; (80011fc <HAL_ADC_ConfigChannel+0x240>)
 800111c:	f7ff f81c 	bl	8000158 <__udivsi3>
 8001120:	1c43      	adds	r3, r0, #1
 8001122:	200c      	movs	r0, #12
 8001124:	4358      	muls	r0, r3
 8001126:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8001128:	9b05      	ldr	r3, [sp, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x174>
 800112e:	e77b      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
          {
            wait_loop_index--;
 8001130:	9b05      	ldr	r3, [sp, #20]
 8001132:	3b01      	subs	r3, #1
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	e7f7      	b.n	8001128 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001138:	4831      	ldr	r0, [pc, #196]	; (8001200 <HAL_ADC_ConfigChannel+0x244>)
 800113a:	4283      	cmp	r3, r0
 800113c:	d111      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x1a6>
 800113e:	2680      	movs	r6, #128	; 0x80
 8001140:	0008      	movs	r0, r1
 8001142:	0476      	lsls	r6, r6, #17
 8001144:	4030      	ands	r0, r6
 8001146:	4231      	tst	r1, r6
 8001148:	d000      	beq.n	800114c <HAL_ADC_ConfigChannel+0x190>
 800114a:	e76d      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_ADC_ConfigChannel+0x238>)
 8001150:	4019      	ands	r1, r3
 8001152:	4321      	orrs	r1, r4
 8001154:	430e      	orrs	r6, r1
 8001156:	6016      	str	r6, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8001158:	2300      	movs	r3, #0
 800115a:	3554      	adds	r5, #84	; 0x54
 800115c:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 800115e:	b007      	add	sp, #28
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001162:	4828      	ldr	r0, [pc, #160]	; (8001204 <HAL_ADC_ConfigChannel+0x248>)
 8001164:	4283      	cmp	r3, r0
 8001166:	d000      	beq.n	800116a <HAL_ADC_ConfigChannel+0x1ae>
 8001168:	e75e      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	0008      	movs	r0, r1
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001172:	4219      	tst	r1, r3
 8001174:	d000      	beq.n	8001178 <HAL_ADC_ConfigChannel+0x1bc>
 8001176:	e757      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	4e1e      	ldr	r6, [pc, #120]	; (80011f4 <HAL_ADC_ConfigChannel+0x238>)
 800117c:	4031      	ands	r1, r6
 800117e:	4321      	orrs	r1, r4
 8001180:	430b      	orrs	r3, r1
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	e7e8      	b.n	8001158 <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001186:	4567      	cmp	r7, ip
 8001188:	d105      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800118a:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800118c:	0359      	lsls	r1, r3, #13
 800118e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001190:	0b49      	lsrs	r1, r1, #13
 8001192:	438a      	bics	r2, r1
 8001194:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001196:	2b00      	cmp	r3, #0
 8001198:	db00      	blt.n	800119c <HAL_ADC_ConfigChannel+0x1e0>
 800119a:	e745      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <HAL_ADC_ConfigChannel+0x234>)
 80011a0:	6811      	ldr	r1, [r2, #0]
 80011a2:	4283      	cmp	r3, r0
 80011a4:	d108      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011a6:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011ac:	4019      	ands	r1, r3
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_ADC_ConfigChannel+0x238>)
 80011b0:	4003      	ands	r3, r0
 80011b2:	4319      	orrs	r1, r3
 80011b4:	6011      	str	r1, [r2, #0]
 80011b6:	e737      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <HAL_ADC_ConfigChannel+0x244>)
 80011ba:	4283      	cmp	r3, r0
 80011bc:	d103      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011be:	23c0      	movs	r3, #192	; 0xc0
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	e7f2      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <HAL_ADC_ConfigChannel+0x248>)
 80011c8:	4283      	cmp	r3, r0
 80011ca:	d000      	beq.n	80011ce <HAL_ADC_ConfigChannel+0x212>
 80011cc:	e72c      	b.n	8001028 <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011ce:	20c0      	movs	r0, #192	; 0xc0
 80011d0:	0440      	lsls	r0, r0, #17
 80011d2:	4001      	ands	r1, r0
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <HAL_ADC_ConfigChannel+0x238>)
 80011d8:	e7ea      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011da:	2320      	movs	r3, #32
 80011dc:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80011de:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e0:	4313      	orrs	r3, r2
 80011e2:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80011e4:	e7b8      	b.n	8001158 <HAL_ADC_ConfigChannel+0x19c>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	07ffff00 	.word	0x07ffff00
 80011ec:	40012708 	.word	0x40012708
 80011f0:	b0001000 	.word	0xb0001000
 80011f4:	fe3fffff 	.word	0xfe3fffff
 80011f8:	20000000 	.word	0x20000000
 80011fc:	00030d40 	.word	0x00030d40
 8001200:	b8004000 	.word	0xb8004000
 8001204:	b4002000 	.word	0xb4002000

08001208 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001208:	2300      	movs	r3, #0
{
 800120a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800120c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800120e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001210:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001212:	2001      	movs	r0, #1
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	4202      	tst	r2, r0
 8001218:	d001      	beq.n	800121e <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800121a:	2000      	movs	r0, #0
}
 800121c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <ADC_Enable+0xa4>)
 8001222:	4211      	tst	r1, r2
 8001224:	d007      	beq.n	8001236 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001226:	2310      	movs	r3, #16
 8001228:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800122a:	4313      	orrs	r3, r2
 800122c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001230:	4303      	orrs	r3, r0
 8001232:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001234:	e7f2      	b.n	800121c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	4e1d      	ldr	r6, [pc, #116]	; (80012b0 <ADC_Enable+0xa8>)
 800123a:	4032      	ands	r2, r6
 800123c:	4310      	orrs	r0, r2
 800123e:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <ADC_Enable+0xac>)
 8001242:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	d423      	bmi.n	8001290 <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001248:	7e63      	ldrb	r3, [r4, #25]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d0e5      	beq.n	800121a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800124e:	f7ff fd73 	bl	8000d38 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001252:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8001254:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	422b      	tst	r3, r5
 800125c:	d1dd      	bne.n	800121a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800125e:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001260:	422b      	tst	r3, r5
 8001262:	d103      	bne.n	800126c <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8001264:	6893      	ldr	r3, [r2, #8]
 8001266:	4033      	ands	r3, r6
 8001268:	432b      	orrs	r3, r5
 800126a:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800126c:	f7ff fd64 	bl	8000d38 <HAL_GetTick>
 8001270:	1bc0      	subs	r0, r0, r7
 8001272:	2802      	cmp	r0, #2
 8001274:	d9ef      	bls.n	8001256 <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	422b      	tst	r3, r5
 800127c:	d1eb      	bne.n	8001256 <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	2310      	movs	r3, #16
 8001280:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001284:	4313      	orrs	r3, r2
 8001286:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800128a:	431d      	orrs	r5, r3
 800128c:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800128e:	e7c5      	b.n	800121c <ADC_Enable+0x14>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <ADC_Enable+0xb0>)
 8001292:	490a      	ldr	r1, [pc, #40]	; (80012bc <ADC_Enable+0xb4>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f7fe ff5f 	bl	8000158 <__udivsi3>
 800129a:	3001      	adds	r0, #1
 800129c:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800129e:	9b01      	ldr	r3, [sp, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0d1      	beq.n	8001248 <ADC_Enable+0x40>
        wait_loop_index--;
 80012a4:	9b01      	ldr	r3, [sp, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	e7f8      	b.n	800129e <ADC_Enable+0x96>
 80012ac:	80000017 	.word	0x80000017
 80012b0:	7fffffe8 	.word	0x7fffffe8
 80012b4:	40012708 	.word	0x40012708
 80012b8:	20000000 	.word	0x20000000
 80012bc:	00030d40 	.word	0x00030d40

080012c0 <HAL_ADC_Start>:
{
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012c4:	6800      	ldr	r0, [r0, #0]
 80012c6:	f7ff fd3d 	bl	8000d44 <LL_ADC_REG_IsConversionOngoing>
 80012ca:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 80012cc:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d11d      	bne.n	800130e <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 80012d2:	0025      	movs	r5, r4
 80012d4:	3554      	adds	r5, #84	; 0x54
 80012d6:	782b      	ldrb	r3, [r5, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d018      	beq.n	800130e <HAL_ADC_Start+0x4e>
 80012dc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80012de:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 80012e0:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 80012e2:	f7ff ff91 	bl	8001208 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d112      	bne.n	8001310 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <HAL_ADC_Start+0x58>)
 80012f0:	401a      	ands	r2, r3
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80012fa:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012fc:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001300:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8001302:	7028      	strb	r0, [r5, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4011      	ands	r1, r2
 8001308:	2204      	movs	r2, #4
 800130a:	430a      	orrs	r2, r1
 800130c:	609a      	str	r2, [r3, #8]
}
 800130e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8001310:	702e      	strb	r6, [r5, #0]
 8001312:	e7fc      	b.n	800130e <HAL_ADC_Start+0x4e>
 8001314:	fffff0fe 	.word	0xfffff0fe
 8001318:	7fffffe8 	.word	0x7fffffe8

0800131c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b530      	push	{r4, r5, lr}
 800131e:	25ff      	movs	r5, #255	; 0xff
 8001320:	2403      	movs	r4, #3
 8001322:	002a      	movs	r2, r5
 8001324:	4004      	ands	r4, r0
 8001326:	00e4      	lsls	r4, r4, #3
 8001328:	40a2      	lsls	r2, r4
 800132a:	0189      	lsls	r1, r1, #6
 800132c:	4029      	ands	r1, r5
 800132e:	43d2      	mvns	r2, r2
 8001330:	40a1      	lsls	r1, r4
 8001332:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001334:	2800      	cmp	r0, #0
 8001336:	db0a      	blt.n	800134e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	24c0      	movs	r4, #192	; 0xc0
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_NVIC_SetPriority+0x4c>)
 800133c:	0880      	lsrs	r0, r0, #2
 800133e:	0080      	lsls	r0, r0, #2
 8001340:	18c0      	adds	r0, r0, r3
 8001342:	00a4      	lsls	r4, r4, #2
 8001344:	5903      	ldr	r3, [r0, r4]
 8001346:	401a      	ands	r2, r3
 8001348:	4311      	orrs	r1, r2
 800134a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800134c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134e:	200f      	movs	r0, #15
 8001350:	4003      	ands	r3, r0
 8001352:	3b08      	subs	r3, #8
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_NVIC_SetPriority+0x50>)
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	181b      	adds	r3, r3, r0
 800135c:	69d8      	ldr	r0, [r3, #28]
 800135e:	4002      	ands	r2, r0
 8001360:	4311      	orrs	r1, r2
 8001362:	61d9      	str	r1, [r3, #28]
 8001364:	e7f2      	b.n	800134c <HAL_NVIC_SetPriority+0x30>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001370:	2800      	cmp	r0, #0
 8001372:	db05      	blt.n	8001380 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001374:	231f      	movs	r3, #31
 8001376:	4018      	ands	r0, r3
 8001378:	3b1e      	subs	r3, #30
 800137a:	4083      	lsls	r3, r0
 800137c:	4a01      	ldr	r2, [pc, #4]	; (8001384 <HAL_NVIC_EnableIRQ+0x14>)
 800137e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	e000e100 	.word	0xe000e100

08001388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001388:	b510      	push	{r4, lr}
 800138a:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800138c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	189b      	adds	r3, r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	2114      	movs	r1, #20
 800139c:	b2d8      	uxtb	r0, r3
 800139e:	3808      	subs	r0, #8
 80013a0:	f7fe feda 	bl	8000158 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80013a6:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013a8:	231f      	movs	r3, #31
 80013aa:	4018      	ands	r0, r3
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	4083      	lsls	r3, r0
 80013b0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80013b2:	bd10      	pop	{r4, pc}
 80013b4:	10008200 	.word	0x10008200
 80013b8:	40020880 	.word	0x40020880

080013bc <HAL_DMA_Init>:
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
  if (hdma == NULL)
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d049      	beq.n	800145a <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013c6:	6825      	ldr	r5, [r4, #0]
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_DMA_Init+0xac>)
 80013ca:	2114      	movs	r1, #20
 80013cc:	18e8      	adds	r0, r5, r3
 80013ce:	f7fe fec3 	bl	8000158 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d2:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013d4:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d6:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013d8:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80013da:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013e0:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013e2:	4013      	ands	r3, r2
 80013e4:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	682a      	ldr	r2, [r5, #0]
 80013ea:	430b      	orrs	r3, r1
 80013ec:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ee:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6961      	ldr	r1, [r4, #20]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	69a1      	ldr	r1, [r4, #24]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	69e1      	ldr	r1, [r4, #28]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6a21      	ldr	r1, [r4, #32]
 8001400:	430b      	orrs	r3, r1
 8001402:	4313      	orrs	r3, r2
 8001404:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001406:	f7ff ffbf 	bl	8001388 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	68a2      	ldr	r2, [r4, #8]
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	429a      	cmp	r2, r3
 8001412:	d101      	bne.n	8001418 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001414:	2300      	movs	r3, #0
 8001416:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001418:	233f      	movs	r3, #63	; 0x3f
 800141a:	6862      	ldr	r2, [r4, #4]
 800141c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800141e:	4013      	ands	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001422:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001426:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001428:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800142a:	2a03      	cmp	r2, #3
 800142c:	d816      	bhi.n	800145c <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001432:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001434:	2203      	movs	r2, #3
 8001436:	3b01      	subs	r3, #1
 8001438:	4013      	ands	r3, r2
 800143a:	3a02      	subs	r2, #2
 800143c:	409a      	lsls	r2, r3
 800143e:	65a2      	str	r2, [r4, #88]	; 0x58
 8001440:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001442:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001444:	0089      	lsls	r1, r1, #2
 8001446:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001448:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800144a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800144c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001450:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001452:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001454:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8001456:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8001458:	77e0      	strb	r0, [r4, #31]
}
 800145a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001460:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001462:	65a3      	str	r3, [r4, #88]	; 0x58
 8001464:	e7f3      	b.n	800144e <HAL_DMA_Init+0x92>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	bffdfff8 	.word	0xbffdfff8
 800146c:	ffff800f 	.word	0xffff800f
 8001470:	1000823f 	.word	0x1000823f
 8001474:	40020940 	.word	0x40020940

08001478 <HAL_DMA_Abort>:
{
 8001478:	0003      	movs	r3, r0
 800147a:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001482:	1d98      	adds	r0, r3, #6
 8001484:	7fc2      	ldrb	r2, [r0, #31]
 8001486:	1d5c      	adds	r4, r3, #5
 8001488:	2a02      	cmp	r2, #2
 800148a:	d005      	beq.n	8001498 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	2204      	movs	r2, #4
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001490:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001494:	77e3      	strb	r3, [r4, #31]
}
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001498:	250e      	movs	r5, #14
 800149a:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800149c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149e:	680a      	ldr	r2, [r1, #0]
 80014a0:	43aa      	bics	r2, r5
 80014a2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a4:	6832      	ldr	r2, [r6, #0]
 80014a6:	4d11      	ldr	r5, [pc, #68]	; (80014ec <HAL_DMA_Abort+0x74>)
 80014a8:	402a      	ands	r2, r5
 80014aa:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 80014ac:	2201      	movs	r2, #1
 80014ae:	680e      	ldr	r6, [r1, #0]
 80014b0:	4694      	mov	ip, r2
 80014b2:	4396      	bics	r6, r2
 80014b4:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80014b6:	211c      	movs	r1, #28
 80014b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ba:	4e0d      	ldr	r6, [pc, #52]	; (80014f0 <HAL_DMA_Abort+0x78>)
 80014bc:	4011      	ands	r1, r2
 80014be:	4662      	mov	r2, ip
 80014c0:	408a      	lsls	r2, r1
 80014c2:	6877      	ldr	r7, [r6, #4]
 80014c4:	433a      	orrs	r2, r7
 80014c6:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014cc:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80014ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	4029      	ands	r1, r5
 80014d8:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014e0:	2301      	movs	r3, #1
 80014e2:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 80014e4:	2000      	movs	r0, #0
 80014e6:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80014e8:	e7d5      	b.n	8001496 <HAL_DMA_Abort+0x1e>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	fffffeff 	.word	0xfffffeff
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_DMA_Abort_IT>:
{
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014f6:	1d81      	adds	r1, r0, #6
 80014f8:	7fcb      	ldrb	r3, [r1, #31]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d004      	beq.n	8001508 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fe:	2304      	movs	r3, #4
 8001500:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001502:	3b03      	subs	r3, #3
}
 8001504:	0018      	movs	r0, r3
 8001506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	240e      	movs	r4, #14
 800150a:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800150c:	4d15      	ldr	r5, [pc, #84]	; (8001564 <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150e:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001510:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	43a3      	bics	r3, r4
 8001514:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001516:	2301      	movs	r3, #1
 8001518:	6814      	ldr	r4, [r2, #0]
 800151a:	439c      	bics	r4, r3
 800151c:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800151e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	402a      	ands	r2, r5
 8001524:	6022      	str	r2, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001526:	241c      	movs	r4, #28
 8001528:	403c      	ands	r4, r7
 800152a:	40a3      	lsls	r3, r4
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_DMA_Abort_IT+0x74>)
 800152e:	6856      	ldr	r6, [r2, #4]
 8001530:	4333      	orrs	r3, r6
 8001532:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001534:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001536:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001538:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800153a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	402a      	ands	r2, r5
 8001544:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001546:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001548:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800154a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800154c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800154e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001550:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8001552:	1d43      	adds	r3, r0, #5
 8001554:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001556:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 800155a:	42a2      	cmp	r2, r4
 800155c:	d0d2      	beq.n	8001504 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800155e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	0023      	movs	r3, r4
 8001562:	e7cf      	b.n	8001504 <HAL_DMA_Abort_IT+0x10>
 8001564:	fffffeff 	.word	0xfffffeff
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_DMA_IRQHandler>:
{
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800156e:	211c      	movs	r1, #28
 8001570:	2704      	movs	r7, #4
 8001572:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001576:	4021      	ands	r1, r4
 8001578:	003c      	movs	r4, r7
 800157a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800157c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800157e:	6802      	ldr	r2, [r0, #0]
 8001580:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001582:	4226      	tst	r6, r4
 8001584:	d00f      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x3a>
 8001586:	423d      	tst	r5, r7
 8001588:	d00d      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158a:	6811      	ldr	r1, [r2, #0]
 800158c:	0689      	lsls	r1, r1, #26
 800158e:	d402      	bmi.n	8001596 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	43b9      	bics	r1, r7
 8001594:	6011      	str	r1, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4314      	orrs	r4, r2
 800159a:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800159c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01b      	beq.n	80015da <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80015a2:	4798      	blx	r3
  return;
 80015a4:	e019      	b.n	80015da <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80015a6:	2702      	movs	r7, #2
 80015a8:	003c      	movs	r4, r7
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4226      	tst	r6, r4
 80015ae:	d015      	beq.n	80015dc <HAL_DMA_IRQHandler+0x70>
 80015b0:	423d      	tst	r5, r7
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	0689      	lsls	r1, r1, #26
 80015b8:	d406      	bmi.n	80015c8 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015ba:	250a      	movs	r5, #10
 80015bc:	6811      	ldr	r1, [r2, #0]
 80015be:	43a9      	bics	r1, r5
 80015c0:	6011      	str	r1, [r2, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80015c2:	2101      	movs	r1, #1
 80015c4:	1d82      	adds	r2, r0, #6
 80015c6:	77d1      	strb	r1, [r2, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4314      	orrs	r4, r2
      __HAL_UNLOCK(hdma);
 80015cc:	2200      	movs	r2, #0
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015ce:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 80015d0:	1d43      	adds	r3, r0, #5
 80015d2:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 80015d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d1e3      	bne.n	80015a2 <HAL_DMA_IRQHandler+0x36>
}
 80015da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015dc:	2408      	movs	r4, #8
 80015de:	0027      	movs	r7, r4
 80015e0:	408f      	lsls	r7, r1
 80015e2:	423e      	tst	r6, r7
 80015e4:	d0f9      	beq.n	80015da <HAL_DMA_IRQHandler+0x6e>
 80015e6:	4225      	tst	r5, r4
 80015e8:	d0f7      	beq.n	80015da <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	250e      	movs	r5, #14
 80015ec:	6814      	ldr	r4, [r2, #0]
 80015ee:	43ac      	bics	r4, r5
 80015f0:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80015f2:	2201      	movs	r2, #1
 80015f4:	0015      	movs	r5, r2
 80015f6:	408d      	lsls	r5, r1
 80015f8:	0029      	movs	r1, r5
 80015fa:	685c      	ldr	r4, [r3, #4]
 80015fc:	4321      	orrs	r1, r4
 80015fe:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001600:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001602:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001604:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001606:	2200      	movs	r2, #0
 8001608:	1d43      	adds	r3, r0, #5
 800160a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800160c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800160e:	e7e2      	b.n	80015d6 <HAL_DMA_IRQHandler+0x6a>
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001614:	2300      	movs	r3, #0
{
 8001616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001618:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	680a      	ldr	r2, [r1, #0]
 800161c:	0014      	movs	r4, r2
 800161e:	40dc      	lsrs	r4, r3
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001622:	b005      	add	sp, #20
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001626:	2501      	movs	r5, #1
 8001628:	0014      	movs	r4, r2
 800162a:	409d      	lsls	r5, r3
 800162c:	402c      	ands	r4, r5
 800162e:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001630:	422a      	tst	r2, r5
 8001632:	d100      	bne.n	8001636 <HAL_GPIO_Init+0x22>
 8001634:	e08e      	b.n	8001754 <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001636:	684a      	ldr	r2, [r1, #4]
 8001638:	005e      	lsls	r6, r3, #1
 800163a:	4694      	mov	ip, r2
 800163c:	2203      	movs	r2, #3
 800163e:	4664      	mov	r4, ip
 8001640:	4022      	ands	r2, r4
 8001642:	2403      	movs	r4, #3
 8001644:	40b4      	lsls	r4, r6
 8001646:	43e4      	mvns	r4, r4
 8001648:	9402      	str	r4, [sp, #8]
 800164a:	1e54      	subs	r4, r2, #1
 800164c:	2c01      	cmp	r4, #1
 800164e:	d82a      	bhi.n	80016a6 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001650:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001652:	9c02      	ldr	r4, [sp, #8]
 8001654:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001656:	68cc      	ldr	r4, [r1, #12]
 8001658:	40b4      	lsls	r4, r6
 800165a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800165c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800165e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001660:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001662:	43ac      	bics	r4, r5
 8001664:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001666:	4664      	mov	r4, ip
 8001668:	0924      	lsrs	r4, r4, #4
 800166a:	403c      	ands	r4, r7
 800166c:	409c      	lsls	r4, r3
 800166e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001670:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001672:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001674:	9c02      	ldr	r4, [sp, #8]
 8001676:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001678:	688c      	ldr	r4, [r1, #8]
 800167a:	40b4      	lsls	r4, r6
 800167c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800167e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001680:	2a02      	cmp	r2, #2
 8001682:	d112      	bne.n	80016aa <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001684:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001686:	2507      	movs	r5, #7
 8001688:	00a4      	lsls	r4, r4, #2
 800168a:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 800168c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168e:	9403      	str	r4, [sp, #12]
 8001690:	240f      	movs	r4, #15
 8001692:	401d      	ands	r5, r3
 8001694:	00ad      	lsls	r5, r5, #2
 8001696:	40ac      	lsls	r4, r5
 8001698:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169a:	690c      	ldr	r4, [r1, #16]
 800169c:	40ac      	lsls	r4, r5
 800169e:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	9c03      	ldr	r4, [sp, #12]
 80016a2:	6227      	str	r7, [r4, #32]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a6:	2a03      	cmp	r2, #3
 80016a8:	d1e3      	bne.n	8001672 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 80016aa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ac:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ae:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b0:	4025      	ands	r5, r4
 80016b2:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b4:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80016b6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b8:	24c0      	movs	r4, #192	; 0xc0
 80016ba:	4662      	mov	r2, ip
 80016bc:	02a4      	lsls	r4, r4, #10
 80016be:	4222      	tst	r2, r4
 80016c0:	d048      	beq.n	8001754 <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016c4:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80016c6:	089c      	lsrs	r4, r3, #2
 80016c8:	00a4      	lsls	r4, r4, #2
 80016ca:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016cc:	220f      	movs	r2, #15
 80016ce:	401d      	ands	r5, r3
 80016d0:	00ed      	lsls	r5, r5, #3
 80016d2:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016d4:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80016d6:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016d8:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016da:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016dc:	2200      	movs	r2, #0
 80016de:	42b8      	cmp	r0, r7
 80016e0:	d00c      	beq.n	80016fc <HAL_GPIO_Init+0xe8>
 80016e2:	4f1e      	ldr	r7, [pc, #120]	; (800175c <HAL_GPIO_Init+0x148>)
 80016e4:	3201      	adds	r2, #1
 80016e6:	42b8      	cmp	r0, r7
 80016e8:	d008      	beq.n	80016fc <HAL_GPIO_Init+0xe8>
 80016ea:	4f1d      	ldr	r7, [pc, #116]	; (8001760 <HAL_GPIO_Init+0x14c>)
 80016ec:	3201      	adds	r2, #1
 80016ee:	42b8      	cmp	r0, r7
 80016f0:	d004      	beq.n	80016fc <HAL_GPIO_Init+0xe8>
 80016f2:	4f1c      	ldr	r7, [pc, #112]	; (8001764 <HAL_GPIO_Init+0x150>)
 80016f4:	3201      	adds	r2, #1
 80016f6:	42b8      	cmp	r0, r7
 80016f8:	d000      	beq.n	80016fc <HAL_GPIO_Init+0xe8>
 80016fa:	3202      	adds	r2, #2
 80016fc:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fe:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001700:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001702:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 8001706:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 8001708:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 800170a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 800170c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800170e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001710:	03ff      	lsls	r7, r7, #15
 8001712:	d401      	bmi.n	8001718 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 8001714:	0035      	movs	r5, r6
 8001716:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001718:	4667      	mov	r7, ip
        EXTI->IMR1 = temp;
 800171a:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 800171c:	4d13      	ldr	r5, [pc, #76]	; (800176c <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 800171e:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8001720:	6fea      	ldr	r2, [r5, #124]	; 0x7c
          temp |= iocurrent;
 8001722:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001724:	03bf      	lsls	r7, r7, #14
 8001726:	d401      	bmi.n	800172c <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8001728:	4022      	ands	r2, r4
 800172a:	0016      	movs	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_GPIO_Init+0x144>)
 8001730:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001732:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001734:	9d01      	ldr	r5, [sp, #4]
 8001736:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	02ff      	lsls	r7, r7, #11
 800173a:	d401      	bmi.n	8001740 <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 800173c:	0035      	movs	r5, r6
 800173e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001740:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001742:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001744:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001746:	9e01      	ldr	r6, [sp, #4]
 8001748:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800174a:	02bf      	lsls	r7, r7, #10
 800174c:	d401      	bmi.n	8001752 <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 800174e:	4025      	ands	r5, r4
 8001750:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 8001752:	6056      	str	r6, [r2, #4]
    position++;
 8001754:	3301      	adds	r3, #1
 8001756:	e760      	b.n	800161a <HAL_GPIO_Init+0x6>
 8001758:	40021800 	.word	0x40021800
 800175c:	50000400 	.word	0x50000400
 8001760:	50000800 	.word	0x50000800
 8001764:	50000c00 	.word	0x50000c00
 8001768:	40021804 	.word	0x40021804
 800176c:	40021808 	.word	0x40021808

08001770 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	2a00      	cmp	r2, #0
 8001772:	d001      	beq.n	8001778 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001774:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001776:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001778:	6281      	str	r1, [r0, #40]	; 0x28
}
 800177a:	e7fc      	b.n	8001776 <HAL_GPIO_WritePin+0x6>

0800177c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800177c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800177e:	4c11      	ldr	r4, [pc, #68]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001780:	4911      	ldr	r1, [pc, #68]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001782:	6823      	ldr	r3, [r4, #0]
{
 8001784:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001786:	400b      	ands	r3, r1
 8001788:	4303      	orrs	r3, r0
 800178a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178c:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800178e:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	429a      	cmp	r2, r3
 8001794:	d10e      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001798:	490d      	ldr	r1, [pc, #52]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	2306      	movs	r3, #6
 800179e:	4358      	muls	r0, r3
 80017a0:	f7fe fcda 	bl	8000158 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a4:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017a6:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a8:	00d2      	lsls	r2, r2, #3
 80017aa:	6961      	ldr	r1, [r4, #20]
 80017ac:	0008      	movs	r0, r1
 80017ae:	4010      	ands	r0, r2
 80017b0:	4211      	tst	r1, r2
 80017b2:	d100      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80017b4:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80017ba:	3b01      	subs	r3, #1
 80017bc:	e7f5      	b.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e7f8      	b.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x38>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40007000 	.word	0x40007000
 80017c8:	fffff9ff 	.word	0xfffff9ff
 80017cc:	20000000 	.word	0x20000000
 80017d0:	000f4240 	.word	0x000f4240

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	0004      	movs	r4, r0
 80017d8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017da:	2800      	cmp	r0, #0
 80017dc:	d023      	beq.n	8001826 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	6803      	ldr	r3, [r0, #0]
 80017e0:	07db      	lsls	r3, r3, #31
 80017e2:	d410      	bmi.n	8001806 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	079b      	lsls	r3, r3, #30
 80017e8:	d45e      	bmi.n	80018a8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	071b      	lsls	r3, r3, #28
 80017ee:	d500      	bpl.n	80017f2 <HAL_RCC_OscConfig+0x1e>
 80017f0:	e0c3      	b.n	800197a <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	075b      	lsls	r3, r3, #29
 80017f6:	d500      	bpl.n	80017fa <HAL_RCC_OscConfig+0x26>
 80017f8:	e0f5      	b.n	80019e6 <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017fa:	69e2      	ldr	r2, [r4, #28]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d000      	beq.n	8001802 <HAL_RCC_OscConfig+0x2e>
 8001800:	e17c      	b.n	8001afc <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001802:	2000      	movs	r0, #0
 8001804:	e029      	b.n	800185a <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001806:	2238      	movs	r2, #56	; 0x38
 8001808:	4db0      	ldr	r5, [pc, #704]	; (8001acc <HAL_RCC_OscConfig+0x2f8>)
 800180a:	68ab      	ldr	r3, [r5, #8]
 800180c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001810:	2b10      	cmp	r3, #16
 8001812:	d10a      	bne.n	800182a <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001814:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001816:	0793      	lsls	r3, r2, #30
 8001818:	d109      	bne.n	800182e <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	682b      	ldr	r3, [r5, #0]
 800181c:	039b      	lsls	r3, r3, #14
 800181e:	d5e1      	bpl.n	80017e4 <HAL_RCC_OscConfig+0x10>
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1de      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e017      	b.n	800185a <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800182a:	2b08      	cmp	r3, #8
 800182c:	d0f5      	beq.n	800181a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	0252      	lsls	r2, r2, #9
 8001834:	4293      	cmp	r3, r2
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x8a>
 8001838:	682a      	ldr	r2, [r5, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800183e:	f7ff fa7b 	bl	8000d38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001842:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001844:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	02bf      	lsls	r7, r7, #10
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	423b      	tst	r3, r7
 800184c:	d1ca      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff fa73 	bl	8000d38 <HAL_GetTick>
 8001852:	1b80      	subs	r0, r0, r6
 8001854:	2864      	cmp	r0, #100	; 0x64
 8001856:	d9f7      	bls.n	8001848 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
}
 800185a:	b005      	add	sp, #20
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	21a0      	movs	r1, #160	; 0xa0
 8001860:	02c9      	lsls	r1, r1, #11
 8001862:	428b      	cmp	r3, r1
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0xa4>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	6829      	ldr	r1, [r5, #0]
 800186a:	02db      	lsls	r3, r3, #11
 800186c:	430b      	orrs	r3, r1
 800186e:	602b      	str	r3, [r5, #0]
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	431a      	orrs	r2, r3
 8001874:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001876:	e7e2      	b.n	800183e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	682a      	ldr	r2, [r5, #0]
 800187a:	4995      	ldr	r1, [pc, #596]	; (8001ad0 <HAL_RCC_OscConfig+0x2fc>)
 800187c:	400a      	ands	r2, r1
 800187e:	602a      	str	r2, [r5, #0]
 8001880:	682a      	ldr	r2, [r5, #0]
 8001882:	4994      	ldr	r1, [pc, #592]	; (8001ad4 <HAL_RCC_OscConfig+0x300>)
 8001884:	400a      	ands	r2, r1
 8001886:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1d8      	bne.n	800183e <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 800188c:	f7ff fa54 	bl	8000d38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001890:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001892:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001894:	02bf      	lsls	r7, r7, #10
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	423b      	tst	r3, r7
 800189a:	d0a3      	beq.n	80017e4 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fa4c 	bl	8000d38 <HAL_GetTick>
 80018a0:	1b80      	subs	r0, r0, r6
 80018a2:	2864      	cmp	r0, #100	; 0x64
 80018a4:	d9f7      	bls.n	8001896 <HAL_RCC_OscConfig+0xc2>
 80018a6:	e7d7      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a8:	2338      	movs	r3, #56	; 0x38
 80018aa:	4d88      	ldr	r5, [pc, #544]	; (8001acc <HAL_RCC_OscConfig+0x2f8>)
 80018ac:	68aa      	ldr	r2, [r5, #8]
 80018ae:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d128      	bne.n	8001908 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b6:	2103      	movs	r1, #3
 80018b8:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018ba:	2a02      	cmp	r2, #2
 80018bc:	d126      	bne.n	800190c <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018be:	682a      	ldr	r2, [r5, #0]
 80018c0:	0552      	lsls	r2, r2, #21
 80018c2:	d502      	bpl.n	80018ca <HAL_RCC_OscConfig+0xf6>
 80018c4:	68e2      	ldr	r2, [r4, #12]
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d0ad      	beq.n	8001826 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	6869      	ldr	r1, [r5, #4]
 80018cc:	6962      	ldr	r2, [r4, #20]
 80018ce:	4882      	ldr	r0, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x304>)
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	4001      	ands	r1, r0
 80018d4:	430a      	orrs	r2, r1
 80018d6:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	4a7f      	ldr	r2, [pc, #508]	; (8001adc <HAL_RCC_OscConfig+0x308>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	6922      	ldr	r2, [r4, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	4a7d      	ldr	r2, [pc, #500]	; (8001ae0 <HAL_RCC_OscConfig+0x30c>)
 80018ec:	049b      	lsls	r3, r3, #18
 80018ee:	0f5b      	lsrs	r3, r3, #29
 80018f0:	40da      	lsrs	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	4a7b      	ldr	r2, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x310>)
 80018f6:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018f8:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x314>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f7ff f978 	bl	8000bf0 <HAL_InitTick>
 8001900:	2800      	cmp	r0, #0
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x132>
 8001904:	e771      	b.n	80017ea <HAL_RCC_OscConfig+0x16>
 8001906:	e78e      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0d8      	beq.n	80018be <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190c:	68e3      	ldr	r3, [r4, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d020      	beq.n	8001954 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	4a71      	ldr	r2, [pc, #452]	; (8001adc <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001916:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001918:	4013      	ands	r3, r2
 800191a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800191e:	4313      	orrs	r3, r2
 8001920:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	682a      	ldr	r2, [r5, #0]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4313      	orrs	r3, r2
 800192a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800192c:	f7ff fa04 	bl	8000d38 <HAL_GetTick>
 8001930:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	423b      	tst	r3, r7
 8001936:	d007      	beq.n	8001948 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	686a      	ldr	r2, [r5, #4]
 800193a:	6963      	ldr	r3, [r4, #20]
 800193c:	4966      	ldr	r1, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x304>)
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	400a      	ands	r2, r1
 8001942:	4313      	orrs	r3, r2
 8001944:	606b      	str	r3, [r5, #4]
 8001946:	e750      	b.n	80017ea <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff f9f6 	bl	8000d38 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	2802      	cmp	r0, #2
 8001950:	d9ef      	bls.n	8001932 <HAL_RCC_OscConfig+0x15e>
 8001952:	e781      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800195a:	4013      	ands	r3, r2
 800195c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800195e:	f7ff f9eb 	bl	8000d38 <HAL_GetTick>
 8001962:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	00ff      	lsls	r7, r7, #3
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	423b      	tst	r3, r7
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x19a>
 800196c:	e73d      	b.n	80017ea <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff f9e3 	bl	8000d38 <HAL_GetTick>
 8001972:	1b80      	subs	r0, r0, r6
 8001974:	2802      	cmp	r0, #2
 8001976:	d9f6      	bls.n	8001966 <HAL_RCC_OscConfig+0x192>
 8001978:	e76e      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800197a:	2138      	movs	r1, #56	; 0x38
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_OscConfig+0x2f8>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	001d      	movs	r5, r3
 8001982:	400a      	ands	r2, r1
 8001984:	2a18      	cmp	r2, #24
 8001986:	d108      	bne.n	800199a <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198a:	079b      	lsls	r3, r3, #30
 800198c:	d400      	bmi.n	8001990 <HAL_RCC_OscConfig+0x1bc>
 800198e:	e730      	b.n	80017f2 <HAL_RCC_OscConfig+0x1e>
 8001990:	69a3      	ldr	r3, [r4, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d000      	beq.n	8001998 <HAL_RCC_OscConfig+0x1c4>
 8001996:	e72c      	b.n	80017f2 <HAL_RCC_OscConfig+0x1e>
 8001998:	e745      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199a:	69a2      	ldr	r2, [r4, #24]
 800199c:	2301      	movs	r3, #1
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 80019a2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80019a6:	4313      	orrs	r3, r2
 80019a8:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80019aa:	f7ff f9c5 	bl	8000d38 <HAL_GetTick>
 80019ae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80019b2:	423b      	tst	r3, r7
 80019b4:	d000      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1e4>
 80019b6:	e71c      	b.n	80017f2 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f9be 	bl	8000d38 <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	2802      	cmp	r0, #2
 80019c0:	d9f6      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1dc>
 80019c2:	e749      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 80019c4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80019c8:	439a      	bics	r2, r3
 80019ca:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9b4 	bl	8000d38 <HAL_GetTick>
 80019d0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80019d4:	423b      	tst	r3, r7
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x206>
 80019d8:	e70b      	b.n	80017f2 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff f9ad 	bl	8000d38 <HAL_GetTick>
 80019de:	1b80      	subs	r0, r0, r6
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1fe>
 80019e4:	e738      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019e6:	2138      	movs	r1, #56	; 0x38
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_RCC_OscConfig+0x2f8>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	001d      	movs	r5, r3
 80019ee:	400a      	ands	r2, r1
 80019f0:	2a20      	cmp	r2, #32
 80019f2:	d108      	bne.n	8001a06 <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	079b      	lsls	r3, r3, #30
 80019f8:	d400      	bmi.n	80019fc <HAL_RCC_OscConfig+0x228>
 80019fa:	e6fe      	b.n	80017fa <HAL_RCC_OscConfig+0x26>
 80019fc:	68a3      	ldr	r3, [r4, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d000      	beq.n	8001a04 <HAL_RCC_OscConfig+0x230>
 8001a02:	e6fa      	b.n	80017fa <HAL_RCC_OscConfig+0x26>
 8001a04:	e70f      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a06:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a08:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a10:	4213      	tst	r3, r2
 8001a12:	d108      	bne.n	8001a26 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a16:	4313      	orrs	r3, r2
 8001a18:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001a1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	9303      	str	r3, [sp, #12]
 8001a20:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a26:	2780      	movs	r7, #128	; 0x80
 8001a28:	4e31      	ldr	r6, [pc, #196]	; (8001af0 <HAL_RCC_OscConfig+0x31c>)
 8001a2a:	007f      	lsls	r7, r7, #1
 8001a2c:	6833      	ldr	r3, [r6, #0]
 8001a2e:	423b      	tst	r3, r7
 8001a30:	d015      	beq.n	8001a5e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	68a3      	ldr	r3, [r4, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d122      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2aa>
 8001a38:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f97b 	bl	8000d38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a42:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001a44:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001a48:	423b      	tst	r3, r7
 8001a4a:	d038      	beq.n	8001abe <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8001a4c:	9b00      	ldr	r3, [sp, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d000      	beq.n	8001a54 <HAL_RCC_OscConfig+0x280>
 8001a52:	e6d2      	b.n	80017fa <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x320>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001a5c:	e6cd      	b.n	80017fa <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a5e:	6833      	ldr	r3, [r6, #0]
 8001a60:	433b      	orrs	r3, r7
 8001a62:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a64:	f7ff f968 	bl	8000d38 <HAL_GetTick>
 8001a68:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	6833      	ldr	r3, [r6, #0]
 8001a6c:	423b      	tst	r3, r7
 8001a6e:	d1e0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a70:	f7ff f962 	bl	8000d38 <HAL_GetTick>
 8001a74:	9b01      	ldr	r3, [sp, #4]
 8001a76:	1ac0      	subs	r0, r0, r3
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	d9f6      	bls.n	8001a6a <HAL_RCC_OscConfig+0x296>
 8001a7c:	e6ec      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2bc>
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4313      	orrs	r3, r2
 8001a88:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001a8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e7d4      	b.n	8001a3a <HAL_RCC_OscConfig+0x266>
 8001a90:	2101      	movs	r1, #1
 8001a92:	438a      	bics	r2, r1
 8001a94:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001a96:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a98:	3103      	adds	r1, #3
 8001a9a:	438a      	bics	r2, r1
 8001a9c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1cd      	bne.n	8001a3e <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f949 	bl	8000d38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001aa8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aaa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001aac:	423b      	tst	r3, r7
 8001aae:	d0cd      	beq.n	8001a4c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f942 	bl	8000d38 <HAL_GetTick>
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x324>)
 8001ab6:	1b80      	subs	r0, r0, r6
 8001ab8:	4298      	cmp	r0, r3
 8001aba:	d9f6      	bls.n	8001aaa <HAL_RCC_OscConfig+0x2d6>
 8001abc:	e6cc      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff f93b 	bl	8000d38 <HAL_GetTick>
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x324>)
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	d9bd      	bls.n	8001a46 <HAL_RCC_OscConfig+0x272>
 8001aca:	e6c5      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	fffeffff 	.word	0xfffeffff
 8001ad4:	fffbffff 	.word	0xfffbffff
 8001ad8:	ffff80ff 	.word	0xffff80ff
 8001adc:	ffffc7ff 	.word	0xffffc7ff
 8001ae0:	00f42400 	.word	0x00f42400
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	fffffeff 	.word	0xfffffeff
 8001af0:	40007000 	.word	0x40007000
 8001af4:	efffffff 	.word	0xefffffff
 8001af8:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	2038      	movs	r0, #56	; 0x38
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_RCC_OscConfig+0x43c>)
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	001d      	movs	r5, r3
 8001b04:	4001      	ands	r1, r0
 8001b06:	2910      	cmp	r1, #16
 8001b08:	d054      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4941      	ldr	r1, [pc, #260]	; (8001c14 <HAL_RCC_OscConfig+0x440>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b12:	2a02      	cmp	r2, #2
 8001b14:	d137      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001b16:	f7ff f90f 	bl	8000d38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b1c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	04bf      	lsls	r7, r7, #18
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	423b      	tst	r3, r7
 8001b24:	d129      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b28:	6a23      	ldr	r3, [r4, #32]
 8001b2a:	68ea      	ldr	r2, [r5, #12]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	493a      	ldr	r1, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x444>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b32:	400a      	ands	r2, r1
 8001b34:	4313      	orrs	r3, r2
 8001b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b38:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b42:	4313      	orrs	r3, r2
 8001b44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b46:	0212      	lsls	r2, r2, #8
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	682a      	ldr	r2, [r5, #0]
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	4313      	orrs	r3, r2
 8001b54:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	68ea      	ldr	r2, [r5, #12]
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001b60:	f7ff f8ea 	bl	8000d38 <HAL_GetTick>
 8001b64:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	4233      	tst	r3, r6
 8001b6a:	d000      	beq.n	8001b6e <HAL_RCC_OscConfig+0x39a>
 8001b6c:	e649      	b.n	8001802 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff f8e3 	bl	8000d38 <HAL_GetTick>
 8001b72:	1b00      	subs	r0, r0, r4
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x392>
 8001b78:	e66e      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f8dd 	bl	8000d38 <HAL_GetTick>
 8001b7e:	1b80      	subs	r0, r0, r6
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9cd      	bls.n	8001b20 <HAL_RCC_OscConfig+0x34c>
 8001b84:	e668      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b86:	2203      	movs	r2, #3
 8001b88:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8a:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b90:	68eb      	ldr	r3, [r5, #12]
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0x448>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b96:	4013      	ands	r3, r2
 8001b98:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f8cd 	bl	8000d38 <HAL_GetTick>
 8001b9e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	4233      	tst	r3, r6
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3d4>
 8001ba6:	e62c      	b.n	8001802 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f8c6 	bl	8000d38 <HAL_GetTick>
 8001bac:	1b00      	subs	r0, r0, r4
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9f6      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
 8001bb2:	e651      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	2a01      	cmp	r2, #1
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x3e6>
 8001bb8:	e635      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001bbc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	6a21      	ldr	r1, [r4, #32]
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	428a      	cmp	r2, r1
 8001bc4:	d000      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x3f4>
 8001bc6:	e62e      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d000      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x400>
 8001bd2:	e628      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd4:	21fe      	movs	r1, #254	; 0xfe
 8001bd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bd8:	01c9      	lsls	r1, r1, #7
 8001bda:	4019      	ands	r1, r3
 8001bdc:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bde:	4291      	cmp	r1, r2
 8001be0:	d000      	beq.n	8001be4 <HAL_RCC_OscConfig+0x410>
 8001be2:	e620      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001be4:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001be8:	0392      	lsls	r2, r2, #14
 8001bea:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bec:	428a      	cmp	r2, r1
 8001bee:	d000      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x41e>
 8001bf0:	e619      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bf2:	22e0      	movs	r2, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bf6:	0512      	lsls	r2, r2, #20
 8001bf8:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d000      	beq.n	8001c00 <HAL_RCC_OscConfig+0x42c>
 8001bfe:	e612      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c00:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c02:	0f5b      	lsrs	r3, r3, #29
 8001c04:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d100      	bne.n	8001c0c <HAL_RCC_OscConfig+0x438>
 8001c0a:	e5fa      	b.n	8001802 <HAL_RCC_OscConfig+0x2e>
 8001c0c:	e60b      	b.n	8001826 <HAL_RCC_OscConfig+0x52>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40021000 	.word	0x40021000
 8001c14:	feffffff 	.word	0xfeffffff
 8001c18:	11c1808c 	.word	0x11c1808c
 8001c1c:	eefeffff 	.word	0xeefeffff

08001c20 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c20:	2338      	movs	r3, #56	; 0x38
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	6891      	ldr	r1, [r2, #8]
 8001c28:	0014      	movs	r4, r2
 8001c2a:	4219      	tst	r1, r3
 8001c2c:	d105      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2e:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c30:	481b      	ldr	r0, [pc, #108]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c32:	049b      	lsls	r3, r3, #18
 8001c34:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c36:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3a:	6891      	ldr	r1, [r2, #8]
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	2908      	cmp	r1, #8
 8001c40:	d027      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c42:	6891      	ldr	r1, [r2, #8]
 8001c44:	4019      	ands	r1, r3
 8001c46:	2910      	cmp	r1, #16
 8001c48:	d117      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c4a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c4c:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c52:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c54:	0649      	lsls	r1, r1, #25
 8001c56:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c58:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5a:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c5c:	4015      	ands	r5, r2
    switch (pllsource)
 8001c5e:	079b      	lsls	r3, r3, #30
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c64:	f7fe fa78 	bl	8000158 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c68:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c6a:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c6c:	0f49      	lsrs	r1, r1, #29
 8001c6e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001c70:	f7fe fa72 	bl	8000158 <__udivsi3>
  return sysclockfreq;
 8001c74:	e7e0      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x80>)
 8001c78:	e7f4      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c7a:	6891      	ldr	r1, [r2, #8]
 8001c7c:	4019      	ands	r1, r3
 8001c7e:	2920      	cmp	r1, #32
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c82:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001c84:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b18      	cmp	r3, #24
 8001c8a:	d1d5      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001c8c:	20fa      	movs	r0, #250	; 0xfa
 8001c8e:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001c90:	e7d2      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001c94:	e7d0      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001c96:	2080      	movs	r0, #128	; 0x80
 8001c98:	0200      	lsls	r0, r0, #8
 8001c9a:	e7cd      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x18>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <HAL_RCC_ClockConfig>:
{
 8001ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001caa:	0005      	movs	r5, r0
 8001cac:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
}
 8001cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb6:	2707      	movs	r7, #7
 8001cb8:	4c4a      	ldr	r4, [pc, #296]	; (8001de4 <HAL_RCC_ClockConfig+0x13c>)
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	403b      	ands	r3, r7
 8001cbe:	428b      	cmp	r3, r1
 8001cc0:	d32a      	bcc.n	8001d18 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc2:	6829      	ldr	r1, [r5, #0]
 8001cc4:	078b      	lsls	r3, r1, #30
 8001cc6:	d43b      	bmi.n	8001d40 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc8:	07cb      	lsls	r3, r1, #31
 8001cca:	d448      	bmi.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	2707      	movs	r7, #7
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	403b      	ands	r3, r7
 8001cd2:	42b3      	cmp	r3, r6
 8001cd4:	d90a      	bls.n	8001cec <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	43bb      	bics	r3, r7
 8001cda:	4333      	orrs	r3, r6
 8001cdc:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001cde:	f7ff f82b 	bl	8000d38 <HAL_GetTick>
 8001ce2:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	403b      	ands	r3, r7
 8001ce8:	42b3      	cmp	r3, r6
 8001cea:	d16b      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	4c3e      	ldr	r4, [pc, #248]	; (8001de8 <HAL_RCC_ClockConfig+0x140>)
 8001cf0:	075b      	lsls	r3, r3, #29
 8001cf2:	d46f      	bmi.n	8001dd4 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cf4:	f7ff ff94 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001cf8:	68a3      	ldr	r3, [r4, #8]
 8001cfa:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <HAL_RCC_ClockConfig+0x144>)
 8001cfc:	051b      	lsls	r3, r3, #20
 8001cfe:	0f1b      	lsrs	r3, r3, #28
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	589b      	ldr	r3, [r3, r2]
 8001d04:	221f      	movs	r2, #31
 8001d06:	4013      	ands	r3, r2
 8001d08:	40d8      	lsrs	r0, r3
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCC_ClockConfig+0x148>)
 8001d0c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_ClockConfig+0x14c>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f7fe ff6d 	bl	8000bf0 <HAL_InitTick>
 8001d16:	e7cd      	b.n	8001cb4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	43bb      	bics	r3, r7
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001d20:	f7ff f80a 	bl	8000d38 <HAL_GetTick>
 8001d24:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	403b      	ands	r3, r7
 8001d2a:	42b3      	cmp	r3, r6
 8001d2c:	d0c9      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff f803 	bl	8000d38 <HAL_GetTick>
 8001d32:	9b01      	ldr	r3, [sp, #4]
 8001d34:	1ac0      	subs	r0, r0, r3
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_ClockConfig+0x150>)
 8001d38:	4298      	cmp	r0, r3
 8001d3a:	d9f4      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e7b9      	b.n	8001cb4 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_RCC_ClockConfig+0x140>)
 8001d42:	074b      	lsls	r3, r1, #29
 8001d44:	d504      	bpl.n	8001d50 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d46:	23e0      	movs	r3, #224	; 0xe0
 8001d48:	6890      	ldr	r0, [r2, #8]
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	4303      	orrs	r3, r0
 8001d4e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	6893      	ldr	r3, [r2, #8]
 8001d52:	482a      	ldr	r0, [pc, #168]	; (8001dfc <HAL_RCC_ClockConfig+0x154>)
 8001d54:	4003      	ands	r3, r0
 8001d56:	68a8      	ldr	r0, [r5, #8]
 8001d58:	4303      	orrs	r3, r0
 8001d5a:	6093      	str	r3, [r2, #8]
 8001d5c:	e7b4      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	686a      	ldr	r2, [r5, #4]
 8001d60:	4f21      	ldr	r7, [pc, #132]	; (8001de8 <HAL_RCC_ClockConfig+0x140>)
 8001d62:	2a01      	cmp	r2, #1
 8001d64:	d119      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	039b      	lsls	r3, r3, #14
 8001d6a:	d5a2      	bpl.n	8001cb2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	438b      	bics	r3, r1
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001d76:	f7fe ffdf 	bl	8000d38 <HAL_GetTick>
 8001d7a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7c:	2338      	movs	r3, #56	; 0x38
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	401a      	ands	r2, r3
 8001d82:	686b      	ldr	r3, [r5, #4]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d0a0      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f7fe ffd5 	bl	8000d38 <HAL_GetTick>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	1ac0      	subs	r0, r0, r3
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x150>)
 8001d94:	4298      	cmp	r0, r3
 8001d96:	d9f1      	bls.n	8001d7c <HAL_RCC_ClockConfig+0xd4>
 8001d98:	e7d0      	b.n	8001d3c <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9a:	2a02      	cmp	r2, #2
 8001d9c:	d103      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	d4e3      	bmi.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
 8001da4:	e785      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	d4dd      	bmi.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
 8001db0:	e77f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001db2:	2302      	movs	r3, #2
 8001db4:	2a03      	cmp	r2, #3
 8001db6:	d103      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db8:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dba:	4219      	tst	r1, r3
 8001dbc:	d1d6      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
 8001dbe:	e778      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xa>
 8001dc0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001dc2:	e7fa      	b.n	8001dba <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7fe ffb8 	bl	8000d38 <HAL_GetTick>
 8001dc8:	9b01      	ldr	r3, [sp, #4]
 8001dca:	1ac0      	subs	r0, r0, r3
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x150>)
 8001dce:	4298      	cmp	r0, r3
 8001dd0:	d988      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x3c>
 8001dd2:	e7b3      	b.n	8001d3c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	68a3      	ldr	r3, [r4, #8]
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_RCC_ClockConfig+0x158>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	68ea      	ldr	r2, [r5, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60a3      	str	r3, [r4, #8]
 8001de0:	e788      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x4c>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	080061d4 	.word	0x080061d4
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000008 	.word	0x20000008
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	fffff0ff 	.word	0xfffff0ff
 8001e00:	ffff8fff 	.word	0xffff8fff

08001e04 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	045b      	lsls	r3, r3, #17
 8001e0c:	0f5b      	lsrs	r3, r3, #29
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	589b      	ldr	r3, [r3, r2]
 8001e12:	221f      	movs	r2, #31
 8001e14:	4013      	ands	r3, r2
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e18:	6810      	ldr	r0, [r2, #0]
 8001e1a:	40d8      	lsrs	r0, r3
}
 8001e1c:	4770      	bx	lr
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08006214 	.word	0x08006214
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001e2c:	2207      	movs	r2, #7
{
 8001e2e:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e30:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001e34:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e36:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e38:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e3a:	4014      	ands	r4, r2
 8001e3c:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e3e:	689c      	ldr	r4, [r3, #8]
 8001e40:	402c      	ands	r4, r5
 8001e42:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001e44:	24e0      	movs	r4, #224	; 0xe0
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	01e4      	lsls	r4, r4, #7
 8001e4a:	4023      	ands	r3, r4
 8001e4c:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_GetClockConfig+0x30>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4013      	ands	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
}
 8001e56:	bd30      	pop	{r4, r5, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e64:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e66:	2000      	movs	r0, #0
{
 8001e68:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6a:	039b      	lsls	r3, r3, #14
 8001e6c:	d53c      	bpl.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	4c69      	ldr	r4, [pc, #420]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e72:	0552      	lsls	r2, r2, #21
 8001e74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e78:	4213      	tst	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e84:	4013      	ands	r3, r2
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8e:	2780      	movs	r7, #128	; 0x80
 8001e90:	4e62      	ldr	r6, [pc, #392]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e92:	007f      	lsls	r7, r7, #1
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	433b      	orrs	r3, r7
 8001e98:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e9a:	f7fe ff4d 	bl	8000d38 <HAL_GetTick>
 8001e9e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea0:	6833      	ldr	r3, [r6, #0]
 8001ea2:	423b      	tst	r3, r7
 8001ea4:	d012      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x6c>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ea6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	0011      	movs	r1, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4e5c      	ldr	r6, [pc, #368]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001eb0:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eb2:	421a      	tst	r2, r3
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8001eb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001eb8:	4299      	cmp	r1, r3
 8001eba:	d000      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8001ebc:	e08c      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec0:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ec2:	401e      	ands	r6, r3
 8001ec4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ec6:	431e      	orrs	r6, r3
 8001ec8:	65e6      	str	r6, [r4, #92]	; 0x5c
 8001eca:	e006      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe ff34 	bl	8000d38 <HAL_GetTick>
 8001ed0:	9b01      	ldr	r3, [sp, #4]
 8001ed2:	1ac0      	subs	r0, r0, r3
 8001ed4:	2802      	cmp	r0, #2
 8001ed6:	d9e3      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001ed8:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eda:	9b00      	ldr	r3, [sp, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d103      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ee2:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	07da      	lsls	r2, r3, #31
 8001eec:	d506      	bpl.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	2403      	movs	r4, #3
 8001ef0:	4949      	ldr	r1, [pc, #292]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ef2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001ef4:	43a2      	bics	r2, r4
 8001ef6:	686c      	ldr	r4, [r5, #4]
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001efc:	06da      	lsls	r2, r3, #27
 8001efe:	d506      	bpl.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f00:	4945      	ldr	r1, [pc, #276]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f02:	4c49      	ldr	r4, [pc, #292]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f04:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f06:	4022      	ands	r2, r4
 8001f08:	68ac      	ldr	r4, [r5, #8]
 8001f0a:	4322      	orrs	r2, r4
 8001f0c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f0e:	059a      	lsls	r2, r3, #22
 8001f10:	d506      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f12:	4941      	ldr	r1, [pc, #260]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f14:	4c45      	ldr	r4, [pc, #276]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f16:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f18:	4022      	ands	r2, r4
 8001f1a:	696c      	ldr	r4, [r5, #20]
 8001f1c:	4322      	orrs	r2, r4
 8001f1e:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f20:	055a      	lsls	r2, r3, #21
 8001f22:	d506      	bpl.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f24:	493c      	ldr	r1, [pc, #240]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f26:	4c42      	ldr	r4, [pc, #264]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f28:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f2a:	4022      	ands	r2, r4
 8001f2c:	69ac      	ldr	r4, [r5, #24]
 8001f2e:	4322      	orrs	r2, r4
 8001f30:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f32:	069a      	lsls	r2, r3, #26
 8001f34:	d506      	bpl.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f36:	4938      	ldr	r1, [pc, #224]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f38:	4c3e      	ldr	r4, [pc, #248]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f3a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f3c:	4022      	ands	r2, r4
 8001f3e:	68ec      	ldr	r4, [r5, #12]
 8001f40:	4322      	orrs	r2, r4
 8001f42:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	d50f      	bpl.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f48:	4933      	ldr	r1, [pc, #204]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f4a:	4e3b      	ldr	r6, [pc, #236]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f4c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f4e:	69ec      	ldr	r4, [r5, #28]
 8001f50:	4032      	ands	r2, r6
 8001f52:	4322      	orrs	r2, r4
 8001f54:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f56:	22c0      	movs	r2, #192	; 0xc0
 8001f58:	0512      	lsls	r2, r2, #20
 8001f5a:	4294      	cmp	r4, r2
 8001f5c:	d104      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	68cc      	ldr	r4, [r1, #12]
 8001f62:	0452      	lsls	r2, r2, #17
 8001f64:	4322      	orrs	r2, r4
 8001f66:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f68:	045a      	lsls	r2, r3, #17
 8001f6a:	d50f      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f6c:	492a      	ldr	r1, [pc, #168]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f6e:	6a2c      	ldr	r4, [r5, #32]
 8001f70:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	0892      	lsrs	r2, r2, #2
 8001f76:	4322      	orrs	r2, r4
 8001f78:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	05d2      	lsls	r2, r2, #23
 8001f7e:	4294      	cmp	r4, r2
 8001f80:	d104      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	68cc      	ldr	r4, [r1, #12]
 8001f86:	0252      	lsls	r2, r2, #9
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f8c:	029a      	lsls	r2, r3, #10
 8001f8e:	d50f      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f90:	4921      	ldr	r1, [pc, #132]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f92:	4e2a      	ldr	r6, [pc, #168]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001f94:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f96:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001f98:	4032      	ands	r2, r6
 8001f9a:	4322      	orrs	r2, r4
 8001f9c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	03d2      	lsls	r2, r2, #15
 8001fa2:	4294      	cmp	r4, r2
 8001fa4:	d104      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	68cc      	ldr	r4, [r1, #12]
 8001faa:	0452      	lsls	r2, r2, #17
 8001fac:	4322      	orrs	r2, r4
 8001fae:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fb0:	051b      	lsls	r3, r3, #20
 8001fb2:	d50f      	bpl.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fb6:	4c22      	ldr	r4, [pc, #136]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fba:	6929      	ldr	r1, [r5, #16]
 8001fbc:	4023      	ands	r3, r4
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	4299      	cmp	r1, r3
 8001fc8:	d104      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	68d1      	ldr	r1, [r2, #12]
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001fd4:	b005      	add	sp, #20
 8001fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fdc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fde:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fe8:	4816      	ldr	r0, [pc, #88]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fea:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fec:	4003      	ands	r3, r0
 8001fee:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8001ff0:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff2:	07d3      	lsls	r3, r2, #31
 8001ff4:	d400      	bmi.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001ff6:	e762      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fe9e 	bl	8000d38 <HAL_GetTick>
 8001ffc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	2202      	movs	r2, #2
 8002000:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002002:	4213      	tst	r3, r2
 8002004:	d000      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002006:	e75a      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7fe fe96 	bl	8000d38 <HAL_GetTick>
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800200e:	1bc0      	subs	r0, r0, r7
 8002010:	4298      	cmp	r0, r3
 8002012:	d9f4      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002014:	e760      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	fffffcff 	.word	0xfffffcff
 8002024:	efffffff 	.word	0xefffffff
 8002028:	fffff3ff 	.word	0xfffff3ff
 800202c:	fff3ffff 	.word	0xfff3ffff
 8002030:	ffcfffff 	.word	0xffcfffff
 8002034:	ffffcfff 	.word	0xffffcfff
 8002038:	f3ffffff 	.word	0xf3ffffff
 800203c:	ffbfffff 	.word	0xffbfffff
 8002040:	ffff3fff 	.word	0xffff3fff
 8002044:	fffeffff 	.word	0xfffeffff
 8002048:	00001388 	.word	0x00001388

0800204c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800204c:	0002      	movs	r2, r0
{
 800204e:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002050:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002052:	323d      	adds	r2, #61	; 0x3d
 8002054:	7811      	ldrb	r1, [r2, #0]
 8002056:	4281      	cmp	r1, r0
 8002058:	d11c      	bne.n	8002094 <HAL_TIM_Base_Start_IT+0x48>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205a:	2102      	movs	r1, #2
 800205c:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4302      	orrs	r2, r0
 8002064:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_TIM_Base_Start_IT+0x54>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d006      	beq.n	800207a <HAL_TIM_Base_Start_IT+0x2e>
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	05d2      	lsls	r2, r2, #23
 8002070:	4293      	cmp	r3, r2
 8002072:	d002      	beq.n	800207a <HAL_TIM_Base_Start_IT+0x2e>
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_TIM_Base_Start_IT+0x58>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10d      	bne.n	8002096 <HAL_TIM_Base_Start_IT+0x4a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	490a      	ldr	r1, [pc, #40]	; (80020a8 <HAL_TIM_Base_Start_IT+0x5c>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002080:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	2a06      	cmp	r2, #6
 8002084:	d006      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x48>
 8002086:	3907      	subs	r1, #7
 8002088:	428a      	cmp	r2, r1
 800208a:	d003      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 800208c:	2201      	movs	r2, #1
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4310      	orrs	r0, r2
 800209a:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800209c:	2000      	movs	r0, #0
 800209e:	e7f9      	b.n	8002094 <HAL_TIM_Base_Start_IT+0x48>
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40000400 	.word	0x40000400
 80020a8:	00010007 	.word	0x00010007

080020ac <HAL_TIM_OC_DelayElapsedCallback>:
 80020ac:	4770      	bx	lr

080020ae <HAL_TIM_IC_CaptureCallback>:
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80020b0:	4770      	bx	lr

080020b2 <HAL_TIM_TriggerCallback>:
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b4:	2202      	movs	r2, #2
 80020b6:	6803      	ldr	r3, [r0, #0]
{
 80020b8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ba:	6919      	ldr	r1, [r3, #16]
{
 80020bc:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020be:	4211      	tst	r1, r2
 80020c0:	d00e      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c2:	68d9      	ldr	r1, [r3, #12]
 80020c4:	4211      	tst	r1, r2
 80020c6:	d00b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c8:	3a05      	subs	r2, #5
 80020ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020cc:	3204      	adds	r2, #4
 80020ce:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	079b      	lsls	r3, r3, #30
 80020d4:	d100      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x24>
 80020d6:	e086      	b.n	80021e6 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d8:	f7ff ffe9 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020dc:	2300      	movs	r3, #0
 80020de:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e0:	2204      	movs	r2, #4
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	4211      	tst	r1, r2
 80020e8:	d011      	beq.n	800210e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ea:	68d9      	ldr	r1, [r3, #12]
 80020ec:	4211      	tst	r1, r2
 80020ee:	d00e      	beq.n	800210e <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f0:	3a09      	subs	r2, #9
 80020f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f4:	3207      	adds	r2, #7
 80020f6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	23c0      	movs	r3, #192	; 0xc0
 80020fc:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	421a      	tst	r2, r3
 8002102:	d100      	bne.n	8002106 <HAL_TIM_IRQHandler+0x52>
 8002104:	e075      	b.n	80021f2 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	f7ff ffd2 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	2300      	movs	r3, #0
 800210c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800210e:	2208      	movs	r2, #8
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	4211      	tst	r1, r2
 8002116:	d00e      	beq.n	8002136 <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	4211      	tst	r1, r2
 800211c:	d00b      	beq.n	8002136 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211e:	3a11      	subs	r2, #17
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002122:	320d      	adds	r2, #13
 8002124:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002126:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002128:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212a:	079b      	lsls	r3, r3, #30
 800212c:	d067      	beq.n	80021fe <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	f7ff ffbe 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	2300      	movs	r3, #0
 8002134:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002136:	2210      	movs	r2, #16
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	6919      	ldr	r1, [r3, #16]
 800213c:	4211      	tst	r1, r2
 800213e:	d010      	beq.n	8002162 <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	4211      	tst	r1, r2
 8002144:	d00d      	beq.n	8002162 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002146:	3a21      	subs	r2, #33	; 0x21
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214a:	3219      	adds	r2, #25
 800214c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002154:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002156:	421a      	tst	r2, r3
 8002158:	d057      	beq.n	800220a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	f7ff ffa8 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	2300      	movs	r3, #0
 8002160:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002162:	2201      	movs	r2, #1
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	4211      	tst	r1, r2
 800216a:	d007      	beq.n	800217c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	4211      	tst	r1, r2
 8002170:	d004      	beq.n	800217c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002172:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002174:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002176:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002178:	f7fe fc62 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	4211      	tst	r1, r2
 8002184:	d008      	beq.n	8002198 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	4211      	tst	r1, r2
 800218a:	d005      	beq.n	8002198 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800218c:	3a02      	subs	r2, #2
 800218e:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002190:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002192:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002194:	f000 f8b5 	bl	8002302 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	05d2      	lsls	r2, r2, #23
 800219e:	d507      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	0612      	lsls	r2, r2, #24
 80021a4:	d504      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021a8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80021ac:	f000 f8aa 	bl	8002304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b0:	2240      	movs	r2, #64	; 0x40
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	4211      	tst	r1, r2
 80021b8:	d007      	beq.n	80021ca <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ba:	68d9      	ldr	r1, [r3, #12]
 80021bc:	4211      	tst	r1, r2
 80021be:	d004      	beq.n	80021ca <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c0:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021c6:	f7ff ff74 	bl	80020b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ca:	2220      	movs	r2, #32
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	6919      	ldr	r1, [r3, #16]
 80021d0:	4211      	tst	r1, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	4211      	tst	r1, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021da:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021dc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80021e0:	f000 f88e 	bl	8002300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	f7ff ff61 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	0020      	movs	r0, r4
 80021ec:	f7ff ff60 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80021f0:	e774      	b.n	80020dc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	f7ff ff5b 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f6:	0020      	movs	r0, r4
 80021f8:	f7ff ff5a 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80021fc:	e785      	b.n	800210a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	f7ff ff55 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002202:	0020      	movs	r0, r4
 8002204:	f7ff ff54 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002208:	e793      	b.n	8002132 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	f7ff ff4f 	bl	80020ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220e:	0020      	movs	r0, r4
 8002210:	f7ff ff4e 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002214:	e7a3      	b.n	800215e <HAL_TIM_IRQHandler+0xaa>
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	fffffeff 	.word	0xfffffeff

0800221c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <TIM_Base_SetConfig+0x78>)
{
 800221e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002220:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002222:	4290      	cmp	r0, r2
 8002224:	d006      	beq.n	8002234 <TIM_Base_SetConfig+0x18>
 8002226:	2480      	movs	r4, #128	; 0x80
 8002228:	05e4      	lsls	r4, r4, #23
 800222a:	42a0      	cmp	r0, r4
 800222c:	d002      	beq.n	8002234 <TIM_Base_SetConfig+0x18>
 800222e:	4c1a      	ldr	r4, [pc, #104]	; (8002298 <TIM_Base_SetConfig+0x7c>)
 8002230:	42a0      	cmp	r0, r4
 8002232:	d10c      	bne.n	800224e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002234:	2470      	movs	r4, #112	; 0x70
 8002236:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002238:	684c      	ldr	r4, [r1, #4]
 800223a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223c:	4290      	cmp	r0, r2
 800223e:	d00f      	beq.n	8002260 <TIM_Base_SetConfig+0x44>
 8002240:	2480      	movs	r4, #128	; 0x80
 8002242:	05e4      	lsls	r4, r4, #23
 8002244:	42a0      	cmp	r0, r4
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x44>
 8002248:	4c13      	ldr	r4, [pc, #76]	; (8002298 <TIM_Base_SetConfig+0x7c>)
 800224a:	42a0      	cmp	r0, r4
 800224c:	d008      	beq.n	8002260 <TIM_Base_SetConfig+0x44>
 800224e:	4c13      	ldr	r4, [pc, #76]	; (800229c <TIM_Base_SetConfig+0x80>)
 8002250:	42a0      	cmp	r0, r4
 8002252:	d005      	beq.n	8002260 <TIM_Base_SetConfig+0x44>
 8002254:	4c12      	ldr	r4, [pc, #72]	; (80022a0 <TIM_Base_SetConfig+0x84>)
 8002256:	42a0      	cmp	r0, r4
 8002258:	d002      	beq.n	8002260 <TIM_Base_SetConfig+0x44>
 800225a:	4c12      	ldr	r4, [pc, #72]	; (80022a4 <TIM_Base_SetConfig+0x88>)
 800225c:	42a0      	cmp	r0, r4
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002260:	4c11      	ldr	r4, [pc, #68]	; (80022a8 <TIM_Base_SetConfig+0x8c>)
 8002262:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002264:	68cc      	ldr	r4, [r1, #12]
 8002266:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	43a3      	bics	r3, r4
 800226c:	694c      	ldr	r4, [r1, #20]
 800226e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002270:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002272:	688b      	ldr	r3, [r1, #8]
 8002274:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002276:	680b      	ldr	r3, [r1, #0]
 8002278:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800227a:	4290      	cmp	r0, r2
 800227c:	d005      	beq.n	800228a <TIM_Base_SetConfig+0x6e>
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <TIM_Base_SetConfig+0x84>)
 8002280:	4298      	cmp	r0, r3
 8002282:	d002      	beq.n	800228a <TIM_Base_SetConfig+0x6e>
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <TIM_Base_SetConfig+0x88>)
 8002286:	4298      	cmp	r0, r3
 8002288:	d101      	bne.n	800228e <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228a:	690b      	ldr	r3, [r1, #16]
 800228c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800228e:	2301      	movs	r3, #1
 8002290:	6143      	str	r3, [r0, #20]
}
 8002292:	bd10      	pop	{r4, pc}
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40002000 	.word	0x40002000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	fffffcff 	.word	0xfffffcff

080022ac <HAL_TIM_Base_Init>:
{
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
  if (htim == NULL)
 80022b2:	2c00      	cmp	r4, #0
 80022b4:	d023      	beq.n	80022fe <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80022b6:	0025      	movs	r5, r4
 80022b8:	353d      	adds	r5, #61	; 0x3d
 80022ba:	782b      	ldrb	r3, [r5, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80022c2:	0023      	movs	r3, r4
 80022c4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022c6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80022c8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80022ca:	f7fe fc41 	bl	8000b50 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80022ce:	2302      	movs	r3, #2
 80022d0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	1d21      	adds	r1, r4, #4
 80022d6:	f7ff ffa1 	bl	800221c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022da:	0022      	movs	r2, r4
 80022dc:	2301      	movs	r3, #1
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	3248      	adds	r2, #72	; 0x48
 80022e2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	3a0a      	subs	r2, #10
 80022e8:	7013      	strb	r3, [r2, #0]
 80022ea:	7053      	strb	r3, [r2, #1]
 80022ec:	7093      	strb	r3, [r2, #2]
 80022ee:	70d3      	strb	r3, [r2, #3]
 80022f0:	7113      	strb	r3, [r2, #4]
 80022f2:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	7193      	strb	r3, [r2, #6]
 80022f6:	71d3      	strb	r3, [r2, #7]
 80022f8:	7213      	strb	r3, [r2, #8]
 80022fa:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	702b      	strb	r3, [r5, #0]
}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}

08002300 <HAL_TIMEx_CommutCallback>:
 8002300:	4770      	bx	lr

08002302 <HAL_TIMEx_BreakCallback>:
 8002302:	4770      	bx	lr

08002304 <HAL_TIMEx_Break2Callback>:
 8002304:	4770      	bx	lr
	...

08002308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002308:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230e:	2201      	movs	r2, #1
 8002310:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002314:	6801      	ldr	r1, [r0, #0]
 8002316:	4d13      	ldr	r5, [pc, #76]	; (8002364 <UART_EndRxTransfer+0x5c>)
 8002318:	680b      	ldr	r3, [r1, #0]
 800231a:	402b      	ands	r3, r5
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002322:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800232a:	6802      	ldr	r2, [r0, #0]
 800232c:	4c0e      	ldr	r4, [pc, #56]	; (8002368 <UART_EndRxTransfer+0x60>)
 800232e:	6893      	ldr	r3, [r2, #8]
 8002330:	4023      	ands	r3, r4
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002338:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d10a      	bne.n	8002354 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002346:	2410      	movs	r4, #16
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	43a3      	bics	r3, r4
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002354:	0003      	movs	r3, r0
 8002356:	2220      	movs	r2, #32
 8002358:	3388      	adds	r3, #136	; 0x88
 800235a:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235c:	2300      	movs	r3, #0
 800235e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002360:	6703      	str	r3, [r0, #112]	; 0x70
}
 8002362:	bd30      	pop	{r4, r5, pc}
 8002364:	fffffedf 	.word	0xfffffedf
 8002368:	effffffe 	.word	0xeffffffe

0800236c <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 800236c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002372:	2201      	movs	r2, #1
 8002374:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002378:	2580      	movs	r5, #128	; 0x80
 800237a:	6801      	ldr	r1, [r0, #0]
 800237c:	680b      	ldr	r3, [r1, #0]
 800237e:	43ab      	bics	r3, r5
 8002380:	600b      	str	r3, [r1, #0]
 8002382:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002386:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238a:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6810      	ldr	r0, [r2, #0]
 8002394:	4303      	orrs	r3, r0
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800239c:	bd30      	pop	{r4, r5, pc}

0800239e <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800239e:	0003      	movs	r3, r0
 80023a0:	3308      	adds	r3, #8
 80023a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80023a4:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023a6:	2b21      	cmp	r3, #33	; 0x21
 80023a8:	d106      	bne.n	80023b8 <UART_TxISR_8BIT+0x1a>
    if (huart->TxXferCount == 0U)
 80023aa:	0002      	movs	r2, r0
 80023ac:	3256      	adds	r2, #86	; 0x56
 80023ae:	8813      	ldrh	r3, [r2, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <UART_TxISR_8BIT+0x1c>
 80023b4:	f7ff ffda 	bl	800236c <UART_TxISR_16BIT.part.0>
}
 80023b8:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80023ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023bc:	6801      	ldr	r1, [r0, #0]
 80023be:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 80023c0:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80023c2:	628c      	str	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 80023c4:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80023c6:	8813      	ldrh	r3, [r2, #0]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	8013      	strh	r3, [r2, #0]
}
 80023ce:	e7f3      	b.n	80023b8 <UART_TxISR_8BIT+0x1a>

080023d0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023d0:	0003      	movs	r3, r0
 80023d2:	3308      	adds	r3, #8
 80023d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80023d6:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023d8:	2b21      	cmp	r3, #33	; 0x21
 80023da:	d106      	bne.n	80023ea <UART_TxISR_16BIT+0x1a>
  {
    if (huart->TxXferCount == 0U)
 80023dc:	0001      	movs	r1, r0
 80023de:	3156      	adds	r1, #86	; 0x56
 80023e0:	880b      	ldrh	r3, [r1, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <UART_TxISR_16BIT+0x1c>
 80023e6:	f7ff ffc1 	bl	800236c <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80023ea:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80023ee:	6804      	ldr	r4, [r0, #0]
 80023f0:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 80023f2:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	0ddb      	lsrs	r3, r3, #23
 80023f8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80023fa:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80023fc:	880b      	ldrh	r3, [r1, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29b      	uxth	r3, r3
 8002402:	800b      	strh	r3, [r1, #0]
}
 8002404:	e7f1      	b.n	80023ea <UART_TxISR_16BIT+0x1a>
	...

08002408 <UART_TxISR_16BIT_FIFOEN.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
 8002408:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240e:	2201      	movs	r2, #1
 8002410:	f382 8810 	msr	PRIMASK, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
    {
      if (huart->TxXferCount == 0U)
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002414:	6801      	ldr	r1, [r0, #0]
 8002416:	4d09      	ldr	r5, [pc, #36]	; (800243c <UART_TxISR_16BIT_FIFOEN.part.0+0x34>)
 8002418:	688b      	ldr	r3, [r1, #8]
 800241a:	402b      	ands	r3, r5
 800241c:	608b      	str	r3, [r1, #8]
 800241e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002422:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002426:	f382 8810 	msr	PRIMASK, r2

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	6802      	ldr	r2, [r0, #0]
 800242e:	6810      	ldr	r0, [r2, #0]
 8002430:	4303      	orrs	r3, r0
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 8002438:	bd30      	pop	{r4, r5, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	ff7fffff 	.word	0xff7fffff

08002440 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002440:	0003      	movs	r3, r0
 8002442:	3308      	adds	r3, #8
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8002446:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d10c      	bne.n	8002466 <UART_TxISR_8BIT_FIFOEN+0x26>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800244c:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 800244e:	0001      	movs	r1, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002450:	2480      	movs	r4, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002452:	336a      	adds	r3, #106	; 0x6a
 8002454:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 8002456:	3156      	adds	r1, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <UART_TxISR_8BIT_FIFOEN+0x26>
      if (huart->TxXferCount == 0U)
 800245c:	880a      	ldrh	r2, [r1, #0]
 800245e:	2a00      	cmp	r2, #0
 8002460:	d102      	bne.n	8002468 <UART_TxISR_8BIT_FIFOEN+0x28>
 8002462:	f7ff ffd1 	bl	8002408 <UART_TxISR_16BIT_FIFOEN.part.0>
}
 8002466:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002468:	6805      	ldr	r5, [r0, #0]
 800246a:	69ea      	ldr	r2, [r5, #28]
 800246c:	4222      	tst	r2, r4
 800246e:	d008      	beq.n	8002482 <UART_TxISR_8BIT_FIFOEN+0x42>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002470:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002472:	7816      	ldrb	r6, [r2, #0]
        huart->pTxBuffPtr++;
 8002474:	3201      	adds	r2, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002476:	62ae      	str	r6, [r5, #40]	; 0x28
        huart->pTxBuffPtr++;
 8002478:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800247a:	880a      	ldrh	r2, [r1, #0]
 800247c:	3a01      	subs	r2, #1
 800247e:	b292      	uxth	r2, r2
 8002480:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002482:	3b01      	subs	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	e7e7      	b.n	8002458 <UART_TxISR_8BIT_FIFOEN+0x18>

08002488 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002488:	0003      	movs	r3, r0
 800248a:	3308      	adds	r3, #8
 800248c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800248e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002490:	2b21      	cmp	r3, #33	; 0x21
 8002492:	d10c      	bne.n	80024ae <UART_TxISR_16BIT_FIFOEN+0x26>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002494:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8002496:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002498:	2480      	movs	r4, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800249a:	336a      	adds	r3, #106	; 0x6a
 800249c:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 800249e:	3156      	adds	r1, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <UART_TxISR_16BIT_FIFOEN+0x26>
      if (huart->TxXferCount == 0U)
 80024a4:	880a      	ldrh	r2, [r1, #0]
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d102      	bne.n	80024b0 <UART_TxISR_16BIT_FIFOEN+0x28>
 80024aa:	f7ff ffad 	bl	8002408 <UART_TxISR_16BIT_FIFOEN.part.0>
      {
        /* Nothing to do */
      }
    }
  }
}
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80024b0:	6806      	ldr	r6, [r0, #0]
 80024b2:	69f2      	ldr	r2, [r6, #28]
 80024b4:	4222      	tst	r2, r4
 80024b6:	d00a      	beq.n	80024ce <UART_TxISR_16BIT_FIFOEN+0x46>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80024b8:	6d05      	ldr	r5, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80024ba:	882a      	ldrh	r2, [r5, #0]
        huart->pTxBuffPtr += 2U;
 80024bc:	3502      	adds	r5, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80024be:	05d2      	lsls	r2, r2, #23
 80024c0:	0dd2      	lsrs	r2, r2, #23
 80024c2:	62b2      	str	r2, [r6, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80024c4:	6505      	str	r5, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80024c6:	880a      	ldrh	r2, [r1, #0]
 80024c8:	3a01      	subs	r2, #1
 80024ca:	b292      	uxth	r2, r2
 80024cc:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	e7e5      	b.n	80024a0 <UART_TxISR_16BIT_FIFOEN+0x18>

080024d4 <HAL_UART_Transmit_IT>:
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80024d6:	0006      	movs	r6, r0
 80024d8:	3608      	adds	r6, #8
 80024da:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 80024dc:	0003      	movs	r3, r0
    return HAL_BUSY;
 80024de:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80024e0:	2c20      	cmp	r4, #32
 80024e2:	d141      	bne.n	8002568 <HAL_UART_Transmit_IT+0x94>
      return HAL_ERROR;
 80024e4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80024e6:	2900      	cmp	r1, #0
 80024e8:	d03e      	beq.n	8002568 <HAL_UART_Transmit_IT+0x94>
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d03c      	beq.n	8002568 <HAL_UART_Transmit_IT+0x94>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ee:	2080      	movs	r0, #128	; 0x80
 80024f0:	689d      	ldr	r5, [r3, #8]
 80024f2:	0140      	lsls	r0, r0, #5
 80024f4:	4285      	cmp	r5, r0
 80024f6:	d106      	bne.n	8002506 <HAL_UART_Transmit_IT+0x32>
 80024f8:	6918      	ldr	r0, [r3, #16]
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d103      	bne.n	8002506 <HAL_UART_Transmit_IT+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80024fe:	3c1f      	subs	r4, #31
      return HAL_ERROR;
 8002500:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8002502:	4221      	tst	r1, r4
 8002504:	d130      	bne.n	8002568 <HAL_UART_Transmit_IT+0x94>
    __HAL_LOCK(huart);
 8002506:	001c      	movs	r4, r3
 8002508:	3480      	adds	r4, #128	; 0x80
 800250a:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 800250c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800250e:	2f01      	cmp	r7, #1
 8002510:	d02a      	beq.n	8002568 <HAL_UART_Transmit_IT+0x94>
 8002512:	3801      	subs	r0, #1
 8002514:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8002516:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002518:	0019      	movs	r1, r3
 800251a:	3154      	adds	r1, #84	; 0x54
 800251c:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800251e:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	001a      	movs	r2, r3
 8002522:	2100      	movs	r1, #0
 8002524:	328c      	adds	r2, #140	; 0x8c
 8002526:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002528:	2221      	movs	r2, #33	; 0x21
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	67f2      	str	r2, [r6, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8002532:	0592      	lsls	r2, r2, #22
 8002534:	0149      	lsls	r1, r1, #5
 8002536:	4290      	cmp	r0, r2
 8002538:	d117      	bne.n	800256a <HAL_UART_Transmit_IT+0x96>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_UART_Transmit_IT+0xc0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	428d      	cmp	r5, r1
 800253e:	d103      	bne.n	8002548 <HAL_UART_Transmit_IT+0x74>
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	2900      	cmp	r1, #0
 8002544:	d100      	bne.n	8002548 <HAL_UART_Transmit_IT+0x74>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_UART_Transmit_IT+0xc4>)
      __HAL_UNLOCK(huart);
 8002548:	2000      	movs	r0, #0
 800254a:	675a      	str	r2, [r3, #116]	; 0x74
 800254c:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002552:	2201      	movs	r2, #1
 8002554:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	6894      	ldr	r4, [r2, #8]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	4323      	orrs	r3, r4
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	f381 8810 	msr	PRIMASK, r1
}
 8002568:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_UART_Transmit_IT+0xc8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256c:	428d      	cmp	r5, r1
 800256e:	d103      	bne.n	8002578 <HAL_UART_Transmit_IT+0xa4>
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	2900      	cmp	r1, #0
 8002574:	d100      	bne.n	8002578 <HAL_UART_Transmit_IT+0xa4>
        huart->TxISR = UART_TxISR_16BIT;
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_UART_Transmit_IT+0xcc>)
      __HAL_UNLOCK(huart);
 8002578:	2000      	movs	r0, #0
 800257a:	675a      	str	r2, [r3, #116]	; 0x74
 800257c:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002582:	2201      	movs	r2, #1
 8002584:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	6814      	ldr	r4, [r2, #0]
 800258e:	4323      	orrs	r3, r4
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e7e7      	b.n	8002564 <HAL_UART_Transmit_IT+0x90>
 8002594:	08002441 	.word	0x08002441
 8002598:	08002489 	.word	0x08002489
 800259c:	0800239f 	.word	0x0800239f
 80025a0:	080023d1 	.word	0x080023d1

080025a4 <HAL_UART_ErrorCallback>:
 80025a4:	4770      	bx	lr

080025a6 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	0002      	movs	r2, r0
{
 80025ac:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80025ae:	325e      	adds	r2, #94	; 0x5e
 80025b0:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80025b2:	3a08      	subs	r2, #8
 80025b4:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80025b6:	f7ff fff5 	bl	80025a4 <HAL_UART_ErrorCallback>
}
 80025ba:	bd10      	pop	{r4, pc}

080025bc <HAL_UART_AbortReceiveCpltCallback>:
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_UART_AbortReceive_IT>:
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	2201      	movs	r2, #1
 80025ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80025ce:	6821      	ldr	r1, [r4, #0]
 80025d0:	4d2f      	ldr	r5, [pc, #188]	; (8002690 <HAL_UART_AbortReceive_IT+0xd0>)
 80025d2:	680b      	ldr	r3, [r1, #0]
 80025d4:	402b      	ands	r3, r5
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	482b      	ldr	r0, [pc, #172]	; (8002694 <HAL_UART_AbortReceive_IT+0xd4>)
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	4003      	ands	r3, r0
 80025ec:	6093      	str	r3, [r2, #8]
 80025ee:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10a      	bne.n	800260e <HAL_UART_AbortReceive_IT+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002600:	2010      	movs	r0, #16
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	4383      	bics	r3, r0
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260e:	6821      	ldr	r1, [r4, #0]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	6888      	ldr	r0, [r1, #8]
 8002614:	0003      	movs	r3, r0
 8002616:	4013      	ands	r3, r2
 8002618:	4210      	tst	r0, r2
 800261a:	d02c      	beq.n	8002676 <HAL_UART_AbortReceive_IT+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	2301      	movs	r3, #1
 8002622:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	6821      	ldr	r1, [r4, #0]
 8002628:	688b      	ldr	r3, [r1, #8]
 800262a:	4393      	bics	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
 800262e:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmarx != NULL)
 8002632:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002634:	2800      	cmp	r0, #0
 8002636:	d00a      	beq.n	800264e <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_UART_AbortReceive_IT+0xd8>)
 800263a:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800263c:	f7fe ff5a 	bl	80014f4 <HAL_DMA_Abort_IT>
 8002640:	2800      	cmp	r0, #0
 8002642:	d002      	beq.n	800264a <HAL_UART_AbortReceive_IT+0x8a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002644:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002646:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002648:	4798      	blx	r3
}
 800264a:	2000      	movs	r0, #0
 800264c:	bd70      	pop	{r4, r5, r6, pc}
      huart->RxXferCount = 0U;
 800264e:	0023      	movs	r3, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002650:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8002652:	335e      	adds	r3, #94	; 0x5e
 8002654:	8018      	strh	r0, [r3, #0]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002656:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr = NULL;
 8002658:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800265a:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800265c:	6999      	ldr	r1, [r3, #24]
 800265e:	3a07      	subs	r2, #7
 8002660:	430a      	orrs	r2, r1
 8002662:	619a      	str	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8002664:	0023      	movs	r3, r4
 8002666:	2220      	movs	r2, #32
 8002668:	3388      	adds	r3, #136	; 0x88
 800266a:	601a      	str	r2, [r3, #0]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	66e0      	str	r0, [r4, #108]	; 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 800266e:	0020      	movs	r0, r4
 8002670:	f7ff ffa4 	bl	80025bc <HAL_UART_AbortReceiveCpltCallback>
 8002674:	e7e9      	b.n	800264a <HAL_UART_AbortReceive_IT+0x8a>
    huart->RxXferCount = 0U;
 8002676:	0022      	movs	r2, r4
 8002678:	325e      	adds	r2, #94	; 0x5e
 800267a:	8013      	strh	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800267c:	220f      	movs	r2, #15
    huart->pRxBuffPtr = NULL;
 800267e:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002680:	620a      	str	r2, [r1, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8002682:	0022      	movs	r2, r4
 8002684:	2120      	movs	r1, #32
 8002686:	3288      	adds	r2, #136	; 0x88
 8002688:	6011      	str	r1, [r2, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800268c:	e7ef      	b.n	800266e <HAL_UART_AbortReceive_IT+0xae>
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	fffffedf 	.word	0xfffffedf
 8002694:	effffffe 	.word	0xeffffffe
 8002698:	0800269d 	.word	0x0800269d

0800269c <UART_DMARxOnlyAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800269e:	2100      	movs	r1, #0
 80026a0:	0003      	movs	r3, r0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80026a2:	220f      	movs	r2, #15
  huart->RxXferCount = 0U;
 80026a4:	335e      	adds	r3, #94	; 0x5e
{
 80026a6:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80026a8:	8019      	strh	r1, [r3, #0]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026ae:	699c      	ldr	r4, [r3, #24]
 80026b0:	3a07      	subs	r2, #7
 80026b2:	4322      	orrs	r2, r4
 80026b4:	619a      	str	r2, [r3, #24]
  huart->RxState = HAL_UART_STATE_READY;
 80026b6:	0003      	movs	r3, r0
 80026b8:	2220      	movs	r2, #32
 80026ba:	3388      	adds	r3, #136	; 0x88
 80026bc:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026be:	66c1      	str	r1, [r0, #108]	; 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 80026c0:	f7ff ff7c 	bl	80025bc <HAL_UART_AbortReceiveCpltCallback>
}
 80026c4:	bd10      	pop	{r4, pc}

080026c6 <HAL_UARTEx_RxEventCallback>:
}
 80026c6:	4770      	bx	lr

080026c8 <HAL_UART_IRQHandler>:
{
 80026c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026ca:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026cc:	4dc1      	ldr	r5, [pc, #772]	; (80029d4 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026ce:	69cb      	ldr	r3, [r1, #28]
{
 80026d0:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d2:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d4:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80026d6:	422b      	tst	r3, r5
 80026d8:	d110      	bne.n	80026fc <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026da:	2520      	movs	r5, #32
 80026dc:	422b      	tst	r3, r5
 80026de:	d100      	bne.n	80026e2 <HAL_UART_IRQHandler+0x1a>
 80026e0:	e099      	b.n	8002816 <HAL_UART_IRQHandler+0x14e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026e2:	2680      	movs	r6, #128	; 0x80
 80026e4:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026e6:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026e8:	4006      	ands	r6, r0
 80026ea:	4335      	orrs	r5, r6
 80026ec:	d100      	bne.n	80026f0 <HAL_UART_IRQHandler+0x28>
 80026ee:	e092      	b.n	8002816 <HAL_UART_IRQHandler+0x14e>
      if (huart->RxISR != NULL)
 80026f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
      huart->TxISR(huart);
 80026f2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d000      	beq.n	80026fa <HAL_UART_IRQHandler+0x32>
 80026f8:	e082      	b.n	8002800 <HAL_UART_IRQHandler+0x138>
 80026fa:	e082      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026fc:	4db6      	ldr	r5, [pc, #728]	; (80029d8 <HAL_UART_IRQHandler+0x310>)
 80026fe:	4005      	ands	r5, r0
 8002700:	46ac      	mov	ip, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002702:	4666      	mov	r6, ip
 8002704:	4db5      	ldr	r5, [pc, #724]	; (80029dc <HAL_UART_IRQHandler+0x314>)
 8002706:	4015      	ands	r5, r2
 8002708:	4335      	orrs	r5, r6
 800270a:	d100      	bne.n	800270e <HAL_UART_IRQHandler+0x46>
 800270c:	e083      	b.n	8002816 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800270e:	2501      	movs	r5, #1
 8002710:	422b      	tst	r3, r5
 8002712:	d007      	beq.n	8002724 <HAL_UART_IRQHandler+0x5c>
 8002714:	05d6      	lsls	r6, r2, #23
 8002716:	d505      	bpl.n	8002724 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002718:	0026      	movs	r6, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800271a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271c:	368c      	adds	r6, #140	; 0x8c
 800271e:	6837      	ldr	r7, [r6, #0]
 8002720:	433d      	orrs	r5, r7
 8002722:	6035      	str	r5, [r6, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002724:	0025      	movs	r5, r4
 8002726:	2602      	movs	r6, #2
 8002728:	358c      	adds	r5, #140	; 0x8c
 800272a:	9501      	str	r5, [sp, #4]
 800272c:	4233      	tst	r3, r6
 800272e:	d007      	beq.n	8002740 <HAL_UART_IRQHandler+0x78>
 8002730:	07c5      	lsls	r5, r0, #31
 8002732:	d505      	bpl.n	8002740 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002734:	9d01      	ldr	r5, [sp, #4]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002736:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002738:	682f      	ldr	r7, [r5, #0]
 800273a:	19b6      	adds	r6, r6, r6
 800273c:	433e      	orrs	r6, r7
 800273e:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002740:	2604      	movs	r6, #4
 8002742:	4233      	tst	r3, r6
 8002744:	d009      	beq.n	800275a <HAL_UART_IRQHandler+0x92>
 8002746:	07c5      	lsls	r5, r0, #31
 8002748:	d507      	bpl.n	800275a <HAL_UART_IRQHandler+0x92>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800274c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274e:	378c      	adds	r7, #140	; 0x8c
 8002750:	683e      	ldr	r6, [r7, #0]
 8002752:	0035      	movs	r5, r6
 8002754:	2602      	movs	r6, #2
 8002756:	432e      	orrs	r6, r5
 8002758:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800275a:	2608      	movs	r6, #8
 800275c:	4233      	tst	r3, r6
 800275e:	d00a      	beq.n	8002776 <HAL_UART_IRQHandler+0xae>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002760:	2720      	movs	r7, #32
 8002762:	4665      	mov	r5, ip
 8002764:	4017      	ands	r7, r2
 8002766:	432f      	orrs	r7, r5
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0xae>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800276c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276e:	378c      	adds	r7, #140	; 0x8c
 8002770:	683d      	ldr	r5, [r7, #0]
 8002772:	432e      	orrs	r6, r5
 8002774:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002776:	2780      	movs	r7, #128	; 0x80
 8002778:	0026      	movs	r6, r4
 800277a:	013f      	lsls	r7, r7, #4
 800277c:	368c      	adds	r6, #140	; 0x8c
 800277e:	423b      	tst	r3, r7
 8002780:	d006      	beq.n	8002790 <HAL_UART_IRQHandler+0xc8>
 8002782:	0155      	lsls	r5, r2, #5
 8002784:	d504      	bpl.n	8002790 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002786:	620f      	str	r7, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002788:	2120      	movs	r1, #32
 800278a:	6837      	ldr	r7, [r6, #0]
 800278c:	4339      	orrs	r1, r7
 800278e:	6031      	str	r1, [r6, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002790:	6831      	ldr	r1, [r6, #0]
 8002792:	2900      	cmp	r1, #0
 8002794:	d035      	beq.n	8002802 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002796:	2120      	movs	r1, #32
 8002798:	420b      	tst	r3, r1
 800279a:	d00a      	beq.n	80027b2 <HAL_UART_IRQHandler+0xea>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800279c:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0552      	lsls	r2, r2, #21
 80027a2:	4010      	ands	r0, r2
 80027a4:	4301      	orrs	r1, r0
 80027a6:	d004      	beq.n	80027b2 <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 80027a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_IRQHandler+0xea>
          huart->RxISR(huart);
 80027ae:	0020      	movs	r0, r4
 80027b0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b2:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80027b4:	9b01      	ldr	r3, [sp, #4]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b6:	2740      	movs	r7, #64	; 0x40
      errorcode = huart->ErrorCode;
 80027b8:	681b      	ldr	r3, [r3, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ba:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027bc:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027be:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027c0:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80027c2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c4:	431e      	orrs	r6, r3
 80027c6:	d021      	beq.n	800280c <HAL_UART_IRQHandler+0x144>
        UART_EndRxTransfer(huart);
 80027c8:	f7ff fd9e 	bl	8002308 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	423b      	tst	r3, r7
 80027d2:	d017      	beq.n	8002804 <HAL_UART_IRQHandler+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	2301      	movs	r3, #1
 80027da:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	6893      	ldr	r3, [r2, #8]
 80027e2:	43bb      	bics	r3, r7
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80027ea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d009      	beq.n	8002804 <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027f0:	4b7b      	ldr	r3, [pc, #492]	; (80029e0 <HAL_UART_IRQHandler+0x318>)
 80027f2:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027f4:	f7fe fe7e 	bl	80014f4 <HAL_DMA_Abort_IT>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80027fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002800:	4798      	blx	r3
}
 8002802:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002804:	0020      	movs	r0, r4
 8002806:	f7ff fecd 	bl	80025a4 <HAL_UART_ErrorCallback>
 800280a:	e7fa      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
        HAL_UART_ErrorCallback(huart);
 800280c:	f7ff feca 	bl	80025a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	601e      	str	r6, [r3, #0]
 8002814:	e7f5      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002816:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002818:	2d01      	cmp	r5, #1
 800281a:	d000      	beq.n	800281e <HAL_UART_IRQHandler+0x156>
 800281c:	e098      	b.n	8002950 <HAL_UART_IRQHandler+0x288>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800281e:	2610      	movs	r6, #16
 8002820:	4233      	tst	r3, r6
 8002822:	d100      	bne.n	8002826 <HAL_UART_IRQHandler+0x15e>
 8002824:	e094      	b.n	8002950 <HAL_UART_IRQHandler+0x288>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002826:	4232      	tst	r2, r6
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x164>
 800282a:	e091      	b.n	8002950 <HAL_UART_IRQHandler+0x288>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800282c:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282e:	688b      	ldr	r3, [r1, #8]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	0018      	movs	r0, r3
 8002834:	4010      	ands	r0, r2
 8002836:	4213      	tst	r3, r2
 8002838:	d052      	beq.n	80028e0 <HAL_UART_IRQHandler+0x218>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800283a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	684b      	ldr	r3, [r1, #4]
 8002840:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0dd      	beq.n	8002802 <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002846:	0020      	movs	r0, r4
 8002848:	305c      	adds	r0, #92	; 0x5c
 800284a:	8800      	ldrh	r0, [r0, #0]
 800284c:	4298      	cmp	r0, r3
 800284e:	d9d8      	bls.n	8002802 <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002850:	0020      	movs	r0, r4
 8002852:	305e      	adds	r0, #94	; 0x5e
 8002854:	8003      	strh	r3, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002856:	6809      	ldr	r1, [r1, #0]
 8002858:	2320      	movs	r3, #32
 800285a:	0008      	movs	r0, r1
 800285c:	4018      	ands	r0, r3
 800285e:	9001      	str	r0, [sp, #4]
 8002860:	4219      	tst	r1, r3
 8002862:	d131      	bne.n	80028c8 <HAL_UART_IRQHandler+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002864:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800286c:	6820      	ldr	r0, [r4, #0]
 800286e:	4e5d      	ldr	r6, [pc, #372]	; (80029e4 <HAL_UART_IRQHandler+0x31c>)
 8002870:	6801      	ldr	r1, [r0, #0]
 8002872:	4031      	ands	r1, r6
 8002874:	6001      	str	r1, [r0, #0]
 8002876:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	6881      	ldr	r1, [r0, #8]
 8002886:	43a9      	bics	r1, r5
 8002888:	6081      	str	r1, [r0, #8]
 800288a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002896:	6821      	ldr	r1, [r4, #0]
 8002898:	688f      	ldr	r7, [r1, #8]
 800289a:	4397      	bics	r7, r2
 800289c:	608f      	str	r7, [r1, #8]
 800289e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80028a2:	0022      	movs	r2, r4
 80028a4:	3288      	adds	r2, #136	; 0x88
 80028a6:	6013      	str	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b0:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b4:	2010      	movs	r0, #16
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	4383      	bics	r3, r0
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80028c4:	f7fe fdd8 	bl	8001478 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c8:	0023      	movs	r3, r4
 80028ca:	0022      	movs	r2, r4
 80028cc:	335e      	adds	r3, #94	; 0x5e
 80028ce:	325c      	adds	r2, #92	; 0x5c
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	8811      	ldrh	r1, [r2, #0]
 80028d4:	1ac9      	subs	r1, r1, r3
 80028d6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d8:	0020      	movs	r0, r4
 80028da:	f7ff fef4 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
 80028de:	e790      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e0:	0022      	movs	r2, r4
 80028e2:	325e      	adds	r2, #94	; 0x5e
 80028e4:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 80028e6:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e8:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d100      	bne.n	80028f0 <HAL_UART_IRQHandler+0x228>
 80028ee:	e788      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f0:	0022      	movs	r2, r4
 80028f2:	325c      	adds	r2, #92	; 0x5c
 80028f4:	8811      	ldrh	r1, [r2, #0]
 80028f6:	1ac9      	subs	r1, r1, r3
 80028f8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80028fa:	2900      	cmp	r1, #0
 80028fc:	d100      	bne.n	8002900 <HAL_UART_IRQHandler+0x238>
 80028fe:	e780      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002900:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002904:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	4e37      	ldr	r6, [pc, #220]	; (80029e8 <HAL_UART_IRQHandler+0x320>)
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	4033      	ands	r3, r6
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002916:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	4e32      	ldr	r6, [pc, #200]	; (80029ec <HAL_UART_IRQHandler+0x324>)
 8002922:	6893      	ldr	r3, [r2, #8]
 8002924:	4033      	ands	r3, r6
 8002926:	6093      	str	r3, [r2, #8]
 8002928:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800292c:	0023      	movs	r3, r4
 800292e:	2220      	movs	r2, #32
 8002930:	3388      	adds	r3, #136	; 0x88
 8002932:	601a      	str	r2, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002934:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002936:	6720      	str	r0, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002938:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002940:	2510      	movs	r5, #16
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	43ab      	bics	r3, r5
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	f380 8810 	msr	PRIMASK, r0
 800294e:	e7c3      	b.n	80028d8 <HAL_UART_IRQHandler+0x210>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002950:	2580      	movs	r5, #128	; 0x80
 8002952:	036d      	lsls	r5, r5, #13
 8002954:	422b      	tst	r3, r5
 8002956:	d006      	beq.n	8002966 <HAL_UART_IRQHandler+0x29e>
 8002958:	0246      	lsls	r6, r0, #9
 800295a:	d504      	bpl.n	8002966 <HAL_UART_IRQHandler+0x29e>
    HAL_UARTEx_WakeupCallback(huart);
 800295c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800295e:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002960:	f000 fda6 	bl	80034b0 <HAL_UARTEx_WakeupCallback>
    return;
 8002964:	e74d      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	420b      	tst	r3, r1
 800296a:	d007      	beq.n	800297c <HAL_UART_IRQHandler+0x2b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800296c:	2580      	movs	r5, #128	; 0x80
 800296e:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002970:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002972:	4028      	ands	r0, r5
 8002974:	4308      	orrs	r0, r1
 8002976:	d001      	beq.n	800297c <HAL_UART_IRQHandler+0x2b4>
    if (huart->TxISR != NULL)
 8002978:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800297a:	e6ba      	b.n	80026f2 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	420b      	tst	r3, r1
 8002980:	d016      	beq.n	80029b0 <HAL_UART_IRQHandler+0x2e8>
 8002982:	420a      	tst	r2, r1
 8002984:	d014      	beq.n	80029b0 <HAL_UART_IRQHandler+0x2e8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	2301      	movs	r3, #1
 800298c:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	438b      	bics	r3, r1
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	0023      	movs	r3, r4
 800299e:	2220      	movs	r2, #32
 80029a0:	3308      	adds	r3, #8
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80029a4:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029a6:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80029a8:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 80029aa:	f001 fc1d 	bl	80041e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ae:	e728      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029b0:	0219      	lsls	r1, r3, #8
 80029b2:	d505      	bpl.n	80029c0 <HAL_UART_IRQHandler+0x2f8>
 80029b4:	0051      	lsls	r1, r2, #1
 80029b6:	d503      	bpl.n	80029c0 <HAL_UART_IRQHandler+0x2f8>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029b8:	0020      	movs	r0, r4
 80029ba:	f000 fd7b 	bl	80034b4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80029be:	e720      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	d400      	bmi.n	80029c6 <HAL_UART_IRQHandler+0x2fe>
 80029c4:	e71d      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	db00      	blt.n	80029cc <HAL_UART_IRQHandler+0x304>
 80029ca:	e71a      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029cc:	0020      	movs	r0, r4
 80029ce:	f000 fd70 	bl	80034b2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80029d2:	e716      	b.n	8002802 <HAL_UART_IRQHandler+0x13a>
 80029d4:	0000080f 	.word	0x0000080f
 80029d8:	10000001 	.word	0x10000001
 80029dc:	04000120 	.word	0x04000120
 80029e0:	080025a7 	.word	0x080025a7
 80029e4:	fffffeff 	.word	0xfffffeff
 80029e8:	fffffedf 	.word	0xfffffedf
 80029ec:	effffffe 	.word	0xeffffffe

080029f0 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80029f0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	2201      	movs	r2, #1
 80029f8:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029fc:	6801      	ldr	r1, [r0, #0]
 80029fe:	4d19      	ldr	r5, [pc, #100]	; (8002a64 <UART_RxISR_16BIT.part.0+0x74>)
 8002a00:	680b      	ldr	r3, [r1, #0]
 8002a02:	402b      	ands	r3, r5
 8002a04:	600b      	str	r3, [r1, #0]
 8002a06:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a12:	6801      	ldr	r1, [r0, #0]
 8002a14:	688b      	ldr	r3, [r1, #8]
 8002a16:	4393      	bics	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	0003      	movs	r3, r0
 8002a20:	321f      	adds	r2, #31
 8002a22:	3388      	adds	r3, #136	; 0x88
 8002a24:	601a      	str	r2, [r3, #0]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a26:	2200      	movs	r2, #0

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a28:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8002a2a:	6702      	str	r2, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d116      	bne.n	8002a5e <UART_RxISR_16BIT.part.0+0x6e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a30:	66c2      	str	r2, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3a:	6801      	ldr	r1, [r0, #0]
 8002a3c:	330f      	adds	r3, #15
 8002a3e:	680a      	ldr	r2, [r1, #0]
 8002a40:	439a      	bics	r2, r3
 8002a42:	600a      	str	r2, [r1, #0]
 8002a44:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a48:	6802      	ldr	r2, [r0, #0]
 8002a4a:	69d1      	ldr	r1, [r2, #28]
 8002a4c:	4219      	tst	r1, r3
 8002a4e:	d000      	beq.n	8002a52 <UART_RxISR_16BIT.part.0+0x62>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a50:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a52:	0003      	movs	r3, r0
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	8819      	ldrh	r1, [r3, #0]
 8002a58:	f7ff fe35 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8002a5e:	f001 fbed 	bl	800423c <HAL_UART_RxCpltCallback>
}
 8002a62:	e7fb      	b.n	8002a5c <UART_RxISR_16BIT.part.0+0x6c>
 8002a64:	fffffedf 	.word	0xfffffedf

08002a68 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a68:	0003      	movs	r3, r0
 8002a6a:	3388      	adds	r3, #136	; 0x88
 8002a6c:	681a      	ldr	r2, [r3, #0]
{
 8002a6e:	b510      	push	{r4, lr}
 8002a70:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a72:	2a22      	cmp	r2, #34	; 0x22
 8002a74:	d114      	bne.n	8002aa0 <UART_RxISR_16BIT+0x38>
  uint16_t uhMask = huart->Mask;
 8002a76:	0001      	movs	r1, r0
 8002a78:	3160      	adds	r1, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a7c:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002a7e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a80:	400a      	ands	r2, r1
 8002a82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002a84:	0002      	movs	r2, r0
    huart->pRxBuffPtr += 2U;
 8002a86:	3302      	adds	r3, #2
 8002a88:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002a8a:	325e      	adds	r2, #94	; 0x5e
 8002a8c:	8813      	ldrh	r3, [r2, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002a94:	8813      	ldrh	r3, [r2, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <UART_RxISR_16BIT+0x36>
 8002a9a:	f7ff ffa9 	bl	80029f0 <UART_RxISR_16BIT.part.0>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a9e:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	6999      	ldr	r1, [r3, #24]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
}
 8002aa8:	e7f9      	b.n	8002a9e <UART_RxISR_16BIT+0x36>

08002aaa <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aaa:	0003      	movs	r3, r0
 8002aac:	3388      	adds	r3, #136	; 0x88
 8002aae:	681a      	ldr	r2, [r3, #0]
{
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ab4:	2a22      	cmp	r2, #34	; 0x22
 8002ab6:	d115      	bne.n	8002ae4 <UART_RxISR_8BIT+0x3a>
  uint16_t uhMask = huart->Mask;
 8002ab8:	0002      	movs	r2, r0
 8002aba:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002ac4:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8002ac6:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8002ac8:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002aca:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8002acc:	3301      	adds	r3, #1
 8002ace:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002ad0:	8813      	ldrh	r3, [r2, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 8002ad8:	8813      	ldrh	r3, [r2, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <UART_RxISR_8BIT+0x38>
 8002ade:	f7ff ff87 	bl	80029f0 <UART_RxISR_16BIT.part.0>
}
 8002ae2:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	6999      	ldr	r1, [r3, #24]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
}
 8002aec:	e7f9      	b.n	8002ae2 <UART_RxISR_8BIT+0x38>
	...

08002af0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002af2:	6803      	ldr	r3, [r0, #0]
{
 8002af4:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002af6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002af8:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002afa:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002afc:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002afe:	0002      	movs	r2, r0
 8002b00:	3288      	adds	r2, #136	; 0x88
 8002b02:	6812      	ldr	r2, [r2, #0]
{
 8002b04:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b06:	2a22      	cmp	r2, #34	; 0x22
 8002b08:	d000      	beq.n	8002b0c <UART_RxISR_8BIT_FIFOEN+0x1c>
 8002b0a:	e0b7      	b.n	8002c7c <UART_RxISR_8BIT_FIFOEN+0x18c>
  uint16_t  uhMask = huart->Mask;
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002b14:	0003      	movs	r3, r0
 8002b16:	3368      	adds	r3, #104	; 0x68
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002b1c:	0022      	movs	r2, r4
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	325e      	adds	r2, #94	; 0x5e
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <UART_RxISR_8BIT_FIFOEN+0x3c>
 8002b26:	2320      	movs	r3, #32
 8002b28:	421d      	tst	r5, r3
 8002b2a:	d123      	bne.n	8002b74 <UART_RxISR_8BIT_FIFOEN+0x84>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002b2c:	8813      	ldrh	r3, [r2, #0]
 8002b2e:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01d      	beq.n	8002b70 <UART_RxISR_8BIT_FIFOEN+0x80>
 8002b34:	0023      	movs	r3, r4
 8002b36:	3368      	adds	r3, #104	; 0x68
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d918      	bls.n	8002b70 <UART_RxISR_8BIT_FIFOEN+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	2201      	movs	r2, #1
 8002b44:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002b48:	6821      	ldr	r1, [r4, #0]
 8002b4a:	4d4f      	ldr	r5, [pc, #316]	; (8002c88 <UART_RxISR_8BIT_FIFOEN+0x198>)
 8002b4c:	688b      	ldr	r3, [r1, #8]
 8002b4e:	402b      	ands	r3, r5
 8002b50:	608b      	str	r3, [r1, #8]
 8002b52:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002b56:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8002b58:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002b62:	2320      	movs	r3, #32
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	6810      	ldr	r0, [r2, #0]
 8002b68:	4303      	orrs	r3, r0
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002b70:	b005      	add	sp, #20
 8002b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b74:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b76:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002b7e:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8002b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b82:	3301      	adds	r3, #1
 8002b84:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002b86:	8813      	ldrh	r3, [r2, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002b8e:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002b94:	421d      	tst	r5, r3
 8002b96:	d02d      	beq.n	8002bf4 <UART_RxISR_8BIT_FIFOEN+0x104>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b98:	3b06      	subs	r3, #6
 8002b9a:	421d      	tst	r5, r3
 8002b9c:	d008      	beq.n	8002bb0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002b9e:	9902      	ldr	r1, [sp, #8]
 8002ba0:	05c9      	lsls	r1, r1, #23
 8002ba2:	d505      	bpl.n	8002bb0 <UART_RxISR_8BIT_FIFOEN+0xc0>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba4:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ba6:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba8:	318c      	adds	r1, #140	; 0x8c
 8002baa:	6808      	ldr	r0, [r1, #0]
 8002bac:	4303      	orrs	r3, r0
 8002bae:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	421d      	tst	r5, r3
 8002bb4:	d008      	beq.n	8002bc8 <UART_RxISR_8BIT_FIFOEN+0xd8>
 8002bb6:	07f1      	lsls	r1, r6, #31
 8002bb8:	d506      	bpl.n	8002bc8 <UART_RxISR_8BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bba:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bbc:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bbe:	318c      	adds	r1, #140	; 0x8c
 8002bc0:	6808      	ldr	r0, [r1, #0]
 8002bc2:	18db      	adds	r3, r3, r3
 8002bc4:	4303      	orrs	r3, r0
 8002bc6:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bc8:	2304      	movs	r3, #4
 8002bca:	421d      	tst	r5, r3
 8002bcc:	d008      	beq.n	8002be0 <UART_RxISR_8BIT_FIFOEN+0xf0>
 8002bce:	07f1      	lsls	r1, r6, #31
 8002bd0:	d506      	bpl.n	8002be0 <UART_RxISR_8BIT_FIFOEN+0xf0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bd2:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bd4:	0022      	movs	r2, r4
 8002bd6:	328c      	adds	r2, #140	; 0x8c
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	3b02      	subs	r3, #2
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be0:	0027      	movs	r7, r4
 8002be2:	378c      	adds	r7, #140	; 0x8c
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <UART_RxISR_8BIT_FIFOEN+0x104>
          HAL_UART_ErrorCallback(huart);
 8002bea:	0020      	movs	r0, r4
 8002bec:	f7ff fcda 	bl	80025a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8002bf4:	0023      	movs	r3, r4
 8002bf6:	335e      	adds	r3, #94	; 0x5e
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d000      	beq.n	8002c02 <UART_RxISR_8BIT_FIFOEN+0x112>
 8002c00:	e78c      	b.n	8002b1c <UART_RxISR_8BIT_FIFOEN+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	3301      	adds	r3, #1
 8002c08:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	6803      	ldr	r3, [r0, #0]
 8002c10:	0019      	movs	r1, r3
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 8002c14:	4019      	ands	r1, r3
 8002c16:	6001      	str	r1, [r0, #0]
 8002c18:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	2301      	movs	r3, #1
 8002c22:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	4f1a      	ldr	r7, [pc, #104]	; (8002c94 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 8002c2a:	688b      	ldr	r3, [r1, #8]
 8002c2c:	403b      	ands	r3, r7
 8002c2e:	608b      	str	r3, [r1, #8]
 8002c30:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8002c34:	0023      	movs	r3, r4
 8002c36:	2120      	movs	r1, #32
 8002c38:	3388      	adds	r3, #136	; 0x88
 8002c3a:	6019      	str	r1, [r3, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002c3e:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d117      	bne.n	8002c74 <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c44:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c46:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	330f      	adds	r3, #15
 8002c52:	680a      	ldr	r2, [r1, #0]
 8002c54:	439a      	bics	r2, r3
 8002c56:	600a      	str	r2, [r1, #0]
 8002c58:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c5c:	6822      	ldr	r2, [r4, #0]
 8002c5e:	69d1      	ldr	r1, [r2, #28]
 8002c60:	4219      	tst	r1, r3
 8002c62:	d000      	beq.n	8002c66 <UART_RxISR_8BIT_FIFOEN+0x176>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c64:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c66:	0023      	movs	r3, r4
 8002c68:	335c      	adds	r3, #92	; 0x5c
 8002c6a:	0020      	movs	r0, r4
 8002c6c:	8819      	ldrh	r1, [r3, #0]
 8002c6e:	f7ff fd2a 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
 8002c72:	e753      	b.n	8002b1c <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002c74:	0020      	movs	r0, r4
 8002c76:	f001 fae1 	bl	800423c <HAL_UART_RxCpltCallback>
 8002c7a:	e74f      	b.n	8002b1c <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
}
 8002c84:	e774      	b.n	8002b70 <UART_RxISR_8BIT_FIFOEN+0x80>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	efffffff 	.word	0xefffffff
 8002c8c:	08002aab 	.word	0x08002aab
 8002c90:	fffffeff 	.word	0xfffffeff
 8002c94:	effffffe 	.word	0xeffffffe

08002c98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c9a:	6803      	ldr	r3, [r0, #0]
{
 8002c9c:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c9e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002ca0:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002ca2:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002ca4:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	3288      	adds	r2, #136	; 0x88
 8002caa:	6812      	ldr	r2, [r2, #0]
{
 8002cac:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cae:	2a22      	cmp	r2, #34	; 0x22
 8002cb0:	d000      	beq.n	8002cb4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8002cb2:	e0b5      	b.n	8002e20 <UART_RxISR_16BIT_FIFOEN+0x188>
  uint16_t  uhMask = huart->Mask;
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	3360      	adds	r3, #96	; 0x60
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	3368      	adds	r3, #104	; 0x68
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	9b03      	ldr	r3, [sp, #12]
 8002cc8:	315e      	adds	r1, #94	; 0x5e
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8002cce:	2320      	movs	r3, #32
 8002cd0:	421d      	tst	r5, r3
 8002cd2:	d123      	bne.n	8002d1c <UART_RxISR_16BIT_FIFOEN+0x84>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002cd4:	880b      	ldrh	r3, [r1, #0]
 8002cd6:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <UART_RxISR_16BIT_FIFOEN+0x80>
 8002cdc:	0023      	movs	r3, r4
 8002cde:	3368      	adds	r3, #104	; 0x68
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d918      	bls.n	8002d18 <UART_RxISR_16BIT_FIFOEN+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	2201      	movs	r2, #1
 8002cec:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002cf0:	6821      	ldr	r1, [r4, #0]
 8002cf2:	4d4e      	ldr	r5, [pc, #312]	; (8002e2c <UART_RxISR_16BIT_FIFOEN+0x194>)
 8002cf4:	688b      	ldr	r3, [r1, #8]
 8002cf6:	402b      	ands	r3, r5
 8002cf8:	608b      	str	r3, [r1, #8]
 8002cfa:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <UART_RxISR_16BIT_FIFOEN+0x198>)
 8002d00:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6810      	ldr	r0, [r2, #0]
 8002d10:	4303      	orrs	r3, r0
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d18:	b005      	add	sp, #20
 8002d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d1c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002d1e:	9d01      	ldr	r5, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d20:	6a58      	ldr	r0, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d22:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8002d24:	4028      	ands	r0, r5
 8002d26:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002d28:	3202      	adds	r2, #2
 8002d2a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002d2c:	880a      	ldrh	r2, [r1, #0]
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	b292      	uxth	r2, r2
 8002d32:	800a      	strh	r2, [r1, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002d34:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002d36:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002d38:	4215      	tst	r5, r2
 8002d3a:	d02d      	beq.n	8002d98 <UART_RxISR_16BIT_FIFOEN+0x100>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d3c:	3a06      	subs	r2, #6
 8002d3e:	4215      	tst	r5, r2
 8002d40:	d008      	beq.n	8002d54 <UART_RxISR_16BIT_FIFOEN+0xbc>
 8002d42:	9902      	ldr	r1, [sp, #8]
 8002d44:	05c9      	lsls	r1, r1, #23
 8002d46:	d505      	bpl.n	8002d54 <UART_RxISR_16BIT_FIFOEN+0xbc>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d48:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d4a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4c:	318c      	adds	r1, #140	; 0x8c
 8002d4e:	6808      	ldr	r0, [r1, #0]
 8002d50:	4302      	orrs	r2, r0
 8002d52:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d54:	2202      	movs	r2, #2
 8002d56:	4215      	tst	r5, r2
 8002d58:	d008      	beq.n	8002d6c <UART_RxISR_16BIT_FIFOEN+0xd4>
 8002d5a:	07f1      	lsls	r1, r6, #31
 8002d5c:	d506      	bpl.n	8002d6c <UART_RxISR_16BIT_FIFOEN+0xd4>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d5e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d60:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d62:	318c      	adds	r1, #140	; 0x8c
 8002d64:	6808      	ldr	r0, [r1, #0]
 8002d66:	1892      	adds	r2, r2, r2
 8002d68:	4302      	orrs	r2, r0
 8002d6a:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4215      	tst	r5, r2
 8002d70:	d008      	beq.n	8002d84 <UART_RxISR_16BIT_FIFOEN+0xec>
 8002d72:	07f1      	lsls	r1, r6, #31
 8002d74:	d506      	bpl.n	8002d84 <UART_RxISR_16BIT_FIFOEN+0xec>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d76:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d78:	0022      	movs	r2, r4
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	328c      	adds	r2, #140	; 0x8c
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d84:	0027      	movs	r7, r4
 8002d86:	378c      	adds	r7, #140	; 0x8c
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <UART_RxISR_16BIT_FIFOEN+0x100>
          HAL_UART_ErrorCallback(huart);
 8002d8e:	0020      	movs	r0, r4
 8002d90:	f7ff fc08 	bl	80025a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8002d98:	0023      	movs	r3, r4
 8002d9a:	335e      	adds	r3, #94	; 0x5e
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d000      	beq.n	8002da6 <UART_RxISR_16BIT_FIFOEN+0x10e>
 8002da4:	e78e      	b.n	8002cc4 <UART_RxISR_16BIT_FIFOEN+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	3301      	adds	r3, #1
 8002dac:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	0019      	movs	r1, r3
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8002db8:	4019      	ands	r1, r3
 8002dba:	6001      	str	r1, [r0, #0]
 8002dbc:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dca:	6821      	ldr	r1, [r4, #0]
 8002dcc:	4f1a      	ldr	r7, [pc, #104]	; (8002e38 <UART_RxISR_16BIT_FIFOEN+0x1a0>)
 8002dce:	688b      	ldr	r3, [r1, #8]
 8002dd0:	403b      	ands	r3, r7
 8002dd2:	608b      	str	r3, [r1, #8]
 8002dd4:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	0023      	movs	r3, r4
 8002dda:	2120      	movs	r1, #32
 8002ddc:	3388      	adds	r3, #136	; 0x88
 8002dde:	6019      	str	r1, [r3, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002de2:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d117      	bne.n	8002e18 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dee:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df2:	6821      	ldr	r1, [r4, #0]
 8002df4:	330f      	adds	r3, #15
 8002df6:	680a      	ldr	r2, [r1, #0]
 8002df8:	439a      	bics	r2, r3
 8002dfa:	600a      	str	r2, [r1, #0]
 8002dfc:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	69d1      	ldr	r1, [r2, #28]
 8002e04:	4219      	tst	r1, r3
 8002e06:	d000      	beq.n	8002e0a <UART_RxISR_16BIT_FIFOEN+0x172>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e08:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	335c      	adds	r3, #92	; 0x5c
 8002e0e:	0020      	movs	r0, r4
 8002e10:	8819      	ldrh	r1, [r3, #0]
 8002e12:	f7ff fc58 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
 8002e16:	e755      	b.n	8002cc4 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f001 fa0f 	bl	800423c <HAL_UART_RxCpltCallback>
 8002e1e:	e751      	b.n	8002cc4 <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e20:	2208      	movs	r2, #8
 8002e22:	6999      	ldr	r1, [r3, #24]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	619a      	str	r2, [r3, #24]
}
 8002e28:	e776      	b.n	8002d18 <UART_RxISR_16BIT_FIFOEN+0x80>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	efffffff 	.word	0xefffffff
 8002e30:	08002a69 	.word	0x08002a69
 8002e34:	fffffeff 	.word	0xfffffeff
 8002e38:	effffffe 	.word	0xeffffffe

08002e3c <HAL_UART_GetState>:
  temp1 = huart->gState;
 8002e3c:	0003      	movs	r3, r0
  temp2 = huart->RxState;
 8002e3e:	3088      	adds	r0, #136	; 0x88
  temp1 = huart->gState;
 8002e40:	3308      	adds	r3, #8
 8002e42:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  temp2 = huart->RxState;
 8002e44:	6800      	ldr	r0, [r0, #0]
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002e46:	4310      	orrs	r0, r2
}
 8002e48:	4770      	bx	lr
	...

08002e4c <UART_SetConfig>:
{
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	6925      	ldr	r5, [r4, #16]
 8002e52:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e54:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e56:	4329      	orrs	r1, r5
 8002e58:	6965      	ldr	r5, [r4, #20]
 8002e5a:	69c3      	ldr	r3, [r0, #28]
 8002e5c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e5e:	6810      	ldr	r0, [r2, #0]
 8002e60:	4d70      	ldr	r5, [pc, #448]	; (8003024 <UART_SetConfig+0x1d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e62:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e64:	4028      	ands	r0, r5
 8002e66:	4301      	orrs	r1, r0
 8002e68:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6a:	6851      	ldr	r1, [r2, #4]
 8002e6c:	486e      	ldr	r0, [pc, #440]	; (8003028 <UART_SetConfig+0x1dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6e:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e70:	4001      	ands	r1, r0
 8002e72:	68e0      	ldr	r0, [r4, #12]
 8002e74:	4301      	orrs	r1, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e76:	486d      	ldr	r0, [pc, #436]	; (800302c <UART_SetConfig+0x1e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e7a:	4282      	cmp	r2, r0
 8002e7c:	d001      	beq.n	8002e82 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002e7e:	6a21      	ldr	r1, [r4, #32]
 8002e80:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e82:	6891      	ldr	r1, [r2, #8]
 8002e84:	4e6a      	ldr	r6, [pc, #424]	; (8003030 <UART_SetConfig+0x1e4>)
 8002e86:	4031      	ands	r1, r6
 8002e88:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e8a:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e8c:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e90:	43a9      	bics	r1, r5
 8002e92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002e94:	4329      	orrs	r1, r5
 8002e96:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e98:	4966      	ldr	r1, [pc, #408]	; (8003034 <UART_SetConfig+0x1e8>)
 8002e9a:	428a      	cmp	r2, r1
 8002e9c:	d116      	bne.n	8002ecc <UART_SetConfig+0x80>
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	4a65      	ldr	r2, [pc, #404]	; (8003038 <UART_SetConfig+0x1ec>)
 8002ea2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	3a01      	subs	r2, #1
 8002eaa:	0209      	lsls	r1, r1, #8
 8002eac:	2a02      	cmp	r2, #2
 8002eae:	d900      	bls.n	8002eb2 <UART_SetConfig+0x66>
 8002eb0:	e08a      	b.n	8002fc8 <UART_SetConfig+0x17c>
 8002eb2:	4862      	ldr	r0, [pc, #392]	; (800303c <UART_SetConfig+0x1f0>)
 8002eb4:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	d060      	beq.n	8002f7c <UART_SetConfig+0x130>
    switch (clocksource)
 8002eba:	2808      	cmp	r0, #8
 8002ebc:	d81c      	bhi.n	8002ef8 <UART_SetConfig+0xac>
 8002ebe:	f7fd f92d 	bl	800011c <__gnu_thumb1_case_uqi>
 8002ec2:	1bab      	.short	0x1bab
 8002ec4:	1b7e1b81 	.word	0x1b7e1b81
 8002ec8:	1b1b      	.short	0x1b1b
 8002eca:	6b          	.byte	0x6b
 8002ecb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ecc:	495c      	ldr	r1, [pc, #368]	; (8003040 <UART_SetConfig+0x1f4>)
 8002ece:	428a      	cmp	r2, r1
 8002ed0:	d100      	bne.n	8002ed4 <UART_SetConfig+0x88>
 8002ed2:	e09d      	b.n	8003010 <UART_SetConfig+0x1c4>
 8002ed4:	4282      	cmp	r2, r0
 8002ed6:	d10f      	bne.n	8002ef8 <UART_SetConfig+0xac>
 8002ed8:	22c0      	movs	r2, #192	; 0xc0
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <UART_SetConfig+0x1ec>)
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	0109      	lsls	r1, r1, #4
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	d01b      	beq.n	8002f22 <UART_SetConfig+0xd6>
 8002eea:	d807      	bhi.n	8002efc <UART_SetConfig+0xb0>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_SetConfig+0xba>
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	00d2      	lsls	r2, r2, #3
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d011      	beq.n	8002f1c <UART_SetConfig+0xd0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef8:	2001      	movs	r0, #1
 8002efa:	e009      	b.n	8002f10 <UART_SetConfig+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d1fb      	bne.n	8002ef8 <UART_SetConfig+0xac>
 8002f00:	2680      	movs	r6, #128	; 0x80
 8002f02:	0236      	lsls	r6, r6, #8
 8002f04:	e00e      	b.n	8002f24 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7fe ff7d 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8002f0c:	d10a      	bne.n	8002f24 <UART_SetConfig+0xd8>
 8002f0e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <UART_SetConfig+0x1f8>)
 8002f12:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002f18:	6763      	str	r3, [r4, #116]	; 0x74
}
 8002f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1c:	f7fe fe80 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002f20:	e7f3      	b.n	8002f0a <UART_SetConfig+0xbe>
        pclk = (uint32_t) HSI_VALUE;
 8002f22:	4e49      	ldr	r6, [pc, #292]	; (8003048 <UART_SetConfig+0x1fc>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f26:	4a49      	ldr	r2, [pc, #292]	; (800304c <UART_SetConfig+0x200>)
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	5a9f      	ldrh	r7, [r3, r2]
 8002f2c:	0030      	movs	r0, r6
 8002f2e:	0039      	movs	r1, r7
 8002f30:	f7fd f912 	bl	8000158 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f34:	2303      	movs	r3, #3
 8002f36:	6865      	ldr	r5, [r4, #4]
 8002f38:	436b      	muls	r3, r5
 8002f3a:	4283      	cmp	r3, r0
 8002f3c:	d8dc      	bhi.n	8002ef8 <UART_SetConfig+0xac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f3e:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f40:	4283      	cmp	r3, r0
 8002f42:	d3d9      	bcc.n	8002ef8 <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f44:	2300      	movs	r3, #0
 8002f46:	003a      	movs	r2, r7
 8002f48:	0030      	movs	r0, r6
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	f7fd fa7a 	bl	8000444 <__aeabi_uldivmod>
 8002f50:	2700      	movs	r7, #0
 8002f52:	0e06      	lsrs	r6, r0, #24
 8002f54:	020b      	lsls	r3, r1, #8
 8002f56:	4333      	orrs	r3, r6
 8002f58:	0202      	lsls	r2, r0, #8
 8002f5a:	086e      	lsrs	r6, r5, #1
 8002f5c:	1992      	adds	r2, r2, r6
 8002f5e:	417b      	adcs	r3, r7
 8002f60:	0010      	movs	r0, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	002a      	movs	r2, r5
 8002f66:	003b      	movs	r3, r7
 8002f68:	f7fd fa6c 	bl	8000444 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <UART_SetConfig+0x204>)
 8002f6e:	18c2      	adds	r2, r0, r3
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <UART_SetConfig+0x208>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d8c0      	bhi.n	8002ef8 <UART_SetConfig+0xac>
        huart->Instance->BRR = usartdiv;
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	60d8      	str	r0, [r3, #12]
 8002f7a:	e7c8      	b.n	8002f0e <UART_SetConfig+0xc2>
    switch (clocksource)
 8002f7c:	2808      	cmp	r0, #8
 8002f7e:	d8bb      	bhi.n	8002ef8 <UART_SetConfig+0xac>
 8002f80:	f7fd f8c2 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002f84:	ba08ba24 	.word	0xba08ba24
 8002f88:	bababa05 	.word	0xbababa05
 8002f8c:	28          	.byte	0x28
 8002f8d:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8e:	f7fe fe47 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002f92:	e01d      	b.n	8002fd0 <UART_SetConfig+0x184>
        pclk = (uint32_t) HSI_VALUE;
 8002f94:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <UART_SetConfig+0x1fc>)
 8002f96:	e01d      	b.n	8002fd4 <UART_SetConfig+0x188>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	2080      	movs	r0, #128	; 0x80
 8002f9a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <UART_SetConfig+0x200>)
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	5a99      	ldrh	r1, [r3, r2]
 8002fa4:	f7fd f8d8 	bl	8000158 <__udivsi3>
 8002fa8:	6865      	ldr	r5, [r4, #4]
 8002faa:	086b      	lsrs	r3, r5, #1
 8002fac:	18c0      	adds	r0, r0, r3
 8002fae:	0029      	movs	r1, r5
 8002fb0:	f7fd f8d2 	bl	8000158 <__udivsi3>
 8002fb4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <UART_SetConfig+0x20c>)
 8002fba:	3a10      	subs	r2, #16
 8002fbc:	e7d9      	b.n	8002f72 <UART_SetConfig+0x126>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fbe:	f7fe fe2f 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
        break;
 8002fc2:	e02b      	b.n	800301c <UART_SetConfig+0x1d0>
        pclk = (uint32_t) HSI_VALUE;
 8002fc4:	4820      	ldr	r0, [pc, #128]	; (8003048 <UART_SetConfig+0x1fc>)
 8002fc6:	e7e9      	b.n	8002f9c <UART_SetConfig+0x150>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d125      	bne.n	8003018 <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7fe ff1a 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd0:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002fd2:	d09c      	beq.n	8002f0e <UART_SetConfig+0xc2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fd6:	491d      	ldr	r1, [pc, #116]	; (800304c <UART_SetConfig+0x200>)
 8002fd8:	0052      	lsls	r2, r2, #1
 8002fda:	5a51      	ldrh	r1, [r2, r1]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fd f8bb 	bl	8000158 <__udivsi3>
 8002fe2:	6865      	ldr	r5, [r4, #4]
 8002fe4:	0040      	lsls	r0, r0, #1
 8002fe6:	086b      	lsrs	r3, r5, #1
 8002fe8:	0029      	movs	r1, r5
 8002fea:	18c0      	adds	r0, r0, r3
 8002fec:	f7fd f8b4 	bl	8000158 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff0:	4919      	ldr	r1, [pc, #100]	; (8003058 <UART_SetConfig+0x20c>)
 8002ff2:	b282      	uxth	r2, r0
 8002ff4:	3a10      	subs	r2, #16
 8002ff6:	0403      	lsls	r3, r0, #16
 8002ff8:	428a      	cmp	r2, r1
 8002ffa:	d900      	bls.n	8002ffe <UART_SetConfig+0x1b2>
 8002ffc:	e77c      	b.n	8002ef8 <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ffe:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003000:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003002:	4390      	bics	r0, r2
 8003004:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003006:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003008:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800300a:	4318      	orrs	r0, r3
 800300c:	60d0      	str	r0, [r2, #12]
 800300e:	e77e      	b.n	8002f0e <UART_SetConfig+0xc2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	0212      	lsls	r2, r2, #8
 8003014:	4293      	cmp	r3, r2
 8003016:	d0d9      	beq.n	8002fcc <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003018:	f7fe fef4 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800301c:	2800      	cmp	r0, #0
 800301e:	d100      	bne.n	8003022 <UART_SetConfig+0x1d6>
 8003020:	e775      	b.n	8002f0e <UART_SetConfig+0xc2>
 8003022:	e7bb      	b.n	8002f9c <UART_SetConfig+0x150>
 8003024:	cfff69f3 	.word	0xcfff69f3
 8003028:	ffffcfff 	.word	0xffffcfff
 800302c:	40008000 	.word	0x40008000
 8003030:	11fff4ff 	.word	0x11fff4ff
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	08006234 	.word	0x08006234
 8003040:	40004400 	.word	0x40004400
 8003044:	00010001 	.word	0x00010001
 8003048:	00f42400 	.word	0x00f42400
 800304c:	08006238 	.word	0x08006238
 8003050:	fffffd00 	.word	0xfffffd00
 8003054:	000ffcff 	.word	0x000ffcff
 8003058:	0000ffef 	.word	0x0000ffef

0800305c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800305c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800305e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003060:	07da      	lsls	r2, r3, #31
 8003062:	d506      	bpl.n	8003072 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003064:	6801      	ldr	r1, [r0, #0]
 8003066:	4c28      	ldr	r4, [pc, #160]	; (8003108 <UART_AdvFeatureConfig+0xac>)
 8003068:	684a      	ldr	r2, [r1, #4]
 800306a:	4022      	ands	r2, r4
 800306c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800306e:	4322      	orrs	r2, r4
 8003070:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003072:	079a      	lsls	r2, r3, #30
 8003074:	d506      	bpl.n	8003084 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003076:	6801      	ldr	r1, [r0, #0]
 8003078:	4c24      	ldr	r4, [pc, #144]	; (800310c <UART_AdvFeatureConfig+0xb0>)
 800307a:	684a      	ldr	r2, [r1, #4]
 800307c:	4022      	ands	r2, r4
 800307e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003080:	4322      	orrs	r2, r4
 8003082:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003084:	075a      	lsls	r2, r3, #29
 8003086:	d506      	bpl.n	8003096 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	4c21      	ldr	r4, [pc, #132]	; (8003110 <UART_AdvFeatureConfig+0xb4>)
 800308c:	684a      	ldr	r2, [r1, #4]
 800308e:	4022      	ands	r2, r4
 8003090:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003092:	4322      	orrs	r2, r4
 8003094:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003096:	071a      	lsls	r2, r3, #28
 8003098:	d506      	bpl.n	80030a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309a:	6801      	ldr	r1, [r0, #0]
 800309c:	4c1d      	ldr	r4, [pc, #116]	; (8003114 <UART_AdvFeatureConfig+0xb8>)
 800309e:	684a      	ldr	r2, [r1, #4]
 80030a0:	4022      	ands	r2, r4
 80030a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030a4:	4322      	orrs	r2, r4
 80030a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030a8:	06da      	lsls	r2, r3, #27
 80030aa:	d506      	bpl.n	80030ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ac:	6801      	ldr	r1, [r0, #0]
 80030ae:	4c1a      	ldr	r4, [pc, #104]	; (8003118 <UART_AdvFeatureConfig+0xbc>)
 80030b0:	688a      	ldr	r2, [r1, #8]
 80030b2:	4022      	ands	r2, r4
 80030b4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030b6:	4322      	orrs	r2, r4
 80030b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ba:	069a      	lsls	r2, r3, #26
 80030bc:	d506      	bpl.n	80030cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030be:	6801      	ldr	r1, [r0, #0]
 80030c0:	4c16      	ldr	r4, [pc, #88]	; (800311c <UART_AdvFeatureConfig+0xc0>)
 80030c2:	688a      	ldr	r2, [r1, #8]
 80030c4:	4022      	ands	r2, r4
 80030c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030c8:	4322      	orrs	r2, r4
 80030ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030cc:	065a      	lsls	r2, r3, #25
 80030ce:	d510      	bpl.n	80030f2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d0:	6801      	ldr	r1, [r0, #0]
 80030d2:	4d13      	ldr	r5, [pc, #76]	; (8003120 <UART_AdvFeatureConfig+0xc4>)
 80030d4:	684a      	ldr	r2, [r1, #4]
 80030d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030d8:	402a      	ands	r2, r5
 80030da:	4322      	orrs	r2, r4
 80030dc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0352      	lsls	r2, r2, #13
 80030e2:	4294      	cmp	r4, r2
 80030e4:	d105      	bne.n	80030f2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e6:	684a      	ldr	r2, [r1, #4]
 80030e8:	4c0e      	ldr	r4, [pc, #56]	; (8003124 <UART_AdvFeatureConfig+0xc8>)
 80030ea:	4022      	ands	r2, r4
 80030ec:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80030ee:	4322      	orrs	r2, r4
 80030f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	d506      	bpl.n	8003104 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f6:	6802      	ldr	r2, [r0, #0]
 80030f8:	490b      	ldr	r1, [pc, #44]	; (8003128 <UART_AdvFeatureConfig+0xcc>)
 80030fa:	6853      	ldr	r3, [r2, #4]
 80030fc:	400b      	ands	r3, r1
 80030fe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003100:	430b      	orrs	r3, r1
 8003102:	6053      	str	r3, [r2, #4]
}
 8003104:	bd30      	pop	{r4, r5, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	fffdffff 	.word	0xfffdffff
 800310c:	fffeffff 	.word	0xfffeffff
 8003110:	fffbffff 	.word	0xfffbffff
 8003114:	ffff7fff 	.word	0xffff7fff
 8003118:	ffffefff 	.word	0xffffefff
 800311c:	ffffdfff 	.word	0xffffdfff
 8003120:	ffefffff 	.word	0xffefffff
 8003124:	ff9fffff 	.word	0xff9fffff
 8003128:	fff7ffff 	.word	0xfff7ffff

0800312c <UART_WaitOnFlagUntilTimeout>:
{
 800312c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800312e:	2780      	movs	r7, #128	; 0x80
{
 8003130:	0004      	movs	r4, r0
 8003132:	000d      	movs	r5, r1
 8003134:	0016      	movs	r6, r2
 8003136:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003138:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	69d3      	ldr	r3, [r2, #28]
 800313e:	402b      	ands	r3, r5
 8003140:	1b5b      	subs	r3, r3, r5
 8003142:	4259      	negs	r1, r3
 8003144:	414b      	adcs	r3, r1
 8003146:	42b3      	cmp	r3, r6
 8003148:	d001      	beq.n	800314e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800314a:	2000      	movs	r0, #0
 800314c:	e02b      	b.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x7a>
    if (Timeout != HAL_MAX_DELAY)
 800314e:	9b08      	ldr	r3, [sp, #32]
 8003150:	3301      	adds	r3, #1
 8003152:	d0f3      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fd fdf0 	bl	8000d38 <HAL_GetTick>
 8003158:	9b01      	ldr	r3, [sp, #4]
 800315a:	1ac0      	subs	r0, r0, r3
 800315c:	9b08      	ldr	r3, [sp, #32]
 800315e:	4298      	cmp	r0, r3
 8003160:	d801      	bhi.n	8003166 <UART_WaitOnFlagUntilTimeout+0x3a>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d120      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003166:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316a:	2201      	movs	r2, #1
 800316c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003170:	6821      	ldr	r1, [r4, #0]
 8003172:	4d21      	ldr	r5, [pc, #132]	; (80031f8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8003174:	680b      	ldr	r3, [r1, #0]
 8003176:	402b      	ands	r3, r5
 8003178:	600b      	str	r3, [r1, #0]
 800317a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	6821      	ldr	r1, [r4, #0]
 8003188:	688b      	ldr	r3, [r1, #8]
 800318a:	4393      	bics	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
 800318e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003192:	0022      	movs	r2, r4
 8003194:	2320      	movs	r3, #32
 8003196:	3208      	adds	r2, #8
 8003198:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800319a:	3280      	adds	r2, #128	; 0x80
 800319c:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 800319e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80031a2:	3480      	adds	r4, #128	; 0x80
 80031a4:	7023      	strb	r3, [r4, #0]
}
 80031a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031a8:	2104      	movs	r1, #4
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	420a      	tst	r2, r1
 80031b0:	d0c3      	beq.n	800313a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	423a      	tst	r2, r7
 80031b6:	d0c0      	beq.n	800313a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b8:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	2201      	movs	r2, #1
 80031c0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031c4:	6821      	ldr	r1, [r4, #0]
 80031c6:	4d0c      	ldr	r5, [pc, #48]	; (80031f8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80031c8:	680b      	ldr	r3, [r1, #0]
 80031ca:	402b      	ands	r3, r5
 80031cc:	600b      	str	r3, [r1, #0]
 80031ce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	688b      	ldr	r3, [r1, #8]
 80031de:	4393      	bics	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
 80031e2:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80031e6:	0022      	movs	r2, r4
 80031e8:	2320      	movs	r3, #32
 80031ea:	3208      	adds	r2, #8
 80031ec:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	3280      	adds	r2, #128	; 0x80
 80031f0:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f2:	6053      	str	r3, [r2, #4]
 80031f4:	e7d3      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0x72>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	fffffe5f 	.word	0xfffffe5f

080031fc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	0003      	movs	r3, r0
{
 80031fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	2600      	movs	r6, #0
{
 8003202:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	338c      	adds	r3, #140	; 0x8c
 8003206:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003208:	f7fd fd96 	bl	8000d38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800320c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800320e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	071b      	lsls	r3, r3, #28
 8003214:	d419      	bmi.n	800324a <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	075b      	lsls	r3, r3, #29
 800321c:	d50a      	bpl.n	8003234 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <UART_CheckIdleState+0x68>)
 8003222:	2200      	movs	r2, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	0020      	movs	r0, r4
 8003228:	002b      	movs	r3, r5
 800322a:	03c9      	lsls	r1, r1, #15
 800322c:	f7ff ff7e 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8003230:	2800      	cmp	r0, #0
 8003232:	d115      	bne.n	8003260 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003234:	0022      	movs	r2, r4
 8003236:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003238:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800323a:	3208      	adds	r2, #8
 800323c:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800323e:	3280      	adds	r2, #128	; 0x80
 8003240:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003244:	3480      	adds	r4, #128	; 0x80
 8003246:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003248:	e00b      	b.n	8003262 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <UART_CheckIdleState+0x68>)
 800324e:	0032      	movs	r2, r6
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	0389      	lsls	r1, r1, #14
 8003254:	0003      	movs	r3, r0
 8003256:	0020      	movs	r0, r4
 8003258:	f7ff ff68 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 800325c:	2800      	cmp	r0, #0
 800325e:	d0da      	beq.n	8003216 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003260:	2003      	movs	r0, #3
}
 8003262:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003264:	01ffffff 	.word	0x01ffffff

08003268 <HAL_UART_Init>:
{
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
}
 8003270:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	0005      	movs	r5, r0
 8003274:	3508      	adds	r5, #8
 8003276:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800327c:	0002      	movs	r2, r0
 800327e:	3280      	adds	r2, #128	; 0x80
 8003280:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003282:	f7fd fc7b 	bl	8000b7c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003286:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003288:	2101      	movs	r1, #1
 800328a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800328e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003290:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003292:	438b      	bics	r3, r1
 8003294:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003296:	f7ff fdd9 	bl	8002e4c <UART_SetConfig>
 800329a:	2801      	cmp	r0, #1
 800329c:	d0e7      	beq.n	800326e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 80032a4:	0020      	movs	r0, r4
 80032a6:	f7ff fed9 	bl	800305c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <HAL_UART_Init+0x64>)
 80032ae:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80032b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	438a      	bics	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80032be:	2201      	movs	r2, #1
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80032c6:	f7ff ff99 	bl	80031fc <UART_CheckIdleState>
 80032ca:	e7d1      	b.n	8003270 <HAL_UART_Init+0x8>
 80032cc:	ffffb7ff 	.word	0xffffb7ff

080032d0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80032d0:	0003      	movs	r3, r0
{
 80032d2:	b570      	push	{r4, r5, r6, lr}
  huart->RxISR       = NULL;
 80032d4:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 80032d6:	2580      	movs	r5, #128	; 0x80
  huart->pRxBuffPtr  = pData;
 80032d8:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 80032da:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 80032dc:	335c      	adds	r3, #92	; 0x5c
 80032de:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80032e0:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 80032e2:	016d      	lsls	r5, r5, #5
  huart->RxISR       = NULL;
 80032e4:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80032e6:	3304      	adds	r3, #4
 80032e8:	42a9      	cmp	r1, r5
 80032ea:	d14c      	bne.n	8003386 <UART_Start_Receive_IT+0xb6>
 80032ec:	6901      	ldr	r1, [r0, #16]
 80032ee:	42a1      	cmp	r1, r4
 80032f0:	d147      	bne.n	8003382 <UART_Start_Receive_IT+0xb2>
 80032f2:	4939      	ldr	r1, [pc, #228]	; (80033d8 <UART_Start_Receive_IT+0x108>)
 80032f4:	8019      	strh	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f6:	0003      	movs	r3, r0
 80032f8:	2100      	movs	r1, #0
 80032fa:	338c      	adds	r3, #140	; 0x8c
 80032fc:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032fe:	3122      	adds	r1, #34	; 0x22
 8003300:	3b04      	subs	r3, #4
 8003302:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	2301      	movs	r3, #1
 800330a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	6801      	ldr	r1, [r0, #0]
 8003310:	688d      	ldr	r5, [r1, #8]
 8003312:	432b      	orrs	r3, r5
 8003314:	608b      	str	r3, [r1, #8]
 8003316:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800331a:	2580      	movs	r5, #128	; 0x80
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	0003      	movs	r3, r0
 8003320:	6e46      	ldr	r6, [r0, #100]	; 0x64
 8003322:	6884      	ldr	r4, [r0, #8]
 8003324:	05ad      	lsls	r5, r5, #22
 8003326:	0149      	lsls	r1, r1, #5
 8003328:	3380      	adds	r3, #128	; 0x80
 800332a:	42ae      	cmp	r6, r5
 800332c:	d13d      	bne.n	80033aa <UART_Start_Receive_IT+0xda>
 800332e:	0005      	movs	r5, r0
 8003330:	3568      	adds	r5, #104	; 0x68
 8003332:	882d      	ldrh	r5, [r5, #0]
 8003334:	4295      	cmp	r5, r2
 8003336:	d838      	bhi.n	80033aa <UART_Start_Receive_IT+0xda>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003338:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UART_Start_Receive_IT+0x10c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333a:	428c      	cmp	r4, r1
 800333c:	d103      	bne.n	8003346 <UART_Start_Receive_IT+0x76>
 800333e:	6901      	ldr	r1, [r0, #16]
 8003340:	2900      	cmp	r1, #0
 8003342:	d100      	bne.n	8003346 <UART_Start_Receive_IT+0x76>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <UART_Start_Receive_IT+0x110>)
 8003346:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	3201      	adds	r2, #1
 8003352:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	680d      	ldr	r5, [r1, #0]
 800335e:	432b      	orrs	r3, r5
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003366:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	055b      	lsls	r3, r3, #21
 8003374:	6890      	ldr	r0, [r2, #8]
 8003376:	4303      	orrs	r3, r0
 8003378:	6093      	str	r3, [r2, #8]
 800337a:	f381 8810 	msr	PRIMASK, r1
}
 800337e:	2000      	movs	r0, #0
 8003380:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 8003382:	21ff      	movs	r1, #255	; 0xff
 8003384:	e7b6      	b.n	80032f4 <UART_Start_Receive_IT+0x24>
 8003386:	2900      	cmp	r1, #0
 8003388:	d104      	bne.n	8003394 <UART_Start_Receive_IT+0xc4>
 800338a:	6901      	ldr	r1, [r0, #16]
 800338c:	2900      	cmp	r1, #0
 800338e:	d0f8      	beq.n	8003382 <UART_Start_Receive_IT+0xb2>
 8003390:	217f      	movs	r1, #127	; 0x7f
 8003392:	e7af      	b.n	80032f4 <UART_Start_Receive_IT+0x24>
 8003394:	2580      	movs	r5, #128	; 0x80
 8003396:	056d      	lsls	r5, r5, #21
 8003398:	42a9      	cmp	r1, r5
 800339a:	d104      	bne.n	80033a6 <UART_Start_Receive_IT+0xd6>
 800339c:	6901      	ldr	r1, [r0, #16]
 800339e:	2900      	cmp	r1, #0
 80033a0:	d0f6      	beq.n	8003390 <UART_Start_Receive_IT+0xc0>
 80033a2:	213f      	movs	r1, #63	; 0x3f
 80033a4:	e7a6      	b.n	80032f4 <UART_Start_Receive_IT+0x24>
 80033a6:	801c      	strh	r4, [r3, #0]
 80033a8:	e7a5      	b.n	80032f6 <UART_Start_Receive_IT+0x26>
      huart->RxISR = UART_RxISR_8BIT;
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <UART_Start_Receive_IT+0x114>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	428c      	cmp	r4, r1
 80033ae:	d103      	bne.n	80033b8 <UART_Start_Receive_IT+0xe8>
 80033b0:	6901      	ldr	r1, [r0, #16]
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d100      	bne.n	80033b8 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 80033b6:	4a0c      	ldr	r2, [pc, #48]	; (80033e8 <UART_Start_Receive_IT+0x118>)
 80033b8:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	2301      	movs	r3, #1
 80033c4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80033c8:	6802      	ldr	r2, [r0, #0]
 80033ca:	3320      	adds	r3, #32
 80033cc:	6810      	ldr	r0, [r2, #0]
 80033ce:	33ff      	adds	r3, #255	; 0xff
 80033d0:	4303      	orrs	r3, r0
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	e7d1      	b.n	800337a <UART_Start_Receive_IT+0xaa>
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	000001ff 	.word	0x000001ff
 80033dc:	08002af1 	.word	0x08002af1
 80033e0:	08002c99 	.word	0x08002c99
 80033e4:	08002aab 	.word	0x08002aab
 80033e8:	08002a69 	.word	0x08002a69

080033ec <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ec:	0003      	movs	r3, r0
 80033ee:	3388      	adds	r3, #136	; 0x88
{
 80033f0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f2:	681c      	ldr	r4, [r3, #0]
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f6:	2c20      	cmp	r4, #32
 80033f8:	d130      	bne.n	800345c <HAL_UART_Receive_IT+0x70>
      return HAL_ERROR;
 80033fa:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d02d      	beq.n	800345c <HAL_UART_Receive_IT+0x70>
 8003400:	2a00      	cmp	r2, #0
 8003402:	d02b      	beq.n	800345c <HAL_UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	6884      	ldr	r4, [r0, #8]
 8003408:	015b      	lsls	r3, r3, #5
 800340a:	429c      	cmp	r4, r3
 800340c:	d106      	bne.n	800341c <HAL_UART_Receive_IT+0x30>
 800340e:	6903      	ldr	r3, [r0, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_UART_Receive_IT+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003414:	2401      	movs	r4, #1
      return HAL_ERROR;
 8003416:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8003418:	4221      	tst	r1, r4
 800341a:	d11f      	bne.n	800345c <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 800341c:	0004      	movs	r4, r0
 800341e:	3480      	adds	r4, #128	; 0x80
 8003420:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8003424:	2d01      	cmp	r5, #1
 8003426:	d019      	beq.n	800345c <HAL_UART_Receive_IT+0x70>
 8003428:	3b01      	subs	r3, #1
 800342a:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	2400      	movs	r4, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800342e:	4d0c      	ldr	r5, [pc, #48]	; (8003460 <HAL_UART_Receive_IT+0x74>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	66c4      	str	r4, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003432:	6804      	ldr	r4, [r0, #0]
 8003434:	42ac      	cmp	r4, r5
 8003436:	d00e      	beq.n	8003456 <HAL_UART_Receive_IT+0x6a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003438:	6864      	ldr	r4, [r4, #4]
 800343a:	0224      	lsls	r4, r4, #8
 800343c:	d50b      	bpl.n	8003456 <HAL_UART_Receive_IT+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	6804      	ldr	r4, [r0, #0]
 800344a:	04db      	lsls	r3, r3, #19
 800344c:	6826      	ldr	r6, [r4, #0]
 800344e:	4333      	orrs	r3, r6
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003456:	f7ff ff3b 	bl	80032d0 <UART_Start_Receive_IT>
 800345a:	0003      	movs	r3, r0
}
 800345c:	0018      	movs	r0, r3
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	40008000 	.word	0x40008000

08003464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003466:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003468:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <UARTEx_SetNbDataToProcess+0x40>)
 8003470:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003474:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003476:	4e0c      	ldr	r6, [pc, #48]	; (80034a8 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003478:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800347a:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800347e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003480:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003482:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003484:	00c0      	lsls	r0, r0, #3
 8003486:	f7fc fef1 	bl	800026c <__divsi3>
 800348a:	0023      	movs	r3, r4
 800348c:	336a      	adds	r3, #106	; 0x6a
 800348e:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003490:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003492:	0f5b      	lsrs	r3, r3, #29
 8003494:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003496:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003498:	00c0      	lsls	r0, r0, #3
 800349a:	f7fc fee7 	bl	800026c <__divsi3>
 800349e:	3468      	adds	r4, #104	; 0x68
 80034a0:	8020      	strh	r0, [r4, #0]
}
 80034a2:	e7e6      	b.n	8003472 <UARTEx_SetNbDataToProcess+0xe>
 80034a4:	00010001 	.word	0x00010001
 80034a8:	08006258 	.word	0x08006258
 80034ac:	08006250 	.word	0x08006250

080034b0 <HAL_UARTEx_WakeupCallback>:
}
 80034b0:	4770      	bx	lr

080034b2 <HAL_UARTEx_RxFifoFullCallback>:
 80034b2:	4770      	bx	lr

080034b4 <HAL_UARTEx_TxFifoEmptyCallback>:
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_UARTEx_DisableFifoMode>:
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80034ba:	0004      	movs	r4, r0
 80034bc:	3480      	adds	r4, #128	; 0x80
 80034be:	7822      	ldrb	r2, [r4, #0]
{
 80034c0:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80034c2:	2002      	movs	r0, #2
 80034c4:	2a01      	cmp	r2, #1
 80034c6:	d011      	beq.n	80034ec <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80034c8:	001d      	movs	r5, r3
 80034ca:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80034cc:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80034ce:	3508      	adds	r5, #8
 80034d0:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80034d6:	6810      	ldr	r0, [r2, #0]
 80034d8:	43b0      	bics	r0, r6
 80034da:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034dc:	4804      	ldr	r0, [pc, #16]	; (80034f0 <HAL_UARTEx_DisableFifoMode+0x38>)
 80034de:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034e0:	2000      	movs	r0, #0
 80034e2:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034e6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80034ea:	7020      	strb	r0, [r4, #0]
}
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	dfffffff 	.word	0xdfffffff

080034f4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80034f6:	0005      	movs	r5, r0
 80034f8:	3580      	adds	r5, #128	; 0x80
 80034fa:	782b      	ldrb	r3, [r5, #0]
{
 80034fc:	0004      	movs	r4, r0
 80034fe:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003500:	2002      	movs	r0, #2
 8003502:	2b01      	cmp	r3, #1
 8003504:	d018      	beq.n	8003538 <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8003506:	0026      	movs	r6, r4
 8003508:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800350a:	3801      	subs	r0, #1
 800350c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800350e:	3608      	adds	r6, #8
 8003510:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	4381      	bics	r1, r0
 800351a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800351c:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800351e:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003520:	00c9      	lsls	r1, r1, #3
 8003522:	08c9      	lsrs	r1, r1, #3
 8003524:	4311      	orrs	r1, r2
 8003526:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003528:	f7ff ff9c 	bl	8003464 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800352c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800352e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003530:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003532:	2320      	movs	r3, #32
 8003534:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003536:	7028      	strb	r0, [r5, #0]
}
 8003538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800353c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800353e:	0005      	movs	r5, r0
 8003540:	3580      	adds	r5, #128	; 0x80
 8003542:	782b      	ldrb	r3, [r5, #0]
{
 8003544:	0004      	movs	r4, r0
 8003546:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003548:	2002      	movs	r0, #2
 800354a:	2b01      	cmp	r3, #1
 800354c:	d018      	beq.n	8003580 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 800354e:	0026      	movs	r6, r4
 8003550:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8003552:	3801      	subs	r0, #1
 8003554:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003556:	3608      	adds	r6, #8
 8003558:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	4381      	bics	r1, r0
 8003562:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	4807      	ldr	r0, [pc, #28]	; (8003584 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8003568:	4001      	ands	r1, r0
 800356a:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 800356c:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800356e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003570:	f7ff ff78 	bl	8003464 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003574:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003576:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003578:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800357a:	2320      	movs	r3, #32
 800357c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800357e:	7028      	strb	r0, [r5, #0]
}
 8003580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	f1ffffff 	.word	0xf1ffffff

08003588 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8003588:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800358a:	0006      	movs	r6, r0
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800358c:	2500      	movs	r5, #0
 800358e:	4c11      	ldr	r4, [pc, #68]	; (80035d4 <vTimerCallbackT35+0x4c>)
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <vTimerCallbackT35+0x50>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	42ab      	cmp	r3, r5
 8003596:	dc00      	bgt.n	800359a <vTimerCallbackT35+0x12>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
		}

	}
}
 8003598:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	0002      	movs	r2, r0
 800359e:	32b0      	adds	r2, #176	; 0xb0
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	42b2      	cmp	r2, r6
 80035a4:	d112      	bne.n	80035cc <vTimerCallbackT35+0x44>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80035a6:	7802      	ldrb	r2, [r0, #0]
 80035a8:	2a04      	cmp	r2, #4
 80035aa:	d107      	bne.n	80035bc <vTimerCallbackT35+0x34>
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	30b4      	adds	r0, #180	; 0xb4
 80035b0:	9200      	str	r2, [sp, #0]
 80035b2:	0013      	movs	r3, r2
 80035b4:	2103      	movs	r1, #3
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	f002 fbb0 	bl	8005d1c <xTimerGenericCommand>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80035bc:	2300      	movs	r3, #0
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	2203      	movs	r2, #3
 80035c2:	30ac      	adds	r0, #172	; 0xac
 80035c4:	0019      	movs	r1, r3
 80035c6:	6800      	ldr	r0, [r0, #0]
 80035c8:	f002 fa24 	bl	8005a14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80035cc:	3501      	adds	r5, #1
 80035ce:	3404      	adds	r4, #4
 80035d0:	e7de      	b.n	8003590 <vTimerCallbackT35+0x8>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	2000105c 	.word	0x2000105c
 80035d8:	20000090 	.word	0x20000090

080035dc <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80035dc:	b570      	push	{r4, r5, r6, lr}
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80035de:	2608      	movs	r6, #8
{
 80035e0:	0005      	movs	r5, r0
	for(i = 0; i < numberHandlers; i++)
 80035e2:	2400      	movs	r4, #0
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80035e4:	4276      	negs	r6, r6
	for(i = 0; i < numberHandlers; i++)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <vTimerCallbackTimeout+0x38>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	dc00      	bgt.n	80035f0 <vTimerCallbackTimeout+0x14>
		}

	}

}
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80035f0:	4a09      	ldr	r2, [pc, #36]	; (8003618 <vTimerCallbackTimeout+0x3c>)
 80035f2:	00a3      	lsls	r3, r4, #2
 80035f4:	58d0      	ldr	r0, [r2, r3]
 80035f6:	0002      	movs	r2, r0
 80035f8:	32b4      	adds	r2, #180	; 0xb4
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	42aa      	cmp	r2, r5
 80035fe:	d106      	bne.n	800360e <vTimerCallbackTimeout+0x32>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8003600:	30ac      	adds	r0, #172	; 0xac
 8003602:	2300      	movs	r3, #0
 8003604:	2203      	movs	r2, #3
 8003606:	0031      	movs	r1, r6
 8003608:	6800      	ldr	r0, [r0, #0]
 800360a:	f002 fa03 	bl	8005a14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800360e:	3401      	adds	r4, #1
 8003610:	e7e9      	b.n	80035e6 <vTimerCallbackTimeout+0xa>
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000090 	.word	0x20000090
 8003618:	2000105c 	.word	0x2000105c

0800361c <RingAdd>:
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800361c:	0002      	movs	r2, r0
{
 800361e:	b510      	push	{r4, lr}
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8003620:	247f      	movs	r4, #127	; 0x7f
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8003622:	3281      	adds	r2, #129	; 0x81
 8003624:	7813      	ldrb	r3, [r2, #0]
 8003626:	54c1      	strb	r1, [r0, r3]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003628:	0001      	movs	r1, r0
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800362a:	3301      	adds	r3, #1
 800362c:	4023      	ands	r3, r4
 800362e:	7013      	strb	r3, [r2, #0]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003630:	0003      	movs	r3, r0
 8003632:	3182      	adds	r1, #130	; 0x82
 8003634:	780a      	ldrb	r2, [r1, #0]
 8003636:	3383      	adds	r3, #131	; 0x83
 8003638:	2a80      	cmp	r2, #128	; 0x80
 800363a:	d107      	bne.n	800364c <RingAdd+0x30>
		xRingBuffer->overflow = true;
 800363c:	3a7f      	subs	r2, #127	; 0x7f
 800363e:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003640:	3080      	adds	r0, #128	; 0x80
 8003642:	7803      	ldrb	r3, [r0, #0]
 8003644:	189b      	adds	r3, r3, r2
 8003646:	4023      	ands	r3, r4
 8003648:	7003      	strb	r3, [r0, #0]
}
 800364a:	bd10      	pop	{r4, pc}
		xRingBuffer->overflow = false;
 800364c:	2000      	movs	r0, #0
		xRingBuffer->u8available++;
 800364e:	3201      	adds	r2, #1
		xRingBuffer->overflow = false;
 8003650:	7018      	strb	r0, [r3, #0]
		xRingBuffer->u8available++;
 8003652:	700a      	strb	r2, [r1, #0]
}
 8003654:	e7f9      	b.n	800364a <RingAdd+0x2e>

08003656 <RingGetNBytes>:
{
 8003656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003658:	0006      	movs	r6, r0
{
 800365a:	9101      	str	r1, [sp, #4]
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800365c:	3682      	adds	r6, #130	; 0x82
{
 800365e:	0003      	movs	r3, r0
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003660:	7830      	ldrb	r0, [r6, #0]
 8003662:	2800      	cmp	r0, #0
 8003664:	d024      	beq.n	80036b0 <RingGetNBytes+0x5a>
 8003666:	1e54      	subs	r4, r2, #1
 8003668:	2000      	movs	r0, #0
 800366a:	0621      	lsls	r1, r4, #24
 800366c:	d420      	bmi.n	80036b0 <RingGetNBytes+0x5a>
 800366e:	0004      	movs	r4, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003670:	001f      	movs	r7, r3
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003672:	307f      	adds	r0, #127	; 0x7f
 8003674:	4684      	mov	ip, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003676:	3780      	adds	r7, #128	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003678:	7835      	ldrb	r5, [r6, #0]
 800367a:	b2e0      	uxtb	r0, r4
 800367c:	4285      	cmp	r5, r0
 800367e:	d90e      	bls.n	800369e <RingGetNBytes+0x48>
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003680:	783d      	ldrb	r5, [r7, #0]
 8003682:	9901      	ldr	r1, [sp, #4]
 8003684:	5d5d      	ldrb	r5, [r3, r5]
 8003686:	3001      	adds	r0, #1
 8003688:	550d      	strb	r5, [r1, r4]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800368a:	4661      	mov	r1, ip
 800368c:	783d      	ldrb	r5, [r7, #0]
 800368e:	3401      	adds	r4, #1
 8003690:	3501      	adds	r5, #1
 8003692:	400d      	ands	r5, r1
 8003694:	703d      	strb	r5, [r7, #0]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003696:	b2e5      	uxtb	r5, r4
 8003698:	b2c0      	uxtb	r0, r0
 800369a:	42aa      	cmp	r2, r5
 800369c:	d8ec      	bhi.n	8003678 <RingGetNBytes+0x22>
	xRingBuffer->overflow = false;
 800369e:	0019      	movs	r1, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	3183      	adds	r1, #131	; 0x83
 80036a4:	700a      	strb	r2, [r1, #0]
xRingBuffer->u8end = 0;
 80036a6:	3381      	adds	r3, #129	; 0x81
xRingBuffer->u8start = 0;
 80036a8:	3903      	subs	r1, #3
 80036aa:	700a      	strb	r2, [r1, #0]
xRingBuffer->u8end = 0;
 80036ac:	701a      	strb	r2, [r3, #0]
xRingBuffer->u8available = 0;
 80036ae:	7032      	strb	r2, [r6, #0]
}
 80036b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080036b2 <RingGetAllBytes>:
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80036b2:	0003      	movs	r3, r0
{
 80036b4:	b510      	push	{r4, lr}
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80036b6:	3382      	adds	r3, #130	; 0x82
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	f7ff ffcc 	bl	8003656 <RingGetNBytes>
}
 80036be:	bd10      	pop	{r4, pc}

080036c0 <getRxBuffer>:
int16_t getRxBuffer(modbusHandler_t *modH)
{

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80036c0:	23a0      	movs	r3, #160	; 0xa0
{
 80036c2:	b570      	push	{r4, r5, r6, lr}
    if(modH->xTypeHW == USART_HW)
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	5cc3      	ldrb	r3, [r0, r3]
{
 80036c8:	0004      	movs	r4, r0
    if(modH->xTypeHW == USART_HW)
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <getRxBuffer+0x14>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80036ce:	6840      	ldr	r0, [r0, #4]
 80036d0:	f7fe ff76 	bl	80025c0 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	33ff      	adds	r3, #255	; 0xff
 80036d8:	5ce3      	ldrb	r3, [r4, r3]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d015      	beq.n	800370a <getRxBuffer+0x4a>
xRingBuffer->u8start = 0;
 80036de:	0022      	movs	r2, r4
 80036e0:	2300      	movs	r3, #0
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
       	i16result =  ERR_BUFF_OVERFLOW;
 80036e2:	2503      	movs	r5, #3
xRingBuffer->u8start = 0;
 80036e4:	323d      	adds	r2, #61	; 0x3d
 80036e6:	32ff      	adds	r2, #255	; 0xff
 80036e8:	7013      	strb	r3, [r2, #0]
xRingBuffer->u8end = 0;
 80036ea:	7053      	strb	r3, [r2, #1]
xRingBuffer->u8available = 0;
 80036ec:	7093      	strb	r3, [r2, #2]
xRingBuffer->overflow = false;
 80036ee:	70d3      	strb	r3, [r2, #3]
       	i16result =  ERR_BUFF_OVERFLOW;
 80036f0:	426d      	negs	r5, r5
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
		modH->u16InCnt++;
		i16result = modH->u8BufferSize;
	}

	if(modH->xTypeHW == USART_HW)
 80036f2:	23a0      	movs	r3, #160	; 0xa0
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	5ce2      	ldrb	r2, [r4, r3]
 80036f8:	2a01      	cmp	r2, #1
 80036fa:	d104      	bne.n	8003706 <getRxBuffer+0x46>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 80036fc:	0021      	movs	r1, r4
 80036fe:	6860      	ldr	r0, [r4, #4]
 8003700:	31a6      	adds	r1, #166	; 0xa6
 8003702:	f7ff fe73 	bl	80033ec <HAL_UART_Receive_IT>
	}

    return i16result;
}
 8003706:	0028      	movs	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800370a:	0021      	movs	r1, r4
 800370c:	0020      	movs	r0, r4
 800370e:	3113      	adds	r1, #19
 8003710:	30bc      	adds	r0, #188	; 0xbc
 8003712:	f7ff ffce 	bl	80036b2 <RingGetAllBytes>
 8003716:	0023      	movs	r3, r4
		modH->u16InCnt++;
 8003718:	0022      	movs	r2, r4
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800371a:	3393      	adds	r3, #147	; 0x93
 800371c:	7018      	strb	r0, [r3, #0]
		modH->u16InCnt++;
 800371e:	329c      	adds	r2, #156	; 0x9c
 8003720:	8813      	ldrh	r3, [r2, #0]
		i16result = modH->u8BufferSize;
 8003722:	b205      	sxth	r5, r0
		modH->u16InCnt++;
 8003724:	3301      	adds	r3, #1
 8003726:	8013      	strh	r3, [r2, #0]
		i16result = modH->u8BufferSize;
 8003728:	e7e3      	b.n	80036f2 <getRxBuffer+0x32>
	...

0800372c <ModbusInit>:
{
 800372c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (numberHandlers < MAX_M_HANDLERS)
 800372e:	4e32      	ldr	r6, [pc, #200]	; (80037f8 <ModbusInit+0xcc>)
{
 8003730:	0004      	movs	r4, r0
  if (numberHandlers < MAX_M_HANDLERS)
 8003732:	7833      	ldrb	r3, [r6, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d85d      	bhi.n	80037f4 <ModbusInit+0xc8>
xRingBuffer->u8start = 0;
 8003738:	0003      	movs	r3, r0
 800373a:	2500      	movs	r5, #0
 800373c:	333d      	adds	r3, #61	; 0x3d
 800373e:	33ff      	adds	r3, #255	; 0xff
 8003740:	701d      	strb	r5, [r3, #0]
xRingBuffer->u8end = 0;
 8003742:	705d      	strb	r5, [r3, #1]
xRingBuffer->u8available = 0;
 8003744:	709d      	strb	r5, [r3, #2]
xRingBuffer->overflow = false;
 8003746:	70dd      	strb	r5, [r3, #3]
	  if(modH->uModbusType == MB_SLAVE)
 8003748:	7803      	ldrb	r3, [r0, #0]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d10d      	bne.n	800376a <ModbusInit+0x3e>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800374e:	0001      	movs	r1, r0
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <ModbusInit+0xd0>)
 8003752:	482b      	ldr	r0, [pc, #172]	; (8003800 <ModbusInit+0xd4>)
 8003754:	f000 fdec 	bl	8004330 <osThreadNew>
 8003758:	0023      	movs	r3, r4
 800375a:	33ac      	adds	r3, #172	; 0xac
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800375c:	6018      	str	r0, [r3, #0]
	  if  (modH->myTaskModbusAHandle == NULL)
 800375e:	0023      	movs	r3, r4
 8003760:	33ac      	adds	r3, #172	; 0xac
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d125      	bne.n	80037b4 <ModbusInit+0x88>
		  while(1); //Error creating Modbus task, check heap and stack size
 8003768:	e7fe      	b.n	8003768 <ModbusInit+0x3c>
	  else if (modH->uModbusType == MB_MASTER)
 800376a:	2b04      	cmp	r3, #4
 800376c:	d11e      	bne.n	80037ac <ModbusInit+0x80>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800376e:	0001      	movs	r1, r0
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <ModbusInit+0xd8>)
 8003772:	4825      	ldr	r0, [pc, #148]	; (8003808 <ModbusInit+0xdc>)
 8003774:	f000 fddc 	bl	8004330 <osThreadNew>
 8003778:	0023      	movs	r3, r4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800377a:	0027      	movs	r7, r4
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800377c:	33ac      	adds	r3, #172	; 0xac
 800377e:	6018      	str	r0, [r3, #0]
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8003780:	3b0a      	subs	r3, #10
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8003782:	8819      	ldrh	r1, [r3, #0]
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <ModbusInit+0xe0>)
 8003786:	37b4      	adds	r7, #180	; 0xb4
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	002a      	movs	r2, r5
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4820      	ldr	r0, [pc, #128]	; (8003810 <ModbusInit+0xe4>)
 8003790:	f002 fa9e 	bl	8005cd0 <xTimerCreate>
 8003794:	6038      	str	r0, [r7, #0]
		  if(modH->xTimerTimeout == NULL)
 8003796:	2800      	cmp	r0, #0
 8003798:	d100      	bne.n	800379c <ModbusInit+0x70>
			  while(1); //error creating timer, check heap and stack size
 800379a:	e7fe      	b.n	800379a <ModbusInit+0x6e>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800379c:	2110      	movs	r1, #16
 800379e:	2002      	movs	r0, #2
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <ModbusInit+0xe8>)
 80037a2:	f000 fe6f 	bl	8004484 <osMessageQueueNew>
		  if(modH->QueueTelegramHandle == NULL)
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d101      	bne.n	80037ae <ModbusInit+0x82>
			  while(1); //error creating queue for telegrams, check heap and stack size
 80037aa:	e7fe      	b.n	80037aa <ModbusInit+0x7e>
		  while(1); //Error Modbus type not supported choose a valid Type
 80037ac:	e7fe      	b.n	80037ac <ModbusInit+0x80>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80037ae:	0023      	movs	r3, r4
 80037b0:	33a8      	adds	r3, #168	; 0xa8
 80037b2:	e7d3      	b.n	800375c <ModbusInit+0x30>
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80037b4:	0025      	movs	r5, r4
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <ModbusInit+0xec>)
 80037b8:	35b0      	adds	r5, #176	; 0xb0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2105      	movs	r1, #5
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <ModbusInit+0xf0>)
 80037c4:	f002 fa84 	bl	8005cd0 <xTimerCreate>
 80037c8:	6028      	str	r0, [r5, #0]
	  if (modH->xTimerT35 == NULL)
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d100      	bne.n	80037d0 <ModbusInit+0xa4>
		  while(1); //Error creating the timer, check heap and stack size
 80037ce:	e7fe      	b.n	80037ce <ModbusInit+0xa2>
	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80037d0:	2101      	movs	r1, #1
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <ModbusInit+0xf4>)
 80037d4:	0008      	movs	r0, r1
 80037d6:	f000 fe0c 	bl	80043f2 <osSemaphoreNew>
 80037da:	0023      	movs	r3, r4
 80037dc:	33b8      	adds	r3, #184	; 0xb8
 80037de:	6018      	str	r0, [r3, #0]
	  if(modH->ModBusSphrHandle == NULL)
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d100      	bne.n	80037e6 <ModbusInit+0xba>
		  while(1); //Error creating the semaphore, check heap and stack size
 80037e4:	e7fe      	b.n	80037e4 <ModbusInit+0xb8>
	  mHandlers[numberHandlers] = modH;
 80037e6:	7833      	ldrb	r3, [r6, #0]
 80037e8:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <ModbusInit+0xf8>)
 80037ea:	0099      	lsls	r1, r3, #2
	  numberHandlers++;
 80037ec:	3301      	adds	r3, #1
 80037ee:	7033      	strb	r3, [r6, #0]
	  mHandlers[numberHandlers] = modH;
 80037f0:	508c      	str	r4, [r1, r2]
}
 80037f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	  while(1); //error no more Modbus handlers supported
 80037f4:	e7fe      	b.n	80037f4 <ModbusInit+0xc8>
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	20000090 	.word	0x20000090
 80037fc:	080062e8 	.word	0x080062e8
 8003800:	08003979 	.word	0x08003979
 8003804:	0800630c 	.word	0x0800630c
 8003808:	08003eb9 	.word	0x08003eb9
 800380c:	080035dd 	.word	0x080035dd
 8003810:	08006260 	.word	0x08006260
 8003814:	080062c8 	.word	0x080062c8
 8003818:	08003589 	.word	0x08003589
 800381c:	0800626e 	.word	0x0800626e
 8003820:	080062b8 	.word	0x080062b8
 8003824:	2000105c 	.word	0x2000105c

08003828 <ModbusStart>:
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8003828:	23a0      	movs	r3, #160	; 0xa0
{
 800382a:	b510      	push	{r4, lr}
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	5cc3      	ldrb	r3, [r0, r3]
{
 8003830:	0004      	movs	r4, r0
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <ModbusStart+0x1a>
 8003836:	1e9a      	subs	r2, r3, #2
 8003838:	2a01      	cmp	r2, #1
 800383a:	d92a      	bls.n	8003892 <ModbusStart+0x6a>
 800383c:	2b04      	cmp	r3, #4
 800383e:	d000      	beq.n	8003842 <ModbusStart+0x1a>
		while(1); //ERROR select the type of hardware
 8003840:	e7fe      	b.n	8003840 <ModbusStart+0x18>
	      if (modH->EN_Port != NULL )
 8003842:	68e0      	ldr	r0, [r4, #12]
 8003844:	2800      	cmp	r0, #0
 8003846:	d003      	beq.n	8003850 <ModbusStart+0x28>
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	8a21      	ldrh	r1, [r4, #16]
 800384c:	f7fd ff90 	bl	8001770 <HAL_GPIO_WritePin>
          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8003850:	7823      	ldrb	r3, [r4, #0]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d105      	bne.n	8003862 <ModbusStart+0x3a>
 8003856:	0023      	movs	r3, r4
 8003858:	3398      	adds	r3, #152	; 0x98
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d100      	bne.n	8003862 <ModbusStart+0x3a>
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8003860:	e7fe      	b.n	8003860 <ModbusStart+0x38>
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8003862:	6860      	ldr	r0, [r4, #4]
 8003864:	f7ff faea 	bl	8002e3c <HAL_UART_GetState>
 8003868:	2820      	cmp	r0, #32
 800386a:	d1fa      	bne.n	8003862 <ModbusStart+0x3a>
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800386c:	0021      	movs	r1, r4
 800386e:	2201      	movs	r2, #1
 8003870:	6860      	ldr	r0, [r4, #4]
 8003872:	31a6      	adds	r1, #166	; 0xa6
 8003874:	f7ff fdba 	bl	80033ec <HAL_UART_Receive_IT>
 8003878:	2800      	cmp	r0, #0
 800387a:	d000      	beq.n	800387e <ModbusStart+0x56>
                while(1)
 800387c:	e7fe      	b.n	800387c <ModbusStart+0x54>
          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800387e:	7a22      	ldrb	r2, [r4, #8]
 8003880:	7823      	ldrb	r3, [r4, #0]
 8003882:	2a00      	cmp	r2, #0
 8003884:	d002      	beq.n	800388c <ModbusStart+0x64>
 8003886:	2b04      	cmp	r3, #4
 8003888:	d103      	bne.n	8003892 <ModbusStart+0x6a>
        	  while(1)
 800388a:	e7fe      	b.n	800388a <ModbusStart+0x62>
          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800388c:	2b03      	cmp	r3, #3
 800388e:	d100      	bne.n	8003892 <ModbusStart+0x6a>
             	  while(1)
 8003890:	e7fe      	b.n	8003890 <ModbusStart+0x68>
    modH->u8lastRec = modH->u8BufferSize = 0;
 8003892:	0022      	movs	r2, r4
 8003894:	2300      	movs	r3, #0
 8003896:	3293      	adds	r2, #147	; 0x93
 8003898:	7053      	strb	r3, [r2, #1]
 800389a:	7013      	strb	r3, [r2, #0]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800389c:	34a0      	adds	r4, #160	; 0xa0
    modH->u8lastRec = modH->u8BufferSize = 0;
 800389e:	3201      	adds	r2, #1
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80038a0:	6093      	str	r3, [r2, #8]
 80038a2:	8023      	strh	r3, [r4, #0]
}
 80038a4:	bd10      	pop	{r4, pc}
	...

080038a8 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
    for (unsigned char i = 0; i < u8length; i++)
    {
        temp = temp ^ Buffer[i];
 80038aa:	2408      	movs	r4, #8
        for (unsigned char j = 1; j <= 8; j++)
        {
            flag = temp & 0x0001;
 80038ac:	2501      	movs	r5, #1
    temp = 0xFFFF;
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <calcCRC+0x38>)
            temp >>=1;
            if (flag)
                temp ^= 0xA001;
 80038b0:	4e0c      	ldr	r6, [pc, #48]	; (80038e4 <calcCRC+0x3c>)
 80038b2:	1841      	adds	r1, r0, r1
    for (unsigned char i = 0; i < u8length; i++)
 80038b4:	4288      	cmp	r0, r1
 80038b6:	d104      	bne.n	80038c2 <calcCRC+0x1a>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80038b8:	0a18      	lsrs	r0, r3, #8
    temp = (temp << 8) | temp2;
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	4318      	orrs	r0, r3
    temp &= 0xFFFF;
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80038be:	b280      	uxth	r0, r0

}
 80038c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = temp ^ Buffer[i];
 80038c2:	7802      	ldrb	r2, [r0, #0]
 80038c4:	4053      	eors	r3, r2
 80038c6:	0022      	movs	r2, r4
            flag = temp & 0x0001;
 80038c8:	001f      	movs	r7, r3
            temp >>=1;
 80038ca:	085b      	lsrs	r3, r3, #1
            flag = temp & 0x0001;
 80038cc:	402f      	ands	r7, r5
            if (flag)
 80038ce:	d000      	beq.n	80038d2 <calcCRC+0x2a>
                temp ^= 0xA001;
 80038d0:	4073      	eors	r3, r6
        for (unsigned char j = 1; j <= 8; j++)
 80038d2:	3a01      	subs	r2, #1
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	d1f6      	bne.n	80038c8 <calcCRC+0x20>
    for (unsigned char i = 0; i < u8length; i++)
 80038da:	3001      	adds	r0, #1
 80038dc:	e7ea      	b.n	80038b4 <calcCRC+0xc>
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	0000ffff 	.word	0x0000ffff
 80038e4:	0000a001 	.word	0x0000a001

080038e8 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80038e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80038ea:	0006      	movs	r6, r0
 80038ec:	0007      	movs	r7, r0
 80038ee:	3693      	adds	r6, #147	; 0x93
 80038f0:	7835      	ldrb	r5, [r6, #0]
 80038f2:	3713      	adds	r7, #19
{
 80038f4:	0004      	movs	r4, r0
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80038f6:	0029      	movs	r1, r5
 80038f8:	0038      	movs	r0, r7
 80038fa:	f7ff ffd5 	bl	80038a8 <calcCRC>
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80038fe:	1963      	adds	r3, r4, r5
 8003900:	0a02      	lsrs	r2, r0, #8
 8003902:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8003904:	1c6b      	adds	r3, r5, #1
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003906:	b2db      	uxtb	r3, r3
 8003908:	18e3      	adds	r3, r4, r3
    modH->u8BufferSize++;
 800390a:	3502      	adds	r5, #2
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800390c:	74d8      	strb	r0, [r3, #19]
    modH->u8BufferSize++;
 800390e:	7035      	strb	r5, [r6, #0]

#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif
    	if (modH->EN_Port != NULL)
 8003910:	68e0      	ldr	r0, [r4, #12]
 8003912:	2800      	cmp	r0, #0
 8003914:	d003      	beq.n	800391e <sendTxBuffer+0x36>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8003916:	2201      	movs	r2, #1
 8003918:	8a21      	ldrh	r1, [r4, #16]
 800391a:	f7fd ff29 	bl	8001770 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800391e:	0039      	movs	r1, r7
 8003920:	7832      	ldrb	r2, [r6, #0]
 8003922:	6860      	ldr	r0, [r4, #4]
 8003924:	f7fe fdd6 	bl	80024d4 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8003928:	21fa      	movs	r1, #250	; 0xfa
 800392a:	2001      	movs	r0, #1
 800392c:	f002 f840 	bl	80059b0 <ulTaskNotifyTake>


#if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	2340      	movs	r3, #64	; 0x40
 8003936:	69ca      	ldr	r2, [r1, #28]
 8003938:	421a      	tst	r2, r3
 800393a:	d0fc      	beq.n	8003936 <sendTxBuffer+0x4e>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800393c:	68e0      	ldr	r0, [r4, #12]
 800393e:	2800      	cmp	r0, #0
 8003940:	d003      	beq.n	800394a <sendTxBuffer+0x62>
         {
             // must wait transmission end before changing pin state
             //return RS485 transceiver to receive mode

        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003942:	2200      	movs	r2, #0
 8003944:	8a21      	ldrh	r1, [r4, #16]
 8003946:	f7fd ff13 	bl	8001770 <HAL_GPIO_WritePin>
         }


         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800394a:	7823      	ldrb	r3, [r4, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d10b      	bne.n	8003968 <sendTxBuffer+0x80>
         {
 	    	xTimerReset(modH->xTimerTimeout,0);
 8003950:	0023      	movs	r3, r4
 8003952:	33b4      	adds	r3, #180	; 0xb4
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	f001 fd6b 	bl	8005430 <xTaskGetTickCount>
 800395a:	2300      	movs	r3, #0
 800395c:	0002      	movs	r2, r0
 800395e:	2102      	movs	r1, #2
 8003960:	0028      	movs	r0, r5
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f002 f9da 	bl	8005d1c <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8003968:	2300      	movs	r3, #0
     // increase message counter
     modH->u16OutCnt++;
 800396a:	349e      	adds	r4, #158	; 0x9e
     modH->u8BufferSize = 0;
 800396c:	7033      	strb	r3, [r6, #0]
     modH->u16OutCnt++;
 800396e:	8823      	ldrh	r3, [r4, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	8023      	strh	r3, [r4, #0]

}
 8003974:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08003978 <StartTaskModbusSlave>:
{
 8003978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397a:	0004      	movs	r4, r0
 800397c:	b099      	sub	sp, #100	; 0x64
	modH->i8lastError = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	74a3      	strb	r3, [r4, #18]
   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8003982:	3341      	adds	r3, #65	; 0x41
 8003984:	33ff      	adds	r3, #255	; 0xff
 8003986:	5ce3      	ldrb	r3, [r4, r3]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <StartTaskModbusSlave+0x18>
 800398c:	2b04      	cmp	r3, #4
 800398e:	d10f      	bne.n	80039b0 <StartTaskModbusSlave+0x38>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block 2 seconds until a Modbus Frame arrives */
 8003990:	2101      	movs	r1, #1
 8003992:	2001      	movs	r0, #1
 8003994:	4249      	negs	r1, r1
 8003996:	f002 f80b 	bl	80059b0 <ulTaskNotifyTake>
	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800399a:	0020      	movs	r0, r4
 800399c:	f7ff fe90 	bl	80036c0 <getRxBuffer>
 80039a0:	1cc3      	adds	r3, r0, #3
 80039a2:	d105      	bne.n	80039b0 <StartTaskModbusSlave+0x38>
      modH->u16errCnt++;
 80039a4:	0022      	movs	r2, r4
 80039a6:	32a0      	adds	r2, #160	; 0xa0
 80039a8:	8813      	ldrh	r3, [r2, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	8013      	strh	r3, [r2, #0]
	  continue;
 80039ae:	e7e6      	b.n	800397e <StartTaskModbusSlave+0x6>
   if (modH->u8BufferSize < 7)
 80039b0:	0023      	movs	r3, r4
 80039b2:	0020      	movs	r0, r4
 80039b4:	3393      	adds	r3, #147	; 0x93
 80039b6:	781e      	ldrb	r6, [r3, #0]
 80039b8:	3013      	adds	r0, #19
 80039ba:	2e06      	cmp	r6, #6
 80039bc:	d9f2      	bls.n	80039a4 <StartTaskModbusSlave+0x2c>
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 80039be:	7a23      	ldrb	r3, [r4, #8]
 80039c0:	9314      	str	r3, [sp, #80]	; 0x50
 80039c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80039c4:	7ce3      	ldrb	r3, [r4, #19]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d1d9      	bne.n	800397e <StartTaskModbusSlave+0x6>
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80039ca:	1eb1      	subs	r1, r6, #2
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	f7ff ff6b 	bl	80038a8 <calcCRC>
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80039d2:	19a6      	adds	r6, r4, r6
 80039d4:	7c73      	ldrb	r3, [r6, #17]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80039d6:	7cb2      	ldrb	r2, [r6, #18]
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80039d8:	021b      	lsls	r3, r3, #8
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80039da:	431a      	orrs	r2, r3
 80039dc:	7d25      	ldrb	r5, [r4, #20]
 80039de:	2300      	movs	r3, #0
 80039e0:	4282      	cmp	r2, r0
 80039e2:	d012      	beq.n	8003a0a <StartTaskModbusSlave+0x92>
	       		modH->u16errCnt ++;
 80039e4:	0022      	movs	r2, r4
 80039e6:	32a0      	adds	r2, #160	; 0xa0
 80039e8:	8813      	ldrh	r3, [r2, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	8013      	strh	r3, [r2, #0]
	       		return ERR_BAD_CRC;
 80039ee:	23fc      	movs	r3, #252	; 0xfc
    modH->u8Buffer[ ID ]      = modH->u8id;
 80039f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    modH->u8Buffer[ 2 ]       = u8exception;
 80039f2:	7563      	strb	r3, [r4, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80039f4:	0023      	movs	r3, r4
    modH->u8Buffer[ ID ]      = modH->u8id;
 80039f6:	74e2      	strb	r2, [r4, #19]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80039f8:	2203      	movs	r2, #3
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 80039fa:	3d80      	subs	r5, #128	; 0x80
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80039fc:	3393      	adds	r3, #147	; 0x93
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 80039fe:	7525      	strb	r5, [r4, #20]
			sendTxBuffer(modH);
 8003a00:	0020      	movs	r0, r4
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003a02:	701a      	strb	r2, [r3, #0]
			sendTxBuffer(modH);
 8003a04:	f7ff ff70 	bl	80038e8 <sendTxBuffer>
		continue;
 8003a08:	e7b9      	b.n	800397e <StartTaskModbusSlave+0x6>
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8003a0a:	4ad4      	ldr	r2, [pc, #848]	; (8003d5c <StartTaskModbusSlave+0x3e4>)
 8003a0c:	5c9a      	ldrb	r2, [r3, r2]
 8003a0e:	42aa      	cmp	r2, r5
 8003a10:	d100      	bne.n	8003a14 <StartTaskModbusSlave+0x9c>
 8003a12:	e238      	b.n	8003e86 <StartTaskModbusSlave+0x50e>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8003a14:	3301      	adds	r3, #1
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d1f7      	bne.n	8003a0a <StartTaskModbusSlave+0x92>
	    	modH->u16errCnt ++;
 8003a1a:	0022      	movs	r2, r4
 8003a1c:	32a0      	adds	r2, #160	; 0xa0
 8003a1e:	8813      	ldrh	r3, [r2, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	8013      	strh	r3, [r2, #0]
	        return EXC_FUNC_CODE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e7e3      	b.n	80039f0 <StartTaskModbusSlave+0x78>
	W.u8[0] = L;
 8003a28:	27ff      	movs	r7, #255	; 0xff
 8003a2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a2c:	7da3      	ldrb	r3, [r4, #22]
 8003a2e:	43b9      	bics	r1, r7
 8003a30:	4319      	orrs	r1, r3
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003a32:	7d62      	ldrb	r2, [r4, #21]
	W.u8[1] = H;
 8003a34:	4bca      	ldr	r3, [pc, #808]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
 8003a36:	0212      	lsls	r2, r2, #8
 8003a38:	4019      	ands	r1, r3
 8003a3a:	4311      	orrs	r1, r2
	return W.u16[0];
 8003a3c:	466a      	mov	r2, sp
	W.u8[1] = H;
 8003a3e:	910e      	str	r1, [sp, #56]	; 0x38
	return W.u16[0];
 8003a40:	8f16      	ldrh	r6, [r2, #56]	; 0x38
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8003a42:	7e20      	ldrb	r0, [r4, #24]
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003a44:	0932      	lsrs	r2, r6, #4
	W.u8[0] = L;
 8003a46:	9e13      	ldr	r6, [sp, #76]	; 0x4c
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003a48:	4694      	mov	ip, r2
	W.u8[0] = L;
 8003a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a4c:	43be      	bics	r6, r7
 8003a4e:	43ba      	bics	r2, r7
 8003a50:	0037      	movs	r7, r6
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8003a52:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003a54:	4302      	orrs	r2, r0
	W.u8[1] = H;
 8003a56:	0209      	lsls	r1, r1, #8
 8003a58:	401a      	ands	r2, r3
 8003a5a:	430a      	orrs	r2, r1
	W.u8[0] = L;
 8003a5c:	4307      	orrs	r7, r0
	W.u8[1] = H;
 8003a5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003a60:	401f      	ands	r7, r3
	return W.u16[0];
 8003a62:	466a      	mov	r2, sp
	W.u8[1] = H;
 8003a64:	003e      	movs	r6, r7
	return W.u16[0];
 8003a66:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
	W.u8[1] = H;
 8003a68:	430e      	orrs	r6, r1
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8003a6a:	0912      	lsrs	r2, r2, #4
	W.u8[1] = H;
 8003a6c:	9613      	str	r6, [sp, #76]	; 0x4c
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8003a6e:	073e      	lsls	r6, r7, #28
 8003a70:	d000      	beq.n	8003a74 <StartTaskModbusSlave+0xfc>
 8003a72:	3201      	adds	r2, #1
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003a74:	0026      	movs	r6, r4
 8003a76:	36a4      	adds	r6, #164	; 0xa4
 8003a78:	8837      	ldrh	r7, [r6, #0]
 8003a7a:	4462      	add	r2, ip
 8003a7c:	42ba      	cmp	r2, r7
 8003a7e:	dd01      	ble.n	8003a84 <StartTaskModbusSlave+0x10c>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e7b5      	b.n	80039f0 <StartTaskModbusSlave+0x78>
	W.u8[0] = L;
 8003a84:	27ff      	movs	r7, #255	; 0xff
 8003a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003a8a:	43ba      	bics	r2, r7
 8003a8c:	4302      	orrs	r2, r0
	W.u8[1] = H;
 8003a8e:	401a      	ands	r2, r3
 8003a90:	430a      	orrs	r2, r1
 8003a92:	920d      	str	r2, [sp, #52]	; 0x34
	return W.u16[0];
 8003a94:	466a      	mov	r2, sp
	W.u8[0] = L;
 8003a96:	43be      	bics	r6, r7
 8003a98:	4306      	orrs	r6, r0
	return W.u16[0];
 8003a9a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
	W.u8[1] = H;
 8003a9c:	4033      	ands	r3, r6
 8003a9e:	4319      	orrs	r1, r3
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8003aa0:	08d2      	lsrs	r2, r2, #3
	W.u8[1] = H;
 8003aa2:	9112      	str	r1, [sp, #72]	; 0x48
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8003aa4:	075b      	lsls	r3, r3, #29
 8003aa6:	d000      	beq.n	8003aaa <StartTaskModbusSlave+0x132>
 8003aa8:	3201      	adds	r2, #1
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	3205      	adds	r2, #5
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d91d      	bls.n	8003af0 <StartTaskModbusSlave+0x178>
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e79b      	b.n	80039f0 <StartTaskModbusSlave+0x78>
	W.u8[0] = L;
 8003ab8:	27ff      	movs	r7, #255	; 0xff
 8003aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003abc:	7da0      	ldrb	r0, [r4, #22]
	W.u8[1] = H;
 8003abe:	4aa8      	ldr	r2, [pc, #672]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003ac0:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003ac2:	43bb      	bics	r3, r7
 8003ac4:	4303      	orrs	r3, r0
	W.u8[1] = H;
 8003ac6:	0209      	lsls	r1, r1, #8
 8003ac8:	4013      	ands	r3, r2
 8003aca:	430b      	orrs	r3, r1
 8003acc:	930c      	str	r3, [sp, #48]	; 0x30
	return W.u16[0];
 8003ace:	466b      	mov	r3, sp
	W.u8[0] = L;
 8003ad0:	9e11      	ldr	r6, [sp, #68]	; 0x44
	return W.u16[0];
 8003ad2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	W.u8[0] = L;
 8003ad4:	43be      	bics	r6, r7
 8003ad6:	4306      	orrs	r6, r0
	W.u8[1] = H;
 8003ad8:	4032      	ands	r2, r6
 8003ada:	4311      	orrs	r1, r2
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003adc:	091b      	lsrs	r3, r3, #4
	W.u8[1] = H;
 8003ade:	9111      	str	r1, [sp, #68]	; 0x44
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8003ae0:	0712      	lsls	r2, r2, #28
 8003ae2:	d000      	beq.n	8003ae6 <StartTaskModbusSlave+0x16e>
 8003ae4:	3301      	adds	r3, #1
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003ae6:	0022      	movs	r2, r4
 8003ae8:	32a4      	adds	r2, #164	; 0xa4
 8003aea:	8812      	ldrh	r2, [r2, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d3c7      	bcc.n	8003a80 <StartTaskModbusSlave+0x108>
	 modH->i8lastError = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	74a3      	strb	r3, [r4, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003af4:	0023      	movs	r3, r4
 8003af6:	2101      	movs	r1, #1
 8003af8:	33b8      	adds	r3, #184	; 0xb8
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4249      	negs	r1, r1
 8003afe:	f001 f99d 	bl	8004e3c <xQueueSemaphoreTake>
	 switch(modH->u8Buffer[ FUNC ] )
 8003b02:	7d20      	ldrb	r0, [r4, #20]
 8003b04:	3801      	subs	r0, #1
 8003b06:	280f      	cmp	r0, #15
 8003b08:	d900      	bls.n	8003b0c <StartTaskModbusSlave+0x194>
 8003b0a:	e0e0      	b.n	8003cce <StartTaskModbusSlave+0x356>
 8003b0c:	f7fc fb1a 	bl	8000144 <__gnu_thumb1_case_uhi>
 8003b10:	00450045 	.word	0x00450045
 8003b14:	00af00af 	.word	0x00af00af
 8003b18:	012a00fb 	.word	0x012a00fb
 8003b1c:	00df00df 	.word	0x00df00df
 8003b20:	00df00df 	.word	0x00df00df
 8003b24:	00df00df 	.word	0x00df00df
 8003b28:	00df00df 	.word	0x00df00df
 8003b2c:	018b0147 	.word	0x018b0147
	W.u8[0] = L;
 8003b30:	20ff      	movs	r0, #255	; 0xff
 8003b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b34:	7da2      	ldrb	r2, [r4, #22]
 8003b36:	4381      	bics	r1, r0
 8003b38:	4311      	orrs	r1, r2
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8003b3a:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 8003b3c:	4a88      	ldr	r2, [pc, #544]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	400a      	ands	r2, r1
 8003b42:	431a      	orrs	r2, r3
	return W.u16[0];
 8003b44:	466b      	mov	r3, sp
	W.u8[1] = H;
 8003b46:	920b      	str	r2, [sp, #44]	; 0x2c
	return W.u16[0];
 8003b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4a:	e7cc      	b.n	8003ae6 <StartTaskModbusSlave+0x16e>
	W.u8[0] = L;
 8003b4c:	27ff      	movs	r7, #255	; 0xff
 8003b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b50:	7da3      	ldrb	r3, [r4, #22]
 8003b52:	43b9      	bics	r1, r7
 8003b54:	4319      	orrs	r1, r3
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8003b56:	7d62      	ldrb	r2, [r4, #21]
	W.u8[1] = H;
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
	W.u8[0] = L;
 8003b5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	W.u8[1] = H;
 8003b5c:	0212      	lsls	r2, r2, #8
 8003b5e:	4019      	ands	r1, r3
 8003b60:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003b62:	7e20      	ldrb	r0, [r4, #24]
	W.u8[1] = H;
 8003b64:	9109      	str	r1, [sp, #36]	; 0x24
	W.u8[0] = L;
 8003b66:	43be      	bics	r6, r7
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8003b68:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003b6a:	4306      	orrs	r6, r0
	W.u8[1] = H;
 8003b6c:	0209      	lsls	r1, r1, #8
 8003b6e:	4033      	ands	r3, r6
 8003b70:	430b      	orrs	r3, r1
 8003b72:	930a      	str	r3, [sp, #40]	; 0x28
	return W.u16[0];
 8003b74:	466a      	mov	r2, sp
 8003b76:	466b      	mov	r3, sp
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003b78:	0021      	movs	r1, r4
	return W.u16[0];
 8003b7a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003b7e:	31a4      	adds	r1, #164	; 0xa4
 8003b80:	8809      	ldrh	r1, [r1, #0]
 8003b82:	18d2      	adds	r2, r2, r3
 8003b84:	428a      	cmp	r2, r1
 8003b86:	dd00      	ble.n	8003b8a <StartTaskModbusSlave+0x212>
 8003b88:	e77a      	b.n	8003a80 <StartTaskModbusSlave+0x108>
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8003b8a:	2280      	movs	r2, #128	; 0x80
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	3305      	adds	r3, #5
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	0052      	lsls	r2, r2, #1
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d9ab      	bls.n	8003af0 <StartTaskModbusSlave+0x178>
 8003b98:	e78c      	b.n	8003ab4 <StartTaskModbusSlave+0x13c>
	W.u8[0] = L;
 8003b9a:	26ff      	movs	r6, #255	; 0xff
 8003b9c:	9907      	ldr	r1, [sp, #28]
 8003b9e:	7da3      	ldrb	r3, [r4, #22]
 8003ba0:	43b1      	bics	r1, r6
 8003ba2:	4319      	orrs	r1, r3
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003ba4:	7d62      	ldrb	r2, [r4, #21]
	W.u8[1] = H;
 8003ba6:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
	W.u8[0] = L;
 8003ba8:	9d08      	ldr	r5, [sp, #32]
	W.u8[1] = H;
 8003baa:	0212      	lsls	r2, r2, #8
 8003bac:	4019      	ands	r1, r3
 8003bae:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003bb0:	7e20      	ldrb	r0, [r4, #24]
	W.u8[1] = H;
 8003bb2:	9107      	str	r1, [sp, #28]
	W.u8[0] = L;
 8003bb4:	43b5      	bics	r5, r6
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003bb6:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003bb8:	4305      	orrs	r5, r0
	W.u8[1] = H;
 8003bba:	0209      	lsls	r1, r1, #8
 8003bbc:	402b      	ands	r3, r5
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	9308      	str	r3, [sp, #32]
	return W.u16[0];
 8003bc2:	466b      	mov	r3, sp
 8003bc4:	8c19      	ldrh	r1, [r3, #32]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003bc6:	2007      	movs	r0, #7
 8003bc8:	000d      	movs	r5, r1
	return W.u16[0];
 8003bca:	466a      	mov	r2, sp
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003bcc:	08cb      	lsrs	r3, r1, #3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003bce:	4005      	ands	r5, r0
	return W.u16[0];
 8003bd0:	8b92      	ldrh	r2, [r2, #28]
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003bd2:	b2db      	uxtb	r3, r3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003bd4:	9517      	str	r5, [sp, #92]	; 0x5c
 8003bd6:	4201      	tst	r1, r0
 8003bd8:	d001      	beq.n	8003bde <StartTaskModbusSlave+0x266>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
    modH->u8BufferSize         = ADD_LO;
 8003bde:	0027      	movs	r7, r4
 8003be0:	2003      	movs	r0, #3
 8003be2:	3793      	adds	r7, #147	; 0x93
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8003be4:	7563      	strb	r3, [r4, #21]
    modH->u8BufferSize         = ADD_LO;
 8003be6:	7038      	strb	r0, [r7, #0]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8003be8:	18e0      	adds	r0, r4, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	1851      	adds	r1, r2, r1
 8003bee:	b289      	uxth	r1, r1
 8003bf0:	7543      	strb	r3, [r0, #21]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003bf2:	9116      	str	r1, [sp, #88]	; 0x58
 8003bf4:	9715      	str	r7, [sp, #84]	; 0x54
 8003bf6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003bf8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003bfa:	7809      	ldrb	r1, [r1, #0]
 8003bfc:	4290      	cmp	r0, r2
 8003bfe:	d10e      	bne.n	8003c1e <StartTaskModbusSlave+0x2a6>
            modH->u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8003c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <StartTaskModbusSlave+0x292>
 8003c06:	3101      	adds	r1, #1
 8003c08:	7039      	strb	r1, [r7, #0]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003c0a:	783d      	ldrb	r5, [r7, #0]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        modH->u16regs[ u16StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8003c0c:	0020      	movs	r0, r4
 8003c0e:	f7ff fe6b 	bl	80038e8 <sendTxBuffer>
				modH->i8state = process_FC16(modH);
 8003c12:	0023      	movs	r3, r4
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003c14:	3502      	adds	r5, #2
 8003c16:	b2ed      	uxtb	r5, r5
				modH->i8state = process_FC16(modH);
 8003c18:	33a7      	adds	r3, #167	; 0xa7
 8003c1a:	701d      	strb	r5, [r3, #0]
				break;
 8003c1c:	e057      	b.n	8003cce <StartTaskModbusSlave+0x356>
        bitWrite(
 8003c1e:	1860      	adds	r0, r4, r1
 8003c20:	7cc6      	ldrb	r6, [r0, #19]
 8003c22:	2001      	movs	r0, #1
 8003c24:	4098      	lsls	r0, r3
 8003c26:	b2c0      	uxtb	r0, r0
 8003c28:	9014      	str	r0, [sp, #80]	; 0x50
 8003c2a:	2098      	movs	r0, #152	; 0x98
 8003c2c:	4684      	mov	ip, r0
 8003c2e:	44a4      	add	ip, r4
 8003c30:	4660      	mov	r0, ip
 8003c32:	0915      	lsrs	r5, r2, #4
 8003c34:	6800      	ldr	r0, [r0, #0]
 8003c36:	006d      	lsls	r5, r5, #1
 8003c38:	5a2d      	ldrh	r5, [r5, r0]
 8003c3a:	200f      	movs	r0, #15
 8003c3c:	4010      	ands	r0, r2
 8003c3e:	4105      	asrs	r5, r0
 8003c40:	2001      	movs	r0, #1
 8003c42:	4205      	tst	r5, r0
 8003c44:	d00e      	beq.n	8003c64 <StartTaskModbusSlave+0x2ec>
 8003c46:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003c48:	1865      	adds	r5, r4, r1
 8003c4a:	4330      	orrs	r0, r6
 8003c4c:	74e8      	strb	r0, [r5, #19]
        u8bitsno ++;
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2db      	uxtb	r3, r3
        if (u8bitsno > 7)
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	d903      	bls.n	8003c5e <StartTaskModbusSlave+0x2e6>
            modH->u8BufferSize++;
 8003c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c58:	3101      	adds	r1, #1
 8003c5a:	7019      	strb	r1, [r3, #0]
            u8bitsno = 0;
 8003c5c:	2300      	movs	r3, #0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003c5e:	3201      	adds	r2, #1
 8003c60:	b292      	uxth	r2, r2
 8003c62:	e7c8      	b.n	8003bf6 <StartTaskModbusSlave+0x27e>
        bitWrite(
 8003c64:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003c66:	4386      	bics	r6, r0
 8003c68:	1860      	adds	r0, r4, r1
 8003c6a:	74c6      	strb	r6, [r0, #19]
 8003c6c:	e7ef      	b.n	8003c4e <StartTaskModbusSlave+0x2d6>
	W.u8[0] = L;
 8003c6e:	25ff      	movs	r5, #255	; 0xff
 8003c70:	9906      	ldr	r1, [sp, #24]
 8003c72:	7da3      	ldrb	r3, [r4, #22]
 8003c74:	43a9      	bics	r1, r5
    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003c76:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003c78:	4319      	orrs	r1, r3
	W.u8[1] = H;
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
 8003c7c:	0212      	lsls	r2, r2, #8
 8003c7e:	4019      	ands	r1, r3
 8003c80:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003c82:	9810      	ldr	r0, [sp, #64]	; 0x40
	W.u8[1] = H;
 8003c84:	9106      	str	r1, [sp, #24]
	W.u8[0] = L;
 8003c86:	7e21      	ldrb	r1, [r4, #24]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003c88:	7de2      	ldrb	r2, [r4, #23]
	W.u8[0] = L;
 8003c8a:	43a8      	bics	r0, r5
 8003c8c:	4308      	orrs	r0, r1
	W.u8[1] = H;
 8003c8e:	4003      	ands	r3, r0
 8003c90:	0212      	lsls	r2, r2, #8
 8003c92:	431a      	orrs	r2, r3
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003c94:	b2db      	uxtb	r3, r3
	W.u8[1] = H;
 8003c96:	9210      	str	r2, [sp, #64]	; 0x40
    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8003c98:	005a      	lsls	r2, r3, #1
 8003c9a:	7562      	strb	r2, [r4, #21]
    modH->u8BufferSize         = 3;
 8003c9c:	0022      	movs	r2, r4
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	3293      	adds	r2, #147	; 0x93
 8003ca2:	7011      	strb	r1, [r2, #0]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003ca4:	4669      	mov	r1, sp
 8003ca6:	8b09      	ldrh	r1, [r1, #24]
 8003ca8:	18cb      	adds	r3, r1, r3
 8003caa:	9315      	str	r3, [sp, #84]	; 0x54
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003cac:	2398      	movs	r3, #152	; 0x98
 8003cae:	469c      	mov	ip, r3
 8003cb0:	44a4      	add	ip, r4
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003cb2:	7813      	ldrb	r3, [r2, #0]
 8003cb4:	1c9d      	adds	r5, r3, #2
 8003cb6:	b2e8      	uxtb	r0, r5
 8003cb8:	9014      	str	r0, [sp, #80]	; 0x50
 8003cba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003cbc:	4281      	cmp	r1, r0
 8003cbe:	db0f      	blt.n	8003ce0 <StartTaskModbusSlave+0x368>
    sendTxBuffer(modH);
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	f7ff fe11 	bl	80038e8 <sendTxBuffer>
				modH->i8state = process_FC3(modH);
 8003cc6:	0023      	movs	r3, r4
 8003cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003cca:	33a7      	adds	r3, #167	; 0xa7
				modH->i8state = process_FC6(modH);
 8003ccc:	701a      	strb	r2, [r3, #0]
	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003cce:	0020      	movs	r0, r4
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	30b8      	adds	r0, #184	; 0xb8
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	6800      	ldr	r0, [r0, #0]
 8003cda:	f000 ff50 	bl	8004b7e <xQueueGenericSend>
	 continue;
 8003cde:	e64e      	b.n	800397e <StartTaskModbusSlave+0x6>
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003ce0:	4660      	mov	r0, ip
 8003ce2:	6807      	ldr	r7, [r0, #0]
 8003ce4:	18e0      	adds	r0, r4, r3
 8003ce6:	0005      	movs	r5, r0
 8003ce8:	004e      	lsls	r6, r1, #1
 8003cea:	5bb8      	ldrh	r0, [r7, r6]
    	modH->u8BufferSize++;
 8003cec:	3301      	adds	r3, #1
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003cee:	0a00      	lsrs	r0, r0, #8
    	modH->u8BufferSize++;
 8003cf0:	b2db      	uxtb	r3, r3
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003cf2:	74e8      	strb	r0, [r5, #19]
    	modH->u8BufferSize++;
 8003cf4:	7013      	strb	r3, [r2, #0]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003cf6:	5bb8      	ldrh	r0, [r7, r6]
 8003cf8:	18e3      	adds	r3, r4, r3
 8003cfa:	74d8      	strb	r0, [r3, #19]
    	modH->u8BufferSize++;
 8003cfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003cfe:	3101      	adds	r1, #1
    	modH->u8BufferSize++;
 8003d00:	7013      	strb	r3, [r2, #0]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003d02:	b289      	uxth	r1, r1
 8003d04:	e7d5      	b.n	8003cb2 <StartTaskModbusSlave+0x33a>
	W.u8[0] = L;
 8003d06:	20ff      	movs	r0, #255	; 0xff
 8003d08:	9905      	ldr	r1, [sp, #20]
 8003d0a:	7da2      	ldrb	r2, [r4, #22]
 8003d0c:	4381      	bics	r1, r0
 8003d0e:	4311      	orrs	r1, r2
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003d10:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <StartTaskModbusSlave+0x3e8>)
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	400a      	ands	r2, r1
 8003d18:	431a      	orrs	r2, r3
	return W.u16[0];
 8003d1a:	466b      	mov	r3, sp
	W.u8[1] = H;
 8003d1c:	9205      	str	r2, [sp, #20]
	return W.u16[0];
 8003d1e:	8a99      	ldrh	r1, [r3, #20]
    u8currentBit = (uint8_t) (u16coil % 16);
 8003d20:	230f      	movs	r3, #15
    u16currentRegister = (u16coil / 16);
 8003d22:	090a      	lsrs	r2, r1, #4
    u8currentBit = (uint8_t) (u16coil % 16);
 8003d24:	4019      	ands	r1, r3
    bitWrite(
 8003d26:	0023      	movs	r3, r4
 8003d28:	3398      	adds	r3, #152	; 0x98
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	7de5      	ldrb	r5, [r4, #23]
 8003d32:	408b      	lsls	r3, r1
 8003d34:	5a81      	ldrh	r1, [r0, r2]
 8003d36:	2dff      	cmp	r5, #255	; 0xff
 8003d38:	d10c      	bne.n	8003d54 <StartTaskModbusSlave+0x3dc>
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	5283      	strh	r3, [r0, r2]
    modH->u8BufferSize = RESPONSE_SIZE;
 8003d3e:	0023      	movs	r3, r4
 8003d40:	2206      	movs	r2, #6
 8003d42:	3393      	adds	r3, #147	; 0x93
 8003d44:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7ff fdce 	bl	80038e8 <sendTxBuffer>
				modH->i8state = process_FC6(modH);
 8003d4c:	0023      	movs	r3, r4
 8003d4e:	2208      	movs	r2, #8
 8003d50:	33a7      	adds	r3, #167	; 0xa7
 8003d52:	e7bb      	b.n	8003ccc <StartTaskModbusSlave+0x354>
    bitWrite(
 8003d54:	4399      	bics	r1, r3
 8003d56:	5281      	strh	r1, [r0, r2]
    modH->u8BufferSize = 6;
 8003d58:	e7f1      	b.n	8003d3e <StartTaskModbusSlave+0x3c6>
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	080062e0 	.word	0x080062e0
 8003d60:	ffff00ff 	.word	0xffff00ff
	W.u8[0] = L;
 8003d64:	26ff      	movs	r6, #255	; 0xff
 8003d66:	9903      	ldr	r1, [sp, #12]
 8003d68:	7da3      	ldrb	r3, [r4, #22]
 8003d6a:	43b1      	bics	r1, r6
    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003d6c:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003d6e:	4319      	orrs	r1, r3
	W.u8[1] = H;
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <StartTaskModbusSlave+0x53c>)
	W.u8[0] = L;
 8003d72:	9d04      	ldr	r5, [sp, #16]
	W.u8[1] = H;
 8003d74:	0212      	lsls	r2, r2, #8
 8003d76:	4019      	ands	r1, r3
 8003d78:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003d7a:	7e20      	ldrb	r0, [r4, #24]
	W.u8[1] = H;
 8003d7c:	9103      	str	r1, [sp, #12]
	W.u8[0] = L;
 8003d7e:	43b5      	bics	r5, r6
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003d80:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003d82:	4305      	orrs	r5, r0
	W.u8[1] = H;
 8003d84:	0209      	lsls	r1, r1, #8
 8003d86:	402b      	ands	r3, r5
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	9304      	str	r3, [sp, #16]
	return W.u16[0];
 8003d8c:	466a      	mov	r2, sp
    modH->u16regs[ u16add ] = u16val;
 8003d8e:	0023      	movs	r3, r4
	return W.u16[0];
 8003d90:	8992      	ldrh	r2, [r2, #12]
    modH->u16regs[ u16add ] = u16val;
 8003d92:	3398      	adds	r3, #152	; 0x98
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	0052      	lsls	r2, r2, #1
 8003d9a:	528b      	strh	r3, [r1, r2]
 8003d9c:	e7cf      	b.n	8003d3e <StartTaskModbusSlave+0x3c6>
	W.u8[0] = L;
 8003d9e:	26ff      	movs	r6, #255	; 0xff
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	7da2      	ldrb	r2, [r4, #22]
 8003da4:	43b1      	bics	r1, r6
 8003da6:	4311      	orrs	r1, r2
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003da8:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 8003daa:	4a42      	ldr	r2, [pc, #264]	; (8003eb4 <StartTaskModbusSlave+0x53c>)
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4011      	ands	r1, r2
 8003db0:	4319      	orrs	r1, r3
	return W.u16[0];
 8003db2:	466b      	mov	r3, sp
	W.u8[0] = L;
 8003db4:	9d02      	ldr	r5, [sp, #8]
 8003db6:	7e20      	ldrb	r0, [r4, #24]
	W.u8[1] = H;
 8003db8:	9101      	str	r1, [sp, #4]
	W.u8[0] = L;
 8003dba:	43b5      	bics	r5, r6
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003dbc:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003dbe:	4305      	orrs	r5, r0
	return W.u16[0];
 8003dc0:	889b      	ldrh	r3, [r3, #4]
	W.u8[1] = H;
 8003dc2:	0209      	lsls	r1, r1, #8
 8003dc4:	402a      	ands	r2, r5
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	9202      	str	r2, [sp, #8]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003dca:	18d2      	adds	r2, r2, r3
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	0027      	movs	r7, r4
 8003dd0:	9216      	str	r2, [sp, #88]	; 0x58
    u8frameByte = 7;
 8003dd2:	2007      	movs	r0, #7
    u8bitsno = 0;
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	3798      	adds	r7, #152	; 0x98
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003dd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	d0af      	beq.n	8003d3e <StartTaskModbusSlave+0x3c6>
        bitWrite(
 8003dde:	210f      	movs	r1, #15
 8003de0:	2501      	movs	r5, #1
 8003de2:	4019      	ands	r1, r3
 8003de4:	408d      	lsls	r5, r1
 8003de6:	b2a9      	uxth	r1, r5
 8003de8:	9114      	str	r1, [sp, #80]	; 0x50
 8003dea:	683d      	ldr	r5, [r7, #0]
 8003dec:	0919      	lsrs	r1, r3, #4
 8003dee:	0049      	lsls	r1, r1, #1
 8003df0:	186e      	adds	r6, r5, r1
 8003df2:	5a69      	ldrh	r1, [r5, r1]
        bTemp = bitRead(
 8003df4:	1825      	adds	r5, r4, r0
 8003df6:	7ced      	ldrb	r5, [r5, #19]
 8003df8:	9115      	str	r1, [sp, #84]	; 0x54
 8003dfa:	4115      	asrs	r5, r2
        bitWrite(
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	420d      	tst	r5, r1
 8003e00:	d00d      	beq.n	8003e1e <StartTaskModbusSlave+0x4a6>
 8003e02:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003e04:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003e06:	4329      	orrs	r1, r5
        u8bitsno ++;
 8003e08:	3201      	adds	r2, #1
 8003e0a:	b2d2      	uxtb	r2, r2
        bitWrite(
 8003e0c:	8031      	strh	r1, [r6, #0]
        if (u8bitsno > 7)
 8003e0e:	2a07      	cmp	r2, #7
 8003e10:	d902      	bls.n	8003e18 <StartTaskModbusSlave+0x4a0>
            u8bitsno = 0;
 8003e12:	2200      	movs	r2, #0
            u8frameByte++;
 8003e14:	3001      	adds	r0, #1
 8003e16:	b2c0      	uxtb	r0, r0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	e7dc      	b.n	8003dd8 <StartTaskModbusSlave+0x460>
        bitWrite(
 8003e1e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003e20:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003e22:	43a9      	bics	r1, r5
 8003e24:	e7f0      	b.n	8003e08 <StartTaskModbusSlave+0x490>
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8003e26:	7d62      	ldrb	r2, [r4, #21]
 8003e28:	7da3      	ldrb	r3, [r4, #22]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003e2a:	7de1      	ldrb	r1, [r4, #23]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8003e2c:	0212      	lsls	r2, r2, #8
 8003e2e:	431a      	orrs	r2, r3
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003e30:	7e23      	ldrb	r3, [r4, #24]
 8003e32:	0209      	lsls	r1, r1, #8
 8003e34:	430b      	orrs	r3, r1
    modH->u8Buffer[ NB_HI ]   = 0;
 8003e36:	2100      	movs	r1, #0
 8003e38:	75e1      	strb	r1, [r4, #23]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003e3a:	0021      	movs	r1, r4
 8003e3c:	2006      	movs	r0, #6
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003e3e:	b21b      	sxth	r3, r3
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003e40:	3193      	adds	r1, #147	; 0x93
        modH->u16regs[ u16StartAdd + i ] = temp;
 8003e42:	0026      	movs	r6, r4
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8003e44:	7623      	strb	r3, [r4, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003e46:	7008      	strb	r0, [r1, #0]
    for (i = 0; i < u16regsno; i++)
 8003e48:	0021      	movs	r1, r4
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	191b      	adds	r3, r3, r4
 8003e50:	0052      	lsls	r2, r2, #1
 8003e52:	9314      	str	r3, [sp, #80]	; 0x50
        modH->u16regs[ u16StartAdd + i ] = temp;
 8003e54:	3698      	adds	r6, #152	; 0x98
    for (i = 0; i < u16regsno; i++)
 8003e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d103      	bne.n	8003e64 <StartTaskModbusSlave+0x4ec>
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003e5c:	0023      	movs	r3, r4
 8003e5e:	3393      	adds	r3, #147	; 0x93
 8003e60:	781d      	ldrb	r5, [r3, #0]
 8003e62:	e6d3      	b.n	8003c0c <StartTaskModbusSlave+0x294>
	W.u8[0] = L;
 8003e64:	23ff      	movs	r3, #255	; 0xff
 8003e66:	9d00      	ldr	r5, [sp, #0]
 8003e68:	7ecf      	ldrb	r7, [r1, #27]
 8003e6a:	439d      	bics	r5, r3
 8003e6c:	433d      	orrs	r5, r7
	W.u8[1] = H;
 8003e6e:	002f      	movs	r7, r5
        temp = word(
 8003e70:	7e88      	ldrb	r0, [r1, #26]
	W.u8[1] = H;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <StartTaskModbusSlave+0x53c>)
 8003e74:	0200      	lsls	r0, r0, #8
 8003e76:	401f      	ands	r7, r3
        modH->u16regs[ u16StartAdd + i ] = temp;
 8003e78:	6833      	ldr	r3, [r6, #0]
	W.u8[1] = H;
 8003e7a:	4307      	orrs	r7, r0
        modH->u16regs[ u16StartAdd + i ] = temp;
 8003e7c:	529f      	strh	r7, [r3, r2]
	W.u8[1] = H;
 8003e7e:	9700      	str	r7, [sp, #0]
    for (i = 0; i < u16regsno; i++)
 8003e80:	3102      	adds	r1, #2
 8003e82:	3202      	adds	r2, #2
 8003e84:	e7e7      	b.n	8003e56 <StartTaskModbusSlave+0x4de>
	    switch ( modH->u8Buffer[ FUNC ] )
 8003e86:	1e68      	subs	r0, r5, #1
 8003e88:	280f      	cmp	r0, #15
 8003e8a:	d900      	bls.n	8003e8e <StartTaskModbusSlave+0x516>
 8003e8c:	e630      	b.n	8003af0 <StartTaskModbusSlave+0x178>
 8003e8e:	f7fc f94f 	bl	8000130 <__gnu_thumb1_case_shi>
 8003e92:	fdcb      	.short	0xfdcb
 8003e94:	fe5dfdcb 	.word	0xfe5dfdcb
 8003e98:	fe13fe5d 	.word	0xfe13fe5d
 8003e9c:	fe2ffe4f 	.word	0xfe2ffe4f
 8003ea0:	fe2ffe2f 	.word	0xfe2ffe2f
 8003ea4:	fe2ffe2f 	.word	0xfe2ffe2f
 8003ea8:	fe2ffe2f 	.word	0xfe2ffe2f
 8003eac:	fdcbfe2f 	.word	0xfdcbfe2f
 8003eb0:	fe5d      	.short	0xfe5d
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	ffff00ff 	.word	0xffff00ff

08003eb8 <StartTaskModbusMaster>:
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	0004      	movs	r4, r0
 8003ebc:	b08f      	sub	sp, #60	; 0x3c
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003ebe:	0023      	movs	r3, r4
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	ad0a      	add	r5, sp, #40	; 0x28
 8003ec4:	33a8      	adds	r3, #168	; 0xa8
 8003ec6:	0029      	movs	r1, r5
 8003ec8:	4252      	negs	r2, r2
 8003eca:	6818      	ldr	r0, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ecc:	0026      	movs	r6, r4
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003ece:	f000 ff30 	bl	8004d32 <xQueueReceive>
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ed2:	2101      	movs	r1, #1
     SendQuery(modH, telegram);
 8003ed4:	782b      	ldrb	r3, [r5, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ed6:	36b8      	adds	r6, #184	; 0xb8
     SendQuery(modH, telegram);
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	786b      	ldrb	r3, [r5, #1]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003edc:	4249      	negs	r1, r1
     SendQuery(modH, telegram);
 8003ede:	9308      	str	r3, [sp, #32]
 8003ee0:	886b      	ldrh	r3, [r5, #2]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003ee2:	6830      	ldr	r0, [r6, #0]
     SendQuery(modH, telegram);
 8003ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee6:	88ad      	ldrh	r5, [r5, #4]
 8003ee8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003eea:	f000 ffa7 	bl	8004e3c <xQueueSemaphoreTake>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8003eee:	0022      	movs	r2, r4
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	32a7      	adds	r2, #167	; 0xa7
 8003ef4:	9206      	str	r2, [sp, #24]
 8003ef6:	5651      	ldrsb	r1, [r2, r1]
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8003ef8:	7a23      	ldrb	r3, [r4, #8]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8003efa:	22fe      	movs	r2, #254	; 0xfe
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d103      	bne.n	8003f08 <StartTaskModbusMaster+0x50>
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8003f00:	1e5a      	subs	r2, r3, #1
 8003f02:	4193      	sbcs	r3, r2
 8003f04:	425b      	negs	r3, r3
 8003f06:	b2da      	uxtb	r2, r3
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8003f08:	9b07      	ldr	r3, [sp, #28]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2bf6      	cmp	r3, #246	; 0xf6
 8003f10:	d823      	bhi.n	8003f5a <StartTaskModbusMaster+0xa2>
	if(error)
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d023      	beq.n	8003f5e <StartTaskModbusMaster+0xa6>
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8003f16:	2300      	movs	r3, #0
		 modH->i8lastError = error;
 8003f18:	74a2      	strb	r2, [r4, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	6830      	ldr	r0, [r6, #0]
 8003f20:	f000 fe2d 	bl	8004b7e <xQueueGenericSend>
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003f24:	2101      	movs	r1, #1
 8003f26:	2001      	movs	r0, #1
 8003f28:	4249      	negs	r1, r1
 8003f2a:	f001 fd41 	bl	80059b0 <ulTaskNotifyTake>
      modH->i8lastError = 0;
 8003f2e:	2300      	movs	r3, #0
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003f30:	0005      	movs	r5, r0
      modH->i8lastError = 0;
 8003f32:	74a3      	strb	r3, [r4, #18]
      if(ulNotificationValue)
 8003f34:	4298      	cmp	r0, r3
 8003f36:	d100      	bne.n	8003f3a <StartTaskModbusMaster+0x82>
 8003f38:	e093      	b.n	8004062 <StartTaskModbusMaster+0x1aa>
    	  modH->i8state = COM_IDLE;
 8003f3a:	9a06      	ldr	r2, [sp, #24]
    	  modH->u16errCnt++;
 8003f3c:	0021      	movs	r1, r4
    	  modH->i8state = COM_IDLE;
 8003f3e:	7013      	strb	r3, [r2, #0]
    	  modH->i8lastError = ERR_TIME_OUT;
 8003f40:	22f8      	movs	r2, #248	; 0xf8
    	  modH->u16errCnt++;
 8003f42:	31a0      	adds	r1, #160	; 0xa0
    	  modH->i8lastError = ERR_TIME_OUT;
 8003f44:	74a2      	strb	r2, [r4, #18]
    	  modH->u16errCnt++;
 8003f46:	880a      	ldrh	r2, [r1, #0]
 8003f48:	3201      	adds	r2, #1
 8003f4a:	800a      	strh	r2, [r1, #0]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	2108      	movs	r1, #8
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003f50:	4249      	negs	r1, r1
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003f52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f54:	f001 fd5e 	bl	8005a14 <xTaskGenericNotify>
	  continue;
 8003f58:	e7b1      	b.n	8003ebe <StartTaskModbusMaster+0x6>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8003f5a:	22f7      	movs	r2, #247	; 0xf7
 8003f5c:	e7db      	b.n	8003f16 <StartTaskModbusMaster+0x5e>
	modH->u16regs = telegram.u16reg;
 8003f5e:	0023      	movs	r3, r4
 8003f60:	3398      	adds	r3, #152	; 0x98
 8003f62:	601f      	str	r7, [r3, #0]
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8003f64:	9b07      	ldr	r3, [sp, #28]
 8003f66:	74e3      	strb	r3, [r4, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8003f68:	9b08      	ldr	r3, [sp, #32]
 8003f6a:	7523      	strb	r3, [r4, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	7563      	strb	r3, [r4, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8003f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f74:	75a3      	strb	r3, [r4, #22]
	switch( telegram.u8fct )
 8003f76:	9b08      	ldr	r3, [sp, #32]
 8003f78:	1e58      	subs	r0, r3, #1
 8003f7a:	280f      	cmp	r0, #15
 8003f7c:	d810      	bhi.n	8003fa0 <StartTaskModbusMaster+0xe8>
 8003f7e:	f7fc f8cd 	bl	800011c <__gnu_thumb1_case_uqi>
 8003f82:	0808      	.short	0x0808
 8003f84:	29210808 	.word	0x29210808
 8003f88:	0f0f0f0f 	.word	0x0f0f0f0f
 8003f8c:	0f0f0f0f 	.word	0x0f0f0f0f
 8003f90:	522e      	.short	0x522e
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003f92:	0a2b      	lsrs	r3, r5, #8
 8003f94:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003f96:	7625      	strb	r5, [r4, #24]
	    modH->u8BufferSize = 6;
 8003f98:	0023      	movs	r3, r4
 8003f9a:	2206      	movs	r2, #6
 8003f9c:	3393      	adds	r3, #147	; 0x93
 8003f9e:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(modH->ModBusSphrHandle);
 8003fa0:	0020      	movs	r0, r4
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	30b8      	adds	r0, #184	; 0xb8
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	0019      	movs	r1, r3
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	f000 fde7 	bl	8004b7e <xQueueGenericSend>
	sendTxBuffer(modH);
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f7ff fc99 	bl	80038e8 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8003fb6:	0023      	movs	r3, r4
 8003fb8:	2201      	movs	r2, #1
 8003fba:	33a7      	adds	r3, #167	; 0xa7
 8003fbc:	701a      	strb	r2, [r3, #0]
	modH->i8lastError = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	74a3      	strb	r3, [r4, #18]
	return 0;
 8003fc2:	e7af      	b.n	8003f24 <StartTaskModbusMaster+0x6c>
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8003fc4:	883b      	ldrh	r3, [r7, #0]
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	4193      	sbcs	r3, r2
 8003fca:	425b      	negs	r3, r3
 8003fcc:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8003fce:	2300      	movs	r3, #0
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8003fd0:	7623      	strb	r3, [r4, #24]
 8003fd2:	e7e1      	b.n	8003f98 <StartTaskModbusMaster+0xe0>
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8003fd4:	883b      	ldrh	r3, [r7, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8003fda:	883b      	ldrh	r3, [r7, #0]
 8003fdc:	e7f8      	b.n	8003fd0 <StartTaskModbusMaster+0x118>
	    u8regsno = telegram.u16CoilsNo / 16;
 8003fde:	092b      	lsrs	r3, r5, #4
	    u8bytesno = u8regsno * 2;
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
	    if ((telegram.u16CoilsNo % 16) != 0)
 8003fe4:	072a      	lsls	r2, r5, #28
 8003fe6:	d001      	beq.n	8003fec <StartTaskModbusMaster+0x134>
	        u8bytesno++;
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2db      	uxtb	r3, r3
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003fec:	0a2a      	lsrs	r2, r5, #8
	    modH->u8BufferSize = 7;
 8003fee:	0021      	movs	r1, r4
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003ff0:	75e2      	strb	r2, [r4, #23]
	    modH->u8BufferSize = 7;
 8003ff2:	2207      	movs	r2, #7
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8003ff4:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8003ff6:	3193      	adds	r1, #147	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003ff8:	b29b      	uxth	r3, r3
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003ffa:	7625      	strb	r5, [r4, #24]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003ffc:	469c      	mov	ip, r3
	    modH->u8BufferSize = 7;
 8003ffe:	700a      	strb	r2, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004000:	2200      	movs	r2, #0
 8004002:	4562      	cmp	r2, ip
 8004004:	d2cc      	bcs.n	8003fa0 <StartTaskModbusMaster+0xe8>
	        if(i%2)
 8004006:	2301      	movs	r3, #1
 8004008:	0850      	lsrs	r0, r2, #1
 800400a:	0040      	lsls	r0, r0, #1
 800400c:	5bc5      	ldrh	r5, [r0, r7]
 800400e:	7808      	ldrb	r0, [r1, #0]
 8004010:	1826      	adds	r6, r4, r0
 8004012:	421a      	tst	r2, r3
 8004014:	d005      	beq.n	8004022 <StartTaskModbusMaster+0x16a>
	        modH->u8BufferSize++;
 8004016:	3001      	adds	r0, #1
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004018:	3201      	adds	r2, #1
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800401a:	74f5      	strb	r5, [r6, #19]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800401c:	b292      	uxth	r2, r2
	        modH->u8BufferSize++;
 800401e:	7008      	strb	r0, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004020:	e7ef      	b.n	8004002 <StartTaskModbusMaster+0x14a>
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8004022:	0a2d      	lsrs	r5, r5, #8
 8004024:	e7f7      	b.n	8004016 <StartTaskModbusMaster+0x15e>
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004026:	0a2b      	lsrs	r3, r5, #8
 8004028:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800402a:	b2eb      	uxtb	r3, r5
 800402c:	7623      	strb	r3, [r4, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8004032:	0023      	movs	r3, r4
 8004034:	2207      	movs	r2, #7
 8004036:	3393      	adds	r3, #147	; 0x93
 8004038:	701a      	strb	r2, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800403a:	003a      	movs	r2, r7
 800403c:	006d      	lsls	r5, r5, #1
 800403e:	197d      	adds	r5, r7, r5
 8004040:	42aa      	cmp	r2, r5
 8004042:	d0ad      	beq.n	8003fa0 <StartTaskModbusMaster+0xe8>
	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8004044:	7818      	ldrb	r0, [r3, #0]
 8004046:	8811      	ldrh	r1, [r2, #0]
 8004048:	1826      	adds	r6, r4, r0
 800404a:	0a09      	lsrs	r1, r1, #8
 800404c:	74f1      	strb	r1, [r6, #19]
	        modH->u8BufferSize++;
 800404e:	1c41      	adds	r1, r0, #1
 8004050:	b2c9      	uxtb	r1, r1
 8004052:	7019      	strb	r1, [r3, #0]
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8004054:	8816      	ldrh	r6, [r2, #0]
 8004056:	1861      	adds	r1, r4, r1
	        modH->u8BufferSize++;
 8004058:	3002      	adds	r0, #2
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800405a:	74ce      	strb	r6, [r1, #19]
	        modH->u8BufferSize++;
 800405c:	3202      	adds	r2, #2
 800405e:	7018      	strb	r0, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004060:	e7ee      	b.n	8004040 <StartTaskModbusMaster+0x188>
	  if ( modH->u8BufferSize < 6){
 8004062:	0026      	movs	r6, r4
 8004064:	0027      	movs	r7, r4
      getRxBuffer(modH);
 8004066:	0020      	movs	r0, r4
	  if ( modH->u8BufferSize < 6){
 8004068:	3693      	adds	r6, #147	; 0x93
      getRxBuffer(modH);
 800406a:	f7ff fb29 	bl	80036c0 <getRxBuffer>
	  if ( modH->u8BufferSize < 6){
 800406e:	7833      	ldrb	r3, [r6, #0]
 8004070:	3713      	adds	r7, #19
 8004072:	2b05      	cmp	r3, #5
 8004074:	d80c      	bhi.n	8004090 <StartTaskModbusMaster+0x1d8>
		  modH->i8state = COM_IDLE;
 8004076:	9b06      	ldr	r3, [sp, #24]
		  modH->u16errCnt++;
 8004078:	0022      	movs	r2, r4
		  modH->i8state = COM_IDLE;
 800407a:	701d      	strb	r5, [r3, #0]
		  modH->i8lastError = ERR_BAD_SIZE;
 800407c:	23fa      	movs	r3, #250	; 0xfa
		  modH->u16errCnt++;
 800407e:	32a0      	adds	r2, #160	; 0xa0
		  modH->i8lastError = ERR_BAD_SIZE;
 8004080:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 8004082:	8813      	ldrh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004084:	2106      	movs	r1, #6
		  modH->u16errCnt++;
 8004086:	3301      	adds	r3, #1
 8004088:	8013      	strh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800408a:	002b      	movs	r3, r5
 800408c:	2203      	movs	r2, #3
 800408e:	e75f      	b.n	8003f50 <StartTaskModbusMaster+0x98>
	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8004090:	0020      	movs	r0, r4
 8004092:	9500      	str	r5, [sp, #0]
 8004094:	30b4      	adds	r0, #180	; 0xb4
 8004096:	002b      	movs	r3, r5
 8004098:	002a      	movs	r2, r5
 800409a:	2103      	movs	r1, #3
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f001 fe3d 	bl	8005d1c <xTimerGenericCommand>
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80040a2:	7836      	ldrb	r6, [r6, #0]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80040a4:	0038      	movs	r0, r7
 80040a6:	1eb1      	subs	r1, r6, #2
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	f7ff fbfd 	bl	80038a8 <calcCRC>
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80040ae:	19a6      	adds	r6, r4, r6
 80040b0:	7c72      	ldrb	r2, [r6, #17]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80040b2:	7cb3      	ldrb	r3, [r6, #18]
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80040b4:	0212      	lsls	r2, r2, #8
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80040b6:	4313      	orrs	r3, r2
 80040b8:	4283      	cmp	r3, r0
 80040ba:	d00d      	beq.n	80040d8 <StartTaskModbusMaster+0x220>
    	modH->u16errCnt ++;
 80040bc:	0022      	movs	r2, r4
 80040be:	2104      	movs	r1, #4
 80040c0:	32a0      	adds	r2, #160	; 0xa0
 80040c2:	8813      	ldrh	r3, [r2, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	8013      	strh	r3, [r2, #0]
        return ERR_BAD_CRC;
 80040c8:	4249      	negs	r1, r1
		 modH->i8state = COM_IDLE;
 80040ca:	0022      	movs	r2, r4
 80040cc:	2300      	movs	r3, #0
 80040ce:	32a7      	adds	r2, #167	; 0xa7
 80040d0:	7013      	strb	r3, [r2, #0]
         modH->i8lastError = u8exception;
 80040d2:	74a1      	strb	r1, [r4, #18]
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80040d4:	2203      	movs	r2, #3
 80040d6:	e73c      	b.n	8003f52 <StartTaskModbusMaster+0x9a>
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80040d8:	2114      	movs	r1, #20
 80040da:	5661      	ldrsb	r1, [r4, r1]
 80040dc:	002b      	movs	r3, r5
 80040de:	7d22      	ldrb	r2, [r4, #20]
 80040e0:	2900      	cmp	r1, #0
 80040e2:	da06      	bge.n	80040f2 <StartTaskModbusMaster+0x23a>
    	modH->u16errCnt ++;
 80040e4:	0022      	movs	r2, r4
 80040e6:	32a0      	adds	r2, #160	; 0xa0
 80040e8:	8813      	ldrh	r3, [r2, #0]
 80040ea:	2105      	movs	r1, #5
 80040ec:	3301      	adds	r3, #1
 80040ee:	8013      	strh	r3, [r2, #0]
        return ERR_EXCEPTION;
 80040f0:	e7ea      	b.n	80040c8 <StartTaskModbusMaster+0x210>
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80040f2:	493b      	ldr	r1, [pc, #236]	; (80041e0 <StartTaskModbusMaster+0x328>)
 80040f4:	5c59      	ldrb	r1, [r3, r1]
 80040f6:	4291      	cmp	r1, r2
 80040f8:	d009      	beq.n	800410e <StartTaskModbusMaster+0x256>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80040fa:	3301      	adds	r3, #1
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d1f8      	bne.n	80040f2 <StartTaskModbusMaster+0x23a>
    	modH->u16errCnt ++;
 8004100:	0022      	movs	r2, r4
 8004102:	32a0      	adds	r2, #160	; 0xa0
 8004104:	8813      	ldrh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 8004106:	2101      	movs	r1, #1
    	modH->u16errCnt ++;
 8004108:	3301      	adds	r3, #1
 800410a:	8013      	strh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 800410c:	e7dd      	b.n	80040ca <StartTaskModbusMaster+0x212>
    return 0; // OK, no exception code thrown
 800410e:	2600      	movs	r6, #0
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004110:	0023      	movs	r3, r4
 8004112:	2101      	movs	r1, #1
 8004114:	33b8      	adds	r3, #184	; 0xb8
	  modH->i8lastError = u8exception;
 8004116:	74a6      	strb	r6, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	4249      	negs	r1, r1
 800411c:	f000 fe8e 	bl	8004e3c <xQueueSemaphoreTake>
	  switch( modH->u8Buffer[ FUNC ] )
 8004120:	7d23      	ldrb	r3, [r4, #20]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d806      	bhi.n	8004134 <StartTaskModbusMaster+0x27c>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03d      	beq.n	80041a6 <StartTaskModbusMaster+0x2ee>
 800412a:	0027      	movs	r7, r4
 800412c:	0033      	movs	r3, r6
 800412e:	20ff      	movs	r0, #255	; 0xff
 8004130:	3798      	adds	r7, #152	; 0x98
 8004132:	e035      	b.n	80041a0 <StartTaskModbusMaster+0x2e8>
 8004134:	3b03      	subs	r3, #3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d835      	bhi.n	80041a6 <StartTaskModbusMaster+0x2ee>
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800413a:	0022      	movs	r2, r4
	W.u8[0] = L;
 800413c:	21ff      	movs	r1, #255	; 0xff
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800413e:	3298      	adds	r2, #152	; 0x98
 8004140:	b2ef      	uxtb	r7, r5
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8004142:	7d66      	ldrb	r6, [r4, #21]
 8004144:	007b      	lsls	r3, r7, #1
 8004146:	3303      	adds	r3, #3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	0876      	lsrs	r6, r6, #1
 800414c:	42b7      	cmp	r7, r6
 800414e:	d22a      	bcs.n	80041a6 <StartTaskModbusMaster+0x2ee>
	W.u8[0] = L;
 8004150:	9803      	ldr	r0, [sp, #12]
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8004152:	18e7      	adds	r7, r4, r3
 8004154:	7cfb      	ldrb	r3, [r7, #19]
	W.u8[0] = L;
 8004156:	7d3f      	ldrb	r7, [r7, #20]
 8004158:	4388      	bics	r0, r1
 800415a:	4338      	orrs	r0, r7
	W.u8[1] = H;
 800415c:	0007      	movs	r7, r0
 800415e:	4821      	ldr	r0, [pc, #132]	; (80041e4 <StartTaskModbusMaster+0x32c>)
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	4007      	ands	r7, r0
 8004164:	431f      	orrs	r7, r3
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	006e      	lsls	r6, r5, #1
	W.u8[1] = H;
 800416a:	9703      	str	r7, [sp, #12]
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800416c:	539f      	strh	r7, [r3, r6]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800416e:	3501      	adds	r5, #1
 8004170:	e7e6      	b.n	8004140 <StartTaskModbusMaster+0x288>
        if(i%2)
 8004172:	18e2      	adds	r2, r4, r3
 8004174:	683d      	ldr	r5, [r7, #0]
 8004176:	7d91      	ldrb	r1, [r2, #22]
 8004178:	085a      	lsrs	r2, r3, #1
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	18ae      	adds	r6, r5, r2
 800417e:	5aaa      	ldrh	r2, [r5, r2]
 8004180:	2501      	movs	r5, #1
 8004182:	422b      	tst	r3, r5
 8004184:	d01f      	beq.n	80041c6 <StartTaskModbusMaster+0x30e>
	W.u8[0] = L;
 8004186:	9d05      	ldr	r5, [sp, #20]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	4385      	bics	r5, r0
 800418c:	4315      	orrs	r5, r2
	W.u8[1] = H;
 800418e:	002a      	movs	r2, r5
 8004190:	4d14      	ldr	r5, [pc, #80]	; (80041e4 <StartTaskModbusMaster+0x32c>)
 8004192:	0209      	lsls	r1, r1, #8
 8004194:	402a      	ands	r2, r5
 8004196:	430a      	orrs	r2, r1
 8004198:	9205      	str	r2, [sp, #20]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800419a:	3301      	adds	r3, #1
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800419c:	8032      	strh	r2, [r6, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	7d62      	ldrb	r2, [r4, #21]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d8e5      	bhi.n	8004172 <StartTaskModbusMaster+0x2ba>
	  modH->i8state = COM_IDLE;
 80041a6:	0023      	movs	r3, r4
 80041a8:	2500      	movs	r5, #0
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80041aa:	0020      	movs	r0, r4
	  modH->i8state = COM_IDLE;
 80041ac:	33a7      	adds	r3, #167	; 0xa7
 80041ae:	701d      	strb	r5, [r3, #0]
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80041b0:	30b8      	adds	r0, #184	; 0xb8
 80041b2:	002b      	movs	r3, r5
 80041b4:	0029      	movs	r1, r5
 80041b6:	002a      	movs	r2, r5
 80041b8:	6800      	ldr	r0, [r0, #0]
 80041ba:	f000 fce0 	bl	8004b7e <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80041be:	2112      	movs	r1, #18
 80041c0:	002b      	movs	r3, r5
 80041c2:	5661      	ldrsb	r1, [r4, r1]
 80041c4:	e786      	b.n	80040d4 <StartTaskModbusMaster+0x21c>
	W.u8[0] = L;
 80041c6:	9d04      	ldr	r5, [sp, #16]
	W.u8[1] = H;
 80041c8:	0a12      	lsrs	r2, r2, #8
	W.u8[0] = L;
 80041ca:	4385      	bics	r5, r0
 80041cc:	430d      	orrs	r5, r1
	W.u8[1] = H;
 80041ce:	0029      	movs	r1, r5
 80041d0:	4d04      	ldr	r5, [pc, #16]	; (80041e4 <StartTaskModbusMaster+0x32c>)
 80041d2:	0212      	lsls	r2, r2, #8
 80041d4:	4029      	ands	r1, r5
 80041d6:	4311      	orrs	r1, r2
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80041d8:	000a      	movs	r2, r1
	W.u8[1] = H;
 80041da:	9104      	str	r1, [sp, #16]
	return W.u16[0];
 80041dc:	e7dd      	b.n	800419a <StartTaskModbusMaster+0x2e2>
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	080062e0 	.word	0x080062e0
 80041e4:	ffff00ff 	.word	0xffff00ff

080041e8 <HAL_UART_TxCpltCallback>:
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80041e8:	2300      	movs	r3, #0
{
 80041ea:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < numberHandlers; i++ )
 80041ec:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_UART_TxCpltCallback+0x48>)
{
 80041ee:	b085      	sub	sp, #20
	for (i = 0; i < numberHandlers; i++ )
 80041f0:	7811      	ldrb	r1, [r2, #0]
	{
	   	if (mHandlers[i]->port == huart )
 80041f2:	4c10      	ldr	r4, [pc, #64]	; (8004234 <HAL_UART_TxCpltCallback+0x4c>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80041f4:	9303      	str	r3, [sp, #12]
	for (i = 0; i < numberHandlers; i++ )
 80041f6:	4299      	cmp	r1, r3
 80041f8:	dd11      	ble.n	800421e <HAL_UART_TxCpltCallback+0x36>
	   	if (mHandlers[i]->port == huart )
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	58a2      	ldr	r2, [r4, r2]
 80041fe:	6855      	ldr	r5, [r2, #4]
 8004200:	4285      	cmp	r5, r0
 8004202:	d10e      	bne.n	8004222 <HAL_UART_TxCpltCallback+0x3a>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8004204:	32ac      	adds	r2, #172	; 0xac
 8004206:	ab03      	add	r3, sp, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	0010      	movs	r0, r2
 800420c:	2300      	movs	r3, #0
 800420e:	6800      	ldr	r0, [r0, #0]
 8004210:	001a      	movs	r2, r3
 8004212:	0019      	movs	r1, r3
 8004214:	f001 fc62 	bl	8005adc <xTaskGenericNotifyFromISR>

	   		break;

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_UART_TxCpltCallback+0x3e>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800421e:	b005      	add	sp, #20
 8004220:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < numberHandlers; i++ )
 8004222:	3301      	adds	r3, #1
 8004224:	e7e7      	b.n	80041f6 <HAL_UART_TxCpltCallback+0xe>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_UART_TxCpltCallback+0x50>)
 800422a:	0552      	lsls	r2, r2, #21
 800422c:	601a      	str	r2, [r3, #0]
}
 800422e:	e7f6      	b.n	800421e <HAL_UART_TxCpltCallback+0x36>
 8004230:	20000090 	.word	0x20000090
 8004234:	2000105c 	.word	0x2000105c
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800423c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800423e:	2300      	movs	r3, #0

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8004240:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <HAL_UART_RxCpltCallback+0x70>)
    {
    	if (mHandlers[i]->port == UartHandle  )
 8004242:	4c1b      	ldr	r4, [pc, #108]	; (80042b0 <HAL_UART_RxCpltCallback+0x74>)
    for (i = 0; i < numberHandlers; i++ )
 8004244:	7811      	ldrb	r1, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004246:	9303      	str	r3, [sp, #12]
    for (i = 0; i < numberHandlers; i++ )
 8004248:	4299      	cmp	r1, r3
 800424a:	dd27      	ble.n	800429c <HAL_UART_RxCpltCallback+0x60>
    	if (mHandlers[i]->port == UartHandle  )
 800424c:	009d      	lsls	r5, r3, #2
 800424e:	5962      	ldr	r2, [r4, r5]
 8004250:	6856      	ldr	r6, [r2, #4]
 8004252:	4286      	cmp	r6, r0
 8004254:	d123      	bne.n	800429e <HAL_UART_RxCpltCallback+0x62>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8004256:	23a0      	movs	r3, #160	; 0xa0
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	5cd6      	ldrb	r6, [r2, r3]
 800425c:	2e01      	cmp	r6, #1
 800425e:	d11d      	bne.n	800429c <HAL_UART_RxCpltCallback+0x60>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8004260:	0013      	movs	r3, r2
 8004262:	32bc      	adds	r2, #188	; 0xbc
 8004264:	33a6      	adds	r3, #166	; 0xa6
 8004266:	0010      	movs	r0, r2
 8004268:	7819      	ldrb	r1, [r3, #0]
 800426a:	f7ff f9d7 	bl	800361c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800426e:	5963      	ldr	r3, [r4, r5]
 8004270:	0032      	movs	r2, r6
 8004272:	0019      	movs	r1, r3
 8004274:	6858      	ldr	r0, [r3, #4]
 8004276:	31a6      	adds	r1, #166	; 0xa6
 8004278:	f7ff f8b8 	bl	80033ec <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800427c:	5963      	ldr	r3, [r4, r5]
 800427e:	33b0      	adds	r3, #176	; 0xb0
 8004280:	681c      	ldr	r4, [r3, #0]
 8004282:	f001 f8db 	bl	800543c <xTaskGetTickCountFromISR>
 8004286:	2300      	movs	r3, #0
 8004288:	0002      	movs	r2, r0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2107      	movs	r1, #7
 800428e:	ab03      	add	r3, sp, #12
 8004290:	0020      	movs	r0, r4
 8004292:	f001 fd43 	bl	8005d1c <xTimerGenericCommand>


    		break;
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004296:	9b03      	ldr	r3, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_UART_RxCpltCallback+0x66>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800429c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    for (i = 0; i < numberHandlers; i++ )
 800429e:	3301      	adds	r3, #1
 80042a0:	e7d2      	b.n	8004248 <HAL_UART_RxCpltCallback+0xc>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_UART_RxCpltCallback+0x78>)
 80042a6:	0552      	lsls	r2, r2, #21
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	e7f7      	b.n	800429c <HAL_UART_RxCpltCallback+0x60>
 80042ac:	20000090 	.word	0x20000090
 80042b0:	2000105c 	.word	0x2000105c
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 80042ba:	b510      	push	{r4, lr}
  SysTick->CTRL;
 80042bc:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042be:	f001 faab 	bl	8005818 <xTaskGetSchedulerState>
 80042c2:	2801      	cmp	r0, #1
 80042c4:	d001      	beq.n	80042ca <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 80042c6:	f000 fad5 	bl	8004874 <xPortSysTickHandler>
  }
}
 80042ca:	bd10      	pop	{r4, pc}
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <osKernelInitialize+0x20>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	2800      	cmp	r0, #0
 80042de:	d105      	bne.n	80042ec <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 80042e4:	4770      	bx	lr
    stat = osErrorISR;
 80042e6:	2006      	movs	r0, #6
      stat = osError;
 80042e8:	4240      	negs	r0, r0
  return (stat);
 80042ea:	e7fb      	b.n	80042e4 <osKernelInitialize+0x14>
      stat = osError;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7fb      	b.n	80042e8 <osKernelInitialize+0x18>
 80042f0:	20000350 	.word	0x20000350

080042f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042f4:	b510      	push	{r4, lr}
 80042f6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	d10e      	bne.n	800431c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <osKernelStart+0x34>)
 8004300:	6813      	ldr	r3, [r2, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <osKernelStart+0x2e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004306:	4909      	ldr	r1, [pc, #36]	; (800432c <osKernelStart+0x38>)
 8004308:	69cb      	ldr	r3, [r1, #28]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004310:	2302      	movs	r3, #2
 8004312:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004314:	f001 f844 	bl	80053a0 <vTaskStartScheduler>
      stat = osOK;
 8004318:	0020      	movs	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800431a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800431c:	2006      	movs	r0, #6
      stat = osError;
 800431e:	4240      	negs	r0, r0
  return (stat);
 8004320:	e7fb      	b.n	800431a <osKernelStart+0x26>
      stat = osError;
 8004322:	2001      	movs	r0, #1
 8004324:	e7fb      	b.n	800431e <osKernelStart+0x2a>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000350 	.word	0x20000350
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004334:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	9105      	str	r1, [sp, #20]
  hTask = NULL;
 800433a:	9207      	str	r2, [sp, #28]
 800433c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004340:	2a00      	cmp	r2, #0
 8004342:	d124      	bne.n	800438e <osThreadNew+0x5e>
 8004344:	2800      	cmp	r0, #0
 8004346:	d022      	beq.n	800438e <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004348:	2c00      	cmp	r4, #0
 800434a:	d038      	beq.n	80043be <osThreadNew+0x8e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800434c:	69a5      	ldr	r5, [r4, #24]
 800434e:	2d00      	cmp	r5, #0
 8004350:	d100      	bne.n	8004354 <osThreadNew+0x24>
 8004352:	3518      	adds	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004354:	1e69      	subs	r1, r5, #1
 8004356:	002f      	movs	r7, r5
        return (NULL);
 8004358:	2200      	movs	r2, #0
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800435a:	2937      	cmp	r1, #55	; 0x37
 800435c:	d818      	bhi.n	8004390 <osThreadNew+0x60>
 800435e:	6861      	ldr	r1, [r4, #4]
 8004360:	07cb      	lsls	r3, r1, #31
 8004362:	d415      	bmi.n	8004390 <osThreadNew+0x60>
      }

      if (attr->stack_size > 0U) {
 8004364:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 8004366:	3280      	adds	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 8004368:	2e00      	cmp	r6, #0
 800436a:	d000      	beq.n	800436e <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800436c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800436e:	68a3      	ldr	r3, [r4, #8]
      if (attr->name != NULL) {
 8004370:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004372:	9304      	str	r3, [sp, #16]
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	469c      	mov	ip, r3
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <osThreadNew+0x66>
 800437e:	4663      	mov	r3, ip
 8004380:	2bbb      	cmp	r3, #187	; 0xbb
 8004382:	d904      	bls.n	800438e <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004384:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004386:	2c00      	cmp	r4, #0
 8004388:	d001      	beq.n	800438e <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800438a:	2e00      	cmp	r6, #0
 800438c:	d11a      	bne.n	80043c4 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800438e:	9a07      	ldr	r2, [sp, #28]
}
 8004390:	0010      	movs	r0, r2
 8004392:	b009      	add	sp, #36	; 0x24
 8004394:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004396:	4663      	mov	r3, ip
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f8      	bne.n	800438e <osThreadNew+0x5e>
      if (mem == 0) {
 800439c:	6924      	ldr	r4, [r4, #16]
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d1f5      	bne.n	800438e <osThreadNew+0x5e>
 80043a2:	000c      	movs	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043a4:	a907      	add	r1, sp, #28
 80043a6:	9101      	str	r1, [sp, #4]
 80043a8:	9b05      	ldr	r3, [sp, #20]
 80043aa:	0021      	movs	r1, r4
 80043ac:	b292      	uxth	r2, r2
 80043ae:	9700      	str	r7, [sp, #0]
 80043b0:	f000 ffca 	bl	8005348 <xTaskCreate>
 80043b4:	2801      	cmp	r0, #1
 80043b6:	d0ea      	beq.n	800438e <osThreadNew+0x5e>
            hTask = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	9307      	str	r3, [sp, #28]
 80043bc:	e7e7      	b.n	800438e <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;
 80043be:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 80043c0:	2280      	movs	r2, #128	; 0x80
 80043c2:	e7ef      	b.n	80043a4 <osThreadNew+0x74>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043c4:	9b04      	ldr	r3, [sp, #16]
 80043c6:	9401      	str	r4, [sp, #4]
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	9500      	str	r5, [sp, #0]
 80043cc:	9b05      	ldr	r3, [sp, #20]
 80043ce:	f000 ff95 	bl	80052fc <xTaskCreateStatic>
 80043d2:	9007      	str	r0, [sp, #28]
 80043d4:	e7db      	b.n	800438e <osThreadNew+0x5e>

080043d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043d6:	b510      	push	{r4, lr}
 80043d8:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80043dc:	2c00      	cmp	r4, #0
 80043de:	d105      	bne.n	80043ec <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d001      	beq.n	80043e8 <osDelay+0x12>
      vTaskDelay(ticks);
 80043e4:	f001 f918 	bl	8005618 <vTaskDelay>
    }
  }

  return (stat);
}
 80043e8:	0020      	movs	r0, r4
 80043ea:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80043ec:	2406      	movs	r4, #6
 80043ee:	4264      	negs	r4, r4
 80043f0:	e7fa      	b.n	80043e8 <osDelay+0x12>

080043f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80043f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043f4:	000e      	movs	r6, r1
 80043f6:	0015      	movs	r5, r2
 80043f8:	f3ef 8105 	mrs	r1, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d002      	beq.n	8004406 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8004400:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004402:	0020      	movs	r0, r4
 8004404:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004406:	2800      	cmp	r0, #0
 8004408:	d0fa      	beq.n	8004400 <osSemaphoreNew+0xe>
 800440a:	42b0      	cmp	r0, r6
 800440c:	d3f8      	bcc.n	8004400 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800440e:	2a00      	cmp	r2, #0
 8004410:	d01d      	beq.n	800444e <osSemaphoreNew+0x5c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004412:	6893      	ldr	r3, [r2, #8]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d017      	beq.n	800444a <osSemaphoreNew+0x58>
 800441a:	2a4f      	cmp	r2, #79	; 0x4f
 800441c:	d9f0      	bls.n	8004400 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800441e:	2801      	cmp	r0, #1
 8004420:	d128      	bne.n	8004474 <osSemaphoreNew+0x82>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004422:	2203      	movs	r2, #3
 8004424:	9200      	str	r2, [sp, #0]
 8004426:	000a      	movs	r2, r1
 8004428:	f000 fb2e 	bl	8004a88 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800442c:	1e04      	subs	r4, r0, #0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800442e:	d0e7      	beq.n	8004400 <osSemaphoreNew+0xe>
 8004430:	2e00      	cmp	r6, #0
 8004432:	d018      	beq.n	8004466 <osSemaphoreNew+0x74>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004434:	2300      	movs	r3, #0
 8004436:	001a      	movs	r2, r3
 8004438:	0019      	movs	r1, r3
 800443a:	f000 fba0 	bl	8004b7e <xQueueGenericSend>
 800443e:	2801      	cmp	r0, #1
 8004440:	d011      	beq.n	8004466 <osSemaphoreNew+0x74>
            vSemaphoreDelete (hSemaphore);
 8004442:	0020      	movs	r0, r4
 8004444:	f000 fdc6 	bl	8004fd4 <vQueueDelete>
 8004448:	e7da      	b.n	8004400 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800444a:	2a00      	cmp	r2, #0
 800444c:	d1d8      	bne.n	8004400 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800444e:	2801      	cmp	r0, #1
 8004450:	d104      	bne.n	800445c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8004452:	2203      	movs	r2, #3
 8004454:	2100      	movs	r1, #0
 8004456:	f000 fb48 	bl	8004aea <xQueueGenericCreate>
 800445a:	e7e7      	b.n	800442c <osSemaphoreNew+0x3a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800445c:	0031      	movs	r1, r6
 800445e:	f000 fb7c 	bl	8004b5a <xQueueCreateCountingSemaphore>
 8004462:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 8004464:	d0cc      	beq.n	8004400 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8004466:	2d00      	cmp	r5, #0
 8004468:	d10a      	bne.n	8004480 <osSemaphoreNew+0x8e>
        vQueueAddToRegistry (hSemaphore, name);
 800446a:	0029      	movs	r1, r5
 800446c:	0020      	movs	r0, r4
 800446e:	f000 fd8b 	bl	8004f88 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8004472:	e7c6      	b.n	8004402 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004474:	001a      	movs	r2, r3
 8004476:	0031      	movs	r1, r6
 8004478:	f000 fb5a 	bl	8004b30 <xQueueCreateCountingSemaphoreStatic>
 800447c:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 800447e:	d0bf      	beq.n	8004400 <osSemaphoreNew+0xe>
          name = attr->name;
 8004480:	682d      	ldr	r5, [r5, #0]
 8004482:	e7f2      	b.n	800446a <osSemaphoreNew+0x78>

08004484 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004486:	0014      	movs	r4, r2
 8004488:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800448c:	2e00      	cmp	r6, #0
 800448e:	d002      	beq.n	8004496 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8004490:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004492:	0028      	movs	r0, r5
 8004494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004496:	2800      	cmp	r0, #0
 8004498:	d0fa      	beq.n	8004490 <osMessageQueueNew+0xc>
 800449a:	2900      	cmp	r1, #0
 800449c:	d0f8      	beq.n	8004490 <osMessageQueueNew+0xc>
    if (attr != NULL) {
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d01c      	beq.n	80044dc <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044a2:	6893      	ldr	r3, [r2, #8]
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <osMessageQueueNew+0x48>
 80044aa:	2a4f      	cmp	r2, #79	; 0x4f
 80044ac:	d9f0      	bls.n	8004490 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044ae:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d0ed      	beq.n	8004490 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044b4:	000d      	movs	r5, r1
 80044b6:	4345      	muls	r5, r0
 80044b8:	6967      	ldr	r7, [r4, #20]
 80044ba:	42af      	cmp	r7, r5
 80044bc:	d3e8      	bcc.n	8004490 <osMessageQueueNew+0xc>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80044be:	9600      	str	r6, [sp, #0]
 80044c0:	f000 fae2 	bl	8004a88 <xQueueGenericCreateStatic>
 80044c4:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80044c6:	d0e3      	beq.n	8004490 <osMessageQueueNew+0xc>
        name = attr->name;
 80044c8:	6824      	ldr	r4, [r4, #0]
 80044ca:	e00e      	b.n	80044ea <osMessageQueueNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d1df      	bne.n	8004490 <osMessageQueueNew+0xc>
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1dc      	bne.n	8004490 <osMessageQueueNew+0xc>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044d6:	6963      	ldr	r3, [r4, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1d9      	bne.n	8004490 <osMessageQueueNew+0xc>
          hQueue = xQueueCreate (msg_count, msg_size);
 80044dc:	2200      	movs	r2, #0
 80044de:	f000 fb04 	bl	8004aea <xQueueGenericCreate>
 80044e2:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80044e4:	d0d4      	beq.n	8004490 <osMessageQueueNew+0xc>
      if (attr != NULL) {
 80044e6:	2c00      	cmp	r4, #0
 80044e8:	d1ee      	bne.n	80044c8 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80044ea:	0021      	movs	r1, r4
 80044ec:	0028      	movs	r0, r5
 80044ee:	f000 fd4b 	bl	8004f88 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80044f2:	e7ce      	b.n	8004492 <osMessageQueueNew+0xe>

080044f4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <vApplicationGetIdleTaskMemory+0x10>)
 80044f6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <vApplicationGetIdleTaskMemory+0x14>)
 80044fa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	4770      	bx	lr
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000294 	.word	0x20000294
 8004508:	20000094 	.word	0x20000094

0800450c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <vApplicationGetTimerTaskMemory+0x10>)
 800450e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <vApplicationGetTimerTaskMemory+0x14>)
 8004512:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	6013      	str	r3, [r2, #0]
}
 800451a:	4770      	bx	lr
 800451c:	20000754 	.word	0x20000754
 8004520:	20000354 	.word	0x20000354

08004524 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004524:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <prvInsertBlockIntoFreeList+0x40>)
 8004528:	001a      	movs	r2, r3
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4283      	cmp	r3, r0
 800452e:	d3fb      	bcc.n	8004528 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004530:	6854      	ldr	r4, [r2, #4]
 8004532:	1911      	adds	r1, r2, r4
 8004534:	4288      	cmp	r0, r1
 8004536:	d103      	bne.n	8004540 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004538:	6841      	ldr	r1, [r0, #4]
 800453a:	0010      	movs	r0, r2
 800453c:	1909      	adds	r1, r1, r4
 800453e:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004540:	6841      	ldr	r1, [r0, #4]
 8004542:	1844      	adds	r4, r0, r1
 8004544:	42a3      	cmp	r3, r4
 8004546:	d107      	bne.n	8004558 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004548:	4c07      	ldr	r4, [pc, #28]	; (8004568 <prvInsertBlockIntoFreeList+0x44>)
 800454a:	6824      	ldr	r4, [r4, #0]
 800454c:	42a3      	cmp	r3, r4
 800454e:	d003      	beq.n	8004558 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004550:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004552:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004554:	1861      	adds	r1, r4, r1
 8004556:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004558:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800455a:	4290      	cmp	r0, r2
 800455c:	d000      	beq.n	8004560 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800455e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004560:	bd10      	pop	{r4, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	20000a28 	.word	0x20000a28
 8004568:	20000810 	.word	0x20000810

0800456c <pvPortMalloc>:
{
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	0005      	movs	r5, r0
	vTaskSuspendAll();
 8004570:	f000 ff56 	bl	8005420 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004574:	4a37      	ldr	r2, [pc, #220]	; (8004654 <pvPortMalloc+0xe8>)
 8004576:	4c38      	ldr	r4, [pc, #224]	; (8004658 <pvPortMalloc+0xec>)
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11b      	bne.n	80045b6 <pvPortMalloc+0x4a>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800457e:	2007      	movs	r0, #7
	uxAddress = ( size_t ) ucHeap;
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <pvPortMalloc+0xf0>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004582:	0019      	movs	r1, r3
 8004584:	4203      	tst	r3, r0
 8004586:	d001      	beq.n	800458c <pvPortMalloc+0x20>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004588:	1819      	adds	r1, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800458a:	4381      	bics	r1, r0
	xStart.xBlockSize = ( size_t ) 0;
 800458c:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800458e:	4e34      	ldr	r6, [pc, #208]	; (8004660 <pvPortMalloc+0xf4>)
	uxAddress -= xHeapStructSize;
 8004590:	33f9      	adds	r3, #249	; 0xf9
	xStart.xBlockSize = ( size_t ) 0;
 8004592:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004594:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004596:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8004598:	33ff      	adds	r3, #255	; 0xff
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800459a:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 800459c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800459e:	6058      	str	r0, [r3, #4]
	pxEnd = ( void * ) uxAddress;
 80045a0:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045a2:	1a58      	subs	r0, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045a4:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <pvPortMalloc+0xf8>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045a8:	6048      	str	r0, [r1, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045aa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045ac:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <pvPortMalloc+0xfc>)
 80045ae:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	6023      	str	r3, [r4, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b6:	6826      	ldr	r6, [r4, #0]
 80045b8:	4235      	tst	r5, r6
 80045ba:	d146      	bne.n	800464a <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80045bc:	2d00      	cmp	r5, #0
 80045be:	d03e      	beq.n	800463e <pvPortMalloc+0xd2>
				xWantedSize += xHeapStructSize;
 80045c0:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045c2:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 80045c4:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045c6:	420b      	tst	r3, r1
 80045c8:	d001      	beq.n	80045ce <pvPortMalloc+0x62>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ca:	438b      	bics	r3, r1
 80045cc:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03b      	beq.n	800464a <pvPortMalloc+0xde>
 80045d2:	4925      	ldr	r1, [pc, #148]	; (8004668 <pvPortMalloc+0xfc>)
 80045d4:	680d      	ldr	r5, [r1, #0]
 80045d6:	429d      	cmp	r5, r3
 80045d8:	d337      	bcc.n	800464a <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <pvPortMalloc+0xf4>)
 80045dc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045de:	6860      	ldr	r0, [r4, #4]
 80045e0:	4298      	cmp	r0, r3
 80045e2:	d203      	bcs.n	80045ec <pvPortMalloc+0x80>
 80045e4:	6827      	ldr	r7, [r4, #0]
 80045e6:	46bc      	mov	ip, r7
 80045e8:	2f00      	cmp	r7, #0
 80045ea:	d10e      	bne.n	800460a <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	42a2      	cmp	r2, r4
 80045f0:	d02b      	beq.n	800464a <pvPortMalloc+0xde>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f2:	680a      	ldr	r2, [r1, #0]
 80045f4:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045fa:	1ac2      	subs	r2, r0, r3
 80045fc:	2a10      	cmp	r2, #16
 80045fe:	d90b      	bls.n	8004618 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004600:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004602:	0741      	lsls	r1, r0, #29
 8004604:	d004      	beq.n	8004610 <pvPortMalloc+0xa4>
 8004606:	b672      	cpsid	i
 8004608:	e7fe      	b.n	8004608 <pvPortMalloc+0x9c>
 800460a:	0021      	movs	r1, r4
 800460c:	4664      	mov	r4, ip
 800460e:	e7e6      	b.n	80045de <pvPortMalloc+0x72>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004610:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004612:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004614:	f7ff ff86 	bl	8004524 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	4a13      	ldr	r2, [pc, #76]	; (8004668 <pvPortMalloc+0xfc>)
 800461c:	1aed      	subs	r5, r5, r3
 800461e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <pvPortMalloc+0xf8>)
 8004622:	6811      	ldr	r1, [r2, #0]
 8004624:	428d      	cmp	r5, r1
 8004626:	d200      	bcs.n	800462a <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004628:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800462a:	431e      	orrs	r6, r3
					pxBlock->pxNextFreeBlock = NULL;
 800462c:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800462e:	003d      	movs	r5, r7
					xNumberOfSuccessfulAllocations++;
 8004630:	4a0e      	ldr	r2, [pc, #56]	; (800466c <pvPortMalloc+0x100>)
					pxBlock->pxNextFreeBlock = NULL;
 8004632:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8004634:	6813      	ldr	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004636:	3508      	adds	r5, #8
					xNumberOfSuccessfulAllocations++;
 8004638:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800463a:	6066      	str	r6, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800463c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800463e:	f000 ff83 	bl	8005548 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004642:	076b      	lsls	r3, r5, #29
 8004644:	d003      	beq.n	800464e <pvPortMalloc+0xe2>
 8004646:	b672      	cpsid	i
 8004648:	e7fe      	b.n	8004648 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800464a:	2500      	movs	r5, #0
 800464c:	e7f7      	b.n	800463e <pvPortMalloc+0xd2>
}
 800464e:	0028      	movs	r0, r5
 8004650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	20000810 	.word	0x20000810
 8004658:	20000a14 	.word	0x20000a14
 800465c:	20000814 	.word	0x20000814
 8004660:	20000a28 	.word	0x20000a28
 8004664:	20000a1c 	.word	0x20000a1c
 8004668:	20000a18 	.word	0x20000a18
 800466c:	20000a20 	.word	0x20000a20

08004670 <vPortFree>:
{
 8004670:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004672:	2800      	cmp	r0, #0
 8004674:	d01f      	beq.n	80046b6 <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004676:	4a10      	ldr	r2, [pc, #64]	; (80046b8 <vPortFree+0x48>)
 8004678:	3808      	subs	r0, #8
 800467a:	6843      	ldr	r3, [r0, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	0004      	movs	r4, r0
 8004680:	421a      	tst	r2, r3
 8004682:	d101      	bne.n	8004688 <vPortFree+0x18>
 8004684:	b672      	cpsid	i
 8004686:	e7fe      	b.n	8004686 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004688:	6801      	ldr	r1, [r0, #0]
 800468a:	2900      	cmp	r1, #0
 800468c:	d001      	beq.n	8004692 <vPortFree+0x22>
 800468e:	b672      	cpsid	i
 8004690:	e7fe      	b.n	8004690 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004692:	4393      	bics	r3, r2
 8004694:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8004696:	f000 fec3 	bl	8005420 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <vPortFree+0x4c>)
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046a0:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046a2:	185b      	adds	r3, r3, r1
 80046a4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046a6:	f7ff ff3d 	bl	8004524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046aa:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <vPortFree+0x50>)
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80046b2:	f000 ff49 	bl	8005548 <xTaskResumeAll>
}
 80046b6:	bd10      	pop	{r4, pc}
 80046b8:	20000a14 	.word	0x20000a14
 80046bc:	20000a18 	.word	0x20000a18
 80046c0:	20000a24 	.word	0x20000a24

080046c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c4:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c6:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c8:	3308      	adds	r3, #8
 80046ca:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046d0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046d2:	4252      	negs	r2, r2
 80046d4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046d8:	4770      	bx	lr

080046da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046de:	4770      	bx	lr

080046e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80046e0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046e2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80046e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80046ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80046f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80046f2:	3301      	adds	r3, #1
 80046f4:	6003      	str	r3, [r0, #0]
}
 80046f6:	4770      	bx	lr

080046f8 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046f8:	0002      	movs	r2, r0
{
 80046fa:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046fc:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046fe:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004700:	1c63      	adds	r3, r4, #1
 8004702:	d10a      	bne.n	800471a <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004704:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800470a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800470c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800470e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004710:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004712:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004714:	3301      	adds	r3, #1
 8004716:	6003      	str	r3, [r0, #0]
}
 8004718:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800471a:	0013      	movs	r3, r2
 800471c:	6852      	ldr	r2, [r2, #4]
 800471e:	6815      	ldr	r5, [r2, #0]
 8004720:	42a5      	cmp	r5, r4
 8004722:	d9fa      	bls.n	800471a <vListInsert+0x22>
 8004724:	e7ef      	b.n	8004706 <vListInsert+0xe>

08004726 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004726:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004728:	6841      	ldr	r1, [r0, #4]
 800472a:	6882      	ldr	r2, [r0, #8]
 800472c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800472e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	4281      	cmp	r1, r0
 8004734:	d100      	bne.n	8004738 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004738:	2200      	movs	r2, #0
 800473a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	3a01      	subs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004742:	6818      	ldr	r0, [r3, #0]
}
 8004744:	4770      	bx	lr
	...

08004748 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8004748:	2300      	movs	r3, #0
{
 800474a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800474c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <prvTaskExitError+0x20>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	d001      	beq.n	800475a <prvTaskExitError+0x12>
 8004756:	b672      	cpsid	i
 8004758:	e7fe      	b.n	8004758 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800475a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800475c:	9b01      	ldr	r3, [sp, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0fc      	beq.n	800475c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004762:	b002      	add	sp, #8
 8004764:	4770      	bx	lr
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	2000000c 	.word	0x2000000c
 800476c:	00000000 	.word	0x00000000

08004770 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <pxCurrentTCBConst2>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	3020      	adds	r0, #32
 8004778:	f380 8809 	msr	PSP, r0
 800477c:	2002      	movs	r0, #2
 800477e:	f380 8814 	msr	CONTROL, r0
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004788:	46ae      	mov	lr, r5
 800478a:	bc08      	pop	{r3}
 800478c:	bc04      	pop	{r2}
 800478e:	b662      	cpsie	i
 8004790:	4718      	bx	r3
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46c0      	nop			; (mov r8, r8)

080047a0 <pxCurrentTCBConst2>:
 80047a0:	20000a30 	.word	0x20000a30

080047a4 <pxPortInitialiseStack>:
{
 80047a4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047a6:	2480      	movs	r4, #128	; 0x80
 80047a8:	1f03      	subs	r3, r0, #4
 80047aa:	0464      	lsls	r4, r4, #17
 80047ac:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80047ae:	3b04      	subs	r3, #4
 80047b0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047b2:	4903      	ldr	r1, [pc, #12]	; (80047c0 <pxPortInitialiseStack+0x1c>)
 80047b4:	3b04      	subs	r3, #4
 80047b6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047b8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 80047ba:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047bc:	601a      	str	r2, [r3, #0]
}
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	08004749 	.word	0x08004749

080047c4 <SVC_Handler>:
}
 80047c4:	4770      	bx	lr
	...

080047c8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047c8:	2280      	movs	r2, #128	; 0x80
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <vPortYield+0x14>)
 80047cc:	0552      	lsls	r2, r2, #21
 80047ce:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80047d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047d4:	f3bf 8f6f 	isb	sy
}
 80047d8:	4770      	bx	lr
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 80047e0:	b672      	cpsid	i
	uxCriticalNesting++;
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <vPortEnterCritical+0x14>)
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80047ea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047ee:	f3bf 8f6f 	isb	sy
}
 80047f2:	4770      	bx	lr
 80047f4:	2000000c 	.word	0x2000000c

080047f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80047f8:	4a05      	ldr	r2, [pc, #20]	; (8004810 <vPortExitCritical+0x18>)
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <vPortExitCritical+0xc>
 8004800:	b672      	cpsid	i
 8004802:	e7fe      	b.n	8004802 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 8004804:	3b01      	subs	r3, #1
 8004806:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004808:	2b00      	cmp	r3, #0
 800480a:	d100      	bne.n	800480e <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800480c:	b662      	cpsie	i
	}
}
 800480e:	4770      	bx	lr
 8004810:	2000000c 	.word	0x2000000c

08004814 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004814:	f3ef 8010 	mrs	r0, PRIMASK
 8004818:	b672      	cpsid	i
 800481a:	4770      	bx	lr

0800481c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800481c:	f380 8810 	msr	PRIMASK, r0
 8004820:	4770      	bx	lr
	...

08004830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <pxCurrentTCBConst>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	3820      	subs	r0, #32
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800483e:	4644      	mov	r4, r8
 8004840:	464d      	mov	r5, r9
 8004842:	4656      	mov	r6, sl
 8004844:	465f      	mov	r7, fp
 8004846:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004848:	b508      	push	{r3, lr}
 800484a:	b672      	cpsid	i
 800484c:	f000 fefe 	bl	800564c <vTaskSwitchContext>
 8004850:	b662      	cpsie	i
 8004852:	bc0c      	pop	{r2, r3}
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	6808      	ldr	r0, [r1, #0]
 8004858:	3010      	adds	r0, #16
 800485a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800485c:	46a0      	mov	r8, r4
 800485e:	46a9      	mov	r9, r5
 8004860:	46b2      	mov	sl, r6
 8004862:	46bb      	mov	fp, r7
 8004864:	f380 8809 	msr	PSP, r0
 8004868:	3820      	subs	r0, #32
 800486a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800486c:	4718      	bx	r3
 800486e:	46c0      	nop			; (mov r8, r8)

08004870 <pxCurrentTCBConst>:
 8004870:	20000a30 	.word	0x20000a30

08004874 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004874:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004876:	f7ff ffcd 	bl	8004814 <ulSetInterruptMaskFromISR>
 800487a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800487c:	f000 fde4 	bl	8005448 <xTaskIncrementTick>
 8004880:	2800      	cmp	r0, #0
 8004882:	d003      	beq.n	800488c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	4b03      	ldr	r3, [pc, #12]	; (8004894 <xPortSysTickHandler+0x20>)
 8004888:	0552      	lsls	r2, r2, #21
 800488a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800488c:	0020      	movs	r0, r4
 800488e:	f7ff ffc5 	bl	800481c <vClearInterruptMaskFromISR>
}
 8004892:	bd10      	pop	{r4, pc}
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004898:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800489a:	21fa      	movs	r1, #250	; 0xfa
{
 800489c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048a0:	4c07      	ldr	r4, [pc, #28]	; (80048c0 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048a2:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048a4:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <vPortSetupTimerInterrupt+0x2c>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	f7fb fc54 	bl	8000158 <__udivsi3>
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <vPortSetupTimerInterrupt+0x30>)
 80048b2:	3801      	subs	r0, #1
 80048b4:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80048b6:	2307      	movs	r3, #7
 80048b8:	6023      	str	r3, [r4, #0]
}
 80048ba:	bd10      	pop	{r4, pc}
 80048bc:	e000e018 	.word	0xe000e018
 80048c0:	e000e010 	.word	0xe000e010
 80048c4:	20000000 	.word	0x20000000
 80048c8:	e000e014 	.word	0xe000e014

080048cc <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <xPortStartScheduler+0x34>)
 80048d0:	0412      	lsls	r2, r2, #16
 80048d2:	6819      	ldr	r1, [r3, #0]
{
 80048d4:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048da:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 80048dc:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	0612      	lsls	r2, r2, #24
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80048e6:	f7ff ffd7 	bl	8004898 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <xPortStartScheduler+0x38>)
 80048ec:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 80048ee:	f7ff ff3f 	bl	8004770 <vPortStartFirstTask>
	vTaskSwitchContext();
 80048f2:	f000 feab 	bl	800564c <vTaskSwitchContext>
	prvTaskExitError();
 80048f6:	f7ff ff27 	bl	8004748 <prvTaskExitError>
}
 80048fa:	0020      	movs	r0, r4
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	e000ed20 	.word	0xe000ed20
 8004904:	2000000c 	.word	0x2000000c

08004908 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004908:	b510      	push	{r4, lr}
 800490a:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800490c:	f7ff ff68 	bl	80047e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004910:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004912:	f7ff ff71 	bl	80047f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004916:	4260      	negs	r0, r4
 8004918:	4160      	adcs	r0, r4

	return xReturn;
}
 800491a:	bd10      	pop	{r4, pc}

0800491c <prvCopyDataToQueue>:
{
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004920:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004922:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004924:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004926:	2a00      	cmp	r2, #0
 8004928:	d10c      	bne.n	8004944 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800492a:	6807      	ldr	r7, [r0, #0]
BaseType_t xReturn = pdFALSE;
 800492c:	0015      	movs	r5, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800492e:	2f00      	cmp	r7, #0
 8004930:	d104      	bne.n	800493c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004932:	6880      	ldr	r0, [r0, #8]
 8004934:	f000 ffbe 	bl	80058b4 <xTaskPriorityDisinherit>
 8004938:	0005      	movs	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800493a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800493c:	3601      	adds	r6, #1
}
 800493e:	0028      	movs	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004940:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004944:	2d00      	cmp	r5, #0
 8004946:	d10c      	bne.n	8004962 <prvCopyDataToQueue+0x46>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004948:	6840      	ldr	r0, [r0, #4]
 800494a:	f001 fb3f 	bl	8005fcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004952:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004954:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004956:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004958:	4293      	cmp	r3, r2
 800495a:	d3ef      	bcc.n	800493c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	e7ec      	b.n	800493c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004962:	68c0      	ldr	r0, [r0, #12]
 8004964:	f001 fb32 	bl	8005fcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004968:	68e3      	ldr	r3, [r4, #12]
 800496a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800496c:	4251      	negs	r1, r2
 800496e:	1a9a      	subs	r2, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004970:	6823      	ldr	r3, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004972:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004974:	429a      	cmp	r2, r3
 8004976:	d202      	bcs.n	800497e <prvCopyDataToQueue+0x62>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	1859      	adds	r1, r3, r1
 800497c:	60e1      	str	r1, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800497e:	2d02      	cmp	r5, #2
 8004980:	d105      	bne.n	800498e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004982:	0033      	movs	r3, r6
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	4193      	sbcs	r3, r2
BaseType_t xReturn = pdFALSE;
 8004988:	2500      	movs	r5, #0
				--uxMessagesWaiting;
 800498a:	1af6      	subs	r6, r6, r3
 800498c:	e7d6      	b.n	800493c <prvCopyDataToQueue+0x20>
BaseType_t xReturn = pdFALSE;
 800498e:	2500      	movs	r5, #0
 8004990:	e7d4      	b.n	800493c <prvCopyDataToQueue+0x20>

08004992 <prvCopyDataFromQueue>:
{
 8004992:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004996:	0008      	movs	r0, r1
 8004998:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800499a:	2a00      	cmp	r2, #0
 800499c:	d00a      	beq.n	80049b4 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800499e:	68d9      	ldr	r1, [r3, #12]
 80049a0:	188c      	adds	r4, r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a2:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a4:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a6:	428c      	cmp	r4, r1
 80049a8:	d301      	bcc.n	80049ae <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	f001 fb0c 	bl	8005fcc <memcpy>
}
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <prvUnlockQueue>:
{
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 80049ba:	0026      	movs	r6, r4
 80049bc:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 80049be:	f7ff ff0f 	bl	80047e0 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80049c2:	7835      	ldrb	r5, [r6, #0]
 80049c4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	dc10      	bgt.n	80049ec <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 80049ca:	23ff      	movs	r3, #255	; 0xff
 80049cc:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 80049ce:	0026      	movs	r6, r4
 80049d0:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 80049d2:	f7ff ff11 	bl	80047f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80049d6:	f7ff ff03 	bl	80047e0 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80049da:	7835      	ldrb	r5, [r6, #0]
 80049dc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049de:	2d00      	cmp	r5, #0
 80049e0:	dc11      	bgt.n	8004a06 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 80049e2:	23ff      	movs	r3, #255	; 0xff
 80049e4:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 80049e6:	f7ff ff07 	bl	80047f8 <vPortExitCritical>
}
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0eb      	beq.n	80049ca <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f2:	0020      	movs	r0, r4
 80049f4:	3024      	adds	r0, #36	; 0x24
 80049f6:	f000 fe8f 	bl	8005718 <xTaskRemoveFromEventList>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d001      	beq.n	8004a02 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 80049fe:	f000 ff05 	bl	800580c <vTaskMissedYield>
			--cTxLock;
 8004a02:	3d01      	subs	r5, #1
 8004a04:	e7de      	b.n	80049c4 <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ea      	beq.n	80049e2 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a0c:	0020      	movs	r0, r4
 8004a0e:	3010      	adds	r0, #16
 8004a10:	f000 fe82 	bl	8005718 <xTaskRemoveFromEventList>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d001      	beq.n	8004a1c <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8004a18:	f000 fef8 	bl	800580c <vTaskMissedYield>
				--cRxLock;
 8004a1c:	3d01      	subs	r5, #1
 8004a1e:	e7dd      	b.n	80049dc <prvUnlockQueue+0x26>

08004a20 <xQueueGenericReset>:
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	0004      	movs	r4, r0
 8004a24:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d101      	bne.n	8004a2e <xQueueGenericReset+0xe>
 8004a2a:	b672      	cpsid	i
 8004a2c:	e7fe      	b.n	8004a2c <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8004a2e:	f7ff fed7 	bl	80047e0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	434b      	muls	r3, r1
 8004a3a:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a3c:	1a5b      	subs	r3, r3, r1
 8004a3e:	18d3      	adds	r3, r2, r3
 8004a40:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a42:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a44:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a46:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a48:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004a4a:	22ff      	movs	r2, #255	; 0xff
 8004a4c:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a50:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8004a52:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 8004a54:	4285      	cmp	r5, r0
 8004a56:	d10e      	bne.n	8004a76 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	d007      	beq.n	8004a6e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5e:	0020      	movs	r0, r4
 8004a60:	3010      	adds	r0, #16
 8004a62:	f000 fe59 	bl	8005718 <xTaskRemoveFromEventList>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d001      	beq.n	8004a6e <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 8004a6a:	f7ff fead 	bl	80047c8 <vPortYield>
	taskEXIT_CRITICAL();
 8004a6e:	f7ff fec3 	bl	80047f8 <vPortExitCritical>
}
 8004a72:	2001      	movs	r0, #1
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a76:	0020      	movs	r0, r4
 8004a78:	3010      	adds	r0, #16
 8004a7a:	f7ff fe23 	bl	80046c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a7e:	0020      	movs	r0, r4
 8004a80:	3024      	adds	r0, #36	; 0x24
 8004a82:	f7ff fe1f 	bl	80046c4 <vListInitialise>
 8004a86:	e7f2      	b.n	8004a6e <xQueueGenericReset+0x4e>

08004a88 <xQueueGenericCreateStatic>:
	{
 8004a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a8a:	001c      	movs	r4, r3
 8004a8c:	ab06      	add	r3, sp, #24
 8004a8e:	781d      	ldrb	r5, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d101      	bne.n	8004a98 <xQueueGenericCreateStatic+0x10>
 8004a94:	b672      	cpsid	i
 8004a96:	e7fe      	b.n	8004a96 <xQueueGenericCreateStatic+0xe>
		configASSERT( pxStaticQueue != NULL );
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d101      	bne.n	8004aa0 <xQueueGenericCreateStatic+0x18>
 8004a9c:	b672      	cpsid	i
 8004a9e:	e7fe      	b.n	8004a9e <xQueueGenericCreateStatic+0x16>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	d003      	beq.n	8004aac <xQueueGenericCreateStatic+0x24>
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d105      	bne.n	8004ab4 <xQueueGenericCreateStatic+0x2c>
 8004aa8:	b672      	cpsid	i
 8004aaa:	e7fe      	b.n	8004aaa <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d001      	beq.n	8004ab4 <xQueueGenericCreateStatic+0x2c>
 8004ab0:	b672      	cpsid	i
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueGenericCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ab4:	2350      	movs	r3, #80	; 0x50
 8004ab6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ab8:	9b01      	ldr	r3, [sp, #4]
 8004aba:	2b50      	cmp	r3, #80	; 0x50
 8004abc:	d001      	beq.n	8004ac2 <xQueueGenericCreateStatic+0x3a>
 8004abe:	b672      	cpsid	i
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ac2:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac4:	0023      	movs	r3, r4
 8004ac6:	2601      	movs	r6, #1
 8004ac8:	3346      	adds	r3, #70	; 0x46
 8004aca:	701e      	strb	r6, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d100      	bne.n	8004ad2 <xQueueGenericCreateStatic+0x4a>
 8004ad0:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004ad2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ad4:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	2101      	movs	r1, #1
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	f7ff ffa0 	bl	8004a20 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	334c      	adds	r3, #76	; 0x4c
	}
 8004ae4:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004ae6:	701d      	strb	r5, [r3, #0]
	}
 8004ae8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08004aea <xQueueGenericCreate>:
	{
 8004aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aec:	0006      	movs	r6, r0
 8004aee:	000d      	movs	r5, r1
 8004af0:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d101      	bne.n	8004afa <xQueueGenericCreate+0x10>
 8004af6:	b672      	cpsid	i
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afa:	0008      	movs	r0, r1
 8004afc:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004afe:	3050      	adds	r0, #80	; 0x50
 8004b00:	f7ff fd34 	bl	800456c <pvPortMalloc>
 8004b04:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8004b06:	d011      	beq.n	8004b2c <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b08:	0003      	movs	r3, r0
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	3346      	adds	r3, #70	; 0x46
 8004b0e:	701a      	strb	r2, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b10:	0003      	movs	r3, r0
 8004b12:	4295      	cmp	r5, r2
 8004b14:	d000      	beq.n	8004b18 <xQueueGenericCreate+0x2e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b16:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b18:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	0020      	movs	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004b1e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b20:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b22:	f7ff ff7d 	bl	8004a20 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004b26:	0023      	movs	r3, r4
 8004b28:	334c      	adds	r3, #76	; 0x4c
 8004b2a:	701f      	strb	r7, [r3, #0]
	}
 8004b2c:	0020      	movs	r0, r4
 8004b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b30 <xQueueCreateCountingSemaphoreStatic>:
	{
 8004b30:	b513      	push	{r0, r1, r4, lr}
 8004b32:	0013      	movs	r3, r2
 8004b34:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d101      	bne.n	8004b3e <xQueueCreateCountingSemaphoreStatic+0xe>
 8004b3a:	b672      	cpsid	i
 8004b3c:	e7fe      	b.n	8004b3c <xQueueCreateCountingSemaphoreStatic+0xc>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b3e:	4288      	cmp	r0, r1
 8004b40:	d201      	bcs.n	8004b46 <xQueueCreateCountingSemaphoreStatic+0x16>
 8004b42:	b672      	cpsid	i
 8004b44:	e7fe      	b.n	8004b44 <xQueueCreateCountingSemaphoreStatic+0x14>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b46:	2202      	movs	r2, #2
 8004b48:	9200      	str	r2, [sp, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	0011      	movs	r1, r2
 8004b4e:	f7ff ff9b 	bl	8004a88 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d000      	beq.n	8004b58 <xQueueCreateCountingSemaphoreStatic+0x28>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b56:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004b58:	bd16      	pop	{r1, r2, r4, pc}

08004b5a <xQueueCreateCountingSemaphore>:
	{
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d101      	bne.n	8004b66 <xQueueCreateCountingSemaphore+0xc>
 8004b62:	b672      	cpsid	i
 8004b64:	e7fe      	b.n	8004b64 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b66:	4288      	cmp	r0, r1
 8004b68:	d201      	bcs.n	8004b6e <xQueueCreateCountingSemaphore+0x14>
 8004b6a:	b672      	cpsid	i
 8004b6c:	e7fe      	b.n	8004b6c <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b6e:	2202      	movs	r2, #2
 8004b70:	2100      	movs	r1, #0
 8004b72:	f7ff ffba 	bl	8004aea <xQueueGenericCreate>
		if( xHandle != NULL )
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d000      	beq.n	8004b7c <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b7a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004b7c:	bd10      	pop	{r4, pc}

08004b7e <xQueueGenericSend>:
{
 8004b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b80:	b085      	sub	sp, #20
 8004b82:	0004      	movs	r4, r0
 8004b84:	000d      	movs	r5, r1
 8004b86:	001f      	movs	r7, r3
 8004b88:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d101      	bne.n	8004b92 <xQueueGenericSend+0x14>
 8004b8e:	b672      	cpsid	i
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d104      	bne.n	8004ba0 <xQueueGenericSend+0x22>
 8004b96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <xQueueGenericSend+0x22>
 8004b9c:	b672      	cpsid	i
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba0:	2f02      	cmp	r7, #2
 8004ba2:	d104      	bne.n	8004bae <xQueueGenericSend+0x30>
 8004ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d001      	beq.n	8004bae <xQueueGenericSend+0x30>
 8004baa:	b672      	cpsid	i
 8004bac:	e7fe      	b.n	8004bac <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bae:	f000 fe33 	bl	8005818 <xTaskGetSchedulerState>
 8004bb2:	1e06      	subs	r6, r0, #0
 8004bb4:	d104      	bne.n	8004bc0 <xQueueGenericSend+0x42>
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d04d      	beq.n	8004c58 <xQueueGenericSend+0xda>
 8004bbc:	b672      	cpsid	i
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGenericSend+0x40>
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	e049      	b.n	8004c58 <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <xQueueGenericSend+0x56>
					taskEXIT_CRITICAL();
 8004bcc:	f7ff fe14 	bl	80047f8 <vPortExitCritical>
			return errQUEUE_FULL;
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e05c      	b.n	8004c8e <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 8004bd4:	2e00      	cmp	r6, #0
 8004bd6:	d102      	bne.n	8004bde <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd8:	a802      	add	r0, sp, #8
 8004bda:	f000 fdd9 	bl	8005790 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004bde:	f7ff fe0b 	bl	80047f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004be2:	f000 fc1d 	bl	8005420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be6:	f7ff fdfb 	bl	80047e0 <vPortEnterCritical>
 8004bea:	0022      	movs	r2, r4
 8004bec:	3244      	adds	r2, #68	; 0x44
 8004bee:	7813      	ldrb	r3, [r2, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <xQueueGenericSend+0x7c>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	7013      	strb	r3, [r2, #0]
 8004bfa:	0022      	movs	r2, r4
 8004bfc:	3245      	adds	r2, #69	; 0x45
 8004bfe:	7813      	ldrb	r3, [r2, #0]
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	d101      	bne.n	8004c0a <xQueueGenericSend+0x8c>
 8004c06:	2300      	movs	r3, #0
 8004c08:	7013      	strb	r3, [r2, #0]
 8004c0a:	f7ff fdf5 	bl	80047f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0e:	a901      	add	r1, sp, #4
 8004c10:	a802      	add	r0, sp, #8
 8004c12:	f000 fdc9 	bl	80057a8 <xTaskCheckForTimeOut>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d13b      	bne.n	8004c92 <xQueueGenericSend+0x114>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c1a:	f7ff fde1 	bl	80047e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d110      	bne.n	8004c48 <xQueueGenericSend+0xca>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004c26:	f7ff fde7 	bl	80047f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	3010      	adds	r0, #16
 8004c30:	f000 fd48 	bl	80056c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c34:	0020      	movs	r0, r4
 8004c36:	f7ff febe 	bl	80049b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c3a:	f000 fc85 	bl	8005548 <xTaskResumeAll>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d109      	bne.n	8004c56 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004c42:	f7ff fdc1 	bl	80047c8 <vPortYield>
 8004c46:	e006      	b.n	8004c56 <xQueueGenericSend+0xd8>
	taskEXIT_CRITICAL();
 8004c48:	f7ff fdd6 	bl	80047f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	f7ff feb2 	bl	80049b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c52:	f000 fc79 	bl	8005548 <xTaskResumeAll>
 8004c56:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004c58:	f7ff fdc2 	bl	80047e0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d301      	bcc.n	8004c68 <xQueueGenericSend+0xea>
 8004c64:	2f02      	cmp	r7, #2
 8004c66:	d1ad      	bne.n	8004bc4 <xQueueGenericSend+0x46>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c68:	003a      	movs	r2, r7
 8004c6a:	0029      	movs	r1, r5
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	f7ff fe55 	bl	800491c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <xQueueGenericSend+0x102>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c78:	0020      	movs	r0, r4
 8004c7a:	3024      	adds	r0, #36	; 0x24
 8004c7c:	f000 fd4c 	bl	8005718 <xTaskRemoveFromEventList>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d001      	beq.n	8004c88 <xQueueGenericSend+0x10a>
							queueYIELD_IF_USING_PREEMPTION();
 8004c84:	f7ff fda0 	bl	80047c8 <vPortYield>
				taskEXIT_CRITICAL();
 8004c88:	f7ff fdb6 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8004c8c:	2001      	movs	r0, #1
}
 8004c8e:	b005      	add	sp, #20
 8004c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8004c92:	0020      	movs	r0, r4
 8004c94:	f7ff fe8f 	bl	80049b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c98:	f000 fc56 	bl	8005548 <xTaskResumeAll>
 8004c9c:	e798      	b.n	8004bd0 <xQueueGenericSend+0x52>

08004c9e <xQueueGenericSendFromISR>:
{
 8004c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	0004      	movs	r4, r0
 8004ca4:	0017      	movs	r7, r2
 8004ca6:	001e      	movs	r6, r3
 8004ca8:	9101      	str	r1, [sp, #4]
	configASSERT( pxQueue );
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x14>
 8004cae:	b672      	cpsid	i
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb2:	9b01      	ldr	r3, [sp, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <xQueueGenericSendFromISR+0x24>
 8004cb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <xQueueGenericSendFromISR+0x24>
 8004cbe:	b672      	cpsid	i
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc2:	2e02      	cmp	r6, #2
 8004cc4:	d104      	bne.n	8004cd0 <xQueueGenericSendFromISR+0x32>
 8004cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d001      	beq.n	8004cd0 <xQueueGenericSendFromISR+0x32>
 8004ccc:	b672      	cpsid	i
 8004cce:	e7fe      	b.n	8004cce <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd0:	f7ff fda0 	bl	8004814 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd8:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d302      	bcc.n	8004ce4 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 8004cde:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce0:	2e02      	cmp	r6, #2
 8004ce2:	d11b      	bne.n	8004d1c <xQueueGenericSendFromISR+0x7e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ce4:	0023      	movs	r3, r4
 8004ce6:	3345      	adds	r3, #69	; 0x45
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cec:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cee:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf0:	0020      	movs	r0, r4
 8004cf2:	9901      	ldr	r1, [sp, #4]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf6:	f7ff fe11 	bl	800491c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004cfa:	1c6b      	adds	r3, r5, #1
 8004cfc:	d114      	bne.n	8004d28 <xQueueGenericSendFromISR+0x8a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
 8004d04:	2501      	movs	r5, #1
 8004d06:	e009      	b.n	8004d1c <xQueueGenericSendFromISR+0x7e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d08:	0020      	movs	r0, r4
 8004d0a:	3024      	adds	r0, #36	; 0x24
 8004d0c:	f000 fd04 	bl	8005718 <xTaskRemoveFromEventList>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d0f7      	beq.n	8004d04 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d14:	2f00      	cmp	r7, #0
 8004d16:	d0f5      	beq.n	8004d04 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d18:	2501      	movs	r5, #1
 8004d1a:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004d1c:	9803      	ldr	r0, [sp, #12]
 8004d1e:	f7ff fd7d 	bl	800481c <vClearInterruptMaskFromISR>
}
 8004d22:	0028      	movs	r0, r5
 8004d24:	b005      	add	sp, #20
 8004d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	3501      	adds	r5, #1
 8004d2c:	b26d      	sxtb	r5, r5
 8004d2e:	701d      	strb	r5, [r3, #0]
 8004d30:	e7e8      	b.n	8004d04 <xQueueGenericSendFromISR+0x66>

08004d32 <xQueueReceive>:
{
 8004d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d34:	b085      	sub	sp, #20
 8004d36:	0004      	movs	r4, r0
 8004d38:	000f      	movs	r7, r1
 8004d3a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d101      	bne.n	8004d44 <xQueueReceive+0x12>
 8004d40:	b672      	cpsid	i
 8004d42:	e7fe      	b.n	8004d42 <xQueueReceive+0x10>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d104      	bne.n	8004d52 <xQueueReceive+0x20>
 8004d48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <xQueueReceive+0x20>
 8004d4e:	b672      	cpsid	i
 8004d50:	e7fe      	b.n	8004d50 <xQueueReceive+0x1e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d52:	f000 fd61 	bl	8005818 <xTaskGetSchedulerState>
 8004d56:	1e06      	subs	r6, r0, #0
 8004d58:	d104      	bne.n	8004d64 <xQueueReceive+0x32>
 8004d5a:	9b01      	ldr	r3, [sp, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d041      	beq.n	8004de4 <xQueueReceive+0xb2>
 8004d60:	b672      	cpsid	i
 8004d62:	e7fe      	b.n	8004d62 <xQueueReceive+0x30>
 8004d64:	2600      	movs	r6, #0
 8004d66:	e03d      	b.n	8004de4 <xQueueReceive+0xb2>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d68:	9d01      	ldr	r5, [sp, #4]
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	d103      	bne.n	8004d76 <xQueueReceive+0x44>
					taskEXIT_CRITICAL();
 8004d6e:	f7ff fd43 	bl	80047f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004d72:	2000      	movs	r0, #0
 8004d74:	e04f      	b.n	8004e16 <xQueueReceive+0xe4>
				else if( xEntryTimeSet == pdFALSE )
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d102      	bne.n	8004d80 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d7a:	a802      	add	r0, sp, #8
 8004d7c:	f000 fd08 	bl	8005790 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004d80:	f7ff fd3a 	bl	80047f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004d84:	f000 fb4c 	bl	8005420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d88:	f7ff fd2a 	bl	80047e0 <vPortEnterCritical>
 8004d8c:	0022      	movs	r2, r4
 8004d8e:	3244      	adds	r2, #68	; 0x44
 8004d90:	7813      	ldrb	r3, [r2, #0]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	d101      	bne.n	8004d9c <xQueueReceive+0x6a>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	7013      	strb	r3, [r2, #0]
 8004d9c:	0022      	movs	r2, r4
 8004d9e:	3245      	adds	r2, #69	; 0x45
 8004da0:	7813      	ldrb	r3, [r2, #0]
 8004da2:	b25b      	sxtb	r3, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	d101      	bne.n	8004dac <xQueueReceive+0x7a>
 8004da8:	2300      	movs	r3, #0
 8004daa:	7013      	strb	r3, [r2, #0]
 8004dac:	f7ff fd24 	bl	80047f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db0:	a901      	add	r1, sp, #4
 8004db2:	a802      	add	r0, sp, #8
 8004db4:	f000 fcf8 	bl	80057a8 <xTaskCheckForTimeOut>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d134      	bne.n	8004e26 <xQueueReceive+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f7ff fda3 	bl	8004908 <prvIsQueueEmpty>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d029      	beq.n	8004e1a <xQueueReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dc6:	0020      	movs	r0, r4
 8004dc8:	9901      	ldr	r1, [sp, #4]
 8004dca:	3024      	adds	r0, #36	; 0x24
 8004dcc:	f000 fc7a 	bl	80056c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dd0:	0020      	movs	r0, r4
 8004dd2:	f7ff fdf0 	bl	80049b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dd6:	f000 fbb7 	bl	8005548 <xTaskResumeAll>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d101      	bne.n	8004de2 <xQueueReceive+0xb0>
					portYIELD_WITHIN_API();
 8004dde:	f7ff fcf3 	bl	80047c8 <vPortYield>
 8004de2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004de4:	f7ff fcfc 	bl	80047e0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	d0bc      	beq.n	8004d68 <xQueueReceive+0x36>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dee:	0039      	movs	r1, r7
 8004df0:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004df2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004df4:	f7ff fdcd 	bl	8004992 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004df8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <xQueueReceive+0xde>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e00:	0020      	movs	r0, r4
 8004e02:	3010      	adds	r0, #16
 8004e04:	f000 fc88 	bl	8005718 <xTaskRemoveFromEventList>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d001      	beq.n	8004e10 <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 8004e0c:	f7ff fcdc 	bl	80047c8 <vPortYield>
				taskEXIT_CRITICAL();
 8004e10:	f7ff fcf2 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8004e14:	2001      	movs	r0, #1
}
 8004e16:	b005      	add	sp, #20
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004e1a:	0020      	movs	r0, r4
 8004e1c:	f7ff fdcb 	bl	80049b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e20:	f000 fb92 	bl	8005548 <xTaskResumeAll>
 8004e24:	e7dd      	b.n	8004de2 <xQueueReceive+0xb0>
			prvUnlockQueue( pxQueue );
 8004e26:	0020      	movs	r0, r4
 8004e28:	f7ff fdc5 	bl	80049b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e2c:	f000 fb8c 	bl	8005548 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e30:	0020      	movs	r0, r4
 8004e32:	f7ff fd69 	bl	8004908 <prvIsQueueEmpty>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0d3      	beq.n	8004de2 <xQueueReceive+0xb0>
 8004e3a:	e79a      	b.n	8004d72 <xQueueReceive+0x40>

08004e3c <xQueueSemaphoreTake>:
{
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	1e04      	subs	r4, r0, #0
 8004e42:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004e44:	d101      	bne.n	8004e4a <xQueueSemaphoreTake+0xe>
 8004e46:	b672      	cpsid	i
 8004e48:	e7fe      	b.n	8004e48 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e4a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	d001      	beq.n	8004e54 <xQueueSemaphoreTake+0x18>
 8004e50:	b672      	cpsid	i
 8004e52:	e7fe      	b.n	8004e52 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e54:	f000 fce0 	bl	8005818 <xTaskGetSchedulerState>
 8004e58:	1e06      	subs	r6, r0, #0
 8004e5a:	d104      	bne.n	8004e66 <xQueueSemaphoreTake+0x2a>
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <xQueueSemaphoreTake+0x30>
 8004e62:	b672      	cpsid	i
 8004e64:	e7fe      	b.n	8004e64 <xQueueSemaphoreTake+0x28>
 8004e66:	002e      	movs	r6, r5
 8004e68:	2701      	movs	r7, #1
 8004e6a:	e04d      	b.n	8004f08 <xQueueSemaphoreTake+0xcc>
 8004e6c:	0005      	movs	r5, r0
 8004e6e:	e7fb      	b.n	8004e68 <xQueueSemaphoreTake+0x2c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <xQueueSemaphoreTake+0x48>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	d001      	beq.n	8004e7e <xQueueSemaphoreTake+0x42>
 8004e7a:	b672      	cpsid	i
 8004e7c:	e7fe      	b.n	8004e7c <xQueueSemaphoreTake+0x40>
					taskEXIT_CRITICAL();
 8004e7e:	f7ff fcbb 	bl	80047f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004e82:	e05c      	b.n	8004f3e <xQueueSemaphoreTake+0x102>
				else if( xEntryTimeSet == pdFALSE )
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	d102      	bne.n	8004e8e <xQueueSemaphoreTake+0x52>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e88:	a802      	add	r0, sp, #8
 8004e8a:	f000 fc81 	bl	8005790 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e8e:	f7ff fcb3 	bl	80047f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004e92:	f000 fac5 	bl	8005420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e96:	f7ff fca3 	bl	80047e0 <vPortEnterCritical>
 8004e9a:	0022      	movs	r2, r4
 8004e9c:	3244      	adds	r2, #68	; 0x44
 8004e9e:	7813      	ldrb	r3, [r2, #0]
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <xQueueSemaphoreTake+0x6e>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	7013      	strb	r3, [r2, #0]
 8004eaa:	0022      	movs	r2, r4
 8004eac:	3245      	adds	r2, #69	; 0x45
 8004eae:	7813      	ldrb	r3, [r2, #0]
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	d101      	bne.n	8004eba <xQueueSemaphoreTake+0x7e>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	7013      	strb	r3, [r2, #0]
 8004eba:	f7ff fc9d 	bl	80047f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ebe:	a901      	add	r1, sp, #4
 8004ec0:	a802      	add	r0, sp, #8
 8004ec2:	f000 fc71 	bl	80057a8 <xTaskCheckForTimeOut>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d142      	bne.n	8004f50 <xQueueSemaphoreTake+0x114>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eca:	0020      	movs	r0, r4
 8004ecc:	f7ff fd1c 	bl	8004908 <prvIsQueueEmpty>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d037      	beq.n	8004f44 <xQueueSemaphoreTake+0x108>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <xQueueSemaphoreTake+0xae>
						taskENTER_CRITICAL();
 8004eda:	f7ff fc81 	bl	80047e0 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ede:	68a0      	ldr	r0, [r4, #8]
 8004ee0:	f000 fcaa 	bl	8005838 <xTaskPriorityInherit>
 8004ee4:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
 8004ee6:	f7ff fc87 	bl	80047f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eea:	0020      	movs	r0, r4
 8004eec:	9901      	ldr	r1, [sp, #4]
 8004eee:	3024      	adds	r0, #36	; 0x24
 8004ef0:	f000 fbe8 	bl	80056c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ef4:	0020      	movs	r0, r4
 8004ef6:	f7ff fd5e 	bl	80049b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004efa:	f000 fb25 	bl	8005548 <xTaskResumeAll>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueSemaphoreTake+0xca>
					portYIELD_WITHIN_API();
 8004f02:	f7ff fc61 	bl	80047c8 <vPortYield>
 8004f06:	003e      	movs	r6, r7
		taskENTER_CRITICAL();
 8004f08:	f7ff fc6a 	bl	80047e0 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ae      	beq.n	8004e70 <xQueueSemaphoreTake+0x34>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f12:	3b01      	subs	r3, #1
 8004f14:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xQueueSemaphoreTake+0xe6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f1c:	f000 fd3c 	bl	8005998 <pvTaskIncrementMutexHeldCount>
 8004f20:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <xQueueSemaphoreTake+0xfc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f28:	0020      	movs	r0, r4
 8004f2a:	3010      	adds	r0, #16
 8004f2c:	f000 fbf4 	bl	8005718 <xTaskRemoveFromEventList>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d001      	beq.n	8004f38 <xQueueSemaphoreTake+0xfc>
						queueYIELD_IF_USING_PREEMPTION();
 8004f34:	f7ff fc48 	bl	80047c8 <vPortYield>
				taskEXIT_CRITICAL();
 8004f38:	f7ff fc5e 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8004f3c:	2501      	movs	r5, #1
}
 8004f3e:	0028      	movs	r0, r5
 8004f40:	b005      	add	sp, #20
 8004f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004f44:	0020      	movs	r0, r4
 8004f46:	f7ff fd36 	bl	80049b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f4a:	f000 fafd 	bl	8005548 <xTaskResumeAll>
 8004f4e:	e7da      	b.n	8004f06 <xQueueSemaphoreTake+0xca>
			prvUnlockQueue( pxQueue );
 8004f50:	0020      	movs	r0, r4
 8004f52:	f7ff fd30 	bl	80049b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f56:	f000 faf7 	bl	8005548 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f5a:	0020      	movs	r0, r4
 8004f5c:	f7ff fcd4 	bl	8004908 <prvIsQueueEmpty>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d0d0      	beq.n	8004f06 <xQueueSemaphoreTake+0xca>
					if( xInheritanceOccurred != pdFALSE )
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	d0ea      	beq.n	8004f3e <xQueueSemaphoreTake+0x102>
						taskENTER_CRITICAL();
 8004f68:	f7ff fc3a 	bl	80047e0 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d003      	beq.n	8004f7a <xQueueSemaphoreTake+0x13e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f72:	2138      	movs	r1, #56	; 0x38
 8004f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f7a:	68a0      	ldr	r0, [r4, #8]
 8004f7c:	f000 fcd0 	bl	8005920 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8004f80:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8004f82:	f7ff fc39 	bl	80047f8 <vPortExitCritical>
 8004f86:	e7da      	b.n	8004f3e <xQueueSemaphoreTake+0x102>

08004f88 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f88:	2300      	movs	r3, #0
	{
 8004f8a:	b570      	push	{r4, r5, r6, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <vQueueAddToRegistry+0x20>)
 8004f8e:	00dd      	lsls	r5, r3, #3
 8004f90:	18ac      	adds	r4, r5, r2
 8004f92:	6826      	ldr	r6, [r4, #0]
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	d102      	bne.n	8004f9e <vQueueAddToRegistry+0x16>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f98:	50a9      	str	r1, [r5, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f9a:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d1f4      	bne.n	8004f8e <vQueueAddToRegistry+0x6>
 8004fa4:	e7fa      	b.n	8004f9c <vQueueAddToRegistry+0x14>
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	20001674 	.word	0x20001674

08004fac <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fac:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <vQueueUnregisterQueue+0x24>)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	0011      	movs	r1, r2
	{
 8004fb2:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004fb4:	6854      	ldr	r4, [r2, #4]
 8004fb6:	4284      	cmp	r4, r0
 8004fb8:	d105      	bne.n	8004fc6 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004fba:	2200      	movs	r2, #0
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	50ca      	str	r2, [r1, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004fc0:	18cb      	adds	r3, r1, r3
 8004fc2:	605a      	str	r2, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fc4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	3208      	adds	r2, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d1f2      	bne.n	8004fb4 <vQueueUnregisterQueue+0x8>
 8004fce:	e7f9      	b.n	8004fc4 <vQueueUnregisterQueue+0x18>
 8004fd0:	20001674 	.word	0x20001674

08004fd4 <vQueueDelete>:
{
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	1e04      	subs	r4, r0, #0
	configASSERT( pxQueue );
 8004fd8:	d101      	bne.n	8004fde <vQueueDelete+0xa>
 8004fda:	b672      	cpsid	i
 8004fdc:	e7fe      	b.n	8004fdc <vQueueDelete+0x8>
		vQueueUnregisterQueue( pxQueue );
 8004fde:	f7ff ffe5 	bl	8004fac <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fe2:	0023      	movs	r3, r4
 8004fe4:	3346      	adds	r3, #70	; 0x46
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <vQueueDelete+0x1e>
			vPortFree( pxQueue );
 8004fec:	0020      	movs	r0, r4
 8004fee:	f7ff fb3f 	bl	8004670 <vPortFree>
}
 8004ff2:	bd10      	pop	{r4, pc}

08004ff4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	0004      	movs	r4, r0
 8004ff8:	0016      	movs	r6, r2
 8004ffa:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ffc:	f7ff fbf0 	bl	80047e0 <vPortEnterCritical>
 8005000:	0022      	movs	r2, r4
 8005002:	3244      	adds	r2, #68	; 0x44
 8005004:	7813      	ldrb	r3, [r2, #0]
 8005006:	b25b      	sxtb	r3, r3
 8005008:	3301      	adds	r3, #1
 800500a:	d101      	bne.n	8005010 <vQueueWaitForMessageRestricted+0x1c>
 800500c:	2300      	movs	r3, #0
 800500e:	7013      	strb	r3, [r2, #0]
 8005010:	0022      	movs	r2, r4
 8005012:	3245      	adds	r2, #69	; 0x45
 8005014:	7813      	ldrb	r3, [r2, #0]
 8005016:	b25b      	sxtb	r3, r3
 8005018:	3301      	adds	r3, #1
 800501a:	d101      	bne.n	8005020 <vQueueWaitForMessageRestricted+0x2c>
 800501c:	2300      	movs	r3, #0
 800501e:	7013      	strb	r3, [r2, #0]
 8005020:	f7ff fbea 	bl	80047f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <vQueueWaitForMessageRestricted+0x42>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800502a:	0020      	movs	r0, r4
 800502c:	0032      	movs	r2, r6
 800502e:	0029      	movs	r1, r5
 8005030:	3024      	adds	r0, #36	; 0x24
 8005032:	f000 fb59 	bl	80056e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005036:	0020      	movs	r0, r4
 8005038:	f7ff fcbd 	bl	80049b6 <prvUnlockQueue>
	}
 800503c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005040 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005044:	f7ff fbcc 	bl	80047e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <prvAddNewTaskToReadyList+0xb4>)
		if( pxCurrentTCB == NULL )
 800504a:	4d2b      	ldr	r5, [pc, #172]	; (80050f8 <prvAddNewTaskToReadyList+0xb8>)
		uxCurrentNumberOfTasks++;
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	3201      	adds	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005052:	682e      	ldr	r6, [r5, #0]
 8005054:	2e00      	cmp	r6, #0
 8005056:	d142      	bne.n	80050de <prvAddNewTaskToReadyList+0x9e>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005058:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d11e      	bne.n	800509e <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005060:	2714      	movs	r7, #20
 8005062:	0038      	movs	r0, r7
 8005064:	4370      	muls	r0, r6
 8005066:	4b25      	ldr	r3, [pc, #148]	; (80050fc <prvAddNewTaskToReadyList+0xbc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005068:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800506a:	1818      	adds	r0, r3, r0
 800506c:	f7ff fb2a 	bl	80046c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005070:	2e38      	cmp	r6, #56	; 0x38
 8005072:	d1f6      	bne.n	8005062 <prvAddNewTaskToReadyList+0x22>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005074:	4f22      	ldr	r7, [pc, #136]	; (8005100 <prvAddNewTaskToReadyList+0xc0>)
 8005076:	0038      	movs	r0, r7
 8005078:	f7ff fb24 	bl	80046c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800507c:	4e21      	ldr	r6, [pc, #132]	; (8005104 <prvAddNewTaskToReadyList+0xc4>)
 800507e:	0030      	movs	r0, r6
 8005080:	f7ff fb20 	bl	80046c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005084:	4820      	ldr	r0, [pc, #128]	; (8005108 <prvAddNewTaskToReadyList+0xc8>)
 8005086:	f7ff fb1d 	bl	80046c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800508a:	4820      	ldr	r0, [pc, #128]	; (800510c <prvAddNewTaskToReadyList+0xcc>)
 800508c:	f7ff fb1a 	bl	80046c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005090:	481f      	ldr	r0, [pc, #124]	; (8005110 <prvAddNewTaskToReadyList+0xd0>)
 8005092:	f7ff fb17 	bl	80046c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <prvAddNewTaskToReadyList+0xd4>)
 8005098:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <prvAddNewTaskToReadyList+0xd8>)
 800509c:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800509e:	4a1f      	ldr	r2, [pc, #124]	; (800511c <prvAddNewTaskToReadyList+0xdc>)
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <prvAddNewTaskToReadyList+0xe0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050a8:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050ae:	428b      	cmp	r3, r1
 80050b0:	d900      	bls.n	80050b4 <prvAddNewTaskToReadyList+0x74>
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	2014      	movs	r0, #20
 80050b6:	4358      	muls	r0, r3
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <prvAddNewTaskToReadyList+0xbc>)
 80050ba:	1d21      	adds	r1, r4, #4
 80050bc:	1818      	adds	r0, r3, r0
 80050be:	f7ff fb0f 	bl	80046e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80050c2:	f7ff fb99 	bl	80047f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80050c6:	4b17      	ldr	r3, [pc, #92]	; (8005124 <prvAddNewTaskToReadyList+0xe4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d006      	beq.n	80050dc <prvAddNewTaskToReadyList+0x9c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d201      	bcs.n	80050dc <prvAddNewTaskToReadyList+0x9c>
			taskYIELD_IF_USING_PREEMPTION();
 80050d8:	f7ff fb76 	bl	80047c8 <vPortYield>
}
 80050dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 80050de:	4b11      	ldr	r3, [pc, #68]	; (8005124 <prvAddNewTaskToReadyList+0xe4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1db      	bne.n	800509e <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d8d6      	bhi.n	800509e <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 80050f0:	602c      	str	r4, [r5, #0]
 80050f2:	e7d4      	b.n	800509e <prvAddNewTaskToReadyList+0x5e>
 80050f4:	20000e9c 	.word	0x20000e9c
 80050f8:	20000a30 	.word	0x20000a30
 80050fc:	20000a3c 	.word	0x20000a3c
 8005100:	20000eb0 	.word	0x20000eb0
 8005104:	20000ec4 	.word	0x20000ec4
 8005108:	20000ee4 	.word	0x20000ee4
 800510c:	20000f10 	.word	0x20000f10
 8005110:	20000efc 	.word	0x20000efc
 8005114:	20000a34 	.word	0x20000a34
 8005118:	20000a38 	.word	0x20000a38
 800511c:	20000ea8 	.word	0x20000ea8
 8005120:	20000eac 	.word	0x20000eac
 8005124:	20000ef8 	.word	0x20000ef8

08005128 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <prvResetNextTaskUnblockTime+0x20>)
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <prvResetNextTaskUnblockTime+0x24>)
 8005130:	2900      	cmp	r1, #0
 8005132:	d103      	bne.n	800513c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005134:	2201      	movs	r2, #1
 8005136:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005138:	601a      	str	r2, [r3, #0]
	}
}
 800513a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005140:	68d2      	ldr	r2, [r2, #12]
 8005142:	6852      	ldr	r2, [r2, #4]
 8005144:	e7f8      	b.n	8005138 <prvResetNextTaskUnblockTime+0x10>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000a34 	.word	0x20000a34
 800514c:	20000ed8 	.word	0x20000ed8

08005150 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005152:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005154:	0096      	lsls	r6, r2, #2
 8005156:	0032      	movs	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005158:	9000      	str	r0, [sp, #0]
 800515a:	000d      	movs	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800515c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800515e:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005160:	9301      	str	r3, [sp, #4]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005162:	f000 ff3c 	bl	8005fde <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005168:	3e04      	subs	r6, #4
 800516a:	199e      	adds	r6, r3, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800516c:	2307      	movs	r3, #7
 800516e:	439e      	bics	r6, r3
 8005170:	0037      	movs	r7, r6
	if( pcName != NULL )
 8005172:	2d00      	cmp	r5, #0
 8005174:	d03d      	beq.n	80051f2 <prvInitialiseNewTask.isra.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005176:	0022      	movs	r2, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005178:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800517a:	3234      	adds	r2, #52	; 0x34
 800517c:	5ce9      	ldrb	r1, [r5, r3]
 800517e:	54d1      	strb	r1, [r2, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8005180:	5ce9      	ldrb	r1, [r5, r3]
 8005182:	2900      	cmp	r1, #0
 8005184:	d002      	beq.n	800518c <prvInitialiseNewTask.isra.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005186:	3301      	adds	r3, #1
 8005188:	2b10      	cmp	r3, #16
 800518a:	d1f7      	bne.n	800517c <prvInitialiseNewTask.isra.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800518c:	0023      	movs	r3, r4
 800518e:	2200      	movs	r2, #0
 8005190:	3343      	adds	r3, #67	; 0x43
 8005192:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005194:	9d08      	ldr	r5, [sp, #32]
 8005196:	2d37      	cmp	r5, #55	; 0x37
 8005198:	d900      	bls.n	800519c <prvInitialiseNewTask.isra.0+0x4c>
 800519a:	2537      	movs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800519c:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 800519e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80051a0:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051a2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80051a4:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051a6:	f7ff fa98 	bl	80046da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051aa:	0020      	movs	r0, r4
 80051ac:	3018      	adds	r0, #24
 80051ae:	f7ff fa94 	bl	80046da <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b2:	2338      	movs	r3, #56	; 0x38
 80051b4:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 80051b6:	0023      	movs	r3, r4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051b8:	0020      	movs	r0, r4
		pxNewTCB->ulNotifiedValue = 0;
 80051ba:	33b4      	adds	r3, #180	; 0xb4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051c0:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051c2:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 80051c4:	601e      	str	r6, [r3, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051c6:	0031      	movs	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051c8:	711e      	strb	r6, [r3, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051ca:	3054      	adds	r0, #84	; 0x54
 80051cc:	f000 ff07 	bl	8005fde <memset>
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <prvInitialiseNewTask.isra.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d2:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <prvInitialiseNewTask.isra.0+0xb0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d8:	9a01      	ldr	r2, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <prvInitialiseNewTask.isra.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051de:	9900      	ldr	r1, [sp, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051e0:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e2:	f7ff fadf 	bl	80047a4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80051e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80051ea:	42b3      	cmp	r3, r6
 80051ec:	d000      	beq.n	80051f0 <prvInitialiseNewTask.isra.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051ee:	601c      	str	r4, [r3, #0]
}
 80051f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051f2:	0023      	movs	r3, r4
 80051f4:	3334      	adds	r3, #52	; 0x34
 80051f6:	701d      	strb	r5, [r3, #0]
 80051f8:	e7cc      	b.n	8005194 <prvInitialiseNewTask.isra.0+0x44>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	08006364 	.word	0x08006364
 8005200:	08006384 	.word	0x08006384
 8005204:	08006344 	.word	0x08006344

08005208 <prvDeleteTCB>:
	{
 8005208:	b510      	push	{r4, lr}
 800520a:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800520c:	3054      	adds	r0, #84	; 0x54
 800520e:	f000 fefb 	bl	8006008 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005212:	0023      	movs	r3, r4
 8005214:	33b9      	adds	r3, #185	; 0xb9
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800521c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800521e:	f7ff fa27 	bl	8004670 <vPortFree>
				vPortFree( pxTCB );
 8005222:	0020      	movs	r0, r4
 8005224:	f7ff fa24 	bl	8004670 <vPortFree>
	}
 8005228:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800522a:	2b01      	cmp	r3, #1
 800522c:	d0f9      	beq.n	8005222 <prvDeleteTCB+0x1a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800522e:	2b02      	cmp	r3, #2
 8005230:	d0fa      	beq.n	8005228 <prvDeleteTCB+0x20>
 8005232:	b672      	cpsid	i
 8005234:	e7fe      	b.n	8005234 <prvDeleteTCB+0x2c>
	...

08005238 <prvIdleTask>:
{
 8005238:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800523a:	4c10      	ldr	r4, [pc, #64]	; (800527c <prvIdleTask+0x44>)
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <prvIdleTask+0x48>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d9f7      	bls.n	800523a <prvIdleTask+0x2>
				taskYIELD();
 800524a:	f7ff fabd 	bl	80047c8 <vPortYield>
 800524e:	e7f4      	b.n	800523a <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 8005250:	f7ff fac6 	bl	80047e0 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <prvIdleTask+0x4c>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800525a:	1d28      	adds	r0, r5, #4
 800525c:	f7ff fa63 	bl	8004726 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <prvIdleTask+0x50>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	3b01      	subs	r3, #1
 8005266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800526e:	f7ff fac3 	bl	80047f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005272:	0028      	movs	r0, r5
 8005274:	f7ff ffc8 	bl	8005208 <prvDeleteTCB>
 8005278:	e7df      	b.n	800523a <prvIdleTask+0x2>
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	20000ea0 	.word	0x20000ea0
 8005280:	20000a3c 	.word	0x20000a3c
 8005284:	20000f10 	.word	0x20000f10
 8005288:	20000e9c 	.word	0x20000e9c

0800528c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005290:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	4d15      	ldr	r5, [pc, #84]	; (80052e8 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8005294:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005296:	6828      	ldr	r0, [r5, #0]
{
 8005298:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529a:	3004      	adds	r0, #4
 800529c:	f7ff fa43 	bl	8004726 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052a0:	1c63      	adds	r3, r4, #1
 80052a2:	d107      	bne.n	80052b4 <prvAddCurrentTaskToDelayedList+0x28>
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	d005      	beq.n	80052b4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a8:	6829      	ldr	r1, [r5, #0]
 80052aa:	4810      	ldr	r0, [pc, #64]	; (80052ec <prvAddCurrentTaskToDelayedList+0x60>)
 80052ac:	3104      	adds	r1, #4
 80052ae:	f7ff fa17 	bl	80046e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052b4:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052b6:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052b8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052ba:	42a6      	cmp	r6, r4
 80052bc:	d906      	bls.n	80052cc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <prvAddCurrentTaskToDelayedList+0x64>)
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	6829      	ldr	r1, [r5, #0]
 80052c4:	3104      	adds	r1, #4
 80052c6:	f7ff fa17 	bl	80046f8 <vListInsert>
 80052ca:	e7f2      	b.n	80052b2 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	6829      	ldr	r1, [r5, #0]
 80052d2:	3104      	adds	r1, #4
 80052d4:	f7ff fa10 	bl	80046f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	42a2      	cmp	r2, r4
 80052de:	d9e8      	bls.n	80052b2 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 80052e0:	601c      	str	r4, [r3, #0]
}
 80052e2:	e7e6      	b.n	80052b2 <prvAddCurrentTaskToDelayedList+0x26>
 80052e4:	20000f24 	.word	0x20000f24
 80052e8:	20000a30 	.word	0x20000a30
 80052ec:	20000efc 	.word	0x20000efc
 80052f0:	20000a38 	.word	0x20000a38
 80052f4:	20000a34 	.word	0x20000a34
 80052f8:	20000ed8 	.word	0x20000ed8

080052fc <xTaskCreateStatic>:
	{
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005302:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005304:	2d00      	cmp	r5, #0
 8005306:	d101      	bne.n	800530c <xTaskCreateStatic+0x10>
 8005308:	b672      	cpsid	i
 800530a:	e7fe      	b.n	800530a <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 800530c:	2c00      	cmp	r4, #0
 800530e:	d101      	bne.n	8005314 <xTaskCreateStatic+0x18>
 8005310:	b672      	cpsid	i
 8005312:	e7fe      	b.n	8005312 <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005314:	26bc      	movs	r6, #188	; 0xbc
 8005316:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005318:	9e05      	ldr	r6, [sp, #20]
 800531a:	2ebc      	cmp	r6, #188	; 0xbc
 800531c:	d001      	beq.n	8005322 <xTaskCreateStatic+0x26>
 800531e:	b672      	cpsid	i
 8005320:	e7fe      	b.n	8005320 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005322:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005326:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005328:	2602      	movs	r6, #2
 800532a:	35b9      	adds	r5, #185	; 0xb9
 800532c:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800532e:	ad04      	add	r5, sp, #16
 8005330:	9501      	str	r5, [sp, #4]
 8005332:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005334:	9402      	str	r4, [sp, #8]
 8005336:	9500      	str	r5, [sp, #0]
 8005338:	f7ff ff0a 	bl	8005150 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533c:	0020      	movs	r0, r4
 800533e:	f7ff fe7f 	bl	8005040 <prvAddNewTaskToReadyList>
	}
 8005342:	9804      	ldr	r0, [sp, #16]
 8005344:	b006      	add	sp, #24
 8005346:	bd70      	pop	{r4, r5, r6, pc}

08005348 <xTaskCreate>:
	{
 8005348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534a:	0007      	movs	r7, r0
 800534c:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800534e:	0090      	lsls	r0, r2, #2
	{
 8005350:	0016      	movs	r6, r2
 8005352:	9104      	str	r1, [sp, #16]
 8005354:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005356:	f7ff f909 	bl	800456c <pvPortMalloc>
 800535a:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 800535c:	d01d      	beq.n	800539a <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800535e:	20bc      	movs	r0, #188	; 0xbc
 8005360:	f7ff f904 	bl	800456c <pvPortMalloc>
 8005364:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8005366:	d015      	beq.n	8005394 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005368:	0003      	movs	r3, r0
 800536a:	2200      	movs	r2, #0
 800536c:	33b9      	adds	r3, #185	; 0xb9
					pxNewTCB->pxStack = pxStack;
 800536e:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005370:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005374:	0032      	movs	r2, r6
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800537a:	9904      	ldr	r1, [sp, #16]
 800537c:	9002      	str	r0, [sp, #8]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	0038      	movs	r0, r7
 8005382:	9b05      	ldr	r3, [sp, #20]
 8005384:	f7ff fee4 	bl	8005150 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005388:	0020      	movs	r0, r4
 800538a:	f7ff fe59 	bl	8005040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800538e:	2001      	movs	r0, #1
	}
 8005390:	b007      	add	sp, #28
 8005392:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8005394:	0028      	movs	r0, r5
 8005396:	f7ff f96b 	bl	8004670 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800539a:	2001      	movs	r0, #1
 800539c:	4240      	negs	r0, r0
		return xReturn;
 800539e:	e7f7      	b.n	8005390 <xTaskCreate+0x48>

080053a0 <vTaskStartScheduler>:
{
 80053a0:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053a2:	2400      	movs	r4, #0
{
 80053a4:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053a6:	aa07      	add	r2, sp, #28
 80053a8:	a906      	add	r1, sp, #24
 80053aa:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053ac:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ae:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053b0:	f7ff f8a0 	bl	80044f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053b4:	9b05      	ldr	r3, [sp, #20]
 80053b6:	9a07      	ldr	r2, [sp, #28]
 80053b8:	9302      	str	r3, [sp, #8]
 80053ba:	9b06      	ldr	r3, [sp, #24]
 80053bc:	4911      	ldr	r1, [pc, #68]	; (8005404 <vTaskStartScheduler+0x64>)
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	4811      	ldr	r0, [pc, #68]	; (8005408 <vTaskStartScheduler+0x68>)
 80053c2:	0023      	movs	r3, r4
 80053c4:	9400      	str	r4, [sp, #0]
 80053c6:	f7ff ff99 	bl	80052fc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80053ca:	42a0      	cmp	r0, r4
 80053cc:	d013      	beq.n	80053f6 <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 80053ce:	f000 fc51 	bl	8005c74 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80053d2:	2801      	cmp	r0, #1
 80053d4:	d111      	bne.n	80053fa <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 80053d6:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <vTaskStartScheduler+0x6c>)
 80053da:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <vTaskStartScheduler+0x70>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3354      	adds	r3, #84	; 0x54
 80053e0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80053e2:	2201      	movs	r2, #1
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <vTaskStartScheduler+0x74>)
 80053e6:	4252      	negs	r2, r2
 80053e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <vTaskStartScheduler+0x78>)
 80053ec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <vTaskStartScheduler+0x7c>)
 80053f0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80053f2:	f7ff fa6b 	bl	80048cc <xPortStartScheduler>
}
 80053f6:	b008      	add	sp, #32
 80053f8:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d1fb      	bne.n	80053f6 <vTaskStartScheduler+0x56>
 80053fe:	b672      	cpsid	i
 8005400:	e7fe      	b.n	8005400 <vTaskStartScheduler+0x60>
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	08006330 	.word	0x08006330
 8005408:	08005239 	.word	0x08005239
 800540c:	20000a30 	.word	0x20000a30
 8005410:	20000010 	.word	0x20000010
 8005414:	20000ed8 	.word	0x20000ed8
 8005418:	20000ef8 	.word	0x20000ef8
 800541c:	20000f24 	.word	0x20000f24

08005420 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005420:	4a02      	ldr	r2, [pc, #8]	; (800542c <vTaskSuspendAll+0xc>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	6013      	str	r3, [r2, #0]
}
 8005428:	4770      	bx	lr
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	20000ea4 	.word	0x20000ea4

08005430 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005430:	4b01      	ldr	r3, [pc, #4]	; (8005438 <xTaskGetTickCount+0x8>)
 8005432:	6818      	ldr	r0, [r3, #0]
}
 8005434:	4770      	bx	lr
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	20000f24 	.word	0x20000f24

0800543c <xTaskGetTickCountFromISR>:
 800543c:	4b01      	ldr	r3, [pc, #4]	; (8005444 <xTaskGetTickCountFromISR+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20000f24 	.word	0x20000f24

08005448 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <xTaskIncrementTick+0xd4>)
{
 800544a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d15e      	bne.n	8005510 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005452:	4b33      	ldr	r3, [pc, #204]	; (8005520 <xTaskIncrementTick+0xd8>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	3201      	adds	r2, #1
 8005458:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 800545a:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800545c:	2a00      	cmp	r2, #0
 800545e:	d111      	bne.n	8005484 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <xTaskIncrementTick+0xdc>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	2a00      	cmp	r2, #0
 8005468:	d001      	beq.n	800546e <xTaskIncrementTick+0x26>
 800546a:	b672      	cpsid	i
 800546c:	e7fe      	b.n	800546c <xTaskIncrementTick+0x24>
 800546e:	4a2e      	ldr	r2, [pc, #184]	; (8005528 <xTaskIncrementTick+0xe0>)
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	6810      	ldr	r0, [r2, #0]
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	6011      	str	r1, [r2, #0]
 8005478:	4a2c      	ldr	r2, [pc, #176]	; (800552c <xTaskIncrementTick+0xe4>)
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	f7ff fe52 	bl	8005128 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005484:	4e2a      	ldr	r6, [pc, #168]	; (8005530 <xTaskIncrementTick+0xe8>)
 8005486:	9a00      	ldr	r2, [sp, #0]
 8005488:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800548a:	2400      	movs	r4, #0
 800548c:	4f29      	ldr	r7, [pc, #164]	; (8005534 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548e:	429a      	cmp	r2, r3
 8005490:	d235      	bcs.n	80054fe <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	2314      	movs	r3, #20
 8005498:	4353      	muls	r3, r2
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <xTaskIncrementTick+0xf0>)
 800549c:	58d3      	ldr	r3, [r2, r3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d900      	bls.n	80054a4 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 80054a2:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <xTaskIncrementTick+0xf4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d000      	beq.n	80054ae <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80054ac:	2401      	movs	r4, #1
}
 80054ae:	0020      	movs	r0, r4
 80054b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b2:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 80054b4:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054ba:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 80054bc:	429a      	cmp	r2, r3
 80054be:	d325      	bcc.n	800550c <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c0:	1d2b      	adds	r3, r5, #4
 80054c2:	0018      	movs	r0, r3
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	f7ff f92e 	bl	8004726 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054d0:	0028      	movs	r0, r5
 80054d2:	3018      	adds	r0, #24
 80054d4:	f7ff f927 	bl	8004726 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <xTaskIncrementTick+0xf8>)
 80054da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4290      	cmp	r0, r2
 80054e0:	d900      	bls.n	80054e4 <xTaskIncrementTick+0x9c>
 80054e2:	6018      	str	r0, [r3, #0]
 80054e4:	2314      	movs	r3, #20
 80054e6:	4358      	muls	r0, r3
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <xTaskIncrementTick+0xf0>)
 80054ea:	1d29      	adds	r1, r5, #4
 80054ec:	1818      	adds	r0, r3, r0
 80054ee:	f7ff f8f7 	bl	80046e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d300      	bcc.n	80054fe <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 80054fc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <xTaskIncrementTick+0xdc>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	2a00      	cmp	r2, #0
 8005506:	d1d4      	bne.n	80054b2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005508:	2301      	movs	r3, #1
 800550a:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 800550c:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550e:	e7c0      	b.n	8005492 <xTaskIncrementTick+0x4a>
		++xPendedTicks;
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8005512:	2400      	movs	r4, #0
		++xPendedTicks;
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800551a:	e7c8      	b.n	80054ae <xTaskIncrementTick+0x66>
 800551c:	20000ea4 	.word	0x20000ea4
 8005520:	20000f24 	.word	0x20000f24
 8005524:	20000a34 	.word	0x20000a34
 8005528:	20000a38 	.word	0x20000a38
 800552c:	20000edc 	.word	0x20000edc
 8005530:	20000ed8 	.word	0x20000ed8
 8005534:	20000a30 	.word	0x20000a30
 8005538:	20000a3c 	.word	0x20000a3c
 800553c:	20000f28 	.word	0x20000f28
 8005540:	20000eac 	.word	0x20000eac
 8005544:	20000ee0 	.word	0x20000ee0

08005548 <xTaskResumeAll>:
{
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800554a:	4c2b      	ldr	r4, [pc, #172]	; (80055f8 <xTaskResumeAll+0xb0>)
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <xTaskResumeAll+0xe>
 8005552:	b672      	cpsid	i
 8005554:	e7fe      	b.n	8005554 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8005556:	f7ff f943 	bl	80047e0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005560:	6824      	ldr	r4, [r4, #0]
 8005562:	2c00      	cmp	r4, #0
 8005564:	d004      	beq.n	8005570 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8005566:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005568:	f7ff f946 	bl	80047f8 <vPortExitCritical>
}
 800556c:	0020      	movs	r0, r4
 800556e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005570:	4b22      	ldr	r3, [pc, #136]	; (80055fc <xTaskResumeAll+0xb4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f6      	beq.n	8005566 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8005578:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 800557a:	2701      	movs	r7, #1
 800557c:	e01d      	b.n	80055ba <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005582:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005584:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005586:	3018      	adds	r0, #24
 8005588:	f7ff f8cd 	bl	8004726 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	0028      	movs	r0, r5
 800558e:	f7ff f8ca 	bl	8004726 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <xTaskResumeAll+0xb8>)
 8005594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4290      	cmp	r0, r2
 800559a:	d900      	bls.n	800559e <xTaskResumeAll+0x56>
 800559c:	6018      	str	r0, [r3, #0]
 800559e:	4370      	muls	r0, r6
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <xTaskResumeAll+0xbc>)
 80055a2:	0029      	movs	r1, r5
 80055a4:	18c0      	adds	r0, r0, r3
 80055a6:	f7ff f89b 	bl	80046e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <xTaskResumeAll+0xc0>)
 80055ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d301      	bcc.n	80055ba <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <xTaskResumeAll+0xc4>)
 80055b8:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <xTaskResumeAll+0xc8>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	2a00      	cmp	r2, #0
 80055c0:	d1dd      	bne.n	800557e <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 80055c2:	2c00      	cmp	r4, #0
 80055c4:	d001      	beq.n	80055ca <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 80055c6:	f7ff fdaf 	bl	8005128 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055ca:	4d12      	ldr	r5, [pc, #72]	; (8005614 <xTaskResumeAll+0xcc>)
 80055cc:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80055ce:	2c00      	cmp	r4, #0
 80055d0:	d00a      	beq.n	80055e8 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 80055d2:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80055d4:	f7ff ff38 	bl	8005448 <xTaskIncrementTick>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d001      	beq.n	80055e0 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <xTaskResumeAll+0xc4>)
 80055de:	601e      	str	r6, [r3, #0]
							--xPendedCounts;
 80055e0:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d1f6      	bne.n	80055d4 <xTaskResumeAll+0x8c>
						xPendedTicks = 0;
 80055e6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80055e8:	4b08      	ldr	r3, [pc, #32]	; (800560c <xTaskResumeAll+0xc4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ba      	beq.n	8005566 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 80055f0:	f7ff f8ea 	bl	80047c8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 80055f4:	2401      	movs	r4, #1
 80055f6:	e7b7      	b.n	8005568 <xTaskResumeAll+0x20>
 80055f8:	20000ea4 	.word	0x20000ea4
 80055fc:	20000e9c 	.word	0x20000e9c
 8005600:	20000eac 	.word	0x20000eac
 8005604:	20000a3c 	.word	0x20000a3c
 8005608:	20000a30 	.word	0x20000a30
 800560c:	20000f28 	.word	0x20000f28
 8005610:	20000ee4 	.word	0x20000ee4
 8005614:	20000ee0 	.word	0x20000ee0

08005618 <vTaskDelay>:
	{
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800561c:	d102      	bne.n	8005624 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 800561e:	f7ff f8d3 	bl	80047c8 <vPortYield>
	}
 8005622:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005624:	4b08      	ldr	r3, [pc, #32]	; (8005648 <vTaskDelay+0x30>)
 8005626:	681d      	ldr	r5, [r3, #0]
 8005628:	2d00      	cmp	r5, #0
 800562a:	d001      	beq.n	8005630 <vTaskDelay+0x18>
 800562c:	b672      	cpsid	i
 800562e:	e7fe      	b.n	800562e <vTaskDelay+0x16>
			vTaskSuspendAll();
 8005630:	f7ff fef6 	bl	8005420 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005634:	0029      	movs	r1, r5
 8005636:	0020      	movs	r0, r4
 8005638:	f7ff fe28 	bl	800528c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800563c:	f7ff ff84 	bl	8005548 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005640:	2800      	cmp	r0, #0
 8005642:	d0ec      	beq.n	800561e <vTaskDelay+0x6>
 8005644:	e7ed      	b.n	8005622 <vTaskDelay+0xa>
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	20000ea4 	.word	0x20000ea4

0800564c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <vTaskSwitchContext+0x60>)
{
 800564e:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <vTaskSwitchContext+0x64>)
 8005654:	2a00      	cmp	r2, #0
 8005656:	d002      	beq.n	800565e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
}
 800565c:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565e:	2514      	movs	r5, #20
 8005660:	4814      	ldr	r0, [pc, #80]	; (80056b4 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8005662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005664:	6802      	ldr	r2, [r0, #0]
 8005666:	4914      	ldr	r1, [pc, #80]	; (80056b8 <vTaskSwitchContext+0x6c>)
 8005668:	002b      	movs	r3, r5
 800566a:	4353      	muls	r3, r2
 800566c:	585c      	ldr	r4, [r3, r1]
 800566e:	2c00      	cmp	r4, #0
 8005670:	d016      	beq.n	80056a0 <vTaskSwitchContext+0x54>
 8005672:	18cc      	adds	r4, r1, r3
 8005674:	6865      	ldr	r5, [r4, #4]
 8005676:	3308      	adds	r3, #8
 8005678:	686d      	ldr	r5, [r5, #4]
 800567a:	185b      	adds	r3, r3, r1
 800567c:	6065      	str	r5, [r4, #4]
 800567e:	429d      	cmp	r5, r3
 8005680:	d101      	bne.n	8005686 <vTaskSwitchContext+0x3a>
 8005682:	686b      	ldr	r3, [r5, #4]
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	2314      	movs	r3, #20
 8005688:	4353      	muls	r3, r2
 800568a:	18c9      	adds	r1, r1, r3
 800568c:	684b      	ldr	r3, [r1, #4]
 800568e:	68d9      	ldr	r1, [r3, #12]
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <vTaskSwitchContext+0x70>)
 8005692:	6019      	str	r1, [r3, #0]
 8005694:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <vTaskSwitchContext+0x74>)
 800569a:	3354      	adds	r3, #84	; 0x54
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	e7dd      	b.n	800565c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d101      	bne.n	80056a8 <vTaskSwitchContext+0x5c>
 80056a4:	b672      	cpsid	i
 80056a6:	e7fe      	b.n	80056a6 <vTaskSwitchContext+0x5a>
 80056a8:	3a01      	subs	r2, #1
 80056aa:	e7dd      	b.n	8005668 <vTaskSwitchContext+0x1c>
 80056ac:	20000ea4 	.word	0x20000ea4
 80056b0:	20000f28 	.word	0x20000f28
 80056b4:	20000eac 	.word	0x20000eac
 80056b8:	20000a3c 	.word	0x20000a3c
 80056bc:	20000a30 	.word	0x20000a30
 80056c0:	20000010 	.word	0x20000010

080056c4 <vTaskPlaceOnEventList>:
{
 80056c4:	b510      	push	{r4, lr}
 80056c6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d101      	bne.n	80056d0 <vTaskPlaceOnEventList+0xc>
 80056cc:	b672      	cpsid	i
 80056ce:	e7fe      	b.n	80056ce <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <vTaskPlaceOnEventList+0x20>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	3118      	adds	r1, #24
 80056d6:	f7ff f80f 	bl	80046f8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056da:	2101      	movs	r1, #1
 80056dc:	0020      	movs	r0, r4
 80056de:	f7ff fdd5 	bl	800528c <prvAddCurrentTaskToDelayedList>
}
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	20000a30 	.word	0x20000a30

080056e8 <vTaskPlaceOnEventListRestricted>:
	{
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	000c      	movs	r4, r1
 80056ec:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d101      	bne.n	80056f6 <vTaskPlaceOnEventListRestricted+0xe>
 80056f2:	b672      	cpsid	i
 80056f4:	e7fe      	b.n	80056f4 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <vTaskPlaceOnEventListRestricted+0x2c>)
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	3118      	adds	r1, #24
 80056fc:	f7fe fff0 	bl	80046e0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8005700:	2d00      	cmp	r5, #0
 8005702:	d001      	beq.n	8005708 <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
 8005704:	2401      	movs	r4, #1
 8005706:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005708:	0029      	movs	r1, r5
 800570a:	0020      	movs	r0, r4
 800570c:	f7ff fdbe 	bl	800528c <prvAddCurrentTaskToDelayedList>
	}
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	20000a30 	.word	0x20000a30

08005718 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005718:	68c3      	ldr	r3, [r0, #12]
{
 800571a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800571e:	2c00      	cmp	r4, #0
 8005720:	d101      	bne.n	8005726 <xTaskRemoveFromEventList+0xe>
 8005722:	b672      	cpsid	i
 8005724:	e7fe      	b.n	8005724 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005726:	0025      	movs	r5, r4
 8005728:	3518      	adds	r5, #24
 800572a:	0028      	movs	r0, r5
 800572c:	f7fe fffb 	bl	8004726 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005730:	4b11      	ldr	r3, [pc, #68]	; (8005778 <xTaskRemoveFromEventList+0x60>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11b      	bne.n	8005770 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005738:	1d25      	adds	r5, r4, #4
 800573a:	0028      	movs	r0, r5
 800573c:	f7fe fff3 	bl	8004726 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005740:	4a0e      	ldr	r2, [pc, #56]	; (800577c <xTaskRemoveFromEventList+0x64>)
 8005742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	428b      	cmp	r3, r1
 8005748:	d900      	bls.n	800574c <xTaskRemoveFromEventList+0x34>
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	2014      	movs	r0, #20
 800574e:	0029      	movs	r1, r5
 8005750:	4358      	muls	r0, r3
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <xTaskRemoveFromEventList+0x68>)
 8005754:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005756:	f7fe ffc3 	bl	80046e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <xTaskRemoveFromEventList+0x6c>)
 800575c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800575e:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8005760:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	429a      	cmp	r2, r3
 8005766:	d902      	bls.n	800576e <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <xTaskRemoveFromEventList+0x70>)
 800576a:	3001      	adds	r0, #1
 800576c:	6018      	str	r0, [r3, #0]
}
 800576e:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005770:	0029      	movs	r1, r5
 8005772:	4806      	ldr	r0, [pc, #24]	; (800578c <xTaskRemoveFromEventList+0x74>)
 8005774:	e7ef      	b.n	8005756 <xTaskRemoveFromEventList+0x3e>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	20000ea4 	.word	0x20000ea4
 800577c:	20000eac 	.word	0x20000eac
 8005780:	20000a3c 	.word	0x20000a3c
 8005784:	20000a30 	.word	0x20000a30
 8005788:	20000f28 	.word	0x20000f28
 800578c:	20000ee4 	.word	0x20000ee4

08005790 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <vTaskInternalSetTimeOutState+0x10>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005796:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <vTaskInternalSetTimeOutState+0x14>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6043      	str	r3, [r0, #4]
}
 800579c:	4770      	bx	lr
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000edc 	.word	0x20000edc
 80057a4:	20000f24 	.word	0x20000f24

080057a8 <xTaskCheckForTimeOut>:
{
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	0005      	movs	r5, r0
 80057ac:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d101      	bne.n	80057b6 <xTaskCheckForTimeOut+0xe>
 80057b2:	b672      	cpsid	i
 80057b4:	e7fe      	b.n	80057b4 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d101      	bne.n	80057be <xTaskCheckForTimeOut+0x16>
 80057ba:	b672      	cpsid	i
 80057bc:	e7fe      	b.n	80057bc <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 80057be:	f7ff f80f 	bl	80047e0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <xTaskCheckForTimeOut+0x5c>)
				xReturn = pdFALSE;
 80057c4:	2600      	movs	r6, #0
		const TickType_t xConstTickCount = xTickCount;
 80057c6:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	d012      	beq.n	80057f4 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ce:	480e      	ldr	r0, [pc, #56]	; (8005808 <xTaskCheckForTimeOut+0x60>)
 80057d0:	682e      	ldr	r6, [r5, #0]
 80057d2:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057d4:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057d6:	4286      	cmp	r6, r0
 80057d8:	d002      	beq.n	80057e0 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 80057da:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057dc:	428a      	cmp	r2, r1
 80057de:	d909      	bls.n	80057f4 <xTaskCheckForTimeOut+0x4c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057e0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057e2:	4283      	cmp	r3, r0
 80057e4:	d90a      	bls.n	80057fc <xTaskCheckForTimeOut+0x54>
			*pxTicksToWait -= xElapsedTime;
 80057e6:	1a5b      	subs	r3, r3, r1
 80057e8:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057ea:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80057ec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057ee:	f7ff ffcf 	bl	8005790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057f2:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80057f4:	f7ff f800 	bl	80047f8 <vPortExitCritical>
}
 80057f8:	0030      	movs	r0, r6
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80057fc:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80057fe:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8005800:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005802:	e7f7      	b.n	80057f4 <xTaskCheckForTimeOut+0x4c>
 8005804:	20000f24 	.word	0x20000f24
 8005808:	20000edc 	.word	0x20000edc

0800580c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800580c:	2201      	movs	r2, #1
 800580e:	4b01      	ldr	r3, [pc, #4]	; (8005814 <vTaskMissedYield+0x8>)
 8005810:	601a      	str	r2, [r3, #0]
}
 8005812:	4770      	bx	lr
 8005814:	20000f28 	.word	0x20000f28

08005818 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800581a:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005822:	4b04      	ldr	r3, [pc, #16]	; (8005834 <xTaskGetSchedulerState+0x1c>)
 8005824:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005826:	4243      	negs	r3, r0
 8005828:	4158      	adcs	r0, r3
 800582a:	0040      	lsls	r0, r0, #1
	}
 800582c:	4770      	bx	lr
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	20000ef8 	.word	0x20000ef8
 8005834:	20000ea4 	.word	0x20000ea4

08005838 <xTaskPriorityInherit>:
	{
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800583c:	d027      	beq.n	800588e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800583e:	4d1a      	ldr	r5, [pc, #104]	; (80058a8 <xTaskPriorityInherit+0x70>)
 8005840:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4299      	cmp	r1, r3
 8005848:	d226      	bcs.n	8005898 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800584a:	6983      	ldr	r3, [r0, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	db04      	blt.n	800585a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005850:	2238      	movs	r2, #56	; 0x38
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800585a:	2314      	movs	r3, #20
 800585c:	434b      	muls	r3, r1
 800585e:	4e13      	ldr	r6, [pc, #76]	; (80058ac <xTaskPriorityInherit+0x74>)
 8005860:	6962      	ldr	r2, [r4, #20]
 8005862:	199b      	adds	r3, r3, r6
 8005864:	429a      	cmp	r2, r3
 8005866:	d113      	bne.n	8005890 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005868:	1d27      	adds	r7, r4, #4
 800586a:	0038      	movs	r0, r7
 800586c:	f7fe ff5b 	bl	8004726 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005876:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4290      	cmp	r0, r2
 800587c:	d900      	bls.n	8005880 <xTaskPriorityInherit+0x48>
 800587e:	6018      	str	r0, [r3, #0]
 8005880:	2314      	movs	r3, #20
 8005882:	4358      	muls	r0, r3
 8005884:	0039      	movs	r1, r7
 8005886:	1830      	adds	r0, r6, r0
 8005888:	f7fe ff2a 	bl	80046e0 <vListInsertEnd>
				xReturn = pdTRUE;
 800588c:	2001      	movs	r0, #1
	}
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005896:	e7f9      	b.n	800588c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4298      	cmp	r0, r3
 80058a0:	4180      	sbcs	r0, r0
 80058a2:	4240      	negs	r0, r0
 80058a4:	e7f3      	b.n	800588e <xTaskPriorityInherit+0x56>
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	20000a30 	.word	0x20000a30
 80058ac:	20000a3c 	.word	0x20000a3c
 80058b0:	20000eac 	.word	0x20000eac

080058b4 <xTaskPriorityDisinherit>:
	{
 80058b4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d101      	bne.n	80058be <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80058ba:	2000      	movs	r0, #0
	}
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <xTaskPriorityDisinherit+0x60>)
 80058c0:	681c      	ldr	r4, [r3, #0]
 80058c2:	4284      	cmp	r4, r0
 80058c4:	d001      	beq.n	80058ca <xTaskPriorityDisinherit+0x16>
 80058c6:	b672      	cpsid	i
 80058c8:	e7fe      	b.n	80058c8 <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <xTaskPriorityDisinherit+0x20>
 80058d0:	b672      	cpsid	i
 80058d2:	e7fe      	b.n	80058d2 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80058d8:	3b01      	subs	r3, #1
 80058da:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058dc:	428a      	cmp	r2, r1
 80058de:	d0ec      	beq.n	80058ba <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ea      	bne.n	80058ba <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e4:	1d25      	adds	r5, r4, #4
 80058e6:	0028      	movs	r0, r5
 80058e8:	f7fe ff1d 	bl	8004726 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ec:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058f6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80058f8:	6811      	ldr	r1, [r2, #0]
 80058fa:	428b      	cmp	r3, r1
 80058fc:	d900      	bls.n	8005900 <xTaskPriorityDisinherit+0x4c>
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	2014      	movs	r0, #20
 8005902:	4358      	muls	r0, r3
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <xTaskPriorityDisinherit+0x68>)
 8005906:	0029      	movs	r1, r5
 8005908:	18c0      	adds	r0, r0, r3
 800590a:	f7fe fee9 	bl	80046e0 <vListInsertEnd>
					xReturn = pdTRUE;
 800590e:	2001      	movs	r0, #1
		return xReturn;
 8005910:	e7d4      	b.n	80058bc <xTaskPriorityDisinherit+0x8>
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	20000a30 	.word	0x20000a30
 8005918:	20000eac 	.word	0x20000eac
 800591c:	20000a3c 	.word	0x20000a3c

08005920 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8005924:	d031      	beq.n	800598a <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
 8005926:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <vTaskPriorityDisinheritAfterTimeout+0x10>
 800592c:	b672      	cpsid	i
 800592e:	e7fe      	b.n	800592e <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005930:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005932:	428a      	cmp	r2, r1
 8005934:	d200      	bcs.n	8005938 <vTaskPriorityDisinheritAfterTimeout+0x18>
 8005936:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005938:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800593a:	4290      	cmp	r0, r2
 800593c:	d025      	beq.n	800598a <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800593e:	2b01      	cmp	r3, #1
 8005940:	d123      	bne.n	800598a <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <vTaskPriorityDisinheritAfterTimeout+0x6c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	42a3      	cmp	r3, r4
 8005948:	d101      	bne.n	800594e <vTaskPriorityDisinheritAfterTimeout+0x2e>
 800594a:	b672      	cpsid	i
 800594c:	e7fe      	b.n	800594c <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800594e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005950:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005952:	2b00      	cmp	r3, #0
 8005954:	db02      	blt.n	800595c <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005956:	2138      	movs	r1, #56	; 0x38
 8005958:	1a8a      	subs	r2, r1, r2
 800595a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800595c:	2314      	movs	r3, #20
 800595e:	4343      	muls	r3, r0
 8005960:	4d0b      	ldr	r5, [pc, #44]	; (8005990 <vTaskPriorityDisinheritAfterTimeout+0x70>)
 8005962:	6962      	ldr	r2, [r4, #20]
 8005964:	195b      	adds	r3, r3, r5
 8005966:	429a      	cmp	r2, r3
 8005968:	d10f      	bne.n	800598a <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596a:	1d26      	adds	r6, r4, #4
 800596c:	0030      	movs	r0, r6
 800596e:	f7fe feda 	bl	8004726 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <vTaskPriorityDisinheritAfterTimeout+0x74>)
 8005974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005976:	6811      	ldr	r1, [r2, #0]
 8005978:	428b      	cmp	r3, r1
 800597a:	d900      	bls.n	800597e <vTaskPriorityDisinheritAfterTimeout+0x5e>
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	2014      	movs	r0, #20
 8005980:	4358      	muls	r0, r3
 8005982:	0031      	movs	r1, r6
 8005984:	1828      	adds	r0, r5, r0
 8005986:	f7fe feab 	bl	80046e0 <vListInsertEnd>
	}
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	20000a30 	.word	0x20000a30
 8005990:	20000a3c 	.word	0x20000a3c
 8005994:	20000eac 	.word	0x20000eac

08005998 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <pvTaskIncrementMutexHeldCount+0x14>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2a00      	cmp	r2, #0
 800599e:	d003      	beq.n	80059a8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80059a0:	6819      	ldr	r1, [r3, #0]
 80059a2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80059a4:	3201      	adds	r2, #1
 80059a6:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80059a8:	6818      	ldr	r0, [r3, #0]
	}
 80059aa:	4770      	bx	lr
 80059ac:	20000a30 	.word	0x20000a30

080059b0 <ulTaskNotifyTake>:
	{
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	0006      	movs	r6, r0
 80059b4:	000d      	movs	r5, r1
		taskENTER_CRITICAL();
 80059b6:	f7fe ff13 	bl	80047e0 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80059ba:	4c15      	ldr	r4, [pc, #84]	; (8005a10 <ulTaskNotifyTake+0x60>)
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	33b4      	adds	r3, #180	; 0xb4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <ulTaskNotifyTake+0x2c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80059c6:	2101      	movs	r1, #1
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	33b8      	adds	r3, #184	; 0xb8
 80059cc:	7019      	strb	r1, [r3, #0]
				if( xTicksToWait > ( TickType_t ) 0 )
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	d004      	beq.n	80059dc <ulTaskNotifyTake+0x2c>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d2:	0028      	movs	r0, r5
 80059d4:	f7ff fc5a 	bl	800528c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80059d8:	f7fe fef6 	bl	80047c8 <vPortYield>
		taskEXIT_CRITICAL();
 80059dc:	f7fe ff0c 	bl	80047f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80059e0:	f7fe fefe 	bl	80047e0 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	33b4      	adds	r3, #180	; 0xb4
 80059e8:	681d      	ldr	r5, [r3, #0]
			if( ulReturn != 0UL )
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	d005      	beq.n	80059fa <ulTaskNotifyTake+0x4a>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80059ee:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80059f0:	2e00      	cmp	r6, #0
 80059f2:	d00a      	beq.n	8005a0a <ulTaskNotifyTake+0x5a>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80059f4:	2200      	movs	r2, #0
 80059f6:	33b4      	adds	r3, #180	; 0xb4
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80059f8:	601a      	str	r2, [r3, #0]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059fa:	2200      	movs	r2, #0
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	33b8      	adds	r3, #184	; 0xb8
 8005a00:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8005a02:	f7fe fef9 	bl	80047f8 <vPortExitCritical>
	}
 8005a06:	0028      	movs	r0, r5
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005a0a:	1e6a      	subs	r2, r5, #1
 8005a0c:	33b4      	adds	r3, #180	; 0xb4
 8005a0e:	e7f3      	b.n	80059f8 <ulTaskNotifyTake+0x48>
 8005a10:	20000a30 	.word	0x20000a30

08005a14 <xTaskGenericNotify>:
	{
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	0004      	movs	r4, r0
 8005a18:	000d      	movs	r5, r1
 8005a1a:	0016      	movs	r6, r2
 8005a1c:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d101      	bne.n	8005a26 <xTaskGenericNotify+0x12>
 8005a22:	b672      	cpsid	i
 8005a24:	e7fe      	b.n	8005a24 <xTaskGenericNotify+0x10>
		taskENTER_CRITICAL();
 8005a26:	f7fe fedb 	bl	80047e0 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005a2a:	2f00      	cmp	r7, #0
 8005a2c:	d003      	beq.n	8005a36 <xTaskGenericNotify+0x22>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a2e:	0023      	movs	r3, r4
 8005a30:	33b4      	adds	r3, #180	; 0xb4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a36:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a38:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a3a:	32b8      	adds	r2, #184	; 0xb8
 8005a3c:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a3e:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a40:	b2db      	uxtb	r3, r3
			switch( eAction )
 8005a42:	2e04      	cmp	r6, #4
 8005a44:	d81c      	bhi.n	8005a80 <xTaskGenericNotify+0x6c>
 8005a46:	0030      	movs	r0, r6
 8005a48:	f7fa fb68 	bl	800011c <__gnu_thumb1_case_uqi>
 8005a4c:	1709030e 	.word	0x1709030e
 8005a50:	15          	.byte	0x15
 8005a51:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005a52:	0022      	movs	r2, r4
 8005a54:	32b4      	adds	r2, #180	; 0xb4
 8005a56:	6811      	ldr	r1, [r2, #0]
 8005a58:	430d      	orrs	r5, r1
					pxTCB->ulNotifiedValue = ulValue;
 8005a5a:	6015      	str	r5, [r2, #0]
					break;
 8005a5c:	e004      	b.n	8005a68 <xTaskGenericNotify+0x54>
					( pxTCB->ulNotifiedValue )++;
 8005a5e:	0021      	movs	r1, r4
 8005a60:	31b4      	adds	r1, #180	; 0xb4
 8005a62:	680a      	ldr	r2, [r1, #0]
 8005a64:	3201      	adds	r2, #1
 8005a66:	600a      	str	r2, [r1, #0]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d010      	beq.n	8005a8e <xTaskGenericNotify+0x7a>
 8005a6c:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8005a6e:	f7fe fec3 	bl	80047f8 <vPortExitCritical>
	}
 8005a72:	0020      	movs	r0, r4
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d028      	beq.n	8005acc <xTaskGenericNotify+0xb8>
					pxTCB->ulNotifiedValue = ulValue;
 8005a7a:	0022      	movs	r2, r4
 8005a7c:	32b4      	adds	r2, #180	; 0xb4
 8005a7e:	e7ec      	b.n	8005a5a <xTaskGenericNotify+0x46>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005a80:	0022      	movs	r2, r4
 8005a82:	32b4      	adds	r2, #180	; 0xb4
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	3201      	adds	r2, #1
 8005a88:	d0ee      	beq.n	8005a68 <xTaskGenericNotify+0x54>
 8005a8a:	b672      	cpsid	i
 8005a8c:	e7fe      	b.n	8005a8c <xTaskGenericNotify+0x78>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a8e:	1d25      	adds	r5, r4, #4
 8005a90:	0028      	movs	r0, r5
 8005a92:	f7fe fe48 	bl	8004726 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005a96:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <xTaskGenericNotify+0xbc>)
 8005a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a9a:	6811      	ldr	r1, [r2, #0]
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	d900      	bls.n	8005aa2 <xTaskGenericNotify+0x8e>
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	2014      	movs	r0, #20
 8005aa4:	4358      	muls	r0, r3
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <xTaskGenericNotify+0xc0>)
 8005aa8:	0029      	movs	r1, r5
 8005aaa:	18c0      	adds	r0, r0, r3
 8005aac:	f7fe fe18 	bl	80046e0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <xTaskGenericNotify+0xa6>
 8005ab6:	b672      	cpsid	i
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskGenericNotify+0xa4>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <xTaskGenericNotify+0xc4>)
 8005abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d9d2      	bls.n	8005a6c <xTaskGenericNotify+0x58>
					taskYIELD_IF_USING_PREEMPTION();
 8005ac6:	f7fe fe7f 	bl	80047c8 <vPortYield>
 8005aca:	e7cf      	b.n	8005a6c <xTaskGenericNotify+0x58>
						xReturn = pdFAIL;
 8005acc:	2400      	movs	r4, #0
 8005ace:	e7ce      	b.n	8005a6e <xTaskGenericNotify+0x5a>
 8005ad0:	20000eac 	.word	0x20000eac
 8005ad4:	20000a3c 	.word	0x20000a3c
 8005ad8:	20000a30 	.word	0x20000a30

08005adc <xTaskGenericNotifyFromISR>:
	{
 8005adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ade:	0004      	movs	r4, r0
 8005ae0:	000f      	movs	r7, r1
 8005ae2:	0015      	movs	r5, r2
 8005ae4:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d101      	bne.n	8005aee <xTaskGenericNotifyFromISR+0x12>
 8005aea:	b672      	cpsid	i
 8005aec:	e7fe      	b.n	8005aec <xTaskGenericNotifyFromISR+0x10>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aee:	f7fe fe91 	bl	8004814 <ulSetInterruptMaskFromISR>
 8005af2:	9001      	str	r0, [sp, #4]
			if( pulPreviousNotificationValue != NULL )
 8005af4:	2e00      	cmp	r6, #0
 8005af6:	d003      	beq.n	8005b00 <xTaskGenericNotifyFromISR+0x24>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005af8:	0023      	movs	r3, r4
 8005afa:	33b4      	adds	r3, #180	; 0xb4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005b00:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005b02:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005b04:	32b8      	adds	r2, #184	; 0xb8
 8005b06:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005b08:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005b0a:	b2db      	uxtb	r3, r3
			switch( eAction )
 8005b0c:	2d04      	cmp	r5, #4
 8005b0e:	d81e      	bhi.n	8005b4e <xTaskGenericNotifyFromISR+0x72>
 8005b10:	0028      	movs	r0, r5
 8005b12:	f7fa fb03 	bl	800011c <__gnu_thumb1_case_uqi>
 8005b16:	0308      	.short	0x0308
 8005b18:	1810      	.short	0x1810
 8005b1a:	16          	.byte	0x16
 8005b1b:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	32b4      	adds	r2, #180	; 0xb4
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	4339      	orrs	r1, r7
 8005b24:	6011      	str	r1, [r2, #0]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d018      	beq.n	8005b5c <xTaskGenericNotifyFromISR+0x80>
 8005b2a:	2401      	movs	r4, #1
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005b2c:	9801      	ldr	r0, [sp, #4]
 8005b2e:	f7fe fe75 	bl	800481c <vClearInterruptMaskFromISR>
	}
 8005b32:	0020      	movs	r0, r4
 8005b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8005b36:	0021      	movs	r1, r4
 8005b38:	31b4      	adds	r1, #180	; 0xb4
 8005b3a:	680a      	ldr	r2, [r1, #0]
 8005b3c:	3201      	adds	r2, #1
 8005b3e:	600a      	str	r2, [r1, #0]
					break;
 8005b40:	e7f1      	b.n	8005b26 <xTaskGenericNotifyFromISR+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d036      	beq.n	8005bb4 <xTaskGenericNotifyFromISR+0xd8>
						pxTCB->ulNotifiedValue = ulValue;
 8005b46:	0022      	movs	r2, r4
 8005b48:	32b4      	adds	r2, #180	; 0xb4
 8005b4a:	6017      	str	r7, [r2, #0]
 8005b4c:	e7eb      	b.n	8005b26 <xTaskGenericNotifyFromISR+0x4a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b4e:	0022      	movs	r2, r4
 8005b50:	32b4      	adds	r2, #180	; 0xb4
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	3201      	adds	r2, #1
 8005b56:	d0e6      	beq.n	8005b26 <xTaskGenericNotifyFromISR+0x4a>
 8005b58:	b672      	cpsid	i
 8005b5a:	e7fe      	b.n	8005b5a <xTaskGenericNotifyFromISR+0x7e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <xTaskGenericNotifyFromISR+0x8a>
 8005b62:	b672      	cpsid	i
 8005b64:	e7fe      	b.n	8005b64 <xTaskGenericNotifyFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <xTaskGenericNotifyFromISR+0xdc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11e      	bne.n	8005bac <xTaskGenericNotifyFromISR+0xd0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b6e:	1d25      	adds	r5, r4, #4
 8005b70:	0028      	movs	r0, r5
 8005b72:	f7fe fdd8 	bl	8004726 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b76:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <xTaskGenericNotifyFromISR+0xe0>)
 8005b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	d900      	bls.n	8005b82 <xTaskGenericNotifyFromISR+0xa6>
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	2014      	movs	r0, #20
 8005b84:	0029      	movs	r1, r5
 8005b86:	4358      	muls	r0, r3
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <xTaskGenericNotifyFromISR+0xe4>)
 8005b8a:	18c0      	adds	r0, r0, r3
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b8c:	f7fe fda8 	bl	80046e0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <xTaskGenericNotifyFromISR+0xe8>)
 8005b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d9c6      	bls.n	8005b2a <xTaskGenericNotifyFromISR+0x4e>
					if( pxHigherPriorityTaskWoken != NULL )
 8005b9c:	9a08      	ldr	r2, [sp, #32]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d000      	beq.n	8005ba6 <xTaskGenericNotifyFromISR+0xca>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005ba4:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8005ba6:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <xTaskGenericNotifyFromISR+0xec>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e7be      	b.n	8005b2a <xTaskGenericNotifyFromISR+0x4e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005bac:	0021      	movs	r1, r4
 8005bae:	4807      	ldr	r0, [pc, #28]	; (8005bcc <xTaskGenericNotifyFromISR+0xf0>)
 8005bb0:	3118      	adds	r1, #24
 8005bb2:	e7eb      	b.n	8005b8c <xTaskGenericNotifyFromISR+0xb0>
						xReturn = pdFAIL;
 8005bb4:	2400      	movs	r4, #0
 8005bb6:	e7b9      	b.n	8005b2c <xTaskGenericNotifyFromISR+0x50>
 8005bb8:	20000ea4 	.word	0x20000ea4
 8005bbc:	20000eac 	.word	0x20000eac
 8005bc0:	20000a3c 	.word	0x20000a3c
 8005bc4:	20000a30 	.word	0x20000a30
 8005bc8:	20000f28 	.word	0x20000f28
 8005bcc:	20000ee4 	.word	0x20000ee4

08005bd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bd2:	f7fe fe05 	bl	80047e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bd6:	4c10      	ldr	r4, [pc, #64]	; (8005c18 <prvCheckForValidListAndQueue+0x48>)
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	d118      	bne.n	8005c10 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bde:	4f0f      	ldr	r7, [pc, #60]	; (8005c1c <prvCheckForValidListAndQueue+0x4c>)
 8005be0:	0038      	movs	r0, r7
 8005be2:	f7fe fd6f 	bl	80046c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005be6:	4e0e      	ldr	r6, [pc, #56]	; (8005c20 <prvCheckForValidListAndQueue+0x50>)
 8005be8:	0030      	movs	r0, r6
 8005bea:	f7fe fd6b 	bl	80046c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005bee:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bf0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005bf2:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bf6:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005bf8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <prvCheckForValidListAndQueue+0x5c>)
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <prvCheckForValidListAndQueue+0x60>)
 8005bfe:	9500      	str	r5, [sp, #0]
 8005c00:	f7fe ff42 	bl	8004a88 <xQueueGenericCreateStatic>
 8005c04:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d002      	beq.n	8005c10 <prvCheckForValidListAndQueue+0x40>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c0a:	490a      	ldr	r1, [pc, #40]	; (8005c34 <prvCheckForValidListAndQueue+0x64>)
 8005c0c:	f7ff f9bc 	bl	8004f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c10:	f7fe fdf2 	bl	80047f8 <vPortExitCritical>
}
 8005c14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	20001050 	.word	0x20001050
 8005c1c:	20000fd4 	.word	0x20000fd4
 8005c20:	20000fe8 	.word	0x20000fe8
 8005c24:	20000f2c 	.word	0x20000f2c
 8005c28:	20000f30 	.word	0x20000f30
 8005c2c:	20000f34 	.word	0x20000f34
 8005c30:	20001000 	.word	0x20001000
 8005c34:	08006335 	.word	0x08006335

08005c38 <prvInsertTimerInActiveList>:
{
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c3c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c3e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005c40:	4291      	cmp	r1, r2
 8005c42:	d80b      	bhi.n	8005c5c <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	69a3      	ldr	r3, [r4, #24]
			xProcessTimerNow = pdTRUE;
 8005c48:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d205      	bcs.n	8005c5a <prvInsertTimerInActiveList+0x22>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <prvInsertTimerInActiveList+0x34>)
 8005c50:	1d21      	adds	r1, r4, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f7fe fd50 	bl	80046f8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005c58:	2000      	movs	r0, #0
}
 8005c5a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d202      	bcs.n	8005c66 <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
 8005c60:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c62:	4299      	cmp	r1, r3
 8005c64:	d2f9      	bcs.n	8005c5a <prvInsertTimerInActiveList+0x22>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c66:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <prvInsertTimerInActiveList+0x38>)
 8005c68:	1d21      	adds	r1, r4, #4
 8005c6a:	e7f2      	b.n	8005c52 <prvInsertTimerInActiveList+0x1a>
 8005c6c:	20000f30 	.word	0x20000f30
 8005c70:	20000f2c 	.word	0x20000f2c

08005c74 <xTimerCreateTimerTask>:
{
 8005c74:	b510      	push	{r4, lr}
 8005c76:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005c78:	f7ff ffaa 	bl	8005bd0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <xTimerCreateTimerTask+0x4c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <xTimerCreateTimerTask+0x40>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c84:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c86:	aa07      	add	r2, sp, #28
 8005c88:	a906      	add	r1, sp, #24
 8005c8a:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c8c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c8e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c90:	f7fe fc3c 	bl	800450c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c94:	9b05      	ldr	r3, [sp, #20]
 8005c96:	9a07      	ldr	r2, [sp, #28]
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	4909      	ldr	r1, [pc, #36]	; (8005cc4 <xTimerCreateTimerTask+0x50>)
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	4809      	ldr	r0, [pc, #36]	; (8005cc8 <xTimerCreateTimerTask+0x54>)
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	0023      	movs	r3, r4
 8005ca8:	f7ff fb28 	bl	80052fc <xTaskCreateStatic>
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <xTimerCreateTimerTask+0x58>)
 8005cae:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d101      	bne.n	8005cb8 <xTimerCreateTimerTask+0x44>
	configASSERT( xReturn );
 8005cb4:	b672      	cpsid	i
 8005cb6:	e7fe      	b.n	8005cb6 <xTimerCreateTimerTask+0x42>
}
 8005cb8:	2001      	movs	r0, #1
 8005cba:	b008      	add	sp, #32
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	20001050 	.word	0x20001050
 8005cc4:	0800633a 	.word	0x0800633a
 8005cc8:	08005dd5 	.word	0x08005dd5
 8005ccc:	20001054 	.word	0x20001054

08005cd0 <xTimerCreate>:
	{
 8005cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd2:	0007      	movs	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005cd4:	202c      	movs	r0, #44	; 0x2c
	{
 8005cd6:	000d      	movs	r5, r1
 8005cd8:	9200      	str	r2, [sp, #0]
 8005cda:	9301      	str	r3, [sp, #4]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005cdc:	f7fe fc46 	bl	800456c <pvPortMalloc>
 8005ce0:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8005ce2:	d019      	beq.n	8005d18 <xTimerCreate+0x48>
			pxNewTimer->ucStatus = 0x00;
 8005ce4:	0006      	movs	r6, r0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	3628      	adds	r6, #40	; 0x28
 8005cea:	7033      	strb	r3, [r6, #0]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005cec:	429d      	cmp	r5, r3
 8005cee:	d101      	bne.n	8005cf4 <xTimerCreate+0x24>
 8005cf0:	b672      	cpsid	i
 8005cf2:	e7fe      	b.n	8005cf2 <xTimerCreate+0x22>
		prvCheckForValidListAndQueue();
 8005cf4:	f7ff ff6c 	bl	8005bd0 <prvCheckForValidListAndQueue>
		pxNewTimer->pvTimerID = pvTimerID;
 8005cf8:	9b01      	ldr	r3, [sp, #4]
		pxNewTimer->pcTimerName = pcTimerName;
 8005cfa:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8005cfc:	61e3      	str	r3, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005cfe:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005d00:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005d02:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005d04:	1d20      	adds	r0, r4, #4
 8005d06:	f7fe fce8 	bl	80046da <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <xTimerCreate+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005d10:	2304      	movs	r3, #4
 8005d12:	7832      	ldrb	r2, [r6, #0]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	7033      	strb	r3, [r6, #0]
	}
 8005d18:	0020      	movs	r0, r4
 8005d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005d1c <xTimerGenericCommand>:
{
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1e:	0017      	movs	r7, r2
 8005d20:	0004      	movs	r4, r0
 8005d22:	001a      	movs	r2, r3
 8005d24:	b085      	sub	sp, #20
	configASSERT( xTimer );
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d101      	bne.n	8005d2e <xTimerGenericCommand+0x12>
 8005d2a:	b672      	cpsid	i
 8005d2c:	e7fe      	b.n	8005d2c <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	; (8005d64 <xTimerGenericCommand+0x48>)
 8005d30:	682e      	ldr	r6, [r5, #0]
BaseType_t xReturn = pdFAIL;
 8005d32:	1e30      	subs	r0, r6, #0
	if( xTimerQueue != NULL )
 8005d34:	d00f      	beq.n	8005d56 <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
 8005d36:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d38:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d3a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d3c:	2905      	cmp	r1, #5
 8005d3e:	dc0c      	bgt.n	8005d5a <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d40:	f7ff fd6a 	bl	8005818 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d44:	2300      	movs	r3, #0
 8005d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d48:	2802      	cmp	r0, #2
 8005d4a:	d000      	beq.n	8005d4e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	4669      	mov	r1, sp
 8005d50:	6828      	ldr	r0, [r5, #0]
 8005d52:	f7fe ff14 	bl	8004b7e <xQueueGenericSend>
}
 8005d56:	b005      	add	sp, #20
 8005d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4669      	mov	r1, sp
 8005d5e:	f7fe ff9e 	bl	8004c9e <xQueueGenericSendFromISR>
 8005d62:	e7f8      	b.n	8005d56 <xTimerGenericCommand+0x3a>
 8005d64:	20001050 	.word	0x20001050

08005d68 <prvSwitchTimerLists>:
{
 8005d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d6a:	4d18      	ldr	r5, [pc, #96]	; (8005dcc <prvSwitchTimerLists+0x64>)
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	d104      	bne.n	8005d7e <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
 8005d74:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <prvSwitchTimerLists+0x68>)
 8005d76:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d78:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d7a:	6029      	str	r1, [r5, #0]
}
 8005d7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d7e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d82:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d84:	1d27      	adds	r7, r4, #4
 8005d86:	0038      	movs	r0, r7
 8005d88:	f7fe fccd 	bl	8004726 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d8c:	6a23      	ldr	r3, [r4, #32]
 8005d8e:	0020      	movs	r0, r4
 8005d90:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d92:	0023      	movs	r3, r4
 8005d94:	2204      	movs	r2, #4
 8005d96:	3328      	adds	r3, #40	; 0x28
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	4213      	tst	r3, r2
 8005d9c:	d0e5      	beq.n	8005d6a <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d9e:	69a3      	ldr	r3, [r4, #24]
 8005da0:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
 8005da2:	429e      	cmp	r6, r3
 8005da4:	d206      	bcs.n	8005db4 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	0039      	movs	r1, r7
 8005da8:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005daa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dae:	f7fe fca3 	bl	80046f8 <vListInsert>
 8005db2:	e7da      	b.n	8005d6a <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005db4:	2100      	movs	r1, #0
 8005db6:	0032      	movs	r2, r6
 8005db8:	000b      	movs	r3, r1
 8005dba:	0020      	movs	r0, r4
 8005dbc:	9100      	str	r1, [sp, #0]
 8005dbe:	f7ff ffad 	bl	8005d1c <xTimerGenericCommand>
				configASSERT( xResult );
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1d1      	bne.n	8005d6a <prvSwitchTimerLists+0x2>
 8005dc6:	b672      	cpsid	i
 8005dc8:	e7fe      	b.n	8005dc8 <prvSwitchTimerLists+0x60>
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	20000f2c 	.word	0x20000f2c
 8005dd0:	20000f30 	.word	0x20000f30

08005dd4 <prvTimerTask>:
{
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dd8:	4f65      	ldr	r7, [pc, #404]	; (8005f70 <prvTimerTask+0x19c>)
 8005dda:	2601      	movs	r6, #1
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681c      	ldr	r4, [r3, #0]
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	d002      	beq.n	8005dea <prvTimerTask+0x16>
 8005de4:	2600      	movs	r6, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8005dea:	f7ff fb19 	bl	8005420 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005dee:	f7ff fb1f 	bl	8005430 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005df2:	4b60      	ldr	r3, [pc, #384]	; (8005f74 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005df4:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	d315      	bcc.n	8005e2a <prvTimerTask+0x56>
	xLastTime = xTimeNow;
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	; (8005f74 <prvTimerTask+0x1a0>)
 8005e00:	6018      	str	r0, [r3, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e02:	2e00      	cmp	r6, #0
 8005e04:	d019      	beq.n	8005e3a <prvTimerTask+0x66>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e06:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <prvTimerTask+0x1a4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681e      	ldr	r6, [r3, #0]
 8005e0c:	4273      	negs	r3, r6
 8005e0e:	415e      	adcs	r6, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e10:	4b5a      	ldr	r3, [pc, #360]	; (8005f7c <prvTimerTask+0x1a8>)
 8005e12:	0032      	movs	r2, r6
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	1b61      	subs	r1, r4, r5
 8005e18:	f7ff f8ec 	bl	8004ff4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e1c:	f7ff fb94 	bl	8005548 <xTaskResumeAll>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d108      	bne.n	8005e36 <prvTimerTask+0x62>
					portYIELD_WITHIN_API();
 8005e24:	f7fe fcd0 	bl	80047c8 <vPortYield>
 8005e28:	e005      	b.n	8005e36 <prvTimerTask+0x62>
		prvSwitchTimerLists();
 8005e2a:	f7ff ff9d 	bl	8005d68 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005e2e:	4b51      	ldr	r3, [pc, #324]	; (8005f74 <prvTimerTask+0x1a0>)
 8005e30:	601d      	str	r5, [r3, #0]
			( void ) xTaskResumeAll();
 8005e32:	f7ff fb89 	bl	8005548 <xTaskResumeAll>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e36:	2702      	movs	r7, #2
 8005e38:	e032      	b.n	8005ea0 <prvTimerTask+0xcc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e3a:	4284      	cmp	r4, r0
 8005e3c:	d8e8      	bhi.n	8005e10 <prvTimerTask+0x3c>
				( void ) xTaskResumeAll();
 8005e3e:	f7ff fb83 	bl	8005548 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e48:	1d38      	adds	r0, r7, #4
 8005e4a:	f7fe fc6c 	bl	8004726 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e4e:	003a      	movs	r2, r7
 8005e50:	2104      	movs	r1, #4
 8005e52:	3228      	adds	r2, #40	; 0x28
 8005e54:	7813      	ldrb	r3, [r2, #0]
 8005e56:	420b      	tst	r3, r1
 8005e58:	d013      	beq.n	8005e82 <prvTimerTask+0xae>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	002a      	movs	r2, r5
 8005e5e:	18e1      	adds	r1, r4, r3
 8005e60:	0038      	movs	r0, r7
 8005e62:	0023      	movs	r3, r4
 8005e64:	f7ff fee8 	bl	8005c38 <prvInsertTimerInActiveList>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d00d      	beq.n	8005e88 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e6c:	0033      	movs	r3, r6
 8005e6e:	0022      	movs	r2, r4
 8005e70:	0031      	movs	r1, r6
 8005e72:	0038      	movs	r0, r7
 8005e74:	9600      	str	r6, [sp, #0]
 8005e76:	f7ff ff51 	bl	8005d1c <xTimerGenericCommand>
			configASSERT( xResult );
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d104      	bne.n	8005e88 <prvTimerTask+0xb4>
 8005e7e:	b672      	cpsid	i
 8005e80:	e7fe      	b.n	8005e80 <prvTimerTask+0xac>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e82:	2101      	movs	r1, #1
 8005e84:	438b      	bics	r3, r1
 8005e86:	7013      	strb	r3, [r2, #0]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e88:	0038      	movs	r0, r7
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	4798      	blx	r3
}
 8005e8e:	e7d2      	b.n	8005e36 <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e90:	9b05      	ldr	r3, [sp, #20]
 8005e92:	9907      	ldr	r1, [sp, #28]
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	9303      	str	r3, [sp, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0b      	bge.n	8005eb8 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <prvTimerTask+0x1a8>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	a904      	add	r1, sp, #16
 8005ea8:	f7fe ff43 	bl	8004d32 <xQueueReceive>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d093      	beq.n	8005dd8 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005eb0:	9b04      	ldr	r3, [sp, #16]
 8005eb2:	9806      	ldr	r0, [sp, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dbeb      	blt.n	8005e90 <prvTimerTask+0xbc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eb8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d118      	bne.n	8005ef2 <prvTimerTask+0x11e>
	xTimeNow = xTaskGetTickCount();
 8005ec0:	f7ff fab6 	bl	8005430 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005ec6:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	4298      	cmp	r0, r3
 8005ece:	d201      	bcs.n	8005ed4 <prvTimerTask+0x100>
		prvSwitchTimerLists();
 8005ed0:	f7ff ff4a 	bl	8005d68 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005ed4:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <prvTimerTask+0x1a0>)
 8005ed6:	9804      	ldr	r0, [sp, #16]
 8005ed8:	601e      	str	r6, [r3, #0]
			switch( xMessage.xMessageID )
 8005eda:	2809      	cmp	r0, #9
 8005edc:	d8e0      	bhi.n	8005ea0 <prvTimerTask+0xcc>
 8005ede:	0025      	movs	r5, r4
 8005ee0:	3528      	adds	r5, #40	; 0x28
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ee2:	782b      	ldrb	r3, [r5, #0]
 8005ee4:	f7fa f91a 	bl	800011c <__gnu_thumb1_case_uqi>
 8005ee8:	40090909 	.word	0x40090909
 8005eec:	09093a2a 	.word	0x09093a2a
 8005ef0:	2a40      	.short	0x2a40
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef2:	1d20      	adds	r0, r4, #4
 8005ef4:	f7fe fc17 	bl	8004726 <uxListRemove>
 8005ef8:	e7e2      	b.n	8005ec0 <prvTimerTask+0xec>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005efa:	2201      	movs	r2, #1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	702b      	strb	r3, [r5, #0]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f00:	69a2      	ldr	r2, [r4, #24]
 8005f02:	9b05      	ldr	r3, [sp, #20]
 8005f04:	0020      	movs	r0, r4
 8005f06:	1899      	adds	r1, r3, r2
 8005f08:	0032      	movs	r2, r6
 8005f0a:	9303      	str	r3, [sp, #12]
 8005f0c:	f7ff fe94 	bl	8005c38 <prvInsertTimerInActiveList>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0c5      	beq.n	8005ea0 <prvTimerTask+0xcc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f14:	6a23      	ldr	r3, [r4, #32]
 8005f16:	0020      	movs	r0, r4
 8005f18:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	782b      	ldrb	r3, [r5, #0]
 8005f1e:	4213      	tst	r3, r2
 8005f20:	d0be      	beq.n	8005ea0 <prvTimerTask+0xcc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f22:	2100      	movs	r1, #0
 8005f24:	69a3      	ldr	r3, [r4, #24]
 8005f26:	9a05      	ldr	r2, [sp, #20]
 8005f28:	0020      	movs	r0, r4
 8005f2a:	18d2      	adds	r2, r2, r3
 8005f2c:	9100      	str	r1, [sp, #0]
 8005f2e:	000b      	movs	r3, r1
 8005f30:	f7ff fef4 	bl	8005d1c <xTimerGenericCommand>
							configASSERT( xResult );
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1b3      	bne.n	8005ea0 <prvTimerTask+0xcc>
 8005f38:	b672      	cpsid	i
 8005f3a:	e7fe      	b.n	8005f3a <prvTimerTask+0x166>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f3c:	2201      	movs	r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f3e:	9905      	ldr	r1, [sp, #20]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f40:	4313      	orrs	r3, r2
 8005f42:	702b      	strb	r3, [r5, #0]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f44:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d101      	bne.n	8005f4e <prvTimerTask+0x17a>
 8005f4a:	b672      	cpsid	i
 8005f4c:	e7fe      	b.n	8005f4c <prvTimerTask+0x178>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f4e:	0033      	movs	r3, r6
 8005f50:	0032      	movs	r2, r6
 8005f52:	0020      	movs	r0, r4
 8005f54:	1989      	adds	r1, r1, r6
 8005f56:	f7ff fe6f 	bl	8005c38 <prvInsertTimerInActiveList>
					break;
 8005f5a:	e7a1      	b.n	8005ea0 <prvTimerTask+0xcc>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f5c:	423b      	tst	r3, r7
 8005f5e:	d103      	bne.n	8005f68 <prvTimerTask+0x194>
							vPortFree( pxTimer );
 8005f60:	0020      	movs	r0, r4
 8005f62:	f7fe fb85 	bl	8004670 <vPortFree>
 8005f66:	e79b      	b.n	8005ea0 <prvTimerTask+0xcc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4393      	bics	r3, r2
 8005f6c:	702b      	strb	r3, [r5, #0]
 8005f6e:	e797      	b.n	8005ea0 <prvTimerTask+0xcc>
 8005f70:	20000f2c 	.word	0x20000f2c
 8005f74:	20000ffc 	.word	0x20000ffc
 8005f78:	20000f30 	.word	0x20000f30
 8005f7c:	20001050 	.word	0x20001050

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	2600      	movs	r6, #0
 8005f84:	4d0c      	ldr	r5, [pc, #48]	; (8005fb8 <__libc_init_array+0x38>)
 8005f86:	4c0d      	ldr	r4, [pc, #52]	; (8005fbc <__libc_init_array+0x3c>)
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	2600      	movs	r6, #0
 8005f92:	f000 f8f9 	bl	8006188 <_init>
 8005f96:	4d0a      	ldr	r5, [pc, #40]	; (8005fc0 <__libc_init_array+0x40>)
 8005f98:	4c0a      	ldr	r4, [pc, #40]	; (8005fc4 <__libc_init_array+0x44>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	00b3      	lsls	r3, r6, #2
 8005fa6:	58eb      	ldr	r3, [r5, r3]
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	00b3      	lsls	r3, r6, #2
 8005fb0:	58eb      	ldr	r3, [r5, r3]
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	080063ac 	.word	0x080063ac
 8005fbc:	080063ac 	.word	0x080063ac
 8005fc0:	080063ac 	.word	0x080063ac
 8005fc4:	080063b0 	.word	0x080063b0

08005fc8 <__retarget_lock_acquire_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_release_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <memcpy>:
 8005fcc:	2300      	movs	r3, #0
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d100      	bne.n	8005fd6 <memcpy+0xa>
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	5ccc      	ldrb	r4, [r1, r3]
 8005fd8:	54c4      	strb	r4, [r0, r3]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	e7f8      	b.n	8005fd0 <memcpy+0x4>

08005fde <memset>:
 8005fde:	0003      	movs	r3, r0
 8005fe0:	1882      	adds	r2, r0, r2
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d100      	bne.n	8005fe8 <memset+0xa>
 8005fe6:	4770      	bx	lr
 8005fe8:	7019      	strb	r1, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	e7f9      	b.n	8005fe2 <memset+0x4>

08005fee <cleanup_glue>:
 8005fee:	b570      	push	{r4, r5, r6, lr}
 8005ff0:	000d      	movs	r5, r1
 8005ff2:	6809      	ldr	r1, [r1, #0]
 8005ff4:	0004      	movs	r4, r0
 8005ff6:	2900      	cmp	r1, #0
 8005ff8:	d001      	beq.n	8005ffe <cleanup_glue+0x10>
 8005ffa:	f7ff fff8 	bl	8005fee <cleanup_glue>
 8005ffe:	0029      	movs	r1, r5
 8006000:	0020      	movs	r0, r4
 8006002:	f000 f877 	bl	80060f4 <_free_r>
 8006006:	bd70      	pop	{r4, r5, r6, pc}

08006008 <_reclaim_reent>:
 8006008:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <_reclaim_reent+0xc8>)
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	0004      	movs	r4, r0
 8006010:	4283      	cmp	r3, r0
 8006012:	d049      	beq.n	80060a8 <_reclaim_reent+0xa0>
 8006014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <_reclaim_reent+0x28>
 800601a:	2500      	movs	r5, #0
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	42ab      	cmp	r3, r5
 8006020:	d147      	bne.n	80060b2 <_reclaim_reent+0xaa>
 8006022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	2900      	cmp	r1, #0
 8006028:	d002      	beq.n	8006030 <_reclaim_reent+0x28>
 800602a:	0020      	movs	r0, r4
 800602c:	f000 f862 	bl	80060f4 <_free_r>
 8006030:	6961      	ldr	r1, [r4, #20]
 8006032:	2900      	cmp	r1, #0
 8006034:	d002      	beq.n	800603c <_reclaim_reent+0x34>
 8006036:	0020      	movs	r0, r4
 8006038:	f000 f85c 	bl	80060f4 <_free_r>
 800603c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800603e:	2900      	cmp	r1, #0
 8006040:	d002      	beq.n	8006048 <_reclaim_reent+0x40>
 8006042:	0020      	movs	r0, r4
 8006044:	f000 f856 	bl	80060f4 <_free_r>
 8006048:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800604a:	2900      	cmp	r1, #0
 800604c:	d002      	beq.n	8006054 <_reclaim_reent+0x4c>
 800604e:	0020      	movs	r0, r4
 8006050:	f000 f850 	bl	80060f4 <_free_r>
 8006054:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006056:	2900      	cmp	r1, #0
 8006058:	d002      	beq.n	8006060 <_reclaim_reent+0x58>
 800605a:	0020      	movs	r0, r4
 800605c:	f000 f84a 	bl	80060f4 <_free_r>
 8006060:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006062:	2900      	cmp	r1, #0
 8006064:	d002      	beq.n	800606c <_reclaim_reent+0x64>
 8006066:	0020      	movs	r0, r4
 8006068:	f000 f844 	bl	80060f4 <_free_r>
 800606c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800606e:	2900      	cmp	r1, #0
 8006070:	d002      	beq.n	8006078 <_reclaim_reent+0x70>
 8006072:	0020      	movs	r0, r4
 8006074:	f000 f83e 	bl	80060f4 <_free_r>
 8006078:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800607a:	2900      	cmp	r1, #0
 800607c:	d002      	beq.n	8006084 <_reclaim_reent+0x7c>
 800607e:	0020      	movs	r0, r4
 8006080:	f000 f838 	bl	80060f4 <_free_r>
 8006084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006086:	2900      	cmp	r1, #0
 8006088:	d002      	beq.n	8006090 <_reclaim_reent+0x88>
 800608a:	0020      	movs	r0, r4
 800608c:	f000 f832 	bl	80060f4 <_free_r>
 8006090:	69a3      	ldr	r3, [r4, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <_reclaim_reent+0xa0>
 8006096:	0020      	movs	r0, r4
 8006098:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800609a:	4798      	blx	r3
 800609c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800609e:	2900      	cmp	r1, #0
 80060a0:	d002      	beq.n	80060a8 <_reclaim_reent+0xa0>
 80060a2:	0020      	movs	r0, r4
 80060a4:	f7ff ffa3 	bl	8005fee <cleanup_glue>
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	5949      	ldr	r1, [r1, r5]
 80060ac:	2900      	cmp	r1, #0
 80060ae:	d108      	bne.n	80060c2 <_reclaim_reent+0xba>
 80060b0:	3504      	adds	r5, #4
 80060b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	2d80      	cmp	r5, #128	; 0x80
 80060b8:	d1f7      	bne.n	80060aa <_reclaim_reent+0xa2>
 80060ba:	0020      	movs	r0, r4
 80060bc:	f000 f81a 	bl	80060f4 <_free_r>
 80060c0:	e7af      	b.n	8006022 <_reclaim_reent+0x1a>
 80060c2:	680e      	ldr	r6, [r1, #0]
 80060c4:	0020      	movs	r0, r4
 80060c6:	f000 f815 	bl	80060f4 <_free_r>
 80060ca:	0031      	movs	r1, r6
 80060cc:	e7ee      	b.n	80060ac <_reclaim_reent+0xa4>
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	20000010 	.word	0x20000010

080060d4 <__malloc_lock>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4802      	ldr	r0, [pc, #8]	; (80060e0 <__malloc_lock+0xc>)
 80060d8:	f7ff ff76 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	200016b8 	.word	0x200016b8

080060e4 <__malloc_unlock>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4802      	ldr	r0, [pc, #8]	; (80060f0 <__malloc_unlock+0xc>)
 80060e8:	f7ff ff6f 	bl	8005fca <__retarget_lock_release_recursive>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	200016b8 	.word	0x200016b8

080060f4 <_free_r>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	0005      	movs	r5, r0
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d010      	beq.n	800611e <_free_r+0x2a>
 80060fc:	1f0c      	subs	r4, r1, #4
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	da00      	bge.n	8006106 <_free_r+0x12>
 8006104:	18e4      	adds	r4, r4, r3
 8006106:	0028      	movs	r0, r5
 8006108:	f7ff ffe4 	bl	80060d4 <__malloc_lock>
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <_free_r+0x90>)
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <_free_r+0x2c>
 8006114:	6063      	str	r3, [r4, #4]
 8006116:	6014      	str	r4, [r2, #0]
 8006118:	0028      	movs	r0, r5
 800611a:	f7ff ffe3 	bl	80060e4 <__malloc_unlock>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x42>
 8006124:	6821      	ldr	r1, [r4, #0]
 8006126:	1860      	adds	r0, r4, r1
 8006128:	4283      	cmp	r3, r0
 800612a:	d1f3      	bne.n	8006114 <_free_r+0x20>
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	1841      	adds	r1, r0, r1
 8006132:	6021      	str	r1, [r4, #0]
 8006134:	e7ee      	b.n	8006114 <_free_r+0x20>
 8006136:	001a      	movs	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <_free_r+0x4e>
 800613e:	42a3      	cmp	r3, r4
 8006140:	d9f9      	bls.n	8006136 <_free_r+0x42>
 8006142:	6811      	ldr	r1, [r2, #0]
 8006144:	1850      	adds	r0, r2, r1
 8006146:	42a0      	cmp	r0, r4
 8006148:	d10b      	bne.n	8006162 <_free_r+0x6e>
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1809      	adds	r1, r1, r0
 800614e:	1850      	adds	r0, r2, r1
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	4283      	cmp	r3, r0
 8006154:	d1e0      	bne.n	8006118 <_free_r+0x24>
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	1841      	adds	r1, r0, r1
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	6053      	str	r3, [r2, #4]
 8006160:	e7da      	b.n	8006118 <_free_r+0x24>
 8006162:	42a0      	cmp	r0, r4
 8006164:	d902      	bls.n	800616c <_free_r+0x78>
 8006166:	230c      	movs	r3, #12
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	e7d5      	b.n	8006118 <_free_r+0x24>
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	1860      	adds	r0, r4, r1
 8006170:	4283      	cmp	r3, r0
 8006172:	d103      	bne.n	800617c <_free_r+0x88>
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	1841      	adds	r1, r0, r1
 800617a:	6021      	str	r1, [r4, #0]
 800617c:	6063      	str	r3, [r4, #4]
 800617e:	6054      	str	r4, [r2, #4]
 8006180:	e7ca      	b.n	8006118 <_free_r+0x24>
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	20001058 	.word	0x20001058

08006188 <_init>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr

08006194 <_fini>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr
