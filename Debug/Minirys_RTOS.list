
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003074  08003074  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000000c  08003088  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  08003088  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dd1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004701  00000000  00000000  00044e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00049508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019ede  00000000  00000000  0004a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021020  00000000  00000000  000646ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a5f6d  00000000  00000000  000856ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012b63b  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00015427  00000000  00000000  0012b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002838  00000000  00000000  00140ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039c0  00000000  00000000  001432f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fc4 	.word	0x08002fc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002fc4 	.word	0x08002fc4

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	1c08      	adds	r0, r1, #0
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	; (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f806 	bl	800045c <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__udivmoddi4>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	4657      	mov	r7, sl
 8000460:	464e      	mov	r6, r9
 8000462:	4645      	mov	r5, r8
 8000464:	46de      	mov	lr, fp
 8000466:	b5e0      	push	{r5, r6, r7, lr}
 8000468:	0004      	movs	r4, r0
 800046a:	000d      	movs	r5, r1
 800046c:	4692      	mov	sl, r2
 800046e:	4699      	mov	r9, r3
 8000470:	b083      	sub	sp, #12
 8000472:	428b      	cmp	r3, r1
 8000474:	d830      	bhi.n	80004d8 <__udivmoddi4+0x7c>
 8000476:	d02d      	beq.n	80004d4 <__udivmoddi4+0x78>
 8000478:	4649      	mov	r1, r9
 800047a:	4650      	mov	r0, sl
 800047c:	f000 f8ba 	bl	80005f4 <__clzdi2>
 8000480:	0029      	movs	r1, r5
 8000482:	0006      	movs	r6, r0
 8000484:	0020      	movs	r0, r4
 8000486:	f000 f8b5 	bl	80005f4 <__clzdi2>
 800048a:	1a33      	subs	r3, r6, r0
 800048c:	4698      	mov	r8, r3
 800048e:	3b20      	subs	r3, #32
 8000490:	469b      	mov	fp, r3
 8000492:	d433      	bmi.n	80004fc <__udivmoddi4+0xa0>
 8000494:	465a      	mov	r2, fp
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	4642      	mov	r2, r8
 800049c:	001f      	movs	r7, r3
 800049e:	4653      	mov	r3, sl
 80004a0:	4093      	lsls	r3, r2
 80004a2:	001e      	movs	r6, r3
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d83a      	bhi.n	800051e <__udivmoddi4+0xc2>
 80004a8:	42af      	cmp	r7, r5
 80004aa:	d100      	bne.n	80004ae <__udivmoddi4+0x52>
 80004ac:	e078      	b.n	80005a0 <__udivmoddi4+0x144>
 80004ae:	465b      	mov	r3, fp
 80004b0:	1ba4      	subs	r4, r4, r6
 80004b2:	41bd      	sbcs	r5, r7
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	da00      	bge.n	80004ba <__udivmoddi4+0x5e>
 80004b8:	e075      	b.n	80005a6 <__udivmoddi4+0x14a>
 80004ba:	2200      	movs	r2, #0
 80004bc:	2300      	movs	r3, #0
 80004be:	9200      	str	r2, [sp, #0]
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	465a      	mov	r2, fp
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	2301      	movs	r3, #1
 80004cc:	4642      	mov	r2, r8
 80004ce:	4093      	lsls	r3, r2
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	e028      	b.n	8000526 <__udivmoddi4+0xca>
 80004d4:	4282      	cmp	r2, r0
 80004d6:	d9cf      	bls.n	8000478 <__udivmoddi4+0x1c>
 80004d8:	2200      	movs	r2, #0
 80004da:	2300      	movs	r3, #0
 80004dc:	9200      	str	r2, [sp, #0]
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <__udivmoddi4+0x8e>
 80004e6:	601c      	str	r4, [r3, #0]
 80004e8:	605d      	str	r5, [r3, #4]
 80004ea:	9800      	ldr	r0, [sp, #0]
 80004ec:	9901      	ldr	r1, [sp, #4]
 80004ee:	b003      	add	sp, #12
 80004f0:	bcf0      	pop	{r4, r5, r6, r7}
 80004f2:	46bb      	mov	fp, r7
 80004f4:	46b2      	mov	sl, r6
 80004f6:	46a9      	mov	r9, r5
 80004f8:	46a0      	mov	r8, r4
 80004fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fc:	4642      	mov	r2, r8
 80004fe:	2320      	movs	r3, #32
 8000500:	1a9b      	subs	r3, r3, r2
 8000502:	4652      	mov	r2, sl
 8000504:	40da      	lsrs	r2, r3
 8000506:	4641      	mov	r1, r8
 8000508:	0013      	movs	r3, r2
 800050a:	464a      	mov	r2, r9
 800050c:	408a      	lsls	r2, r1
 800050e:	0017      	movs	r7, r2
 8000510:	4642      	mov	r2, r8
 8000512:	431f      	orrs	r7, r3
 8000514:	4653      	mov	r3, sl
 8000516:	4093      	lsls	r3, r2
 8000518:	001e      	movs	r6, r3
 800051a:	42af      	cmp	r7, r5
 800051c:	d9c4      	bls.n	80004a8 <__udivmoddi4+0x4c>
 800051e:	2200      	movs	r2, #0
 8000520:	2300      	movs	r3, #0
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0d9      	beq.n	80004e0 <__udivmoddi4+0x84>
 800052c:	07fb      	lsls	r3, r7, #31
 800052e:	0872      	lsrs	r2, r6, #1
 8000530:	431a      	orrs	r2, r3
 8000532:	4646      	mov	r6, r8
 8000534:	087b      	lsrs	r3, r7, #1
 8000536:	e00e      	b.n	8000556 <__udivmoddi4+0xfa>
 8000538:	42ab      	cmp	r3, r5
 800053a:	d101      	bne.n	8000540 <__udivmoddi4+0xe4>
 800053c:	42a2      	cmp	r2, r4
 800053e:	d80c      	bhi.n	800055a <__udivmoddi4+0xfe>
 8000540:	1aa4      	subs	r4, r4, r2
 8000542:	419d      	sbcs	r5, r3
 8000544:	2001      	movs	r0, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2100      	movs	r1, #0
 800054c:	3e01      	subs	r6, #1
 800054e:	1824      	adds	r4, r4, r0
 8000550:	414d      	adcs	r5, r1
 8000552:	2e00      	cmp	r6, #0
 8000554:	d006      	beq.n	8000564 <__udivmoddi4+0x108>
 8000556:	42ab      	cmp	r3, r5
 8000558:	d9ee      	bls.n	8000538 <__udivmoddi4+0xdc>
 800055a:	3e01      	subs	r6, #1
 800055c:	1924      	adds	r4, r4, r4
 800055e:	416d      	adcs	r5, r5
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1f8      	bne.n	8000556 <__udivmoddi4+0xfa>
 8000564:	9800      	ldr	r0, [sp, #0]
 8000566:	9901      	ldr	r1, [sp, #4]
 8000568:	465b      	mov	r3, fp
 800056a:	1900      	adds	r0, r0, r4
 800056c:	4169      	adcs	r1, r5
 800056e:	2b00      	cmp	r3, #0
 8000570:	db24      	blt.n	80005bc <__udivmoddi4+0x160>
 8000572:	002b      	movs	r3, r5
 8000574:	465a      	mov	r2, fp
 8000576:	4644      	mov	r4, r8
 8000578:	40d3      	lsrs	r3, r2
 800057a:	002a      	movs	r2, r5
 800057c:	40e2      	lsrs	r2, r4
 800057e:	001c      	movs	r4, r3
 8000580:	465b      	mov	r3, fp
 8000582:	0015      	movs	r5, r2
 8000584:	2b00      	cmp	r3, #0
 8000586:	db2a      	blt.n	80005de <__udivmoddi4+0x182>
 8000588:	0026      	movs	r6, r4
 800058a:	409e      	lsls	r6, r3
 800058c:	0033      	movs	r3, r6
 800058e:	0026      	movs	r6, r4
 8000590:	4647      	mov	r7, r8
 8000592:	40be      	lsls	r6, r7
 8000594:	0032      	movs	r2, r6
 8000596:	1a80      	subs	r0, r0, r2
 8000598:	4199      	sbcs	r1, r3
 800059a:	9000      	str	r0, [sp, #0]
 800059c:	9101      	str	r1, [sp, #4]
 800059e:	e79f      	b.n	80004e0 <__udivmoddi4+0x84>
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d8bc      	bhi.n	800051e <__udivmoddi4+0xc2>
 80005a4:	e783      	b.n	80004ae <__udivmoddi4+0x52>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	2200      	movs	r2, #0
 80005b0:	9100      	str	r1, [sp, #0]
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	9201      	str	r2, [sp, #4]
 80005ba:	e786      	b.n	80004ca <__udivmoddi4+0x6e>
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	4646      	mov	r6, r8
 80005c6:	409a      	lsls	r2, r3
 80005c8:	0023      	movs	r3, r4
 80005ca:	40f3      	lsrs	r3, r6
 80005cc:	4644      	mov	r4, r8
 80005ce:	4313      	orrs	r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	40e2      	lsrs	r2, r4
 80005d4:	001c      	movs	r4, r3
 80005d6:	465b      	mov	r3, fp
 80005d8:	0015      	movs	r5, r2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	dad4      	bge.n	8000588 <__udivmoddi4+0x12c>
 80005de:	4642      	mov	r2, r8
 80005e0:	002f      	movs	r7, r5
 80005e2:	2320      	movs	r3, #32
 80005e4:	0026      	movs	r6, r4
 80005e6:	4097      	lsls	r7, r2
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	40de      	lsrs	r6, r3
 80005ec:	003b      	movs	r3, r7
 80005ee:	4333      	orrs	r3, r6
 80005f0:	e7cd      	b.n	800058e <__udivmoddi4+0x132>
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzdi2>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	2900      	cmp	r1, #0
 80005f8:	d103      	bne.n	8000602 <__clzdi2+0xe>
 80005fa:	f000 f807 	bl	800060c <__clzsi2>
 80005fe:	3020      	adds	r0, #32
 8000600:	e002      	b.n	8000608 <__clzdi2+0x14>
 8000602:	1c08      	adds	r0, r1, #0
 8000604:	f000 f802 	bl	800060c <__clzsi2>
 8000608:	bd10      	pop	{r4, pc}
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <__clzsi2>:
 800060c:	211c      	movs	r1, #28
 800060e:	2301      	movs	r3, #1
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	4298      	cmp	r0, r3
 8000614:	d301      	bcc.n	800061a <__clzsi2+0xe>
 8000616:	0c00      	lsrs	r0, r0, #16
 8000618:	3910      	subs	r1, #16
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	4298      	cmp	r0, r3
 800061e:	d301      	bcc.n	8000624 <__clzsi2+0x18>
 8000620:	0a00      	lsrs	r0, r0, #8
 8000622:	3908      	subs	r1, #8
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	4298      	cmp	r0, r3
 8000628:	d301      	bcc.n	800062e <__clzsi2+0x22>
 800062a:	0900      	lsrs	r0, r0, #4
 800062c:	3904      	subs	r1, #4
 800062e:	a202      	add	r2, pc, #8	; (adr r2, 8000638 <__clzsi2+0x2c>)
 8000630:	5c10      	ldrb	r0, [r2, r0]
 8000632:	1840      	adds	r0, r0, r1
 8000634:	4770      	bx	lr
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	02020304 	.word	0x02020304
 800063c:	01010101 	.word	0x01010101
	...

08000648 <TEST_IO>:
#ifndef INC_IO_CHECK_H_
#define INC_IO_CHECK_H_
#include "main.h"


void TEST_IO(){
 8000648:	b570      	push	{r4, r5, r6, lr}



    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	485e      	ldr	r0, [pc, #376]	; (80007c8 <TEST_IO+0x180>)
 8000650:	f001 f8a2 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <TEST_IO+0x184>)
 800065a:	f001 f89d 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	20a0      	movs	r0, #160	; 0xa0
 8000662:	2200      	movs	r2, #0
 8000664:	0049      	lsls	r1, r1, #1
 8000666:	05c0      	lsls	r0, r0, #23
 8000668:	f001 f896 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ENABLE_SENSORS_GPIO_Port, ENABLE_SENSORS_Pin, 1);
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	20a0      	movs	r0, #160	; 0xa0
 8000670:	2201      	movs	r2, #1
 8000672:	0209      	lsls	r1, r1, #8
 8000674:	05c0      	lsls	r0, r0, #23
 8000676:	f001 f88f 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800067a:	20fa      	movs	r0, #250	; 0xfa
 800067c:	0080      	lsls	r0, r0, #2
 800067e:	f000 fbf1 	bl	8000e64 <HAL_Delay>

    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2104      	movs	r1, #4
 8000686:	4850      	ldr	r0, [pc, #320]	; (80007c8 <TEST_IO+0x180>)
 8000688:	f001 f886 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	484e      	ldr	r0, [pc, #312]	; (80007cc <TEST_IO+0x184>)
 8000692:	f001 f881 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	20a0      	movs	r0, #160	; 0xa0
 800069a:	2201      	movs	r2, #1
 800069c:	0049      	lsls	r1, r1, #1
 800069e:	05c0      	lsls	r0, r0, #23
 80006a0:	f001 f87a 	bl	8001798 <HAL_GPIO_WritePin>



    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 80006a4:	20a0      	movs	r0, #160	; 0xa0
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	05c0      	lsls	r0, r0, #23
 80006aa:	f001 f86f 	bl	800178c <HAL_GPIO_ReadPin>
 80006ae:	1e02      	subs	r2, r0, #0
 80006b0:	d171      	bne.n	8000796 <TEST_IO+0x14e>
	{
	HAL_Delay(10);
	}
    HAL_GPIO_WritePin(ENABLE_SENSORS_GPIO_Port, ENABLE_SENSORS_Pin, 0);
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	20a0      	movs	r0, #160	; 0xa0
 80006b6:	0209      	lsls	r1, r1, #8
 80006b8:	05c0      	lsls	r0, r0, #23
 80006ba:	f001 f86d 	bl	8001798 <HAL_GPIO_WritePin>


    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 80006be:	20a0      	movs	r0, #160	; 0xa0
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	05c0      	lsls	r0, r0, #23
 80006c4:	f001 f862 	bl	800178c <HAL_GPIO_ReadPin>
 80006c8:	1e04      	subs	r4, r0, #0
 80006ca:	d168      	bne.n	800079e <TEST_IO+0x156>
	{
	HAL_Delay(10);
	}

    HAL_GPIO_WritePin(ENABLE_RAIL_12V_GPIO_Port, ENABLE_RAIL_12V_Pin, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	483d      	ldr	r0, [pc, #244]	; (80007c8 <TEST_IO+0x180>)
 80006d2:	f001 f861 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	20a0      	movs	r0, #160	; 0xa0
 80006da:	0022      	movs	r2, r4
 80006dc:	0049      	lsls	r1, r1, #1
 80006de:	05c0      	lsls	r0, r0, #23
 80006e0:	f001 f85a 	bl	8001798 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 80006e4:	20fa      	movs	r0, #250	; 0xfa
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 80006e6:	24a0      	movs	r4, #160	; 0xa0
    HAL_Delay(1000);
 80006e8:	0080      	lsls	r0, r0, #2
 80006ea:	f000 fbbb 	bl	8000e64 <HAL_Delay>
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 80006ee:	05e4      	lsls	r4, r4, #23
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	0020      	movs	r0, r4
 80006f4:	f001 f84a 	bl	800178c <HAL_GPIO_ReadPin>
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d154      	bne.n	80007a6 <TEST_IO+0x15e>
	{
	HAL_Delay(10);
	}


    HAL_GPIO_WritePin(PWM_FAN_GPIO_Port, PWM_FAN_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2120      	movs	r1, #32
 8000700:	4831      	ldr	r0, [pc, #196]	; (80007c8 <TEST_IO+0x180>)
 8000702:	f001 f849 	bl	8001798 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 8000706:	20fa      	movs	r0, #250	; 0xfa
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 8000708:	25a0      	movs	r5, #160	; 0xa0
    HAL_Delay(1000);
 800070a:	0080      	lsls	r0, r0, #2
 800070c:	f000 fbaa 	bl	8000e64 <HAL_Delay>
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 8000710:	05ed      	lsls	r5, r5, #23
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	0028      	movs	r0, r5
 8000716:	f001 f839 	bl	800178c <HAL_GPIO_ReadPin>
 800071a:	1e04      	subs	r4, r0, #0
 800071c:	d147      	bne.n	80007ae <TEST_IO+0x166>
	{
	HAL_Delay(10);
	}


    HAL_GPIO_WritePin(ENABLE_RAIL_5V_GPIO_Port, ENABLE_RAIL_5V_Pin, 1);
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	2201      	movs	r2, #1
 8000722:	4829      	ldr	r0, [pc, #164]	; (80007c8 <TEST_IO+0x180>)
 8000724:	0049      	lsls	r1, r1, #1
 8000726:	f001 f837 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 800072a:	0022      	movs	r2, r4
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4827      	ldr	r0, [pc, #156]	; (80007cc <TEST_IO+0x184>)
 8000730:	f001 f832 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000734:	20fa      	movs	r0, #250	; 0xfa
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 8000736:	24a0      	movs	r4, #160	; 0xa0
    HAL_Delay(1000);
 8000738:	0080      	lsls	r0, r0, #2
 800073a:	f000 fb93 	bl	8000e64 <HAL_Delay>
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 800073e:	05e4      	lsls	r4, r4, #23
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	0020      	movs	r0, r4
 8000744:	f001 f822 	bl	800178c <HAL_GPIO_ReadPin>
 8000748:	2800      	cmp	r0, #0
 800074a:	d134      	bne.n	80007b6 <TEST_IO+0x16e>
	{
	HAL_Delay(10);
	}

    HAL_GPIO_WritePin(ENABLE_TOFS_GPIO_Port, ENABLE_TOFS_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2110      	movs	r1, #16
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <TEST_IO+0x180>)
 8000752:	f001 f821 	bl	8001798 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 8000756:	20fa      	movs	r0, #250	; 0xfa
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 8000758:	25a0      	movs	r5, #160	; 0xa0
    HAL_Delay(1000);
 800075a:	0080      	lsls	r0, r0, #2
 800075c:	f000 fb82 	bl	8000e64 <HAL_Delay>
    while(HAL_GPIO_ReadPin(Power_Switch_GPIO_Port, Power_Switch_Pin))
 8000760:	05ed      	lsls	r5, r5, #23
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	0028      	movs	r0, r5
 8000766:	f001 f811 	bl	800178c <HAL_GPIO_ReadPin>
 800076a:	1e04      	subs	r4, r0, #0
 800076c:	d127      	bne.n	80007be <TEST_IO+0x176>
	{
	HAL_Delay(10);
	}

    HAL_GPIO_WritePin(ENABLE_STEPPER_MOTORS_GPIO_Port, ENABLE_STEPPER_MOTORS_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	2108      	movs	r1, #8
 8000772:	4815      	ldr	r0, [pc, #84]	; (80007c8 <TEST_IO+0x180>)
 8000774:	f001 f810 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <TEST_IO+0x180>)
 800077a:	0022      	movs	r2, r4
 800077c:	2104      	movs	r1, #4
 800077e:	f001 f80b 	bl	8001798 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 8000782:	20fa      	movs	r0, #250	; 0xfa
 8000784:	0080      	lsls	r0, r0, #2
 8000786:	f000 fb6d 	bl	8000e64 <HAL_Delay>
    while(1)
	{
	HAL_GPIO_TogglePin(PWM_FAN_GPIO_Port, PWM_FAN_Pin);
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <TEST_IO+0x180>)
 800078c:	2120      	movs	r1, #32
 800078e:	f001 f809 	bl	80017a4 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	e7f7      	b.n	8000786 <TEST_IO+0x13e>
	HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f000 fb64 	bl	8000e64 <HAL_Delay>
 800079c:	e782      	b.n	80006a4 <TEST_IO+0x5c>
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f000 fb60 	bl	8000e64 <HAL_Delay>
 80007a4:	e78b      	b.n	80006be <TEST_IO+0x76>
	HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fb5c 	bl	8000e64 <HAL_Delay>
 80007ac:	e7a0      	b.n	80006f0 <TEST_IO+0xa8>
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 fb58 	bl	8000e64 <HAL_Delay>
 80007b4:	e7ad      	b.n	8000712 <TEST_IO+0xca>
	HAL_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f000 fb54 	bl	8000e64 <HAL_Delay>
 80007bc:	e7c0      	b.n	8000740 <TEST_IO+0xf8>
	HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 fb50 	bl	8000e64 <HAL_Delay>
 80007c4:	e7cd      	b.n	8000762 <TEST_IO+0x11a>
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	50000400 	.word	0x50000400
 80007cc:	50000800 	.word	0x50000800

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	2510      	movs	r5, #16
{
 80007d4:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	2238      	movs	r2, #56	; 0x38
 80007d8:	2100      	movs	r1, #0
 80007da:	a80e      	add	r0, sp, #56	; 0x38
 80007dc:	f002 fbe9 	bl	8002fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	002a      	movs	r2, r5
 80007e2:	2100      	movs	r1, #0
 80007e4:	4668      	mov	r0, sp
 80007e6:	f002 fbe4 	bl	8002fb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ea:	2100      	movs	r1, #0
 80007ec:	2228      	movs	r2, #40	; 0x28
 80007ee:	a804      	add	r0, sp, #16
 80007f0:	f002 fbdf 	bl	8002fb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2080      	movs	r0, #128	; 0x80
 80007f6:	0080      	lsls	r0, r0, #2
 80007f8:	f000 ffdc 	bl	80017b4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	3340      	adds	r3, #64	; 0x40
 8000808:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 8;
 800080a:	3b38      	subs	r3, #56	; 0x38
 800080c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	029b      	lsls	r3, r3, #10
 8000812:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	049b      	lsls	r3, r3, #18
 8000818:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800081a:	23e0      	movs	r3, #224	; 0xe0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800081e:	061b      	lsls	r3, r3, #24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000822:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000826:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000828:	9517      	str	r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800082a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f000 ffee 	bl	800180c <HAL_RCC_OscConfig>
 8000830:	1e01      	subs	r1, r0, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x68>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000836:	e7fe      	b.n	8000836 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f001 fa4c 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000848:	2800      	cmp	r0, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x80>
 800084c:	b672      	cpsid	i
  while (1)
 800084e:	e7fe      	b.n	800084e <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <SystemClock_Config+0x9c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000852:	9005      	str	r0, [sp, #20]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000854:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000856:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000858:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085a:	f001 fb1d 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	2800      	cmp	r0, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x96>
 8000862:	b672      	cpsid	i
  while (1)
 8000864:	e7fe      	b.n	8000864 <SystemClock_Config+0x94>
}
 8000866:	b01d      	add	sp, #116	; 0x74
 8000868:	bd30      	pop	{r4, r5, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	00004001 	.word	0x00004001

08000870 <main>:
{
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2601      	movs	r6, #1
{
 8000874:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000876:	f000 facf 	bl	8000e18 <HAL_Init>
  SystemClock_Config();
 800087a:	f7ff ffa9 	bl	80007d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2214      	movs	r2, #20
 8000880:	2100      	movs	r1, #0
 8000882:	a805      	add	r0, sp, #20
 8000884:	f002 fb95 	bl	8002fb2 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4d9d      	ldr	r5, [pc, #628]	; (8000b00 <main+0x290>)
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800088c:	27de      	movs	r7, #222	; 0xde
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000890:	007f      	lsls	r7, r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4333      	orrs	r3, r6
 8000894:	636b      	str	r3, [r5, #52]	; 0x34
 8000896:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000898:	489a      	ldr	r0, [pc, #616]	; (8000b04 <main+0x294>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4033      	ands	r3, r6
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	430a      	orrs	r2, r1
 80008a6:	636a      	str	r2, [r5, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a8:	2204      	movs	r2, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008ac:	400b      	ands	r3, r1
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80008b4:	0039      	movs	r1, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4313      	orrs	r3, r2
 80008b8:	636b      	str	r3, [r5, #52]	; 0x34
 80008ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008bc:	4013      	ands	r3, r2
 80008be:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80008c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80008c4:	f000 ff68 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|ENABLE_SENSORS_Pin, GPIO_PIN_RESET);
 80008c8:	2181      	movs	r1, #129	; 0x81
 80008ca:	20a0      	movs	r0, #160	; 0xa0
 80008cc:	2200      	movs	r2, #0
 80008ce:	0209      	lsls	r1, r1, #8
 80008d0:	05c0      	lsls	r0, r0, #23
 80008d2:	f000 ff61 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	488b      	ldr	r0, [pc, #556]	; (8000b08 <main+0x298>)
 80008dc:	f000 ff5c 	bl	8001798 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008e0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 80008e2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008e4:	a905      	add	r1, sp, #20
 80008e6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 80008e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f000 fea3 	bl	8001638 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	4884      	ldr	r0, [pc, #528]	; (8000b04 <main+0x294>)
 80008f4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80008f6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f000 fe9b 	bl	8001638 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 8000902:	2281      	movs	r2, #129	; 0x81
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 8000906:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	a905      	add	r1, sp, #20
 800090a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 800090c:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f000 fe90 	bl	8001638 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000918:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800091a:	487b      	ldr	r0, [pc, #492]	; (8000b08 <main+0x298>)
 800091c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_G_Pin;
 800091e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000926:	f000 fe87 	bl	8001638 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800092c:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4333      	orrs	r3, r6
 8000930:	63ab      	str	r3, [r5, #56]	; 0x38
 8000932:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000934:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000936:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000938:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800093e:	f000 fcff 	bl	8001340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000942:	2009      	movs	r0, #9
 8000944:	f000 fd26 	bl	8001394 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000948:	4d70      	ldr	r5, [pc, #448]	; (8000b0c <main+0x29c>)
 800094a:	4b71      	ldr	r3, [pc, #452]	; (8000b10 <main+0x2a0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	3fb1      	subs	r7, #177	; 0xb1
  huart1.Instance = USART1;
 800094e:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000950:	23e1      	movs	r3, #225	; 0xe1
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000952:	0028      	movs	r0, r5
  huart1.Init.BaudRate = 115200;
 8000954:	025b      	lsls	r3, r3, #9
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000956:	3fff      	subs	r7, #255	; 0xff
  huart1.Init.BaudRate = 115200;
 8000958:	606b      	str	r3, [r5, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	616f      	str	r7, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096c:	f002 f844 	bl	80029f8 <HAL_UART_Init>
 8000970:	0001      	movs	r1, r0
 8000972:	42a0      	cmp	r0, r4
 8000974:	d001      	beq.n	800097a <main+0x10a>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x108>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	0028      	movs	r0, r5
 800097c:	f002 f8c6 	bl	8002b0c <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	1e01      	subs	r1, r0, #0
 8000982:	d001      	beq.n	8000988 <main+0x118>
 8000984:	b672      	cpsid	i
  while (1)
 8000986:	e7fe      	b.n	8000986 <main+0x116>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	0028      	movs	r0, r5
 800098a:	f002 f8e3 	bl	8002b54 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	2800      	cmp	r0, #0
 8000990:	d001      	beq.n	8000996 <main+0x126>
 8000992:	b672      	cpsid	i
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x124>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000996:	0028      	movs	r0, r5
 8000998:	f002 f89a 	bl	8002ad0 <HAL_UARTEx_DisableFifoMode>
 800099c:	1e04      	subs	r4, r0, #0
 800099e:	d001      	beq.n	80009a4 <main+0x134>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x132>
  ADC_ChannelConfTypeDef sConfig = {0};
 80009a4:	0001      	movs	r1, r0
 80009a6:	003a      	movs	r2, r7
 80009a8:	a805      	add	r0, sp, #20
 80009aa:	f002 fb02 	bl	8002fb2 <memset>
  hadc1.Instance = ADC1;
 80009ae:	4d59      	ldr	r5, [pc, #356]	; (8000b14 <main+0x2a4>)
 80009b0:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <main+0x2a8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b2:	0028      	movs	r0, r5
  hadc1.Instance = ADC1;
 80009b4:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	061b      	lsls	r3, r3, #24
 80009c0:	612b      	str	r3, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009c2:	2308      	movs	r3, #8
 80009c4:	616b      	str	r3, [r5, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80009c6:	2302      	movs	r3, #2
 80009c8:	33ff      	adds	r3, #255	; 0xff
 80009ca:	832b      	strh	r3, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009cc:	1c6b      	adds	r3, r5, #1
 80009ce:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d0:	002b      	movs	r3, r5
 80009d2:	332c      	adds	r3, #44	; 0x2c
 80009d4:	701e      	strb	r6, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80009d6:	2304      	movs	r3, #4
 80009d8:	636b      	str	r3, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009da:	002b      	movs	r3, r5
 80009dc:	333c      	adds	r3, #60	; 0x3c
 80009de:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	059b      	lsls	r3, r3, #22
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009e8:	76ae      	strb	r6, [r5, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009ea:	61ee      	str	r6, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ee:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f0:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80009f2:	64eb      	str	r3, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f4:	f000 fa4c 	bl	8000e90 <HAL_ADC_Init>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d001      	beq.n	8000a00 <main+0x190>
 80009fc:	b672      	cpsid	i
  while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x18e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	0028      	movs	r0, r5
 8000a02:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 8000a04:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a06:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	f000 fb76 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d001      	beq.n	8000a14 <main+0x1a4>
 8000a10:	b672      	cpsid	i
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <main+0x1a2>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a14:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <main+0x2ac>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	0028      	movs	r0, r5
 8000a18:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 8000a1a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	f000 fb6c 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d001      	beq.n	8000a28 <main+0x1b8>
 8000a24:	b672      	cpsid	i
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x1b6>
  sConfig.Channel = ADC_CHANNEL_2;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <main+0x2b0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	0028      	movs	r0, r5
 8000a2c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_2;
 8000a2e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	f000 fb62 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d001      	beq.n	8000a3c <main+0x1cc>
 8000a38:	b672      	cpsid	i
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x1ca>
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <main+0x2b4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	0028      	movs	r0, r5
 8000a40:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_3;
 8000a42:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	f000 fb58 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0x1e0>
 8000a4c:	b672      	cpsid	i
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x1de>
  sConfig.Channel = ADC_CHANNEL_4;
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <main+0x2b8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	0028      	movs	r0, r5
 8000a54:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 8000a56:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	f000 fb4e 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d001      	beq.n	8000a64 <main+0x1f4>
 8000a60:	b672      	cpsid	i
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0x1f2>
  sConfig.Channel = ADC_CHANNEL_5;
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <main+0x2bc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	0028      	movs	r0, r5
 8000a68:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 8000a6a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	f000 fb44 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d001      	beq.n	8000a78 <main+0x208>
 8000a74:	b672      	cpsid	i
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <main+0x206>
  sConfig.Channel = ADC_CHANNEL_7;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <main+0x2c0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_7;
 8000a7e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	f000 fb3a 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d001      	beq.n	8000a8c <main+0x21c>
 8000a88:	b672      	cpsid	i
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x21a>
  sConfig.Channel = ADC_CHANNEL_8;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <main+0x2c4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	0028      	movs	r0, r5
 8000a90:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_8;
 8000a92:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	f000 fb30 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <main+0x230>
 8000a9c:	b672      	cpsid	i
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x22e>
  sConfig.Channel = ADC_CHANNEL_9;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <main+0x2c8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_9;
 8000aa6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	f000 fb26 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d001      	beq.n	8000ab4 <main+0x244>
 8000ab0:	b672      	cpsid	i
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x242>
  sConfig.Channel = ADC_CHANNEL_16;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <main+0x2cc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab6:	0028      	movs	r0, r5
 8000ab8:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_16;
 8000aba:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	f000 fb1c 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <main+0x258>
 8000ac4:	b672      	cpsid	i
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <main+0x256>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <main+0x2d0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	0028      	movs	r0, r5
 8000acc:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ace:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	f000 fb12 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <main+0x26c>
 8000ad8:	b672      	cpsid	i
  while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0x26a>
  htim17.Instance = TIM17;
 8000adc:	4819      	ldr	r0, [pc, #100]	; (8000b44 <main+0x2d4>)
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <main+0x2d8>)
  htim17.Init.Prescaler = 0;
 8000ae0:	6043      	str	r3, [r0, #4]
  htim17.Instance = TIM17;
 8000ae2:	6002      	str	r2, [r0, #0]
  htim17.Init.Period = 65535;
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <main+0x2dc>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000ae8:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000aec:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000af0:	f001 fbe4 	bl	80022bc <HAL_TIM_Base_Init>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d001      	beq.n	8000afc <main+0x28c>
 8000af8:	b672      	cpsid	i
  while (1)
 8000afa:	e7fe      	b.n	8000afa <main+0x28a>
  TEST_IO();
 8000afc:	f7ff fda4 	bl	8000648 <TEST_IO>
 8000b00:	40021000 	.word	0x40021000
 8000b04:	50000400 	.word	0x50000400
 8000b08:	50000800 	.word	0x50000800
 8000b0c:	200006fc 	.word	0x200006fc
 8000b10:	40013800 	.word	0x40013800
 8000b14:	20000698 	.word	0x20000698
 8000b18:	40012400 	.word	0x40012400
 8000b1c:	04000002 	.word	0x04000002
 8000b20:	08000004 	.word	0x08000004
 8000b24:	0c000008 	.word	0x0c000008
 8000b28:	10000010 	.word	0x10000010
 8000b2c:	14000020 	.word	0x14000020
 8000b30:	1c000080 	.word	0x1c000080
 8000b34:	20000100 	.word	0x20000100
 8000b38:	24000200 	.word	0x24000200
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	b0001000 	.word	0xb0001000
 8000b44:	200004d8 	.word	0x200004d8
 8000b48:	40014800 	.word	0x40014800
 8000b4c:	0000ffff 	.word	0x0000ffff

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000b52:	6802      	ldr	r2, [r0, #0]
{
 8000b54:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000b5a:	f000 f971 	bl	8000e40 <HAL_IncTick>
}
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <Error_Handler>:
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <Error_Handler+0x2>

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_MspInit+0x34>)
 8000b6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000b70:	4301      	orrs	r1, r0
 8000b72:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b74:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4002      	ands	r2, r0
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b82:	1800      	adds	r0, r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	430a      	orrs	r2, r1
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b8a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b90:	2103      	movs	r1, #3
 8000b92:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b96:	f000 fbd3 	bl	8001340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bd07      	pop	{r0, r1, r2, pc}
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	0005      	movs	r5, r0
 8000ba4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	2214      	movs	r2, #20
 8000ba8:	2100      	movs	r1, #0
 8000baa:	a803      	add	r0, sp, #12
 8000bac:	f002 fa01 	bl	8002fb2 <memset>
  if(hadc->Instance==ADC1)
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_ADC_MspInit+0xac>)
 8000bb2:	682a      	ldr	r2, [r5, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d147      	bne.n	8000c48 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bb8:	2080      	movs	r0, #128	; 0x80
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_ADC_MspInit+0xb0>)
 8000bbc:	0340      	lsls	r0, r0, #13
 8000bbe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
                          |BOARD_TEMP_PROBE1_Pin|BOARD_TEMP_PROBE2_Pin|VBAT_1_Pin|BAT_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc2:	4301      	orrs	r1, r0
 8000bc4:	6419      	str	r1, [r3, #64]	; 0x40
 8000bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bca:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2001      	movs	r0, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bd4:	4301      	orrs	r1, r0
 8000bd6:	6359      	str	r1, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bdc:	4002      	ands	r2, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f000 fd1b 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <HAL_ADC_MspInit+0xb8>)
 8000c04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000c06:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f000 fd14 	bl	8001638 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c10:	4c12      	ldr	r4, [pc, #72]	; (8000c5c <HAL_ADC_MspInit+0xbc>)
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c14:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000c16:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1c:	337b      	adds	r3, #123	; 0x7b
 8000c1e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c20:	3380      	adds	r3, #128	; 0x80
 8000c22:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	019b      	lsls	r3, r3, #6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c32:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c36:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c38:	f000 fbd2 	bl	80013e0 <HAL_DMA_Init>
 8000c3c:	42b0      	cmp	r0, r6
 8000c3e:	d001      	beq.n	8000c44 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8000c40:	f7ff ff90 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c44:	652c      	str	r4, [r5, #80]	; 0x50
 8000c46:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c48:	b008      	add	sp, #32
 8000c4a:	bd70      	pop	{r4, r5, r6, pc}
 8000c4c:	40012400 	.word	0x40012400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	000010bf 	.word	0x000010bf
 8000c58:	50000400 	.word	0x50000400
 8000c5c:	200007ac 	.word	0x200007ac
 8000c60:	40020008 	.word	0x40020008

08000c64 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM17)
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_TIM_Base_MspInit+0x24>)
 8000c66:	6802      	ldr	r2, [r0, #0]
{
 8000c68:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM17)
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d109      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_TIM_Base_MspInit+0x28>)
 8000c72:	02c0      	lsls	r0, r0, #11
 8000c74:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c76:	4301      	orrs	r1, r0
 8000c78:	6411      	str	r1, [r2, #64]	; 0x40
 8000c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c7c:	4003      	ands	r3, r0
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c82:	b002      	add	sp, #8
 8000c84:	4770      	bx	lr
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40014800 	.word	0x40014800
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b510      	push	{r4, lr}
 8000c92:	0004      	movs	r4, r0
 8000c94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	2214      	movs	r2, #20
 8000c98:	2100      	movs	r1, #0
 8000c9a:	a803      	add	r0, sp, #12
 8000c9c:	f002 f989 	bl	8002fb2 <memset>
  if(huart->Instance==USART1)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_UART_MspInit+0x6c>)
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d127      	bne.n	8000cf8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x70>)
 8000cac:	01c0      	lsls	r0, r0, #7
 8000cae:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	6419      	str	r1, [r3, #64]	; 0x40
 8000cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb8:	4002      	ands	r2, r0
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	6359      	str	r1, [r3, #52]	; 0x34
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4013      	ands	r3, r2
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cde:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f000 fca8 	bl	8001638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000ce8:	201b      	movs	r0, #27
 8000cea:	0022      	movs	r2, r4
 8000cec:	2103      	movs	r1, #3
 8000cee:	f000 fb27 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf2:	201b      	movs	r0, #27
 8000cf4:	f000 fb4e 	bl	8001394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf8:	b008      	add	sp, #32
 8000cfa:	bd10      	pop	{r4, pc}
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b510      	push	{r4, lr}
 8000d06:	0001      	movs	r1, r0
 8000d08:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	200d      	movs	r0, #13
 8000d0e:	f000 fb17 	bl	8001340 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d12:	200d      	movs	r0, #13
 8000d14:	f000 fb3e 	bl	8001394 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d18:	2080      	movs	r0, #128	; 0x80
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_InitTick+0x68>)
 8000d1c:	0100      	lsls	r0, r0, #4
 8000d1e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d20:	4301      	orrs	r1, r0
 8000d22:	6411      	str	r1, [r2, #64]	; 0x40
 8000d24:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d26:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d28:	4003      	ands	r3, r0
 8000d2a:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d30:	f001 f898 	bl	8001e64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d34:	f001 f882 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d38:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3c:	490e      	ldr	r1, [pc, #56]	; (8000d78 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8000d3e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_InitTick+0x78>)
 8000d42:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	f7ff f9f4 	bl	8000130 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000d48:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d4c:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d4e:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000d50:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d54:	f001 fab2 	bl	80022bc <HAL_TIM_Base_Init>
 8000d58:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d60:	0020      	movs	r0, r4
 8000d62:	f001 f97b 	bl	800205c <HAL_TIM_Base_Start_IT>
}
 8000d66:	b006      	add	sp, #24
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000844 	.word	0x20000844
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	000f4240 	.word	0x000f4240
 8000d7c:	000003e7 	.word	0x000003e7

08000d80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler>

08000d82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler>

08000d84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Channel1_IRQHandler+0xc>)
 8000d88:	f000 fc02 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8c:	bd10      	pop	{r4, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	200007ac 	.word	0x200007ac

08000d94 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000d94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d96:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8000d98:	f001 f994 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000d9c:	bd10      	pop	{r4, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000844 	.word	0x20000844

08000da4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000da4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <USART1_IRQHandler+0xc>)
 8000da8:	f001 fae0 	bl	800236c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	200006fc 	.word	0x200006fc

08000db4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <SystemInit+0xc>)
 8000db8:	0512      	lsls	r2, r2, #20
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	4770      	bx	lr
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f7ff fff4 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df2:	f002 f8b1 	bl	8002f58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000df6:	f7ff fd3b 	bl	8000870 <main>

08000dfa <LoopForever>:

LoopForever:
  b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	0800307c 	.word	0x0800307c
  ldr r2, =_sbss
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e10:	20000894 	.word	0x20000894

08000e14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_IRQHandler>
	...

08000e18 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_Init+0x24>)
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	6811      	ldr	r1, [r2, #0]
{
 8000e20:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e22:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e24:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e26:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e28:	f7ff ff6c 	bl	8000d04 <HAL_InitTick>
 8000e2c:	1e04      	subs	r4, r0, #0
 8000e2e:	d103      	bne.n	8000e38 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe9a 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000e34:	0020      	movs	r0, r4
 8000e36:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e38:	2401      	movs	r4, #1
 8000e3a:	e7fb      	b.n	8000e34 <HAL_Init+0x1c>
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x10>)
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_IncTick+0x14>)
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	185b      	adds	r3, r3, r1
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	4770      	bx	lr
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000890 	.word	0x20000890
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000890 	.word	0x20000890

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff6 	bl	8000e58 <HAL_GetTick>
 8000e6c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	1c63      	adds	r3, r4, #1
 8000e70:	d002      	beq.n	8000e78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_Delay+0x20>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	42a0      	cmp	r0, r4
 8000e80:	d3fa      	bcc.n	8000e78 <HAL_Delay+0x14>
  {
  }
}
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	20000004 	.word	0x20000004

08000e88 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e88:	6880      	ldr	r0, [r0, #8]
 8000e8a:	0740      	lsls	r0, r0, #29
 8000e8c:	0fc0      	lsrs	r0, r0, #31
}
 8000e8e:	4770      	bx	lr

08000e90 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e90:	2300      	movs	r3, #0
{
 8000e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e94:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000e96:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000e98:	3301      	adds	r3, #1
{
 8000e9a:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 8000e9c:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000e9e:	d100      	bne.n	8000ea2 <HAL_ADC_Init+0x12>
 8000ea0:	e0be      	b.n	8001020 <HAL_ADC_Init+0x190>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d105      	bne.n	8000eb4 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea8:	f7ff fe7a 	bl	8000ba0 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000eac:	0023      	movs	r3, r4
 8000eae:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000eb2:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eb4:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eb6:	6826      	ldr	r6, [r4, #0]
 8000eb8:	055b      	lsls	r3, r3, #21
 8000eba:	68b2      	ldr	r2, [r6, #8]
 8000ebc:	421a      	tst	r2, r3
 8000ebe:	d100      	bne.n	8000ec2 <HAL_ADC_Init+0x32>
 8000ec0:	e0b1      	b.n	8001026 <HAL_ADC_Init+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	68b3      	ldr	r3, [r6, #8]
 8000ec6:	9201      	str	r2, [sp, #4]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	d408      	bmi.n	8000ede <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ece:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed0:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ed2:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000eda:	432b      	orrs	r3, r5
 8000edc:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ede:	0030      	movs	r0, r6
 8000ee0:	f7ff ffd2 	bl	8000e88 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000ee8:	401a      	ands	r2, r3
 8000eea:	4310      	orrs	r0, r2
 8000eec:	d000      	beq.n	8000ef0 <HAL_ADC_Init+0x60>
 8000eee:	e0e8      	b.n	80010c2 <HAL_ADC_Init+0x232>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ef2:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <HAL_ADC_Init+0x240>)
  uint32_t tmpCFGR2 = 0UL;
 8000ef4:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2302      	movs	r3, #2
 8000efa:	4313      	orrs	r3, r2
 8000efc:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000efe:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	07d2      	lsls	r2, r2, #31
 8000f04:	d42e      	bmi.n	8000f64 <HAL_ADC_Init+0xd4>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	3118      	adds	r1, #24
 8000f0a:	438a      	bics	r2, r1
 8000f0c:	68a1      	ldr	r1, [r4, #8]
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.Oversampling.Ratio         |
                   hadc->Init.Oversampling.RightBitShift |
                   hadc->Init.Oversampling.TriggeredMode |
 8000f0e:	6c65      	ldr	r5, [r4, #68]	; 0x44
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f10:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.TriggeredMode |
 8000f12:	6c21      	ldr	r1, [r4, #64]	; 0x40
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f14:	60da      	str	r2, [r3, #12]
                   hadc->Init.Oversampling.TriggeredMode |
 8000f16:	4329      	orrs	r1, r5
 8000f18:	6ca5      	ldr	r5, [r4, #72]	; 0x48
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f1a:	6862      	ldr	r2, [r4, #4]
                   hadc->Init.Oversampling.TriggeredMode |
 8000f1c:	4329      	orrs	r1, r5
 8000f1e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f20:	0f96      	lsrs	r6, r2, #30
 8000f22:	07b6      	lsls	r6, r6, #30
                   hadc->Init.Oversampling.TriggeredMode |
 8000f24:	4329      	orrs	r1, r5
 8000f26:	4331      	orrs	r1, r6
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f28:	0026      	movs	r6, r4
 8000f2a:	363c      	adds	r6, #60	; 0x3c
 8000f2c:	7836      	ldrb	r6, [r6, #0]
 8000f2e:	2e01      	cmp	r6, #1
 8000f30:	d100      	bne.n	8000f34 <HAL_ADC_Init+0xa4>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000f32:	4331      	orrs	r1, r6
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f34:	691e      	ldr	r6, [r3, #16]
 8000f36:	4f67      	ldr	r7, [pc, #412]	; (80010d4 <HAL_ADC_Init+0x244>)
 8000f38:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f3a:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000f3c:	430e      	orrs	r6, r1
 8000f3e:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f40:	0056      	lsls	r6, r2, #1
 8000f42:	0876      	lsrs	r6, r6, #1
 8000f44:	05ff      	lsls	r7, r7, #23
 8000f46:	42be      	cmp	r6, r7
 8000f48:	d00c      	beq.n	8000f64 <HAL_ADC_Init+0xd4>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f4a:	2680      	movs	r6, #128	; 0x80
 8000f4c:	0636      	lsls	r6, r6, #24
 8000f4e:	42b2      	cmp	r2, r6
 8000f50:	d008      	beq.n	8000f64 <HAL_ADC_Init+0xd4>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f52:	4e61      	ldr	r6, [pc, #388]	; (80010d8 <HAL_ADC_Init+0x248>)
 8000f54:	4f61      	ldr	r7, [pc, #388]	; (80010dc <HAL_ADC_Init+0x24c>)
 8000f56:	6835      	ldr	r5, [r6, #0]
 8000f58:	402f      	ands	r7, r5
 8000f5a:	25f0      	movs	r5, #240	; 0xf0
 8000f5c:	03ad      	lsls	r5, r5, #14
 8000f5e:	402a      	ands	r2, r5
 8000f60:	433a      	orrs	r2, r7
 8000f62:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f64:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f66:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f68:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f6a:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f6c:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f6e:	7ea2      	ldrb	r2, [r4, #26]
 8000f70:	4694      	mov	ip, r2
 8000f72:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_ADC_Init+0xee>
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	0152      	lsls	r2, r2, #5
 8000f7e:	68e5      	ldr	r5, [r4, #12]
 8000f80:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f82:	6925      	ldr	r5, [r4, #16]
 8000f84:	433e      	orrs	r6, r7
 8000f86:	9603      	str	r6, [sp, #12]
 8000f88:	9502      	str	r5, [sp, #8]
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	da5f      	bge.n	800104e <HAL_ADC_Init+0x1be>
 8000f8e:	006f      	lsls	r7, r5, #1
 8000f90:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f92:	0026      	movs	r6, r4
 8000f94:	362c      	adds	r6, #44	; 0x2c
 8000f96:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f98:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f9a:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f9c:	432e      	orrs	r6, r5
 8000f9e:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa0:	1c66      	adds	r6, r4, #1
 8000fa2:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fa4:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa6:	2e01      	cmp	r6, #1
 8000fa8:	d105      	bne.n	8000fb6 <HAL_ADC_Init+0x126>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000faa:	4665      	mov	r5, ip
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d151      	bne.n	8001054 <HAL_ADC_Init+0x1c4>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fb0:	2680      	movs	r6, #128	; 0x80
 8000fb2:	0276      	lsls	r6, r6, #9
 8000fb4:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_ADC_Init+0x138>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fbc:	27e0      	movs	r7, #224	; 0xe0
 8000fbe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000fc0:	007f      	lsls	r7, r7, #1
 8000fc2:	403e      	ands	r6, r7
 8000fc4:	432e      	orrs	r6, r5
 8000fc6:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000fc8:	68de      	ldr	r6, [r3, #12]
 8000fca:	4f45      	ldr	r7, [pc, #276]	; (80010e0 <HAL_ADC_Init+0x250>)
  MODIFY_REG(ADCx->SMPR,
 8000fcc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000fce:	403e      	ands	r6, r7
 8000fd0:	4316      	orrs	r6, r2
 8000fd2:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000fd4:	691e      	ldr	r6, [r3, #16]
 8000fd6:	4f43      	ldr	r7, [pc, #268]	; (80010e4 <HAL_ADC_Init+0x254>)
 8000fd8:	403e      	ands	r6, r7
 8000fda:	4331      	orrs	r1, r6
 8000fdc:	2607      	movs	r6, #7
 8000fde:	2770      	movs	r7, #112	; 0x70
 8000fe0:	6119      	str	r1, [r3, #16]
 8000fe2:	6959      	ldr	r1, [r3, #20]
 8000fe4:	43b1      	bics	r1, r6
 8000fe6:	4329      	orrs	r1, r5
 8000fe8:	6159      	str	r1, [r3, #20]
 8000fea:	695e      	ldr	r6, [r3, #20]
 8000fec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000fee:	43be      	bics	r6, r7
 8000ff0:	0109      	lsls	r1, r1, #4
 8000ff2:	4331      	orrs	r1, r6
 8000ff4:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ff6:	9902      	ldr	r1, [sp, #8]
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	d133      	bne.n	8001064 <HAL_ADC_Init+0x1d4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ffe:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001000:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001002:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	4938      	ldr	r1, [pc, #224]	; (80010e8 <HAL_ADC_Init+0x258>)
 8001008:	400b      	ands	r3, r1
 800100a:	4293      	cmp	r3, r2
 800100c:	d14c      	bne.n	80010a8 <HAL_ADC_Init+0x218>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001010:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001012:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001016:	4393      	bics	r3, r2
 8001018:	001a      	movs	r2, r3
 800101a:	2301      	movs	r3, #1
 800101c:	4313      	orrs	r3, r2
 800101e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001020:	9801      	ldr	r0, [sp, #4]
 8001022:	b007      	add	sp, #28
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8001026:	68b2      	ldr	r2, [r6, #8]
 8001028:	4930      	ldr	r1, [pc, #192]	; (80010ec <HAL_ADC_Init+0x25c>)
 800102a:	400a      	ands	r2, r1
 800102c:	4313      	orrs	r3, r2
 800102e:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ADC_Init+0x260>)
 8001032:	4930      	ldr	r1, [pc, #192]	; (80010f4 <HAL_ADC_Init+0x264>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f7ff f87b 	bl	8000130 <__udivsi3>
 800103a:	0040      	lsls	r0, r0, #1
 800103c:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 800103e:	9b05      	ldr	r3, [sp, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d100      	bne.n	8001046 <HAL_ADC_Init+0x1b6>
 8001044:	e73d      	b.n	8000ec2 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8001046:	9b05      	ldr	r3, [sp, #20]
 8001048:	3b01      	subs	r3, #1
 800104a:	9305      	str	r3, [sp, #20]
 800104c:	e7f7      	b.n	800103e <HAL_ADC_Init+0x1ae>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800104e:	2780      	movs	r7, #128	; 0x80
 8001050:	03bf      	lsls	r7, r7, #14
 8001052:	e79e      	b.n	8000f92 <HAL_ADC_Init+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001054:	2720      	movs	r7, #32
 8001056:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8001058:	432f      	orrs	r7, r5
 800105a:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105c:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800105e:	433e      	orrs	r6, r7
 8001060:	65e6      	str	r6, [r4, #92]	; 0x5c
 8001062:	e7a8      	b.n	8000fb6 <HAL_ADC_Init+0x126>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	9d02      	ldr	r5, [sp, #8]
 8001068:	0389      	lsls	r1, r1, #14
 800106a:	428d      	cmp	r5, r1
 800106c:	d1ca      	bne.n	8001004 <HAL_ADC_Init+0x174>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800106e:	270f      	movs	r7, #15
 8001070:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8001072:	0035      	movs	r5, r6
 8001074:	0081      	lsls	r1, r0, #2
 8001076:	40cd      	lsrs	r5, r1
 8001078:	0029      	movs	r1, r5
 800107a:	4039      	ands	r1, r7
 800107c:	290f      	cmp	r1, #15
 800107e:	d00d      	beq.n	800109c <HAL_ADC_Init+0x20c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001080:	3001      	adds	r0, #1
 8001082:	2808      	cmp	r0, #8
 8001084:	d1f5      	bne.n	8001072 <HAL_ADC_Init+0x1e2>
        MODIFY_REG(hadc->Instance->CHSELR,
 8001086:	201c      	movs	r0, #28
 8001088:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800108a:	69e1      	ldr	r1, [r4, #28]
 800108c:	3901      	subs	r1, #1
 800108e:	0089      	lsls	r1, r1, #2
 8001090:	4001      	ands	r1, r0
 8001092:	382c      	subs	r0, #44	; 0x2c
 8001094:	4088      	lsls	r0, r1
 8001096:	0001      	movs	r1, r0
 8001098:	4331      	orrs	r1, r6
 800109a:	e7b2      	b.n	8001002 <HAL_ADC_Init+0x172>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800109c:	2801      	cmp	r0, #1
 800109e:	d1f2      	bne.n	8001086 <HAL_ADC_Init+0x1f6>
        SET_BIT(hadc->Instance->CHSELR,
 80010a0:	2110      	movs	r1, #16
 80010a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010a4:	4249      	negs	r1, r1
 80010a6:	e7ab      	b.n	8001000 <HAL_ADC_Init+0x170>
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	2212      	movs	r2, #18
 80010aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 80010ae:	4393      	bics	r3, r2
 80010b0:	001a      	movs	r2, r3
 80010b2:	2310      	movs	r3, #16
 80010b4:	4313      	orrs	r3, r2
 80010b6:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80010ba:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010bc:	432b      	orrs	r3, r5
 80010be:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80010c0:	e7ae      	b.n	8001020 <HAL_ADC_Init+0x190>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010c4:	4313      	orrs	r3, r2
 80010c6:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	e7a8      	b.n	8001020 <HAL_ADC_Init+0x190>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	fffffefd 	.word	0xfffffefd
 80010d4:	1ffffc02 	.word	0x1ffffc02
 80010d8:	40012708 	.word	0x40012708
 80010dc:	ffc3ffff 	.word	0xffc3ffff
 80010e0:	fffe0219 	.word	0xfffe0219
 80010e4:	dffffc02 	.word	0xdffffc02
 80010e8:	833fffe7 	.word	0x833fffe7
 80010ec:	6fffffe8 	.word	0x6fffffe8
 80010f0:	20000000 	.word	0x20000000
 80010f4:	00030d40 	.word	0x00030d40

080010f8 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010f8:	2300      	movs	r3, #0
{
 80010fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fc:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 80010fe:	9305      	str	r3, [sp, #20]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	0003      	movs	r3, r0
 8001102:	3354      	adds	r3, #84	; 0x54
 8001104:	781a      	ldrb	r2, [r3, #0]
{
 8001106:	0005      	movs	r5, r0
 8001108:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 800110a:	2002      	movs	r0, #2
 800110c:	2a01      	cmp	r2, #1
 800110e:	d100      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x1a>
 8001110:	e0c2      	b.n	8001298 <HAL_ADC_ConfigChannel+0x1a0>
 8001112:	2401      	movs	r4, #1
 8001114:	701c      	strb	r4, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001116:	6828      	ldr	r0, [r5, #0]
 8001118:	f7ff feb6 	bl	8000e88 <LL_ADC_REG_IsConversionOngoing>
 800111c:	2800      	cmp	r0, #0
 800111e:	d000      	beq.n	8001122 <HAL_ADC_ConfigChannel+0x2a>
 8001120:	e0f8      	b.n	8001314 <HAL_ADC_ConfigChannel+0x21c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	6873      	ldr	r3, [r6, #4]
 8001126:	0612      	lsls	r2, r2, #24
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	2304      	movs	r3, #4
 800112c:	4694      	mov	ip, r2
 800112e:	692f      	ldr	r7, [r5, #16]
 8001130:	9a01      	ldr	r2, [sp, #4]
 8001132:	439f      	bics	r7, r3
 8001134:	6833      	ldr	r3, [r6, #0]
 8001136:	2a02      	cmp	r2, #2
 8001138:	d100      	bne.n	800113c <HAL_ADC_ConfigChannel+0x44>
 800113a:	e0c1      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1c8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113c:	0359      	lsls	r1, r3, #13
 800113e:	0b49      	lsrs	r1, r1, #13
 8001140:	682a      	ldr	r2, [r5, #0]
 8001142:	9102      	str	r1, [sp, #8]
 8001144:	4567      	cmp	r7, ip
 8001146:	d10f      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001148:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 800114a:	4301      	orrs	r1, r0
 800114c:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 800114e:	68b1      	ldr	r1, [r6, #8]
 8001150:	6954      	ldr	r4, [r2, #20]
 8001152:	0218      	lsls	r0, r3, #8
 8001154:	4e72      	ldr	r6, [pc, #456]	; (8001320 <HAL_ADC_ConfigChannel+0x228>)
 8001156:	4001      	ands	r1, r0
 8001158:	4031      	ands	r1, r6
 800115a:	4384      	bics	r4, r0
 800115c:	4321      	orrs	r1, r4
 800115e:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001160:	2b00      	cmp	r3, #0
 8001162:	db64      	blt.n	800122e <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2000      	movs	r0, #0
}
 8001166:	e094      	b.n	8001292 <HAL_ADC_ConfigChannel+0x19a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001168:	211f      	movs	r1, #31
 800116a:	9f01      	ldr	r7, [sp, #4]
 800116c:	400f      	ands	r7, r1
 800116e:	46bc      	mov	ip, r7
 8001170:	270f      	movs	r7, #15
 8001172:	4661      	mov	r1, ip
 8001174:	408f      	lsls	r7, r1
 8001176:	43f9      	mvns	r1, r7
 8001178:	9103      	str	r1, [sp, #12]
 800117a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800117c:	43b9      	bics	r1, r7
 800117e:	000f      	movs	r7, r1
 8001180:	9902      	ldr	r1, [sp, #8]
 8001182:	2900      	cmp	r1, #0
 8001184:	d114      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0xb8>
 8001186:	0e98      	lsrs	r0, r3, #26
 8001188:	311f      	adds	r1, #31
 800118a:	4008      	ands	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	4088      	lsls	r0, r1
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001190:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001192:	4307      	orrs	r7, r0
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001194:	0889      	lsrs	r1, r1, #2
 8001196:	69e8      	ldr	r0, [r5, #28]
 8001198:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800119a:	662f      	str	r7, [r5, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800119c:	4281      	cmp	r1, r0
 800119e:	d8d6      	bhi.n	800114e <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 80011a0:	4664      	mov	r4, ip
 80011a2:	0099      	lsls	r1, r3, #2
 80011a4:	0f09      	lsrs	r1, r1, #28
 80011a6:	40a1      	lsls	r1, r4
 80011a8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80011aa:	9c03      	ldr	r4, [sp, #12]
 80011ac:	4020      	ands	r0, r4
 80011ae:	e7cc      	b.n	800114a <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011b0:	4223      	tst	r3, r4
 80011b2:	d1eb      	bne.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011b4:	2102      	movs	r1, #2
 80011b6:	0020      	movs	r0, r4
 80011b8:	420b      	tst	r3, r1
 80011ba:	d1e7      	bne.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011bc:	0008      	movs	r0, r1
 80011be:	1849      	adds	r1, r1, r1
 80011c0:	420b      	tst	r3, r1
 80011c2:	d1e3      	bne.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011c4:	3001      	adds	r0, #1
 80011c6:	0719      	lsls	r1, r3, #28
 80011c8:	d4e0      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011ca:	3001      	adds	r0, #1
 80011cc:	06d9      	lsls	r1, r3, #27
 80011ce:	d4dd      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011d0:	3001      	adds	r0, #1
 80011d2:	0699      	lsls	r1, r3, #26
 80011d4:	d4da      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011d6:	3001      	adds	r0, #1
 80011d8:	0659      	lsls	r1, r3, #25
 80011da:	d4d7      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011dc:	3001      	adds	r0, #1
 80011de:	0619      	lsls	r1, r3, #24
 80011e0:	d4d4      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011e2:	3001      	adds	r0, #1
 80011e4:	05d9      	lsls	r1, r3, #23
 80011e6:	d4d1      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011e8:	3001      	adds	r0, #1
 80011ea:	0599      	lsls	r1, r3, #22
 80011ec:	d4ce      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011ee:	3001      	adds	r0, #1
 80011f0:	0559      	lsls	r1, r3, #21
 80011f2:	d4cb      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011f4:	3001      	adds	r0, #1
 80011f6:	0519      	lsls	r1, r3, #20
 80011f8:	d4c8      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 80011fa:	3001      	adds	r0, #1
 80011fc:	04d9      	lsls	r1, r3, #19
 80011fe:	d4c5      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 8001200:	3001      	adds	r0, #1
 8001202:	0499      	lsls	r1, r3, #18
 8001204:	d4c2      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 8001206:	3001      	adds	r0, #1
 8001208:	0459      	lsls	r1, r3, #17
 800120a:	d4bf      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 800120c:	3001      	adds	r0, #1
 800120e:	0419      	lsls	r1, r3, #16
 8001210:	d4bc      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 8001212:	3001      	adds	r0, #1
 8001214:	03d9      	lsls	r1, r3, #15
 8001216:	d4b9      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 8001218:	3001      	adds	r0, #1
 800121a:	0399      	lsls	r1, r3, #14
 800121c:	d4b6      	bmi.n	800118c <HAL_ADC_ConfigChannel+0x94>
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0018      	movs	r0, r3
 8001222:	02c9      	lsls	r1, r1, #11
 8001224:	4008      	ands	r0, r1
 8001226:	420b      	tst	r3, r1
 8001228:	d0b0      	beq.n	800118c <HAL_ADC_ConfigChannel+0x94>
 800122a:	2012      	movs	r0, #18
 800122c:	e7ae      	b.n	800118c <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800122e:	24e0      	movs	r4, #224	; 0xe0
 8001230:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <HAL_ADC_ConfigChannel+0x22c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001232:	483d      	ldr	r0, [pc, #244]	; (8001328 <HAL_ADC_ConfigChannel+0x230>)
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	0464      	lsls	r4, r4, #17
 8001238:	400c      	ands	r4, r1
 800123a:	4283      	cmp	r3, r0
 800123c:	d119      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x17a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	041b      	lsls	r3, r3, #16
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001242:	4219      	tst	r1, r3
 8001244:	d18e      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001246:	6811      	ldr	r1, [r2, #0]
 8001248:	4838      	ldr	r0, [pc, #224]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 800124a:	4001      	ands	r1, r0
 800124c:	4321      	orrs	r1, r4
 800124e:	4319      	orrs	r1, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_ADC_ConfigChannel+0x238>)
 8001252:	6011      	str	r1, [r2, #0]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_ADC_ConfigChannel+0x23c>)
 8001258:	f7fe ff6a 	bl	8000130 <__udivsi3>
 800125c:	230c      	movs	r3, #12
 800125e:	4343      	muls	r3, r0
 8001260:	3301      	adds	r3, #1
          while (wait_loop_index != 0UL)
          {
            wait_loop_index--;
 8001262:	9305      	str	r3, [sp, #20]
          while (wait_loop_index != 0UL)
 8001264:	9b05      	ldr	r3, [sp, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d100      	bne.n	800126c <HAL_ADC_ConfigChannel+0x174>
 800126a:	e77b      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
            wait_loop_index--;
 800126c:	9b05      	ldr	r3, [sp, #20]
 800126e:	3b01      	subs	r3, #1
 8001270:	e7f7      	b.n	8001262 <HAL_ADC_ConfigChannel+0x16a>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001272:	4831      	ldr	r0, [pc, #196]	; (8001338 <HAL_ADC_ConfigChannel+0x240>)
 8001274:	4283      	cmp	r3, r0
 8001276:	d111      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1a4>
 8001278:	2680      	movs	r6, #128	; 0x80
 800127a:	0008      	movs	r0, r1
 800127c:	0476      	lsls	r6, r6, #17
 800127e:	4030      	ands	r0, r6
 8001280:	4231      	tst	r1, r6
 8001282:	d000      	beq.n	8001286 <HAL_ADC_ConfigChannel+0x18e>
 8001284:	e76e      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
 8001286:	6811      	ldr	r1, [r2, #0]
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 800128a:	4019      	ands	r1, r3
 800128c:	4321      	orrs	r1, r4
 800128e:	430e      	orrs	r6, r1
 8001290:	6016      	str	r6, [r2, #0]

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001292:	2300      	movs	r3, #0
 8001294:	3554      	adds	r5, #84	; 0x54
 8001296:	702b      	strb	r3, [r5, #0]

  /* Return function status */
  return tmp_hal_status;
}
 8001298:	b007      	add	sp, #28
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800129c:	4827      	ldr	r0, [pc, #156]	; (800133c <HAL_ADC_ConfigChannel+0x244>)
 800129e:	4283      	cmp	r3, r0
 80012a0:	d000      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x1ac>
 80012a2:	e75f      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	0008      	movs	r0, r1
 80012a8:	03db      	lsls	r3, r3, #15
 80012aa:	4018      	ands	r0, r3
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80012ac:	4219      	tst	r1, r3
 80012ae:	d000      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x1ba>
 80012b0:	e758      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
 80012b2:	6811      	ldr	r1, [r2, #0]
 80012b4:	4e1d      	ldr	r6, [pc, #116]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 80012b6:	4031      	ands	r1, r6
 80012b8:	4321      	orrs	r1, r4
 80012ba:	430b      	orrs	r3, r1
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	e7e8      	b.n	8001292 <HAL_ADC_ConfigChannel+0x19a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012c0:	4567      	cmp	r7, ip
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1d8>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80012c4:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012c6:	0359      	lsls	r1, r3, #13
 80012c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80012ca:	0b49      	lsrs	r1, r1, #13
 80012cc:	438a      	bics	r2, r1
 80012ce:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db00      	blt.n	80012d6 <HAL_ADC_ConfigChannel+0x1de>
 80012d4:	e746      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_ADC_ConfigChannel+0x22c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_ADC_ConfigChannel+0x230>)
 80012da:	6811      	ldr	r1, [r2, #0]
 80012dc:	4283      	cmp	r3, r0
 80012de:	d108      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x1fa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012e0:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e2:	6810      	ldr	r0, [r2, #0]
 80012e4:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012e6:	4019      	ands	r1, r3
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 80012ea:	4003      	ands	r3, r0
 80012ec:	4319      	orrs	r1, r3
 80012ee:	6011      	str	r1, [r2, #0]
 80012f0:	e738      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80012f2:	4811      	ldr	r0, [pc, #68]	; (8001338 <HAL_ADC_ConfigChannel+0x240>)
 80012f4:	4283      	cmp	r3, r0
 80012f6:	d103      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x208>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f8:	23c0      	movs	r3, #192	; 0xc0
 80012fa:	6810      	ldr	r0, [r2, #0]
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	e7f2      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x1ee>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <HAL_ADC_ConfigChannel+0x244>)
 8001302:	4283      	cmp	r3, r0
 8001304:	d000      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x210>
 8001306:	e72d      	b.n	8001164 <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001308:	20c0      	movs	r0, #192	; 0xc0
 800130a:	0440      	lsls	r0, r0, #17
 800130c:	4001      	ands	r1, r0
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 8001312:	e7ea      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1f2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001314:	2320      	movs	r3, #32
 8001316:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001318:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131a:	4313      	orrs	r3, r2
 800131c:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800131e:	e7b8      	b.n	8001292 <HAL_ADC_ConfigChannel+0x19a>
 8001320:	07ffff00 	.word	0x07ffff00
 8001324:	40012708 	.word	0x40012708
 8001328:	b0001000 	.word	0xb0001000
 800132c:	fe3fffff 	.word	0xfe3fffff
 8001330:	20000000 	.word	0x20000000
 8001334:	00030d40 	.word	0x00030d40
 8001338:	b8004000 	.word	0xb8004000
 800133c:	b4002000 	.word	0xb4002000

08001340 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b530      	push	{r4, r5, lr}
 8001342:	25ff      	movs	r5, #255	; 0xff
 8001344:	2403      	movs	r4, #3
 8001346:	002a      	movs	r2, r5
 8001348:	4004      	ands	r4, r0
 800134a:	00e4      	lsls	r4, r4, #3
 800134c:	40a2      	lsls	r2, r4
 800134e:	0189      	lsls	r1, r1, #6
 8001350:	4029      	ands	r1, r5
 8001352:	43d2      	mvns	r2, r2
 8001354:	40a1      	lsls	r1, r4
 8001356:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001358:	2800      	cmp	r0, #0
 800135a:	db0a      	blt.n	8001372 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	24c0      	movs	r4, #192	; 0xc0
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_NVIC_SetPriority+0x4c>)
 8001360:	0880      	lsrs	r0, r0, #2
 8001362:	0080      	lsls	r0, r0, #2
 8001364:	18c0      	adds	r0, r0, r3
 8001366:	00a4      	lsls	r4, r4, #2
 8001368:	5903      	ldr	r3, [r0, r4]
 800136a:	401a      	ands	r2, r3
 800136c:	4311      	orrs	r1, r2
 800136e:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001370:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001372:	200f      	movs	r0, #15
 8001374:	4003      	ands	r3, r0
 8001376:	3b08      	subs	r3, #8
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_NVIC_SetPriority+0x50>)
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	181b      	adds	r3, r3, r0
 8001380:	69d8      	ldr	r0, [r3, #28]
 8001382:	4002      	ands	r2, r0
 8001384:	4311      	orrs	r1, r2
 8001386:	61d9      	str	r1, [r3, #28]
 8001388:	e7f2      	b.n	8001370 <HAL_NVIC_SetPriority+0x30>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001394:	2800      	cmp	r0, #0
 8001396:	db05      	blt.n	80013a4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001398:	231f      	movs	r3, #31
 800139a:	4018      	ands	r0, r3
 800139c:	3b1e      	subs	r3, #30
 800139e:	4083      	lsls	r3, r0
 80013a0:	4a01      	ldr	r2, [pc, #4]	; (80013a8 <HAL_NVIC_EnableIRQ+0x14>)
 80013a2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013a4:	4770      	bx	lr
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	e000e100 	.word	0xe000e100

080013ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013ac:	b510      	push	{r4, lr}
 80013ae:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	2114      	movs	r1, #20
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	3808      	subs	r0, #8
 80013c4:	f7fe feb4 	bl	8000130 <__udivsi3>
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80013ca:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013cc:	231f      	movs	r3, #31
 80013ce:	4018      	ands	r0, r3
 80013d0:	3b1e      	subs	r3, #30
 80013d2:	4083      	lsls	r3, r0
 80013d4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	10008200 	.word	0x10008200
 80013dc:	40020880 	.word	0x40020880

080013e0 <HAL_DMA_Init>:
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
  if (hdma == NULL)
 80013e6:	2c00      	cmp	r4, #0
 80013e8:	d049      	beq.n	800147e <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013ea:	6825      	ldr	r5, [r4, #0]
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_DMA_Init+0xac>)
 80013ee:	2114      	movs	r1, #20
 80013f0:	18e8      	adds	r0, r5, r3
 80013f2:	f7fe fe9d 	bl	8000130 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f6:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f8:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fa:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013fc:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fe:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001404:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001406:	4013      	ands	r3, r2
 8001408:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800140a:	68a3      	ldr	r3, [r4, #8]
 800140c:	682a      	ldr	r2, [r5, #0]
 800140e:	430b      	orrs	r3, r1
 8001410:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001412:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001414:	430b      	orrs	r3, r1
 8001416:	6961      	ldr	r1, [r4, #20]
 8001418:	430b      	orrs	r3, r1
 800141a:	69a1      	ldr	r1, [r4, #24]
 800141c:	430b      	orrs	r3, r1
 800141e:	69e1      	ldr	r1, [r4, #28]
 8001420:	430b      	orrs	r3, r1
 8001422:	6a21      	ldr	r1, [r4, #32]
 8001424:	430b      	orrs	r3, r1
 8001426:	4313      	orrs	r3, r2
 8001428:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142a:	f7ff ffbf 	bl	80013ac <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	68a2      	ldr	r2, [r4, #8]
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	429a      	cmp	r2, r3
 8001436:	d101      	bne.n	800143c <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001438:	2300      	movs	r3, #0
 800143a:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800143c:	233f      	movs	r3, #63	; 0x3f
 800143e:	6862      	ldr	r2, [r4, #4]
 8001440:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001446:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800144a:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144c:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800144e:	2a03      	cmp	r2, #3
 8001450:	d816      	bhi.n	8001480 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001456:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001458:	2203      	movs	r2, #3
 800145a:	3b01      	subs	r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	3a02      	subs	r2, #2
 8001460:	409a      	lsls	r2, r3
 8001462:	65a2      	str	r2, [r4, #88]	; 0x58
 8001464:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001466:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001468:	0089      	lsls	r1, r1, #2
 800146a:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800146c:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800146e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001470:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001474:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001476:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001478:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800147a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800147c:	77e0      	strb	r0, [r4, #31]
}
 800147e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001484:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001486:	65a3      	str	r3, [r4, #88]	; 0x58
 8001488:	e7f3      	b.n	8001472 <HAL_DMA_Init+0x92>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	bffdfff8 	.word	0xbffdfff8
 8001490:	ffff800f 	.word	0xffff800f
 8001494:	1000823f 	.word	0x1000823f
 8001498:	40020940 	.word	0x40020940

0800149c <HAL_DMA_Abort>:
{
 800149c:	0003      	movs	r3, r0
 800149e:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
  if (NULL == hdma)
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014a6:	1d98      	adds	r0, r3, #6
 80014a8:	7fc2      	ldrb	r2, [r0, #31]
 80014aa:	1d5c      	adds	r4, r3, #5
 80014ac:	2a02      	cmp	r2, #2
 80014ae:	d005      	beq.n	80014bc <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	2204      	movs	r2, #4
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80014b4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80014b8:	77e3      	strb	r3, [r4, #31]
}
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014bc:	250e      	movs	r5, #14
 80014be:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c2:	680a      	ldr	r2, [r1, #0]
 80014c4:	43aa      	bics	r2, r5
 80014c6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c8:	6832      	ldr	r2, [r6, #0]
 80014ca:	4d11      	ldr	r5, [pc, #68]	; (8001510 <HAL_DMA_Abort+0x74>)
 80014cc:	402a      	ands	r2, r5
 80014ce:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 80014d0:	2201      	movs	r2, #1
 80014d2:	680e      	ldr	r6, [r1, #0]
 80014d4:	4694      	mov	ip, r2
 80014d6:	4396      	bics	r6, r2
 80014d8:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80014da:	211c      	movs	r1, #28
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	4e0d      	ldr	r6, [pc, #52]	; (8001514 <HAL_DMA_Abort+0x78>)
 80014e0:	4011      	ands	r1, r2
 80014e2:	4662      	mov	r2, ip
 80014e4:	408a      	lsls	r2, r1
 80014e6:	6877      	ldr	r7, [r6, #4]
 80014e8:	433a      	orrs	r2, r7
 80014ea:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014f0:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80014f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d005      	beq.n	8001504 <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014f8:	6811      	ldr	r1, [r2, #0]
 80014fa:	4029      	ands	r1, r5
 80014fc:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001504:	2301      	movs	r3, #1
 8001506:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 8001508:	2000      	movs	r0, #0
 800150a:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800150c:	e7d5      	b.n	80014ba <HAL_DMA_Abort+0x1e>
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	fffffeff 	.word	0xfffffeff
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_DMA_Abort_IT>:
{
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	1d81      	adds	r1, r0, #6
 800151c:	7fcb      	ldrb	r3, [r1, #31]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d004      	beq.n	800152c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001522:	2304      	movs	r3, #4
 8001524:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001526:	3b03      	subs	r3, #3
}
 8001528:	0018      	movs	r0, r3
 800152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	240e      	movs	r4, #14
 800152e:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001530:	4d15      	ldr	r5, [pc, #84]	; (8001588 <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001534:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001536:	43a3      	bics	r3, r4
 8001538:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800153a:	2301      	movs	r3, #1
 800153c:	6814      	ldr	r4, [r2, #0]
 800153e:	439c      	bics	r4, r3
 8001540:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001542:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	402a      	ands	r2, r5
 8001548:	6022      	str	r2, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800154a:	241c      	movs	r4, #28
 800154c:	403c      	ands	r4, r7
 800154e:	40a3      	lsls	r3, r4
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_DMA_Abort_IT+0x74>)
 8001552:	6856      	ldr	r6, [r2, #4]
 8001554:	4333      	orrs	r3, r6
 8001556:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001558:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800155a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800155c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800155e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	402a      	ands	r2, r5
 8001568:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800156a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800156c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800156e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001570:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001572:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001574:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8001576:	1d43      	adds	r3, r0, #5
 8001578:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 800157a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 800157e:	42a2      	cmp	r2, r4
 8001580:	d0d2      	beq.n	8001528 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001582:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	0023      	movs	r3, r4
 8001586:	e7cf      	b.n	8001528 <HAL_DMA_Abort_IT+0x10>
 8001588:	fffffeff 	.word	0xfffffeff
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_DMA_IRQHandler>:
{
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001592:	211c      	movs	r1, #28
 8001594:	2704      	movs	r7, #4
 8001596:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800159a:	4021      	ands	r1, r4
 800159c:	003c      	movs	r4, r7
 800159e:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80015a0:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80015a2:	6802      	ldr	r2, [r0, #0]
 80015a4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015a6:	4226      	tst	r6, r4
 80015a8:	d00f      	beq.n	80015ca <HAL_DMA_IRQHandler+0x3a>
 80015aa:	423d      	tst	r5, r7
 80015ac:	d00d      	beq.n	80015ca <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	6811      	ldr	r1, [r2, #0]
 80015b0:	0689      	lsls	r1, r1, #26
 80015b2:	d402      	bmi.n	80015ba <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	43b9      	bics	r1, r7
 80015b8:	6011      	str	r1, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4314      	orrs	r4, r2
 80015be:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80015c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01b      	beq.n	80015fe <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80015c6:	4798      	blx	r3
  return;
 80015c8:	e019      	b.n	80015fe <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80015ca:	2702      	movs	r7, #2
 80015cc:	003c      	movs	r4, r7
 80015ce:	408c      	lsls	r4, r1
 80015d0:	4226      	tst	r6, r4
 80015d2:	d015      	beq.n	8001600 <HAL_DMA_IRQHandler+0x70>
 80015d4:	423d      	tst	r5, r7
 80015d6:	d013      	beq.n	8001600 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015d8:	6811      	ldr	r1, [r2, #0]
 80015da:	0689      	lsls	r1, r1, #26
 80015dc:	d406      	bmi.n	80015ec <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015de:	250a      	movs	r5, #10
 80015e0:	6811      	ldr	r1, [r2, #0]
 80015e2:	43a9      	bics	r1, r5
 80015e4:	6011      	str	r1, [r2, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80015e6:	2101      	movs	r1, #1
 80015e8:	1d82      	adds	r2, r0, #6
 80015ea:	77d1      	strb	r1, [r2, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4314      	orrs	r4, r2
      __HAL_UNLOCK(hdma);
 80015f0:	2200      	movs	r2, #0
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015f2:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 80015f4:	1d43      	adds	r3, r0, #5
 80015f6:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 80015f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d1e3      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x36>
}
 80015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001600:	2408      	movs	r4, #8
 8001602:	0027      	movs	r7, r4
 8001604:	408f      	lsls	r7, r1
 8001606:	423e      	tst	r6, r7
 8001608:	d0f9      	beq.n	80015fe <HAL_DMA_IRQHandler+0x6e>
 800160a:	4225      	tst	r5, r4
 800160c:	d0f7      	beq.n	80015fe <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160e:	250e      	movs	r5, #14
 8001610:	6814      	ldr	r4, [r2, #0]
 8001612:	43ac      	bics	r4, r5
 8001614:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001616:	2201      	movs	r2, #1
 8001618:	0015      	movs	r5, r2
 800161a:	408d      	lsls	r5, r1
 800161c:	0029      	movs	r1, r5
 800161e:	685c      	ldr	r4, [r3, #4]
 8001620:	4321      	orrs	r1, r4
 8001622:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001624:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001626:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001628:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800162a:	2200      	movs	r2, #0
 800162c:	1d43      	adds	r3, r0, #5
 800162e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001630:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001632:	e7e2      	b.n	80015fa <HAL_DMA_IRQHandler+0x6a>
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001638:	2300      	movs	r3, #0
{
 800163a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	680a      	ldr	r2, [r1, #0]
 8001640:	0014      	movs	r4, r2
 8001642:	40dc      	lsrs	r4, r3
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001646:	b005      	add	sp, #20
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800164a:	2401      	movs	r4, #1
 800164c:	0015      	movs	r5, r2
 800164e:	409c      	lsls	r4, r3
 8001650:	4025      	ands	r5, r4
 8001652:	9502      	str	r5, [sp, #8]
    if (iocurrent != 0x00u)
 8001654:	4222      	tst	r2, r4
 8001656:	d100      	bne.n	800165a <HAL_GPIO_Init+0x22>
 8001658:	e08a      	b.n	8001770 <HAL_GPIO_Init+0x138>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165a:	2510      	movs	r5, #16
 800165c:	684a      	ldr	r2, [r1, #4]
 800165e:	005e      	lsls	r6, r3, #1
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	43aa      	bics	r2, r5
 8001664:	3d0d      	subs	r5, #13
 8001666:	40b5      	lsls	r5, r6
 8001668:	4694      	mov	ip, r2
 800166a:	3a01      	subs	r2, #1
 800166c:	43ed      	mvns	r5, r5
 800166e:	2a01      	cmp	r2, #1
 8001670:	d80f      	bhi.n	8001692 <HAL_GPIO_Init+0x5a>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001672:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8001674:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001676:	40b2      	lsls	r2, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001678:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800167a:	433a      	orrs	r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800167c:	2701      	movs	r7, #1
        GPIOx->OSPEEDR = temp;
 800167e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001680:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001682:	43a2      	bics	r2, r4
 8001684:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001686:	9a01      	ldr	r2, [sp, #4]
 8001688:	0912      	lsrs	r2, r2, #4
 800168a:	403a      	ands	r2, r7
 800168c:	409a      	lsls	r2, r3
 800168e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001690:	6042      	str	r2, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001692:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 8001694:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001698:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169a:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 800169c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169e:	4662      	mov	r2, ip
 80016a0:	2a02      	cmp	r2, #2
 80016a2:	d10f      	bne.n	80016c4 <HAL_GPIO_Init+0x8c>
        temp = GPIOx->AFR[position >> 3u];
 80016a4:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a6:	2407      	movs	r4, #7
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3u];
 80016ac:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ae:	9203      	str	r2, [sp, #12]
 80016b0:	220f      	movs	r2, #15
 80016b2:	401c      	ands	r4, r3
 80016b4:	00a4      	lsls	r4, r4, #2
 80016b6:	40a2      	lsls	r2, r4
 80016b8:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ba:	690a      	ldr	r2, [r1, #16]
 80016bc:	40a2      	lsls	r2, r4
 80016be:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3u] = temp;
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c4:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80016c6:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c8:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ca:	9a01      	ldr	r2, [sp, #4]
 80016cc:	4022      	ands	r2, r4
 80016ce:	40b2      	lsls	r2, r6
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d0:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d2:	4315      	orrs	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d4:	9a01      	ldr	r2, [sp, #4]
 80016d6:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 80016d8:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016da:	4222      	tst	r2, r4
 80016dc:	d048      	beq.n	8001770 <HAL_GPIO_Init+0x138>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016de:	2503      	movs	r5, #3
 80016e0:	270f      	movs	r7, #15
 80016e2:	401d      	ands	r5, r3
 80016e4:	00ed      	lsls	r5, r5, #3
 80016e6:	40af      	lsls	r7, r5
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_GPIO_Init+0x13c>)
        temp = EXTI->EXTICR[position >> 2u];
 80016ea:	089c      	lsrs	r4, r3, #2
 80016ec:	00a4      	lsls	r4, r4, #2
 80016ee:	18a4      	adds	r4, r4, r2
 80016f0:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016f2:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016f4:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016f6:	27a0      	movs	r7, #160	; 0xa0
 80016f8:	05ff      	lsls	r7, r7, #23
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	d00c      	beq.n	8001718 <HAL_GPIO_Init+0xe0>
 80016fe:	4f1e      	ldr	r7, [pc, #120]	; (8001778 <HAL_GPIO_Init+0x140>)
 8001700:	3201      	adds	r2, #1
 8001702:	42b8      	cmp	r0, r7
 8001704:	d008      	beq.n	8001718 <HAL_GPIO_Init+0xe0>
 8001706:	4f1d      	ldr	r7, [pc, #116]	; (800177c <HAL_GPIO_Init+0x144>)
 8001708:	3201      	adds	r2, #1
 800170a:	42b8      	cmp	r0, r7
 800170c:	d004      	beq.n	8001718 <HAL_GPIO_Init+0xe0>
 800170e:	4f1c      	ldr	r7, [pc, #112]	; (8001780 <HAL_GPIO_Init+0x148>)
 8001710:	3201      	adds	r2, #1
 8001712:	42b8      	cmp	r0, r7
 8001714:	d000      	beq.n	8001718 <HAL_GPIO_Init+0xe0>
 8001716:	3202      	adds	r2, #2
 8001718:	40aa      	lsls	r2, r5
 800171a:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800171c:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 800171e:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8001720:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR1;
 8001722:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 8001724:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001726:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 8001728:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800172a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172c:	03ff      	lsls	r7, r7, #15
 800172e:	d401      	bmi.n	8001734 <HAL_GPIO_Init+0xfc>
        temp &= ~(iocurrent);
 8001730:	0035      	movs	r5, r6
 8001732:	4025      	ands	r5, r4
        EXTI->IMR1 = temp;
 8001734:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001736:	4d14      	ldr	r5, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x150>)
          temp |= iocurrent;
 8001738:	9e02      	ldr	r6, [sp, #8]
        temp = EXTI->EMR1;
 800173a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800173e:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	03bf      	lsls	r7, r7, #14
 8001742:	d401      	bmi.n	8001748 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001744:	4022      	ands	r2, r4
 8001746:	0016      	movs	r6, r2
        EXTI->EMR1 = temp;
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_GPIO_Init+0x13c>)
 800174a:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800174c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800174e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001750:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001752:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	02ff      	lsls	r7, r7, #11
 8001756:	d401      	bmi.n	800175c <HAL_GPIO_Init+0x124>
        temp &= ~(iocurrent);
 8001758:	0035      	movs	r5, r6
 800175a:	4025      	ands	r5, r4
        EXTI->RTSR1 = temp;
 800175c:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800175e:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001760:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001762:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8001764:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001766:	02bf      	lsls	r7, r7, #10
 8001768:	d401      	bmi.n	800176e <HAL_GPIO_Init+0x136>
        temp &= ~(iocurrent);
 800176a:	4025      	ands	r5, r4
 800176c:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 800176e:	6056      	str	r6, [r2, #4]
    position++;
 8001770:	3301      	adds	r3, #1
 8001772:	e764      	b.n	800163e <HAL_GPIO_Init+0x6>
 8001774:	40021800 	.word	0x40021800
 8001778:	50000400 	.word	0x50000400
 800177c:	50000800 	.word	0x50000800
 8001780:	50000c00 	.word	0x50000c00
 8001784:	40021804 	.word	0x40021804
 8001788:	40021808 	.word	0x40021808

0800178c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800178c:	6900      	ldr	r0, [r0, #16]
 800178e:	4008      	ands	r0, r1
 8001790:	1e41      	subs	r1, r0, #1
 8001792:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001794:	b2c0      	uxtb	r0, r0
}
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001798:	2a00      	cmp	r2, #0
 800179a:	d001      	beq.n	80017a0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800179e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80017a2:	e7fc      	b.n	800179e <HAL_GPIO_WritePin+0x6>

080017a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017a4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a6:	0013      	movs	r3, r2
 80017a8:	400b      	ands	r3, r1
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	4391      	bics	r1, r2
 80017ae:	4319      	orrs	r1, r3
 80017b0:	6181      	str	r1, [r0, #24]
}
 80017b2:	4770      	bx	lr

080017b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017b6:	4c11      	ldr	r4, [pc, #68]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0x48>)
 80017b8:	4911      	ldr	r1, [pc, #68]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80017ba:	6823      	ldr	r3, [r4, #0]
{
 80017bc:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017be:	400b      	ands	r3, r1
 80017c0:	4303      	orrs	r3, r0
 80017c2:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c4:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80017c6:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10e      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	2306      	movs	r3, #6
 80017d6:	4358      	muls	r0, r3
 80017d8:	f7fe fcaa 	bl	8000130 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017dc:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80017de:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	6961      	ldr	r1, [r4, #20]
 80017e4:	0008      	movs	r0, r1
 80017e6:	4010      	ands	r0, r2
 80017e8:	4211      	tst	r1, r2
 80017ea:	d100      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80017ec:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80017f2:	3b01      	subs	r3, #1
 80017f4:	e7f5      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80017f6:	2003      	movs	r0, #3
 80017f8:	e7f8      	b.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x38>
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40007000 	.word	0x40007000
 8001800:	fffff9ff 	.word	0xfffff9ff
 8001804:	20000000 	.word	0x20000000
 8001808:	000f4240 	.word	0x000f4240

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	0004      	movs	r4, r0
 8001810:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001812:	2800      	cmp	r0, #0
 8001814:	d023      	beq.n	800185e <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	6803      	ldr	r3, [r0, #0]
 8001818:	07db      	lsls	r3, r3, #31
 800181a:	d410      	bmi.n	800183e <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	079b      	lsls	r3, r3, #30
 8001820:	d45e      	bmi.n	80018e0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	071b      	lsls	r3, r3, #28
 8001826:	d500      	bpl.n	800182a <HAL_RCC_OscConfig+0x1e>
 8001828:	e0c3      	b.n	80019b2 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	075b      	lsls	r3, r3, #29
 800182e:	d500      	bpl.n	8001832 <HAL_RCC_OscConfig+0x26>
 8001830:	e0f5      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001832:	69e2      	ldr	r2, [r4, #28]
 8001834:	2a00      	cmp	r2, #0
 8001836:	d000      	beq.n	800183a <HAL_RCC_OscConfig+0x2e>
 8001838:	e17c      	b.n	8001b34 <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2000      	movs	r0, #0
 800183c:	e029      	b.n	8001892 <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	2238      	movs	r2, #56	; 0x38
 8001840:	4db0      	ldr	r5, [pc, #704]	; (8001b04 <HAL_RCC_OscConfig+0x2f8>)
 8001842:	68ab      	ldr	r3, [r5, #8]
 8001844:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001846:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001848:	2b10      	cmp	r3, #16
 800184a:	d10a      	bne.n	8001862 <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800184e:	0793      	lsls	r3, r2, #30
 8001850:	d109      	bne.n	8001866 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	039b      	lsls	r3, r3, #14
 8001856:	d5e1      	bpl.n	800181c <HAL_RCC_OscConfig+0x10>
 8001858:	6863      	ldr	r3, [r4, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1de      	bne.n	800181c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
 8001860:	e017      	b.n	8001892 <HAL_RCC_OscConfig+0x86>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001862:	2b08      	cmp	r3, #8
 8001864:	d0f5      	beq.n	8001852 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	0252      	lsls	r2, r2, #9
 800186c:	4293      	cmp	r3, r2
 800186e:	d112      	bne.n	8001896 <HAL_RCC_OscConfig+0x8a>
 8001870:	682a      	ldr	r2, [r5, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001876:	f7ff faef 	bl	8000e58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800187c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	02bf      	lsls	r7, r7, #10
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	423b      	tst	r3, r7
 8001884:	d1ca      	bne.n	800181c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001886:	f7ff fae7 	bl	8000e58 <HAL_GetTick>
 800188a:	1b80      	subs	r0, r0, r6
 800188c:	2864      	cmp	r0, #100	; 0x64
 800188e:	d9f7      	bls.n	8001880 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001890:	2003      	movs	r0, #3
}
 8001892:	b005      	add	sp, #20
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001896:	21a0      	movs	r1, #160	; 0xa0
 8001898:	02c9      	lsls	r1, r1, #11
 800189a:	428b      	cmp	r3, r1
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa4>
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	6829      	ldr	r1, [r5, #0]
 80018a2:	02db      	lsls	r3, r3, #11
 80018a4:	430b      	orrs	r3, r1
 80018a6:	602b      	str	r3, [r5, #0]
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ae:	e7e2      	b.n	8001876 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	682a      	ldr	r2, [r5, #0]
 80018b2:	4995      	ldr	r1, [pc, #596]	; (8001b08 <HAL_RCC_OscConfig+0x2fc>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	602a      	str	r2, [r5, #0]
 80018b8:	682a      	ldr	r2, [r5, #0]
 80018ba:	4994      	ldr	r1, [pc, #592]	; (8001b0c <HAL_RCC_OscConfig+0x300>)
 80018bc:	400a      	ands	r2, r1
 80018be:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1d8      	bne.n	8001876 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80018c4:	f7ff fac8 	bl	8000e58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c8:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80018ca:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018cc:	02bf      	lsls	r7, r7, #10
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	423b      	tst	r3, r7
 80018d2:	d0a3      	beq.n	800181c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fac0 	bl	8000e58 <HAL_GetTick>
 80018d8:	1b80      	subs	r0, r0, r6
 80018da:	2864      	cmp	r0, #100	; 0x64
 80018dc:	d9f7      	bls.n	80018ce <HAL_RCC_OscConfig+0xc2>
 80018de:	e7d7      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	2338      	movs	r3, #56	; 0x38
 80018e2:	4d88      	ldr	r5, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	68aa      	ldr	r2, [r5, #8]
 80018e6:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e8:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d128      	bne.n	8001940 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ee:	2103      	movs	r1, #3
 80018f0:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018f2:	2a02      	cmp	r2, #2
 80018f4:	d126      	bne.n	8001944 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f6:	682a      	ldr	r2, [r5, #0]
 80018f8:	0552      	lsls	r2, r2, #21
 80018fa:	d502      	bpl.n	8001902 <HAL_RCC_OscConfig+0xf6>
 80018fc:	68e2      	ldr	r2, [r4, #12]
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d0ad      	beq.n	800185e <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	6869      	ldr	r1, [r5, #4]
 8001904:	6962      	ldr	r2, [r4, #20]
 8001906:	4882      	ldr	r0, [pc, #520]	; (8001b10 <HAL_RCC_OscConfig+0x304>)
 8001908:	0212      	lsls	r2, r2, #8
 800190a:	4001      	ands	r1, r0
 800190c:	430a      	orrs	r2, r1
 800190e:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x308>)
 8001918:	4013      	ands	r3, r2
 800191a:	6922      	ldr	r2, [r4, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001920:	682b      	ldr	r3, [r5, #0]
 8001922:	4a7d      	ldr	r2, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x30c>)
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	0f5b      	lsrs	r3, r3, #29
 8001928:	40da      	lsrs	r2, r3
 800192a:	0013      	movs	r3, r2
 800192c:	4a7b      	ldr	r2, [pc, #492]	; (8001b1c <HAL_RCC_OscConfig+0x310>)
 800192e:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001930:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x314>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f7ff f9e6 	bl	8000d04 <HAL_InitTick>
 8001938:	2800      	cmp	r0, #0
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x132>
 800193c:	e771      	b.n	8001822 <HAL_RCC_OscConfig+0x16>
 800193e:	e78e      	b.n	800185e <HAL_RCC_OscConfig+0x52>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0d8      	beq.n	80018f6 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001944:	68e3      	ldr	r3, [r4, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d020      	beq.n	800198c <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800194a:	682b      	ldr	r3, [r5, #0]
 800194c:	4a71      	ldr	r2, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001950:	4013      	ands	r3, r2
 8001952:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001956:	4313      	orrs	r3, r2
 8001958:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	682a      	ldr	r2, [r5, #0]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4313      	orrs	r3, r2
 8001962:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001964:	f7ff fa78 	bl	8000e58 <HAL_GetTick>
 8001968:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	423b      	tst	r3, r7
 800196e:	d007      	beq.n	8001980 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	686a      	ldr	r2, [r5, #4]
 8001972:	6963      	ldr	r3, [r4, #20]
 8001974:	4966      	ldr	r1, [pc, #408]	; (8001b10 <HAL_RCC_OscConfig+0x304>)
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	400a      	ands	r2, r1
 800197a:	4313      	orrs	r3, r2
 800197c:	606b      	str	r3, [r5, #4]
 800197e:	e750      	b.n	8001822 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff fa6a 	bl	8000e58 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2802      	cmp	r0, #2
 8001988:	d9ef      	bls.n	800196a <HAL_RCC_OscConfig+0x15e>
 800198a:	e781      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001990:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001992:	4013      	ands	r3, r2
 8001994:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001996:	f7ff fa5f 	bl	8000e58 <HAL_GetTick>
 800199a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	00ff      	lsls	r7, r7, #3
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	423b      	tst	r3, r7
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x19a>
 80019a4:	e73d      	b.n	8001822 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa57 	bl	8000e58 <HAL_GetTick>
 80019aa:	1b80      	subs	r0, r0, r6
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d9f6      	bls.n	800199e <HAL_RCC_OscConfig+0x192>
 80019b0:	e76e      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019b2:	2138      	movs	r1, #56	; 0x38
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x2f8>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	001d      	movs	r5, r3
 80019ba:	400a      	ands	r2, r1
 80019bc:	2a18      	cmp	r2, #24
 80019be:	d108      	bne.n	80019d2 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	079b      	lsls	r3, r3, #30
 80019c4:	d400      	bmi.n	80019c8 <HAL_RCC_OscConfig+0x1bc>
 80019c6:	e730      	b.n	800182a <HAL_RCC_OscConfig+0x1e>
 80019c8:	69a3      	ldr	r3, [r4, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d000      	beq.n	80019d0 <HAL_RCC_OscConfig+0x1c4>
 80019ce:	e72c      	b.n	800182a <HAL_RCC_OscConfig+0x1e>
 80019d0:	e745      	b.n	800185e <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d2:	69a2      	ldr	r2, [r4, #24]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d010      	beq.n	80019fc <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 80019da:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019dc:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80019de:	4313      	orrs	r3, r2
 80019e0:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa39 	bl	8000e58 <HAL_GetTick>
 80019e6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80019ea:	423b      	tst	r3, r7
 80019ec:	d000      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1e4>
 80019ee:	e71c      	b.n	800182a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fa32 	bl	8000e58 <HAL_GetTick>
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9f6      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1dc>
 80019fa:	e749      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 80019fc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fe:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001a00:	439a      	bics	r2, r3
 8001a02:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa28 	bl	8000e58 <HAL_GetTick>
 8001a08:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001a0c:	423b      	tst	r3, r7
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x206>
 8001a10:	e70b      	b.n	800182a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fa21 	bl	8000e58 <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	2802      	cmp	r0, #2
 8001a1a:	d9f6      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1fe>
 8001a1c:	e738      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a1e:	2138      	movs	r1, #56	; 0x38
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_RCC_OscConfig+0x2f8>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	001d      	movs	r5, r3
 8001a26:	400a      	ands	r2, r1
 8001a28:	2a20      	cmp	r2, #32
 8001a2a:	d108      	bne.n	8001a3e <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d400      	bmi.n	8001a34 <HAL_RCC_OscConfig+0x228>
 8001a32:	e6fe      	b.n	8001832 <HAL_RCC_OscConfig+0x26>
 8001a34:	68a3      	ldr	r3, [r4, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d000      	beq.n	8001a3c <HAL_RCC_OscConfig+0x230>
 8001a3a:	e6fa      	b.n	8001832 <HAL_RCC_OscConfig+0x26>
 8001a3c:	e70f      	b.n	800185e <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a3e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a40:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a48:	4213      	tst	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001a52:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a54:	4013      	ands	r3, r2
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	2780      	movs	r7, #128	; 0x80
 8001a60:	4e31      	ldr	r6, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x31c>)
 8001a62:	007f      	lsls	r7, r7, #1
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	423b      	tst	r3, r7
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d122      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2aa>
 8001a70:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001a72:	4313      	orrs	r3, r2
 8001a74:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001a76:	f7ff f9ef 	bl	8000e58 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001a7c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001a80:	423b      	tst	r3, r7
 8001a82:	d038      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8001a84:	9b00      	ldr	r3, [sp, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d000      	beq.n	8001a8c <HAL_RCC_OscConfig+0x280>
 8001a8a:	e6d2      	b.n	8001832 <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x320>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001a94:	e6cd      	b.n	8001832 <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a96:	6833      	ldr	r3, [r6, #0]
 8001a98:	433b      	orrs	r3, r7
 8001a9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9dc 	bl	8000e58 <HAL_GetTick>
 8001aa0:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa2:	6833      	ldr	r3, [r6, #0]
 8001aa4:	423b      	tst	r3, r7
 8001aa6:	d1e0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7ff f9d6 	bl	8000e58 <HAL_GetTick>
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	1ac0      	subs	r0, r0, r3
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x296>
 8001ab4:	e6ec      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2bc>
 8001abc:	3b01      	subs	r3, #1
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001ac2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e7d4      	b.n	8001a72 <HAL_RCC_OscConfig+0x266>
 8001ac8:	2101      	movs	r1, #1
 8001aca:	438a      	bics	r2, r1
 8001acc:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001ace:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001ad0:	3103      	adds	r1, #3
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1cd      	bne.n	8001a76 <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 8001ada:	f7ff f9bd 	bl	8000e58 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ade:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001ae0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001ae4:	423b      	tst	r3, r7
 8001ae6:	d0cd      	beq.n	8001a84 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f9b6 	bl	8000e58 <HAL_GetTick>
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x324>)
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	4298      	cmp	r0, r3
 8001af2:	d9f6      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2d6>
 8001af4:	e6cc      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f9af 	bl	8000e58 <HAL_GetTick>
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_OscConfig+0x324>)
 8001afc:	1b80      	subs	r0, r0, r6
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d9bd      	bls.n	8001a7e <HAL_RCC_OscConfig+0x272>
 8001b02:	e6c5      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	fffeffff 	.word	0xfffeffff
 8001b0c:	fffbffff 	.word	0xfffbffff
 8001b10:	ffff80ff 	.word	0xffff80ff
 8001b14:	ffffc7ff 	.word	0xffffc7ff
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	fffffeff 	.word	0xfffffeff
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	efffffff 	.word	0xefffffff
 8001b30:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b34:	2038      	movs	r0, #56	; 0x38
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x43c>)
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	001d      	movs	r5, r3
 8001b3c:	4001      	ands	r1, r0
 8001b3e:	2910      	cmp	r1, #16
 8001b40:	d054      	beq.n	8001bec <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4941      	ldr	r1, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x440>)
 8001b46:	400b      	ands	r3, r1
 8001b48:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4a:	2a02      	cmp	r2, #2
 8001b4c:	d137      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f983 	bl	8000e58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b52:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b54:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	04bf      	lsls	r7, r7, #18
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	423b      	tst	r3, r7
 8001b5c:	d129      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b60:	6a23      	ldr	r3, [r4, #32]
 8001b62:	68ea      	ldr	r2, [r5, #12]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	493a      	ldr	r1, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x444>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b68:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b72:	4313      	orrs	r3, r2
 8001b74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b76:	4313      	orrs	r3, r2
 8001b78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b7e:	0212      	lsls	r2, r2, #8
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	682a      	ldr	r2, [r5, #0]
 8001b88:	045b      	lsls	r3, r3, #17
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	68ea      	ldr	r2, [r5, #12]
 8001b92:	055b      	lsls	r3, r3, #21
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001b98:	f7ff f95e 	bl	8000e58 <HAL_GetTick>
 8001b9c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	4233      	tst	r3, r6
 8001ba2:	d000      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x39a>
 8001ba4:	e649      	b.n	800183a <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f957 	bl	8000e58 <HAL_GetTick>
 8001baa:	1b00      	subs	r0, r0, r4
 8001bac:	2802      	cmp	r0, #2
 8001bae:	d9f6      	bls.n	8001b9e <HAL_RCC_OscConfig+0x392>
 8001bb0:	e66e      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f951 	bl	8000e58 <HAL_GetTick>
 8001bb6:	1b80      	subs	r0, r0, r6
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9cd      	bls.n	8001b58 <HAL_RCC_OscConfig+0x34c>
 8001bbc:	e668      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc2:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bc8:	68eb      	ldr	r3, [r5, #12]
 8001bca:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_RCC_OscConfig+0x448>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f941 	bl	8000e58 <HAL_GetTick>
 8001bd6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	4233      	tst	r3, r6
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3d4>
 8001bde:	e62c      	b.n	800183a <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f93a 	bl	8000e58 <HAL_GetTick>
 8001be4:	1b00      	subs	r0, r0, r4
 8001be6:	2802      	cmp	r0, #2
 8001be8:	d9f6      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3cc>
 8001bea:	e651      	b.n	8001890 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3e6>
 8001bf0:	e635      	b.n	800185e <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001bf4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	6a21      	ldr	r1, [r4, #32]
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d000      	beq.n	8001c00 <HAL_RCC_OscConfig+0x3f4>
 8001bfe:	e62e      	b.n	800185e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c00:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c04:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	428a      	cmp	r2, r1
 8001c08:	d000      	beq.n	8001c0c <HAL_RCC_OscConfig+0x400>
 8001c0a:	e628      	b.n	800185e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0c:	21fe      	movs	r1, #254	; 0xfe
 8001c0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c10:	01c9      	lsls	r1, r1, #7
 8001c12:	4019      	ands	r1, r3
 8001c14:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c16:	4291      	cmp	r1, r2
 8001c18:	d000      	beq.n	8001c1c <HAL_RCC_OscConfig+0x410>
 8001c1a:	e620      	b.n	800185e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c1c:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c20:	0392      	lsls	r2, r2, #14
 8001c22:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d000      	beq.n	8001c2a <HAL_RCC_OscConfig+0x41e>
 8001c28:	e619      	b.n	800185e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c2a:	22e0      	movs	r2, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c2e:	0512      	lsls	r2, r2, #20
 8001c30:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d000      	beq.n	8001c38 <HAL_RCC_OscConfig+0x42c>
 8001c36:	e612      	b.n	800185e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c38:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c3a:	0f5b      	lsrs	r3, r3, #29
 8001c3c:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d100      	bne.n	8001c44 <HAL_RCC_OscConfig+0x438>
 8001c42:	e5fa      	b.n	800183a <HAL_RCC_OscConfig+0x2e>
 8001c44:	e60b      	b.n	800185e <HAL_RCC_OscConfig+0x52>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	feffffff 	.word	0xfeffffff
 8001c50:	11c1808c 	.word	0x11c1808c
 8001c54:	eefeffff 	.word	0xeefeffff

08001c58 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c58:	2338      	movs	r3, #56	; 0x38
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001c5c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	6891      	ldr	r1, [r2, #8]
 8001c60:	0014      	movs	r4, r2
 8001c62:	4219      	tst	r1, r3
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c66:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c6a:	049b      	lsls	r3, r3, #18
 8001c6c:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c6e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c72:	6891      	ldr	r1, [r2, #8]
 8001c74:	4019      	ands	r1, r3
 8001c76:	2908      	cmp	r1, #8
 8001c78:	d027      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	6891      	ldr	r1, [r2, #8]
 8001c7c:	4019      	ands	r1, r3
 8001c7e:	2910      	cmp	r1, #16
 8001c80:	d117      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c82:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c84:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c86:	43db      	mvns	r3, r3
 8001c88:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c8a:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c8c:	0649      	lsls	r1, r1, #25
 8001c8e:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c90:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c92:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c94:	4015      	ands	r5, r2
    switch (pllsource)
 8001c96:	079b      	lsls	r3, r3, #30
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c9a:	4810      	ldr	r0, [pc, #64]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c9c:	f7fe fa48 	bl	8000130 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ca0:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca2:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ca4:	0f49      	lsrs	r1, r1, #29
 8001ca6:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001ca8:	f7fe fa42 	bl	8000130 <__udivsi3>
  return sysclockfreq;
 8001cac:	e7e0      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cae:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001cb0:	e7f4      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cb2:	6891      	ldr	r1, [r2, #8]
 8001cb4:	4019      	ands	r1, r3
 8001cb6:	2920      	cmp	r1, #32
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cba:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001cbc:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b18      	cmp	r3, #24
 8001cc2:	d1d5      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001cc4:	20fa      	movs	r0, #250	; 0xfa
 8001cc6:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001cc8:	e7d2      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x84>)
 8001ccc:	e7d0      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001cce:	2080      	movs	r0, #128	; 0x80
 8001cd0:	0200      	lsls	r0, r0, #8
 8001cd2:	e7cd      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_ClockConfig>:
{
 8001ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ce2:	0005      	movs	r5, r0
 8001ce4:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cee:	2707      	movs	r7, #7
 8001cf0:	4c4a      	ldr	r4, [pc, #296]	; (8001e1c <HAL_RCC_ClockConfig+0x13c>)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	403b      	ands	r3, r7
 8001cf6:	428b      	cmp	r3, r1
 8001cf8:	d32a      	bcc.n	8001d50 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfa:	6829      	ldr	r1, [r5, #0]
 8001cfc:	078b      	lsls	r3, r1, #30
 8001cfe:	d43b      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d00:	07cb      	lsls	r3, r1, #31
 8001d02:	d448      	bmi.n	8001d96 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	2707      	movs	r7, #7
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	403b      	ands	r3, r7
 8001d0a:	42b3      	cmp	r3, r6
 8001d0c:	d90a      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	43bb      	bics	r3, r7
 8001d12:	4333      	orrs	r3, r6
 8001d14:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001d16:	f7ff f89f 	bl	8000e58 <HAL_GetTick>
 8001d1a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	403b      	ands	r3, r7
 8001d20:	42b3      	cmp	r3, r6
 8001d22:	d16b      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	4c3e      	ldr	r4, [pc, #248]	; (8001e20 <HAL_RCC_ClockConfig+0x140>)
 8001d28:	075b      	lsls	r3, r3, #29
 8001d2a:	d46f      	bmi.n	8001e0c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d2c:	f7ff ff94 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	4a3c      	ldr	r2, [pc, #240]	; (8001e24 <HAL_RCC_ClockConfig+0x144>)
 8001d34:	051b      	lsls	r3, r3, #20
 8001d36:	0f1b      	lsrs	r3, r3, #28
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	589b      	ldr	r3, [r3, r2]
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	4013      	ands	r3, r2
 8001d40:	40d8      	lsrs	r0, r3
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_ClockConfig+0x148>)
 8001d44:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <HAL_RCC_ClockConfig+0x14c>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	f7fe ffdb 	bl	8000d04 <HAL_InitTick>
 8001d4e:	e7cd      	b.n	8001cec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	43bb      	bics	r3, r7
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001d58:	f7ff f87e 	bl	8000e58 <HAL_GetTick>
 8001d5c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	403b      	ands	r3, r7
 8001d62:	42b3      	cmp	r3, r6
 8001d64:	d0c9      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7ff f877 	bl	8000e58 <HAL_GetTick>
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	1ac0      	subs	r0, r0, r3
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_ClockConfig+0x150>)
 8001d70:	4298      	cmp	r0, r3
 8001d72:	d9f4      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
 8001d76:	e7b9      	b.n	8001cec <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <HAL_RCC_ClockConfig+0x140>)
 8001d7a:	074b      	lsls	r3, r1, #29
 8001d7c:	d504      	bpl.n	8001d88 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d7e:	23e0      	movs	r3, #224	; 0xe0
 8001d80:	6890      	ldr	r0, [r2, #8]
 8001d82:	01db      	lsls	r3, r3, #7
 8001d84:	4303      	orrs	r3, r0
 8001d86:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	6893      	ldr	r3, [r2, #8]
 8001d8a:	482a      	ldr	r0, [pc, #168]	; (8001e34 <HAL_RCC_ClockConfig+0x154>)
 8001d8c:	4003      	ands	r3, r0
 8001d8e:	68a8      	ldr	r0, [r5, #8]
 8001d90:	4303      	orrs	r3, r0
 8001d92:	6093      	str	r3, [r2, #8]
 8001d94:	e7b4      	b.n	8001d00 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	686a      	ldr	r2, [r5, #4]
 8001d98:	4f21      	ldr	r7, [pc, #132]	; (8001e20 <HAL_RCC_ClockConfig+0x140>)
 8001d9a:	2a01      	cmp	r2, #1
 8001d9c:	d119      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	039b      	lsls	r3, r3, #14
 8001da2:	d5a2      	bpl.n	8001cea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da4:	2107      	movs	r1, #7
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	438b      	bics	r3, r1
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001dae:	f7ff f853 	bl	8000e58 <HAL_GetTick>
 8001db2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	2338      	movs	r3, #56	; 0x38
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	401a      	ands	r2, r3
 8001dba:	686b      	ldr	r3, [r5, #4]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d0a0      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc2:	f7ff f849 	bl	8000e58 <HAL_GetTick>
 8001dc6:	9b01      	ldr	r3, [sp, #4]
 8001dc8:	1ac0      	subs	r0, r0, r3
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_ClockConfig+0x150>)
 8001dcc:	4298      	cmp	r0, r3
 8001dce:	d9f1      	bls.n	8001db4 <HAL_RCC_ClockConfig+0xd4>
 8001dd0:	e7d0      	b.n	8001d74 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	2a02      	cmp	r2, #2
 8001dd4:	d103      	bne.n	8001dde <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	d4e3      	bmi.n	8001da4 <HAL_RCC_ClockConfig+0xc4>
 8001ddc:	e785      	b.n	8001cea <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d103      	bne.n	8001dea <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	d4dd      	bmi.n	8001da4 <HAL_RCC_ClockConfig+0xc4>
 8001de8:	e77f      	b.n	8001cea <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dea:	2302      	movs	r3, #2
 8001dec:	2a03      	cmp	r2, #3
 8001dee:	d103      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4219      	tst	r1, r3
 8001df4:	d1d6      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xc4>
 8001df6:	e778      	b.n	8001cea <HAL_RCC_ClockConfig+0xa>
 8001df8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001dfa:	e7fa      	b.n	8001df2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff f82c 	bl	8000e58 <HAL_GetTick>
 8001e00:	9b01      	ldr	r3, [sp, #4]
 8001e02:	1ac0      	subs	r0, r0, r3
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x150>)
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d988      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
 8001e0a:	e7b3      	b.n	8001d74 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	68a3      	ldr	r3, [r4, #8]
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x158>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	68ea      	ldr	r2, [r5, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60a3      	str	r3, [r4, #8]
 8001e18:	e788      	b.n	8001d2c <HAL_RCC_ClockConfig+0x4c>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08002fe4 	.word	0x08002fe4
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	00001388 	.word	0x00001388
 8001e34:	fffff0ff 	.word	0xfffff0ff
 8001e38:	ffff8fff 	.word	0xffff8fff

08001e3c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	045b      	lsls	r3, r3, #17
 8001e44:	0f5b      	lsrs	r3, r3, #29
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	589b      	ldr	r3, [r3, r2]
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e50:	6810      	ldr	r0, [r2, #0]
 8001e52:	40d8      	lsrs	r0, r3
}
 8001e54:	4770      	bx	lr
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08003024 	.word	0x08003024
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001e64:	2207      	movs	r2, #7
{
 8001e66:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e68:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001e6c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e6e:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e70:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e72:	4014      	ands	r4, r2
 8001e74:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e76:	689c      	ldr	r4, [r3, #8]
 8001e78:	402c      	ands	r4, r5
 8001e7a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001e7c:	24e0      	movs	r4, #224	; 0xe0
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	01e4      	lsls	r4, r4, #7
 8001e82:	4023      	ands	r3, r4
 8001e84:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e86:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_GetClockConfig+0x30>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
}
 8001e8e:	bd30      	pop	{r4, r5, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40022000 	.word	0x40022000

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e9c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e9e:	2000      	movs	r0, #0
{
 8001ea0:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea2:	039b      	lsls	r3, r3, #14
 8001ea4:	d53c      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x88>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	4c60      	ldr	r4, [pc, #384]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001eaa:	0552      	lsls	r2, r2, #21
 8001eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb0:	4213      	tst	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec6:	2780      	movs	r7, #128	; 0x80
 8001ec8:	4e59      	ldr	r6, [pc, #356]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001eca:	007f      	lsls	r7, r7, #1
 8001ecc:	6833      	ldr	r3, [r6, #0]
 8001ece:	433b      	orrs	r3, r7
 8001ed0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed2:	f7fe ffc1 	bl	8000e58 <HAL_GetTick>
 8001ed6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed8:	6833      	ldr	r3, [r6, #0]
 8001eda:	423b      	tst	r3, r7
 8001edc:	d012      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ede:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4e53      	ldr	r6, [pc, #332]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001ee8:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eea:	421a      	tst	r2, r3
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8001eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ef0:	4299      	cmp	r1, r3
 8001ef2:	d000      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8001ef4:	e07a      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x154>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efa:	401e      	ands	r6, r3
 8001efc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001efe:	431e      	orrs	r6, r3
 8001f00:	65e6      	str	r6, [r4, #92]	; 0x5c
 8001f02:	e006      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7fe ffa8 	bl	8000e58 <HAL_GetTick>
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	1ac0      	subs	r0, r0, r3
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9e3      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001f10:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f12:	9b00      	ldr	r3, [sp, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d103      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f1a:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	07da      	lsls	r2, r3, #31
 8001f24:	d506      	bpl.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f26:	2403      	movs	r4, #3
 8001f28:	4940      	ldr	r1, [pc, #256]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f2a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f2c:	43a2      	bics	r2, r4
 8001f2e:	686c      	ldr	r4, [r5, #4]
 8001f30:	4322      	orrs	r2, r4
 8001f32:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f34:	06da      	lsls	r2, r3, #27
 8001f36:	d506      	bpl.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f38:	493c      	ldr	r1, [pc, #240]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f3a:	4c40      	ldr	r4, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f3c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f3e:	4022      	ands	r2, r4
 8001f40:	68ac      	ldr	r4, [r5, #8]
 8001f42:	4322      	orrs	r2, r4
 8001f44:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f46:	059a      	lsls	r2, r3, #22
 8001f48:	d506      	bpl.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f4a:	4938      	ldr	r1, [pc, #224]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f4c:	4c3c      	ldr	r4, [pc, #240]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f4e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f50:	4022      	ands	r2, r4
 8001f52:	696c      	ldr	r4, [r5, #20]
 8001f54:	4322      	orrs	r2, r4
 8001f56:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f58:	055a      	lsls	r2, r3, #21
 8001f5a:	d506      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f5c:	4933      	ldr	r1, [pc, #204]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f5e:	4c39      	ldr	r4, [pc, #228]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f60:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f62:	4022      	ands	r2, r4
 8001f64:	69ac      	ldr	r4, [r5, #24]
 8001f66:	4322      	orrs	r2, r4
 8001f68:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6a:	069a      	lsls	r2, r3, #26
 8001f6c:	d506      	bpl.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f6e:	492f      	ldr	r1, [pc, #188]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f70:	4c35      	ldr	r4, [pc, #212]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f72:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f74:	4022      	ands	r2, r4
 8001f76:	68ec      	ldr	r4, [r5, #12]
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7c:	045a      	lsls	r2, r3, #17
 8001f7e:	d50f      	bpl.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f80:	492a      	ldr	r1, [pc, #168]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f82:	69ec      	ldr	r4, [r5, #28]
 8001f84:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	0892      	lsrs	r2, r2, #2
 8001f8a:	4322      	orrs	r2, r4
 8001f8c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	05d2      	lsls	r2, r2, #23
 8001f92:	4294      	cmp	r4, r2
 8001f94:	d104      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	68cc      	ldr	r4, [r1, #12]
 8001f9a:	0252      	lsls	r2, r2, #9
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fa0:	029a      	lsls	r2, r3, #10
 8001fa2:	d50f      	bpl.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fa4:	4921      	ldr	r1, [pc, #132]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001fa6:	4e29      	ldr	r6, [pc, #164]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001fa8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001faa:	6a2c      	ldr	r4, [r5, #32]
 8001fac:	4032      	ands	r2, r6
 8001fae:	4322      	orrs	r2, r4
 8001fb0:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	03d2      	lsls	r2, r2, #15
 8001fb6:	4294      	cmp	r4, r2
 8001fb8:	d104      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	68cc      	ldr	r4, [r1, #12]
 8001fbe:	0452      	lsls	r2, r2, #17
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	d50f      	bpl.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001fca:	4c21      	ldr	r4, [pc, #132]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fcc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fce:	6929      	ldr	r1, [r5, #16]
 8001fd0:	4023      	ands	r3, r4
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	4299      	cmp	r1, r3
 8001fdc:	d104      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	68d1      	ldr	r1, [r2, #12]
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001fe8:	b005      	add	sp, #20
 8001fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff2:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	4303      	orrs	r3, r0
 8001ff8:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ffc:	4815      	ldr	r0, [pc, #84]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ffe:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002000:	4003      	ands	r3, r0
 8002002:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8002004:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002006:	07d3      	lsls	r3, r2, #31
 8002008:	d400      	bmi.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800200a:	e774      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 800200c:	f7fe ff24 	bl	8000e58 <HAL_GetTick>
 8002010:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	2202      	movs	r2, #2
 8002014:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002016:	4213      	tst	r3, r2
 8002018:	d000      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x184>
 800201a:	e76c      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7fe ff1c 	bl	8000e58 <HAL_GetTick>
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002022:	1bc0      	subs	r0, r0, r7
 8002024:	4298      	cmp	r0, r3
 8002026:	d9f4      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002028:	e772      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	fffffcff 	.word	0xfffffcff
 8002038:	efffffff 	.word	0xefffffff
 800203c:	fffff3ff 	.word	0xfffff3ff
 8002040:	fff3ffff 	.word	0xfff3ffff
 8002044:	ffcfffff 	.word	0xffcfffff
 8002048:	ffffcfff 	.word	0xffffcfff
 800204c:	ffbfffff 	.word	0xffbfffff
 8002050:	ffff3fff 	.word	0xffff3fff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	00001388 	.word	0x00001388

0800205c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800205c:	0002      	movs	r2, r0
{
 800205e:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002062:	323d      	adds	r2, #61	; 0x3d
 8002064:	7811      	ldrb	r1, [r2, #0]
 8002066:	4281      	cmp	r1, r0
 8002068:	d11c      	bne.n	80020a4 <HAL_TIM_Base_Start_IT+0x48>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206a:	2102      	movs	r1, #2
 800206c:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4302      	orrs	r2, r0
 8002074:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_TIM_Base_Start_IT+0x54>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d006      	beq.n	800208a <HAL_TIM_Base_Start_IT+0x2e>
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	05d2      	lsls	r2, r2, #23
 8002080:	4293      	cmp	r3, r2
 8002082:	d002      	beq.n	800208a <HAL_TIM_Base_Start_IT+0x2e>
 8002084:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <HAL_TIM_Base_Start_IT+0x58>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10d      	bne.n	80020a6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_TIM_Base_Start_IT+0x5c>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	2a06      	cmp	r2, #6
 8002094:	d006      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x48>
 8002096:	3907      	subs	r1, #7
 8002098:	428a      	cmp	r2, r1
 800209a:	d003      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 800209c:	2201      	movs	r2, #1
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4310      	orrs	r0, r2
 80020aa:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7f9      	b.n	80020a4 <HAL_TIM_Base_Start_IT+0x48>
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400
 80020b8:	00010007 	.word	0x00010007

080020bc <HAL_TIM_OC_DelayElapsedCallback>:
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_IC_CaptureCallback>:
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80020c0:	4770      	bx	lr

080020c2 <HAL_TIM_TriggerCallback>:
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c4:	2202      	movs	r2, #2
 80020c6:	6803      	ldr	r3, [r0, #0]
{
 80020c8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ca:	6919      	ldr	r1, [r3, #16]
{
 80020cc:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ce:	4211      	tst	r1, r2
 80020d0:	d00e      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020d2:	68d9      	ldr	r1, [r3, #12]
 80020d4:	4211      	tst	r1, r2
 80020d6:	d00b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d8:	3a05      	subs	r2, #5
 80020da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020dc:	3204      	adds	r2, #4
 80020de:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	079b      	lsls	r3, r3, #30
 80020e4:	d100      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x24>
 80020e6:	e086      	b.n	80021f6 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e8:	f7ff ffe9 	bl	80020be <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ec:	2300      	movs	r3, #0
 80020ee:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	2204      	movs	r2, #4
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	4211      	tst	r1, r2
 80020f8:	d011      	beq.n	800211e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fa:	68d9      	ldr	r1, [r3, #12]
 80020fc:	4211      	tst	r1, r2
 80020fe:	d00e      	beq.n	800211e <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002100:	3a09      	subs	r2, #9
 8002102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002104:	3207      	adds	r2, #7
 8002106:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	23c0      	movs	r3, #192	; 0xc0
 800210c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002110:	421a      	tst	r2, r3
 8002112:	d100      	bne.n	8002116 <HAL_TIM_IRQHandler+0x52>
 8002114:	e075      	b.n	8002202 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	f7ff ffd2 	bl	80020be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	2300      	movs	r3, #0
 800211c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800211e:	2208      	movs	r2, #8
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	4211      	tst	r1, r2
 8002126:	d00e      	beq.n	8002146 <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	4211      	tst	r1, r2
 800212c:	d00b      	beq.n	8002146 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800212e:	3a11      	subs	r2, #17
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002132:	320d      	adds	r2, #13
 8002134:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002136:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002138:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800213a:	079b      	lsls	r3, r3, #30
 800213c:	d067      	beq.n	800220e <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	f7ff ffbe 	bl	80020be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	2300      	movs	r3, #0
 8002144:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002146:	2210      	movs	r2, #16
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	6919      	ldr	r1, [r3, #16]
 800214c:	4211      	tst	r1, r2
 800214e:	d010      	beq.n	8002172 <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002150:	68d9      	ldr	r1, [r3, #12]
 8002152:	4211      	tst	r1, r2
 8002154:	d00d      	beq.n	8002172 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002156:	3a21      	subs	r2, #33	; 0x21
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	3219      	adds	r2, #25
 800215c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002164:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002166:	421a      	tst	r2, r3
 8002168:	d057      	beq.n	800221a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	f7ff ffa8 	bl	80020be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	2300      	movs	r3, #0
 8002170:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002172:	2201      	movs	r2, #1
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	4211      	tst	r1, r2
 800217a:	d007      	beq.n	800218c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217c:	68d9      	ldr	r1, [r3, #12]
 800217e:	4211      	tst	r1, r2
 8002180:	d004      	beq.n	800218c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002182:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002184:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002186:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002188:	f7fe fce2 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	4211      	tst	r1, r2
 8002194:	d008      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	4211      	tst	r1, r2
 800219a:	d005      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800219c:	3a02      	subs	r2, #2
 800219e:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021a4:	f000 f8b5 	bl	8002312 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	05d2      	lsls	r2, r2, #23
 80021ae:	d507      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	0612      	lsls	r2, r2, #24
 80021b4:	d504      	bpl.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021b8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80021bc:	f000 f8aa 	bl	8002314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c0:	2240      	movs	r2, #64	; 0x40
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	4211      	tst	r1, r2
 80021c8:	d007      	beq.n	80021da <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	4211      	tst	r1, r2
 80021ce:	d004      	beq.n	80021da <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d0:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021d6:	f7ff ff74 	bl	80020c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021da:	2220      	movs	r2, #32
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	6919      	ldr	r1, [r3, #16]
 80021e0:	4211      	tst	r1, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	4211      	tst	r1, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ea:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ec:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80021f0:	f000 f88e 	bl	8002310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	f7ff ff61 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fa:	0020      	movs	r0, r4
 80021fc:	f7ff ff60 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002200:	e774      	b.n	80020ec <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	f7ff ff5b 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002206:	0020      	movs	r0, r4
 8002208:	f7ff ff5a 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
 800220c:	e785      	b.n	800211a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	f7ff ff55 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002212:	0020      	movs	r0, r4
 8002214:	f7ff ff54 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002218:	e793      	b.n	8002142 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	f7ff ff4f 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221e:	0020      	movs	r0, r4
 8002220:	f7ff ff4e 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002224:	e7a3      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	fffffeff 	.word	0xfffffeff

0800222c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <TIM_Base_SetConfig+0x78>)
{
 800222e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002230:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002232:	4290      	cmp	r0, r2
 8002234:	d006      	beq.n	8002244 <TIM_Base_SetConfig+0x18>
 8002236:	2480      	movs	r4, #128	; 0x80
 8002238:	05e4      	lsls	r4, r4, #23
 800223a:	42a0      	cmp	r0, r4
 800223c:	d002      	beq.n	8002244 <TIM_Base_SetConfig+0x18>
 800223e:	4c1a      	ldr	r4, [pc, #104]	; (80022a8 <TIM_Base_SetConfig+0x7c>)
 8002240:	42a0      	cmp	r0, r4
 8002242:	d10c      	bne.n	800225e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	2470      	movs	r4, #112	; 0x70
 8002246:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002248:	684c      	ldr	r4, [r1, #4]
 800224a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224c:	4290      	cmp	r0, r2
 800224e:	d00f      	beq.n	8002270 <TIM_Base_SetConfig+0x44>
 8002250:	2480      	movs	r4, #128	; 0x80
 8002252:	05e4      	lsls	r4, r4, #23
 8002254:	42a0      	cmp	r0, r4
 8002256:	d00b      	beq.n	8002270 <TIM_Base_SetConfig+0x44>
 8002258:	4c13      	ldr	r4, [pc, #76]	; (80022a8 <TIM_Base_SetConfig+0x7c>)
 800225a:	42a0      	cmp	r0, r4
 800225c:	d008      	beq.n	8002270 <TIM_Base_SetConfig+0x44>
 800225e:	4c13      	ldr	r4, [pc, #76]	; (80022ac <TIM_Base_SetConfig+0x80>)
 8002260:	42a0      	cmp	r0, r4
 8002262:	d005      	beq.n	8002270 <TIM_Base_SetConfig+0x44>
 8002264:	4c12      	ldr	r4, [pc, #72]	; (80022b0 <TIM_Base_SetConfig+0x84>)
 8002266:	42a0      	cmp	r0, r4
 8002268:	d002      	beq.n	8002270 <TIM_Base_SetConfig+0x44>
 800226a:	4c12      	ldr	r4, [pc, #72]	; (80022b4 <TIM_Base_SetConfig+0x88>)
 800226c:	42a0      	cmp	r0, r4
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002270:	4c11      	ldr	r4, [pc, #68]	; (80022b8 <TIM_Base_SetConfig+0x8c>)
 8002272:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002274:	68cc      	ldr	r4, [r1, #12]
 8002276:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	2480      	movs	r4, #128	; 0x80
 800227a:	43a3      	bics	r3, r4
 800227c:	694c      	ldr	r4, [r1, #20]
 800227e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002282:	688b      	ldr	r3, [r1, #8]
 8002284:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002286:	680b      	ldr	r3, [r1, #0]
 8002288:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228a:	4290      	cmp	r0, r2
 800228c:	d005      	beq.n	800229a <TIM_Base_SetConfig+0x6e>
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <TIM_Base_SetConfig+0x84>)
 8002290:	4298      	cmp	r0, r3
 8002292:	d002      	beq.n	800229a <TIM_Base_SetConfig+0x6e>
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <TIM_Base_SetConfig+0x88>)
 8002296:	4298      	cmp	r0, r3
 8002298:	d101      	bne.n	800229e <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800229a:	690b      	ldr	r3, [r1, #16]
 800229c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800229e:	2301      	movs	r3, #1
 80022a0:	6143      	str	r3, [r0, #20]
}
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40002000 	.word	0x40002000
 80022b0:	40014400 	.word	0x40014400
 80022b4:	40014800 	.word	0x40014800
 80022b8:	fffffcff 	.word	0xfffffcff

080022bc <HAL_TIM_Base_Init>:
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
  if (htim == NULL)
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d023      	beq.n	800230e <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	0025      	movs	r5, r4
 80022c8:	353d      	adds	r5, #61	; 0x3d
 80022ca:	782b      	ldrb	r3, [r5, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80022d2:	0023      	movs	r3, r4
 80022d4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022d6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80022d8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80022da:	f7fe fcc3 	bl	8000c64 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	1d21      	adds	r1, r4, #4
 80022e6:	f7ff ffa1 	bl	800222c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ea:	0022      	movs	r2, r4
 80022ec:	2301      	movs	r3, #1
  return HAL_OK;
 80022ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f0:	3248      	adds	r2, #72	; 0x48
 80022f2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f6:	3a0a      	subs	r2, #10
 80022f8:	7013      	strb	r3, [r2, #0]
 80022fa:	7053      	strb	r3, [r2, #1]
 80022fc:	7093      	strb	r3, [r2, #2]
 80022fe:	70d3      	strb	r3, [r2, #3]
 8002300:	7113      	strb	r3, [r2, #4]
 8002302:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	7193      	strb	r3, [r2, #6]
 8002306:	71d3      	strb	r3, [r2, #7]
 8002308:	7213      	strb	r3, [r2, #8]
 800230a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800230c:	702b      	strb	r3, [r5, #0]
}
 800230e:	bd70      	pop	{r4, r5, r6, pc}

08002310 <HAL_TIMEx_CommutCallback>:
 8002310:	4770      	bx	lr

08002312 <HAL_TIMEx_BreakCallback>:
 8002312:	4770      	bx	lr

08002314 <HAL_TIMEx_Break2Callback>:
 8002314:	4770      	bx	lr
	...

08002318 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002318:	6803      	ldr	r3, [r0, #0]
 800231a:	490b      	ldr	r1, [pc, #44]	; (8002348 <UART_EndRxTransfer+0x30>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <UART_EndRxTransfer+0x34>)
 8002326:	400a      	ands	r2, r1
 8002328:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800232a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800232c:	2a01      	cmp	r2, #1
 800232e:	d103      	bne.n	8002338 <UART_EndRxTransfer+0x20>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002330:	2110      	movs	r1, #16
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	438a      	bics	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	0003      	movs	r3, r0
 800233a:	2220      	movs	r2, #32
 800233c:	3388      	adds	r3, #136	; 0x88
 800233e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	2300      	movs	r3, #0
 8002342:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002344:	6703      	str	r3, [r0, #112]	; 0x70
}
 8002346:	4770      	bx	lr
 8002348:	fffffedf 	.word	0xfffffedf
 800234c:	effffffe 	.word	0xeffffffe

08002350 <HAL_UART_ErrorCallback>:
 8002350:	4770      	bx	lr

08002352 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002352:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	0002      	movs	r2, r0
{
 8002358:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800235a:	325e      	adds	r2, #94	; 0x5e
 800235c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800235e:	3a08      	subs	r2, #8
 8002360:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002362:	f7ff fff5 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002366:	bd10      	pop	{r4, pc}

08002368 <HAL_UARTEx_RxEventCallback>:
}
 8002368:	4770      	bx	lr
	...

0800236c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800236c:	6803      	ldr	r3, [r0, #0]
{
 800236e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002370:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002372:	4d9f      	ldr	r5, [pc, #636]	; (80025f0 <HAL_UART_IRQHandler+0x284>)
{
 8002374:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002376:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002378:	6898      	ldr	r0, [r3, #8]
  if (errorflags == 0U)
 800237a:	422a      	tst	r2, r5
 800237c:	d10f      	bne.n	800239e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800237e:	2520      	movs	r5, #32
 8002380:	422a      	tst	r2, r5
 8002382:	d100      	bne.n	8002386 <HAL_UART_IRQHandler+0x1a>
 8002384:	e090      	b.n	80024a8 <HAL_UART_IRQHandler+0x13c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002386:	2680      	movs	r6, #128	; 0x80
 8002388:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800238a:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800238c:	4006      	ands	r6, r0
 800238e:	4335      	orrs	r5, r6
 8002390:	d100      	bne.n	8002394 <HAL_UART_IRQHandler+0x28>
 8002392:	e089      	b.n	80024a8 <HAL_UART_IRQHandler+0x13c>
      if (huart->RxISR != NULL)
 8002394:	6f23      	ldr	r3, [r4, #112]	; 0x70
      huart->TxISR(huart);
 8002396:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002398:	2b00      	cmp	r3, #0
 800239a:	d17a      	bne.n	8002492 <HAL_UART_IRQHandler+0x126>
 800239c:	e07a      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800239e:	4d95      	ldr	r5, [pc, #596]	; (80025f4 <HAL_UART_IRQHandler+0x288>)
 80023a0:	4005      	ands	r5, r0
 80023a2:	46ac      	mov	ip, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80023a4:	4666      	mov	r6, ip
 80023a6:	4d94      	ldr	r5, [pc, #592]	; (80025f8 <HAL_UART_IRQHandler+0x28c>)
 80023a8:	400d      	ands	r5, r1
 80023aa:	4335      	orrs	r5, r6
 80023ac:	d100      	bne.n	80023b0 <HAL_UART_IRQHandler+0x44>
 80023ae:	e07b      	b.n	80024a8 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023b0:	2501      	movs	r5, #1
 80023b2:	422a      	tst	r2, r5
 80023b4:	d007      	beq.n	80023c6 <HAL_UART_IRQHandler+0x5a>
 80023b6:	05ce      	lsls	r6, r1, #23
 80023b8:	d505      	bpl.n	80023c6 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ba:	0026      	movs	r6, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023bc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023be:	368c      	adds	r6, #140	; 0x8c
 80023c0:	6837      	ldr	r7, [r6, #0]
 80023c2:	433d      	orrs	r5, r7
 80023c4:	6035      	str	r5, [r6, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023c6:	0025      	movs	r5, r4
 80023c8:	2602      	movs	r6, #2
 80023ca:	358c      	adds	r5, #140	; 0x8c
 80023cc:	9501      	str	r5, [sp, #4]
 80023ce:	4232      	tst	r2, r6
 80023d0:	d007      	beq.n	80023e2 <HAL_UART_IRQHandler+0x76>
 80023d2:	07c5      	lsls	r5, r0, #31
 80023d4:	d505      	bpl.n	80023e2 <HAL_UART_IRQHandler+0x76>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023d6:	9d01      	ldr	r5, [sp, #4]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023d8:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023da:	682f      	ldr	r7, [r5, #0]
 80023dc:	19b6      	adds	r6, r6, r6
 80023de:	433e      	orrs	r6, r7
 80023e0:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023e2:	2604      	movs	r6, #4
 80023e4:	4232      	tst	r2, r6
 80023e6:	d009      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
 80023e8:	07c5      	lsls	r5, r0, #31
 80023ea:	d507      	bpl.n	80023fc <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ec:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023ee:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f0:	378c      	adds	r7, #140	; 0x8c
 80023f2:	683e      	ldr	r6, [r7, #0]
 80023f4:	0035      	movs	r5, r6
 80023f6:	2602      	movs	r6, #2
 80023f8:	432e      	orrs	r6, r5
 80023fa:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023fc:	2608      	movs	r6, #8
 80023fe:	4232      	tst	r2, r6
 8002400:	d00a      	beq.n	8002418 <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002402:	2720      	movs	r7, #32
 8002404:	4665      	mov	r5, ip
 8002406:	400f      	ands	r7, r1
 8002408:	432f      	orrs	r7, r5
 800240a:	d005      	beq.n	8002418 <HAL_UART_IRQHandler+0xac>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800240c:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800240e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002410:	378c      	adds	r7, #140	; 0x8c
 8002412:	683d      	ldr	r5, [r7, #0]
 8002414:	432e      	orrs	r6, r5
 8002416:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002418:	2780      	movs	r7, #128	; 0x80
 800241a:	0026      	movs	r6, r4
 800241c:	013f      	lsls	r7, r7, #4
 800241e:	368c      	adds	r6, #140	; 0x8c
 8002420:	423a      	tst	r2, r7
 8002422:	d006      	beq.n	8002432 <HAL_UART_IRQHandler+0xc6>
 8002424:	014d      	lsls	r5, r1, #5
 8002426:	d504      	bpl.n	8002432 <HAL_UART_IRQHandler+0xc6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002428:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800242a:	2320      	movs	r3, #32
 800242c:	6837      	ldr	r7, [r6, #0]
 800242e:	433b      	orrs	r3, r7
 8002430:	6033      	str	r3, [r6, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002432:	6833      	ldr	r3, [r6, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02d      	beq.n	8002494 <HAL_UART_IRQHandler+0x128>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002438:	2320      	movs	r3, #32
 800243a:	421a      	tst	r2, r3
 800243c:	d00a      	beq.n	8002454 <HAL_UART_IRQHandler+0xe8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800243e:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0549      	lsls	r1, r1, #21
 8002444:	4008      	ands	r0, r1
 8002446:	4303      	orrs	r3, r0
 8002448:	d004      	beq.n	8002454 <HAL_UART_IRQHandler+0xe8>
        if (huart->RxISR != NULL)
 800244a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_IRQHandler+0xe8>
          huart->RxISR(huart);
 8002450:	0020      	movs	r0, r4
 8002452:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002454:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002456:	9b01      	ldr	r3, [sp, #4]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002458:	2740      	movs	r7, #64	; 0x40
      errorcode = huart->ErrorCode;
 800245a:	681b      	ldr	r3, [r3, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800245c:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800245e:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002460:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002462:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002464:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002466:	431e      	orrs	r6, r3
 8002468:	d019      	beq.n	800249e <HAL_UART_IRQHandler+0x132>
        UART_EndRxTransfer(huart);
 800246a:	f7ff ff55 	bl	8002318 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	423a      	tst	r2, r7
 8002474:	d00f      	beq.n	8002496 <HAL_UART_IRQHandler+0x12a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002476:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002478:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	43ba      	bics	r2, r7
 800247c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800247e:	2800      	cmp	r0, #0
 8002480:	d009      	beq.n	8002496 <HAL_UART_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_UART_IRQHandler+0x290>)
 8002484:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002486:	f7ff f847 	bl	8001518 <HAL_DMA_Abort_IT>
 800248a:	2800      	cmp	r0, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_IRQHandler+0x128>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800248e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002490:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002492:	4798      	blx	r3
}
 8002494:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002496:	0020      	movs	r0, r4
 8002498:	f7ff ff5a 	bl	8002350 <HAL_UART_ErrorCallback>
 800249c:	e7fa      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
        HAL_UART_ErrorCallback(huart);
 800249e:	f7ff ff57 	bl	8002350 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a2:	9b01      	ldr	r3, [sp, #4]
 80024a4:	601e      	str	r6, [r3, #0]
 80024a6:	e7f5      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80024aa:	2e01      	cmp	r6, #1
 80024ac:	d166      	bne.n	800257c <HAL_UART_IRQHandler+0x210>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80024ae:	2510      	movs	r5, #16
 80024b0:	422a      	tst	r2, r5
 80024b2:	d063      	beq.n	800257c <HAL_UART_IRQHandler+0x210>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80024b4:	4229      	tst	r1, r5
 80024b6:	d061      	beq.n	800257c <HAL_UART_IRQHandler+0x210>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024b8:	621d      	str	r5, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	0010      	movs	r0, r2
 80024c0:	4008      	ands	r0, r1
 80024c2:	420a      	tst	r2, r1
 80024c4:	d03a      	beq.n	800253c <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80024c8:	6807      	ldr	r7, [r0, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d0e0      	beq.n	8002494 <HAL_UART_IRQHandler+0x128>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80024d2:	311c      	adds	r1, #28
 80024d4:	468c      	mov	ip, r1
 80024d6:	44a4      	add	ip, r4
 80024d8:	4661      	mov	r1, ip
 80024da:	8809      	ldrh	r1, [r1, #0]
 80024dc:	4291      	cmp	r1, r2
 80024de:	d9d9      	bls.n	8002494 <HAL_UART_IRQHandler+0x128>
        huart->RxXferCount = nb_remaining_rx_data;
 80024e0:	215e      	movs	r1, #94	; 0x5e
 80024e2:	468c      	mov	ip, r1
 80024e4:	44a4      	add	ip, r4
 80024e6:	4661      	mov	r1, ip
 80024e8:	800a      	strh	r2, [r1, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80024ea:	683f      	ldr	r7, [r7, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	0039      	movs	r1, r7
 80024f0:	4011      	ands	r1, r2
 80024f2:	9101      	str	r1, [sp, #4]
 80024f4:	4217      	tst	r7, r2
 80024f6:	d115      	bne.n	8002524 <HAL_UART_IRQHandler+0x1b8>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024f8:	681f      	ldr	r7, [r3, #0]
 80024fa:	4941      	ldr	r1, [pc, #260]	; (8002600 <HAL_UART_IRQHandler+0x294>)
 80024fc:	400f      	ands	r7, r1
 80024fe:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002500:	689f      	ldr	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002502:	3142      	adds	r1, #66	; 0x42
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002504:	43b7      	bics	r7, r6
 8002506:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002508:	689e      	ldr	r6, [r3, #8]
 800250a:	31ff      	adds	r1, #255	; 0xff
 800250c:	438e      	bics	r6, r1
          huart->RxState = HAL_UART_STATE_READY;
 800250e:	0021      	movs	r1, r4
 8002510:	3188      	adds	r1, #136	; 0x88
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002512:	609e      	str	r6, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8002514:	600a      	str	r2, [r1, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002516:	9a01      	ldr	r2, [sp, #4]
 8002518:	66e2      	str	r2, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	43aa      	bics	r2, r5
 800251e:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002520:	f7fe ffbc 	bl	800149c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002524:	0023      	movs	r3, r4
 8002526:	0022      	movs	r2, r4
 8002528:	335e      	adds	r3, #94	; 0x5e
 800252a:	325c      	adds	r2, #92	; 0x5c
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	8811      	ldrh	r1, [r2, #0]
 8002530:	1ac9      	subs	r1, r1, r3
 8002532:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002534:	0020      	movs	r0, r4
 8002536:	f7ff ff17 	bl	8002368 <HAL_UARTEx_RxEventCallback>
 800253a:	e7ab      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800253c:	0026      	movs	r6, r4
 800253e:	365e      	adds	r6, #94	; 0x5e
 8002540:	8832      	ldrh	r2, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8002542:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002544:	b292      	uxth	r2, r2
      if (  (huart->RxXferCount > 0U)
 8002546:	2900      	cmp	r1, #0
 8002548:	d0a4      	beq.n	8002494 <HAL_UART_IRQHandler+0x128>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800254a:	0021      	movs	r1, r4
 800254c:	315c      	adds	r1, #92	; 0x5c
 800254e:	8809      	ldrh	r1, [r1, #0]
 8002550:	1a89      	subs	r1, r1, r2
 8002552:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002554:	2900      	cmp	r1, #0
 8002556:	d09d      	beq.n	8002494 <HAL_UART_IRQHandler+0x128>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4e2a      	ldr	r6, [pc, #168]	; (8002604 <HAL_UART_IRQHandler+0x298>)
 800255c:	4032      	ands	r2, r6
 800255e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4e29      	ldr	r6, [pc, #164]	; (8002608 <HAL_UART_IRQHandler+0x29c>)
 8002564:	4032      	ands	r2, r6
 8002566:	609a      	str	r2, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8002568:	0022      	movs	r2, r4
 800256a:	2620      	movs	r6, #32
 800256c:	3288      	adds	r2, #136	; 0x88
 800256e:	6016      	str	r6, [r2, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002570:	66e0      	str	r0, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002572:	681a      	ldr	r2, [r3, #0]
        huart->RxISR = NULL;
 8002574:	6720      	str	r0, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002576:	43aa      	bics	r2, r5
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e7db      	b.n	8002534 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800257c:	2580      	movs	r5, #128	; 0x80
 800257e:	036d      	lsls	r5, r5, #13
 8002580:	422a      	tst	r2, r5
 8002582:	d006      	beq.n	8002592 <HAL_UART_IRQHandler+0x226>
 8002584:	0246      	lsls	r6, r0, #9
 8002586:	d504      	bpl.n	8002592 <HAL_UART_IRQHandler+0x226>
    HAL_UARTEx_WakeupCallback(huart);
 8002588:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800258a:	621d      	str	r5, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800258c:	f000 fa9c 	bl	8002ac8 <HAL_UARTEx_WakeupCallback>
    return;
 8002590:	e780      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002592:	2580      	movs	r5, #128	; 0x80
 8002594:	422a      	tst	r2, r5
 8002596:	d007      	beq.n	80025a8 <HAL_UART_IRQHandler+0x23c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002598:	2680      	movs	r6, #128	; 0x80
 800259a:	0436      	lsls	r6, r6, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800259c:	400d      	ands	r5, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800259e:	4030      	ands	r0, r6
 80025a0:	4328      	orrs	r0, r5
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_IRQHandler+0x23c>
    if (huart->TxISR != NULL)
 80025a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80025a6:	e6f6      	b.n	8002396 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025a8:	2040      	movs	r0, #64	; 0x40
 80025aa:	4202      	tst	r2, r0
 80025ac:	d00e      	beq.n	80025cc <HAL_UART_IRQHandler+0x260>
 80025ae:	4201      	tst	r1, r0
 80025b0:	d00c      	beq.n	80025cc <HAL_UART_IRQHandler+0x260>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4382      	bics	r2, r0
 80025b6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	0023      	movs	r3, r4
 80025ba:	2220      	movs	r2, #32
 80025bc:	3308      	adds	r3, #8
 80025be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80025c0:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025c2:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80025c4:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 80025c6:	f000 faeb 	bl	8002ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025ca:	e763      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80025cc:	0213      	lsls	r3, r2, #8
 80025ce:	d505      	bpl.n	80025dc <HAL_UART_IRQHandler+0x270>
 80025d0:	004b      	lsls	r3, r1, #1
 80025d2:	d503      	bpl.n	80025dc <HAL_UART_IRQHandler+0x270>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80025d4:	0020      	movs	r0, r4
 80025d6:	f000 fa79 	bl	8002acc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80025da:	e75b      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80025dc:	01d3      	lsls	r3, r2, #7
 80025de:	d400      	bmi.n	80025e2 <HAL_UART_IRQHandler+0x276>
 80025e0:	e758      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
 80025e2:	2900      	cmp	r1, #0
 80025e4:	db00      	blt.n	80025e8 <HAL_UART_IRQHandler+0x27c>
 80025e6:	e755      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80025e8:	0020      	movs	r0, r4
 80025ea:	f000 fa6e 	bl	8002aca <HAL_UARTEx_RxFifoFullCallback>
    return;
 80025ee:	e751      	b.n	8002494 <HAL_UART_IRQHandler+0x128>
 80025f0:	0000080f 	.word	0x0000080f
 80025f4:	10000001 	.word	0x10000001
 80025f8:	04000120 	.word	0x04000120
 80025fc:	08002353 	.word	0x08002353
 8002600:	fffffeff 	.word	0xfffffeff
 8002604:	fffffedf 	.word	0xfffffedf
 8002608:	effffffe 	.word	0xeffffffe

0800260c <UART_SetConfig>:
{
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002610:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002612:	69c3      	ldr	r3, [r0, #28]
 8002614:	6881      	ldr	r1, [r0, #8]
 8002616:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002618:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261a:	4301      	orrs	r1, r0
 800261c:	6960      	ldr	r0, [r4, #20]
 800261e:	4301      	orrs	r1, r0
 8002620:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002622:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002624:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002626:	4d70      	ldr	r5, [pc, #448]	; (80027e8 <UART_SetConfig+0x1dc>)
 8002628:	4028      	ands	r0, r5
 800262a:	4301      	orrs	r1, r0
 800262c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262e:	6851      	ldr	r1, [r2, #4]
 8002630:	486e      	ldr	r0, [pc, #440]	; (80027ec <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002632:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	4001      	ands	r1, r0
 8002636:	68e0      	ldr	r0, [r4, #12]
 8002638:	4301      	orrs	r1, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800263a:	486d      	ldr	r0, [pc, #436]	; (80027f0 <UART_SetConfig+0x1e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263c:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800263e:	4282      	cmp	r2, r0
 8002640:	d001      	beq.n	8002646 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002642:	6a21      	ldr	r1, [r4, #32]
 8002644:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002646:	6891      	ldr	r1, [r2, #8]
 8002648:	4e6a      	ldr	r6, [pc, #424]	; (80027f4 <UART_SetConfig+0x1e8>)
 800264a:	4031      	ands	r1, r6
 800264c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800264e:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002650:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002652:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002654:	43a9      	bics	r1, r5
 8002656:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002658:	4329      	orrs	r1, r5
 800265a:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265c:	4966      	ldr	r1, [pc, #408]	; (80027f8 <UART_SetConfig+0x1ec>)
 800265e:	428a      	cmp	r2, r1
 8002660:	d116      	bne.n	8002690 <UART_SetConfig+0x84>
 8002662:	2103      	movs	r1, #3
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <UART_SetConfig+0x1f0>)
 8002666:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002668:	400a      	ands	r2, r1
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	3a01      	subs	r2, #1
 800266e:	0209      	lsls	r1, r1, #8
 8002670:	2a02      	cmp	r2, #2
 8002672:	d900      	bls.n	8002676 <UART_SetConfig+0x6a>
 8002674:	e08a      	b.n	800278c <UART_SetConfig+0x180>
 8002676:	4862      	ldr	r0, [pc, #392]	; (8002800 <UART_SetConfig+0x1f4>)
 8002678:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	428b      	cmp	r3, r1
 800267c:	d060      	beq.n	8002740 <UART_SetConfig+0x134>
    switch (clocksource)
 800267e:	2808      	cmp	r0, #8
 8002680:	d81c      	bhi.n	80026bc <UART_SetConfig+0xb0>
 8002682:	f7fd fd4b 	bl	800011c <__gnu_thumb1_case_uqi>
 8002686:	1bab      	.short	0x1bab
 8002688:	1b7e1b81 	.word	0x1b7e1b81
 800268c:	1b1b      	.short	0x1b1b
 800268e:	6b          	.byte	0x6b
 800268f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002690:	495c      	ldr	r1, [pc, #368]	; (8002804 <UART_SetConfig+0x1f8>)
 8002692:	428a      	cmp	r2, r1
 8002694:	d100      	bne.n	8002698 <UART_SetConfig+0x8c>
 8002696:	e09d      	b.n	80027d4 <UART_SetConfig+0x1c8>
 8002698:	4282      	cmp	r2, r0
 800269a:	d10f      	bne.n	80026bc <UART_SetConfig+0xb0>
 800269c:	22c0      	movs	r2, #192	; 0xc0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <UART_SetConfig+0x1f0>)
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	0109      	lsls	r1, r1, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d01b      	beq.n	80026e6 <UART_SetConfig+0xda>
 80026ae:	d807      	bhi.n	80026c0 <UART_SetConfig+0xb4>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <UART_SetConfig+0xbe>
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	00d2      	lsls	r2, r2, #3
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d011      	beq.n	80026e0 <UART_SetConfig+0xd4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026bc:	2001      	movs	r0, #1
 80026be:	e009      	b.n	80026d4 <UART_SetConfig+0xc8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d1fb      	bne.n	80026bc <UART_SetConfig+0xb0>
 80026c4:	2680      	movs	r6, #128	; 0x80
 80026c6:	0236      	lsls	r6, r6, #8
 80026c8:	e00e      	b.n	80026e8 <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fbb7 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80026ce:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 80026d0:	d10a      	bne.n	80026e8 <UART_SetConfig+0xdc>
 80026d2:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80026d4:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <UART_SetConfig+0x1fc>)
 80026d6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80026dc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 80026e0:	f7ff faba 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 80026e4:	e7f3      	b.n	80026ce <UART_SetConfig+0xc2>
        pclk = (uint32_t) HSI_VALUE;
 80026e6:	4e49      	ldr	r6, [pc, #292]	; (800280c <UART_SetConfig+0x200>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ea:	4a49      	ldr	r2, [pc, #292]	; (8002810 <UART_SetConfig+0x204>)
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	5a9f      	ldrh	r7, [r3, r2]
 80026f0:	0030      	movs	r0, r6
 80026f2:	0039      	movs	r1, r7
 80026f4:	f7fd fd1c 	bl	8000130 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026f8:	2303      	movs	r3, #3
 80026fa:	6865      	ldr	r5, [r4, #4]
 80026fc:	436b      	muls	r3, r5
 80026fe:	4283      	cmp	r3, r0
 8002700:	d8dc      	bhi.n	80026bc <UART_SetConfig+0xb0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002702:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002704:	4283      	cmp	r3, r0
 8002706:	d3d9      	bcc.n	80026bc <UART_SetConfig+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002708:	2300      	movs	r3, #0
 800270a:	003a      	movs	r2, r7
 800270c:	0030      	movs	r0, r6
 800270e:	0019      	movs	r1, r3
 8002710:	f7fd fe84 	bl	800041c <__aeabi_uldivmod>
 8002714:	2700      	movs	r7, #0
 8002716:	0e06      	lsrs	r6, r0, #24
 8002718:	020b      	lsls	r3, r1, #8
 800271a:	4333      	orrs	r3, r6
 800271c:	0202      	lsls	r2, r0, #8
 800271e:	086e      	lsrs	r6, r5, #1
 8002720:	1992      	adds	r2, r2, r6
 8002722:	417b      	adcs	r3, r7
 8002724:	0010      	movs	r0, r2
 8002726:	0019      	movs	r1, r3
 8002728:	002a      	movs	r2, r5
 800272a:	003b      	movs	r3, r7
 800272c:	f7fd fe76 	bl	800041c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002730:	4b38      	ldr	r3, [pc, #224]	; (8002814 <UART_SetConfig+0x208>)
 8002732:	18c2      	adds	r2, r0, r3
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <UART_SetConfig+0x20c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002736:	429a      	cmp	r2, r3
 8002738:	d8c0      	bhi.n	80026bc <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	60d8      	str	r0, [r3, #12]
 800273e:	e7c8      	b.n	80026d2 <UART_SetConfig+0xc6>
    switch (clocksource)
 8002740:	2808      	cmp	r0, #8
 8002742:	d8bb      	bhi.n	80026bc <UART_SetConfig+0xb0>
 8002744:	f7fd fce0 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002748:	ba08ba24 	.word	0xba08ba24
 800274c:	bababa05 	.word	0xbababa05
 8002750:	28          	.byte	0x28
 8002751:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff fa81 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8002756:	e01d      	b.n	8002794 <UART_SetConfig+0x188>
        pclk = (uint32_t) HSI_VALUE;
 8002758:	4b2c      	ldr	r3, [pc, #176]	; (800280c <UART_SetConfig+0x200>)
 800275a:	e01d      	b.n	8002798 <UART_SetConfig+0x18c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275c:	2080      	movs	r0, #128	; 0x80
 800275e:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002762:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <UART_SetConfig+0x204>)
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	5a99      	ldrh	r1, [r3, r2]
 8002768:	f7fd fce2 	bl	8000130 <__udivsi3>
 800276c:	6865      	ldr	r5, [r4, #4]
 800276e:	086b      	lsrs	r3, r5, #1
 8002770:	18c0      	adds	r0, r0, r3
 8002772:	0029      	movs	r1, r5
 8002774:	f7fd fcdc 	bl	8000130 <__udivsi3>
 8002778:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800277a:	0002      	movs	r2, r0
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <UART_SetConfig+0x210>)
 800277e:	3a10      	subs	r2, #16
 8002780:	e7d9      	b.n	8002736 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002782:	f7ff fa69 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
        break;
 8002786:	e02b      	b.n	80027e0 <UART_SetConfig+0x1d4>
        pclk = (uint32_t) HSI_VALUE;
 8002788:	4820      	ldr	r0, [pc, #128]	; (800280c <UART_SetConfig+0x200>)
 800278a:	e7e9      	b.n	8002760 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278c:	428b      	cmp	r3, r1
 800278e:	d125      	bne.n	80027dc <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002790:	f7ff fb54 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002794:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002796:	d09c      	beq.n	80026d2 <UART_SetConfig+0xc6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800279a:	491d      	ldr	r1, [pc, #116]	; (8002810 <UART_SetConfig+0x204>)
 800279c:	0052      	lsls	r2, r2, #1
 800279e:	5a51      	ldrh	r1, [r2, r1]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7fd fcc5 	bl	8000130 <__udivsi3>
 80027a6:	6865      	ldr	r5, [r4, #4]
 80027a8:	0040      	lsls	r0, r0, #1
 80027aa:	086b      	lsrs	r3, r5, #1
 80027ac:	0029      	movs	r1, r5
 80027ae:	18c0      	adds	r0, r0, r3
 80027b0:	f7fd fcbe 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b4:	4919      	ldr	r1, [pc, #100]	; (800281c <UART_SetConfig+0x210>)
 80027b6:	b282      	uxth	r2, r0
 80027b8:	3a10      	subs	r2, #16
 80027ba:	0403      	lsls	r3, r0, #16
 80027bc:	428a      	cmp	r2, r1
 80027be:	d900      	bls.n	80027c2 <UART_SetConfig+0x1b6>
 80027c0:	e77c      	b.n	80026bc <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027c2:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c4:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027c6:	4390      	bics	r0, r2
 80027c8:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80027ca:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027cc:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80027ce:	4318      	orrs	r0, r3
 80027d0:	60d0      	str	r0, [r2, #12]
 80027d2:	e77e      	b.n	80026d2 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	4293      	cmp	r3, r2
 80027da:	d0d9      	beq.n	8002790 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7ff fb2e 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d100      	bne.n	80027e6 <UART_SetConfig+0x1da>
 80027e4:	e775      	b.n	80026d2 <UART_SetConfig+0xc6>
 80027e6:	e7bb      	b.n	8002760 <UART_SetConfig+0x154>
 80027e8:	cfff69f3 	.word	0xcfff69f3
 80027ec:	ffffcfff 	.word	0xffffcfff
 80027f0:	40008000 	.word	0x40008000
 80027f4:	11fff4ff 	.word	0x11fff4ff
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40021000 	.word	0x40021000
 8002800:	08003044 	.word	0x08003044
 8002804:	40004400 	.word	0x40004400
 8002808:	00010001 	.word	0x00010001
 800280c:	00f42400 	.word	0x00f42400
 8002810:	08003048 	.word	0x08003048
 8002814:	fffffd00 	.word	0xfffffd00
 8002818:	000ffcff 	.word	0x000ffcff
 800281c:	0000ffef 	.word	0x0000ffef

08002820 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002820:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002822:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002824:	07da      	lsls	r2, r3, #31
 8002826:	d506      	bpl.n	8002836 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002828:	6801      	ldr	r1, [r0, #0]
 800282a:	4c28      	ldr	r4, [pc, #160]	; (80028cc <UART_AdvFeatureConfig+0xac>)
 800282c:	684a      	ldr	r2, [r1, #4]
 800282e:	4022      	ands	r2, r4
 8002830:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002832:	4322      	orrs	r2, r4
 8002834:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002836:	079a      	lsls	r2, r3, #30
 8002838:	d506      	bpl.n	8002848 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800283a:	6801      	ldr	r1, [r0, #0]
 800283c:	4c24      	ldr	r4, [pc, #144]	; (80028d0 <UART_AdvFeatureConfig+0xb0>)
 800283e:	684a      	ldr	r2, [r1, #4]
 8002840:	4022      	ands	r2, r4
 8002842:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002844:	4322      	orrs	r2, r4
 8002846:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002848:	075a      	lsls	r2, r3, #29
 800284a:	d506      	bpl.n	800285a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800284c:	6801      	ldr	r1, [r0, #0]
 800284e:	4c21      	ldr	r4, [pc, #132]	; (80028d4 <UART_AdvFeatureConfig+0xb4>)
 8002850:	684a      	ldr	r2, [r1, #4]
 8002852:	4022      	ands	r2, r4
 8002854:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002856:	4322      	orrs	r2, r4
 8002858:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800285a:	071a      	lsls	r2, r3, #28
 800285c:	d506      	bpl.n	800286c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800285e:	6801      	ldr	r1, [r0, #0]
 8002860:	4c1d      	ldr	r4, [pc, #116]	; (80028d8 <UART_AdvFeatureConfig+0xb8>)
 8002862:	684a      	ldr	r2, [r1, #4]
 8002864:	4022      	ands	r2, r4
 8002866:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002868:	4322      	orrs	r2, r4
 800286a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800286c:	06da      	lsls	r2, r3, #27
 800286e:	d506      	bpl.n	800287e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002870:	6801      	ldr	r1, [r0, #0]
 8002872:	4c1a      	ldr	r4, [pc, #104]	; (80028dc <UART_AdvFeatureConfig+0xbc>)
 8002874:	688a      	ldr	r2, [r1, #8]
 8002876:	4022      	ands	r2, r4
 8002878:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800287a:	4322      	orrs	r2, r4
 800287c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800287e:	069a      	lsls	r2, r3, #26
 8002880:	d506      	bpl.n	8002890 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002882:	6801      	ldr	r1, [r0, #0]
 8002884:	4c16      	ldr	r4, [pc, #88]	; (80028e0 <UART_AdvFeatureConfig+0xc0>)
 8002886:	688a      	ldr	r2, [r1, #8]
 8002888:	4022      	ands	r2, r4
 800288a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800288c:	4322      	orrs	r2, r4
 800288e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002890:	065a      	lsls	r2, r3, #25
 8002892:	d510      	bpl.n	80028b6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002894:	6801      	ldr	r1, [r0, #0]
 8002896:	4d13      	ldr	r5, [pc, #76]	; (80028e4 <UART_AdvFeatureConfig+0xc4>)
 8002898:	684a      	ldr	r2, [r1, #4]
 800289a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800289c:	402a      	ands	r2, r5
 800289e:	4322      	orrs	r2, r4
 80028a0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0352      	lsls	r2, r2, #13
 80028a6:	4294      	cmp	r4, r2
 80028a8:	d105      	bne.n	80028b6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028aa:	684a      	ldr	r2, [r1, #4]
 80028ac:	4c0e      	ldr	r4, [pc, #56]	; (80028e8 <UART_AdvFeatureConfig+0xc8>)
 80028ae:	4022      	ands	r2, r4
 80028b0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80028b2:	4322      	orrs	r2, r4
 80028b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	d506      	bpl.n	80028c8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028ba:	6802      	ldr	r2, [r0, #0]
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <UART_AdvFeatureConfig+0xcc>)
 80028be:	6853      	ldr	r3, [r2, #4]
 80028c0:	400b      	ands	r3, r1
 80028c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6053      	str	r3, [r2, #4]
}
 80028c8:	bd30      	pop	{r4, r5, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	fffdffff 	.word	0xfffdffff
 80028d0:	fffeffff 	.word	0xfffeffff
 80028d4:	fffbffff 	.word	0xfffbffff
 80028d8:	ffff7fff 	.word	0xffff7fff
 80028dc:	ffffefff 	.word	0xffffefff
 80028e0:	ffffdfff 	.word	0xffffdfff
 80028e4:	ffefffff 	.word	0xffefffff
 80028e8:	ff9fffff 	.word	0xff9fffff
 80028ec:	fff7ffff 	.word	0xfff7ffff

080028f0 <UART_WaitOnFlagUntilTimeout>:
{
 80028f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028f2:	2780      	movs	r7, #128	; 0x80
{
 80028f4:	0004      	movs	r4, r0
 80028f6:	000d      	movs	r5, r1
 80028f8:	0016      	movs	r6, r2
 80028fa:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028fc:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	69d3      	ldr	r3, [r2, #28]
 8002902:	402b      	ands	r3, r5
 8002904:	1b5b      	subs	r3, r3, r5
 8002906:	4259      	negs	r1, r3
 8002908:	414b      	adcs	r3, r1
 800290a:	42b3      	cmp	r3, r6
 800290c:	d001      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800290e:	2000      	movs	r0, #0
 8002910:	e01f      	b.n	8002952 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8002912:	9b08      	ldr	r3, [sp, #32]
 8002914:	3301      	adds	r3, #1
 8002916:	d0f3      	beq.n	8002900 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7fe fa9e 	bl	8000e58 <HAL_GetTick>
 800291c:	9b01      	ldr	r3, [sp, #4]
 800291e:	9a08      	ldr	r2, [sp, #32]
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	4290      	cmp	r0, r2
 8002926:	d801      	bhi.n	800292c <UART_WaitOnFlagUntilTimeout+0x3c>
 8002928:	2a00      	cmp	r2, #0
 800292a:	d113      	bne.n	8002954 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4916      	ldr	r1, [pc, #88]	; (8002988 <UART_WaitOnFlagUntilTimeout+0x98>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	31a3      	adds	r1, #163	; 0xa3
 8002938:	31ff      	adds	r1, #255	; 0xff
 800293a:	438a      	bics	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800293e:	0022      	movs	r2, r4
 8002940:	2320      	movs	r3, #32
 8002942:	3208      	adds	r2, #8
 8002944:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	3280      	adds	r2, #128	; 0x80
 8002948:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 800294a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800294c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800294e:	3480      	adds	r4, #128	; 0x80
 8002950:	7023      	strb	r3, [r4, #0]
}
 8002952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002954:	2104      	movs	r1, #4
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	420a      	tst	r2, r1
 800295a:	d0d0      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	423a      	tst	r2, r7
 8002960:	d0cd      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002962:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <UART_WaitOnFlagUntilTimeout+0x98>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	31a3      	adds	r1, #163	; 0xa3
 8002970:	31ff      	adds	r1, #255	; 0xff
 8002972:	438a      	bics	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002976:	0022      	movs	r2, r4
 8002978:	2320      	movs	r3, #32
 800297a:	3208      	adds	r2, #8
 800297c:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800297e:	3280      	adds	r2, #128	; 0x80
 8002980:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002982:	6053      	str	r3, [r2, #4]
 8002984:	e7e1      	b.n	800294a <UART_WaitOnFlagUntilTimeout+0x5a>
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	fffffe5f 	.word	0xfffffe5f

0800298c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	0003      	movs	r3, r0
{
 800298e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	2600      	movs	r6, #0
{
 8002992:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	338c      	adds	r3, #140	; 0x8c
 8002996:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002998:	f7fe fa5e 	bl	8000e58 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800299c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800299e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	071b      	lsls	r3, r3, #28
 80029a4:	d419      	bmi.n	80029da <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	075b      	lsls	r3, r3, #29
 80029ac:	d50a      	bpl.n	80029c4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <UART_CheckIdleState+0x68>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	0020      	movs	r0, r4
 80029b8:	002b      	movs	r3, r5
 80029ba:	03c9      	lsls	r1, r1, #15
 80029bc:	f7ff ff98 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d115      	bne.n	80029f0 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80029c4:	0022      	movs	r2, r4
 80029c6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029ca:	3208      	adds	r2, #8
 80029cc:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029ce:	3280      	adds	r2, #128	; 0x80
 80029d0:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80029d4:	3480      	adds	r4, #128	; 0x80
 80029d6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80029d8:	e00b      	b.n	80029f2 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <UART_CheckIdleState+0x68>)
 80029de:	0032      	movs	r2, r6
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	0389      	lsls	r1, r1, #14
 80029e4:	0003      	movs	r3, r0
 80029e6:	0020      	movs	r0, r4
 80029e8:	f7ff ff82 	bl	80028f0 <UART_WaitOnFlagUntilTimeout>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d0da      	beq.n	80029a6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80029f0:	2003      	movs	r0, #3
}
 80029f2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80029f4:	01ffffff 	.word	0x01ffffff

080029f8 <HAL_UART_Init>:
{
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a02:	0005      	movs	r5, r0
 8002a04:	3508      	adds	r5, #8
 8002a06:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	3280      	adds	r2, #128	; 0x80
 8002a10:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002a12:	f7fe f93d 	bl	8000c90 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a16:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a1c:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002a1e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a20:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a22:	438b      	bics	r3, r1
 8002a24:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a26:	f7ff fdf1 	bl	800260c <UART_SetConfig>
 8002a2a:	2801      	cmp	r0, #1
 8002a2c:	d0e7      	beq.n	80029fe <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8002a34:	0020      	movs	r0, r4
 8002a36:	f7ff fef3 	bl	8002820 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <HAL_UART_Init+0x64>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002a40:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a42:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a44:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002a56:	f7ff ff99 	bl	800298c <UART_CheckIdleState>
 8002a5a:	e7d1      	b.n	8002a00 <HAL_UART_Init+0x8>
 8002a5c:	ffffb7ff 	.word	0xffffb7ff

08002a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002a62:	0004      	movs	r4, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002a64:	2208      	movs	r2, #8
 8002a66:	4915      	ldr	r1, [pc, #84]	; (8002abc <UARTEx_SetNbDataToProcess+0x5c>)
 8002a68:	4668      	mov	r0, sp
 8002a6a:	f000 fa99 	bl	8002fa0 <memcpy>
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002a6e:	2208      	movs	r2, #8
 8002a70:	4913      	ldr	r1, [pc, #76]	; (8002ac0 <UARTEx_SetNbDataToProcess+0x60>)
 8002a72:	a802      	add	r0, sp, #8
 8002a74:	f000 fa94 	bl	8002fa0 <memcpy>

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <UARTEx_SetNbDataToProcess+0x24>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <UARTEx_SetNbDataToProcess+0x64>)
 8002a80:	66a3      	str	r3, [r4, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002a82:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a84:	466a      	mov	r2, sp
                               (uint16_t)denominator[tx_fifo_threshold];
 8002a86:	2608      	movs	r6, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a90:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002a92:	1992      	adds	r2, r2, r6
 8002a94:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a96:	00c0      	lsls	r0, r0, #3
 8002a98:	f7fd fbd4 	bl	8000244 <__divsi3>
 8002a9c:	0023      	movs	r3, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002a9e:	466a      	mov	r2, sp
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002aa0:	336a      	adds	r3, #106	; 0x6a
 8002aa2:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002aa4:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002aa6:	0f5b      	lsrs	r3, r3, #29
 8002aa8:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002aaa:	1992      	adds	r2, r2, r6
 8002aac:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002aae:	00c0      	lsls	r0, r0, #3
 8002ab0:	f7fd fbc8 	bl	8000244 <__divsi3>
 8002ab4:	3468      	adds	r4, #104	; 0x68
 8002ab6:	8020      	strh	r0, [r4, #0]
}
 8002ab8:	e7e3      	b.n	8002a82 <UARTEx_SetNbDataToProcess+0x22>
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	08002fdc 	.word	0x08002fdc
 8002ac0:	08003060 	.word	0x08003060
 8002ac4:	00010001 	.word	0x00010001

08002ac8 <HAL_UARTEx_WakeupCallback>:
}
 8002ac8:	4770      	bx	lr

08002aca <HAL_UARTEx_RxFifoFullCallback>:
 8002aca:	4770      	bx	lr

08002acc <HAL_UARTEx_TxFifoEmptyCallback>:
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_UARTEx_DisableFifoMode>:
{
 8002ad0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002ad2:	0004      	movs	r4, r0
 8002ad4:	3480      	adds	r4, #128	; 0x80
 8002ad6:	7822      	ldrb	r2, [r4, #0]
{
 8002ad8:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8002ada:	2002      	movs	r0, #2
 8002adc:	2a01      	cmp	r2, #1
 8002ade:	d011      	beq.n	8002b04 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	001d      	movs	r5, r3
 8002ae2:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002ae4:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002ae6:	3508      	adds	r5, #8
 8002ae8:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002aee:	6810      	ldr	r0, [r2, #0]
 8002af0:	43b0      	bics	r0, r6
 8002af2:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <HAL_UARTEx_DisableFifoMode+0x38>)
 8002af6:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002af8:	2000      	movs	r0, #0
 8002afa:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002afe:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002b00:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002b02:	7020      	strb	r0, [r4, #0]
}
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	dfffffff 	.word	0xdfffffff

08002b0c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002b0e:	0005      	movs	r5, r0
 8002b10:	3580      	adds	r5, #128	; 0x80
 8002b12:	782b      	ldrb	r3, [r5, #0]
{
 8002b14:	0004      	movs	r4, r0
 8002b16:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002b18:	2002      	movs	r0, #2
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d018      	beq.n	8002b50 <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b1e:	0026      	movs	r6, r4
 8002b20:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002b22:	3801      	subs	r0, #1
 8002b24:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b26:	3608      	adds	r6, #8
 8002b28:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	4381      	bics	r1, r0
 8002b32:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b34:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002b36:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b38:	00c9      	lsls	r1, r1, #3
 8002b3a:	08c9      	lsrs	r1, r1, #3
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002b40:	f7ff ff8e 	bl	8002a60 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b44:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002b46:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b48:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002b4e:	7028      	strb	r0, [r5, #0]
}
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b54 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002b56:	0005      	movs	r5, r0
 8002b58:	3580      	adds	r5, #128	; 0x80
 8002b5a:	782b      	ldrb	r3, [r5, #0]
{
 8002b5c:	0004      	movs	r4, r0
 8002b5e:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002b60:	2002      	movs	r0, #2
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d018      	beq.n	8002b98 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b66:	0026      	movs	r6, r4
 8002b68:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002b6a:	3801      	subs	r0, #1
 8002b6c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b6e:	3608      	adds	r6, #8
 8002b70:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	4381      	bics	r1, r0
 8002b7a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	4807      	ldr	r0, [pc, #28]	; (8002b9c <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8002b80:	4001      	ands	r1, r0
 8002b82:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 8002b84:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b86:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002b88:	f7ff ff6a 	bl	8002a60 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b8c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002b8e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b90:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002b92:	2320      	movs	r3, #32
 8002b94:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002b96:	7028      	strb	r0, [r5, #0]
}
 8002b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	f1ffffff 	.word	0xf1ffffff

08002ba0 <HAL_UART_TxCpltCallback>:
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
{
 8002ba2:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_UART_TxCpltCallback+0x48>)
{
 8002ba6:	b085      	sub	sp, #20
	for (i = 0; i < numberHandlers; i++ )
 8002ba8:	7811      	ldrb	r1, [r2, #0]
	{
	   	if (mHandlers[i]->port == huart )
 8002baa:	4c10      	ldr	r4, [pc, #64]	; (8002bec <HAL_UART_TxCpltCallback+0x4c>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002bac:	9303      	str	r3, [sp, #12]
	for (i = 0; i < numberHandlers; i++ )
 8002bae:	4299      	cmp	r1, r3
 8002bb0:	dd11      	ble.n	8002bd6 <HAL_UART_TxCpltCallback+0x36>
	   	if (mHandlers[i]->port == huart )
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	58a2      	ldr	r2, [r4, r2]
 8002bb6:	6855      	ldr	r5, [r2, #4]
 8002bb8:	4285      	cmp	r5, r0
 8002bba:	d10e      	bne.n	8002bda <HAL_UART_TxCpltCallback+0x3a>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8002bbc:	32b8      	adds	r2, #184	; 0xb8
 8002bbe:	ab03      	add	r3, sp, #12
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6800      	ldr	r0, [r0, #0]
 8002bc8:	001a      	movs	r2, r3
 8002bca:	0019      	movs	r1, r3
 8002bcc:	f000 f914 	bl	8002df8 <xTaskGenericNotifyFromISR>

	   		break;

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_UART_TxCpltCallback+0x3e>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8002bd6:	b005      	add	sp, #20
 8002bd8:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < numberHandlers; i++ )
 8002bda:	3301      	adds	r3, #1
 8002bdc:	e7e7      	b.n	8002bae <HAL_UART_TxCpltCallback+0xe>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_UART_TxCpltCallback+0x50>)
 8002be2:	0552      	lsls	r2, r2, #21
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	e7f6      	b.n	8002bd6 <HAL_UART_TxCpltCallback+0x36>
 8002be8:	20000028 	.word	0x20000028
 8002bec:	200004cc 	.word	0x200004cc
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 8002bf6:	b510      	push	{r4, lr}
  SysTick->CTRL;
 8002bf8:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bfa:	f000 f8ed 	bl	8002dd8 <xTaskGetSchedulerState>
 8002bfe:	2801      	cmp	r0, #1
 8002c00:	d001      	beq.n	8002c06 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c02:	f000 f997 	bl	8002f34 <xPortSysTickHandler>
  }
}
 8002c06:	bd10      	pop	{r4, pc}
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c0c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002c10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c12:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c18:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002c1a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002c1c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002c1e:	3301      	adds	r3, #1
 8002c20:	6003      	str	r3, [r0, #0]
}
 8002c22:	4770      	bx	lr

08002c24 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c24:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c26:	6841      	ldr	r1, [r0, #4]
 8002c28:	6882      	ldr	r2, [r0, #8]
 8002c2a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	4281      	cmp	r1, r0
 8002c32:	d100      	bne.n	8002c36 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c36:	2200      	movs	r2, #0
 8002c38:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c40:	6818      	ldr	r0, [r3, #0]
}
 8002c42:	4770      	bx	lr

08002c44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <prvResetNextTaskUnblockTime+0x20>)
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <prvResetNextTaskUnblockTime+0x24>)
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d103      	bne.n	8002c58 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c50:	2201      	movs	r2, #1
 8002c52:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c54:	601a      	str	r2, [r3, #0]
	}
}
 8002c56:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	e7f8      	b.n	8002c54 <prvResetNextTaskUnblockTime+0x10>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000030 	.word	0x20000030
 8002c68:	200004a0 	.word	0x200004a0

08002c6c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <xTaskIncrementTick+0xd4>)
{
 8002c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d15e      	bne.n	8002d34 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <xTaskIncrementTick+0xd8>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	3201      	adds	r2, #1
 8002c7c:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 8002c7e:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d111      	bne.n	8002ca8 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <xTaskIncrementTick+0xdc>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	d001      	beq.n	8002c92 <xTaskIncrementTick+0x26>
 8002c8e:	b672      	cpsid	i
 8002c90:	e7fe      	b.n	8002c90 <xTaskIncrementTick+0x24>
 8002c92:	4a2e      	ldr	r2, [pc, #184]	; (8002d4c <xTaskIncrementTick+0xe0>)
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	6810      	ldr	r0, [r2, #0]
 8002c98:	6018      	str	r0, [r3, #0]
 8002c9a:	6011      	str	r1, [r2, #0]
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <xTaskIncrementTick+0xe4>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	f7ff ffce 	bl	8002c44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ca8:	4e2a      	ldr	r6, [pc, #168]	; (8002d54 <xTaskIncrementTick+0xe8>)
 8002caa:	9a00      	ldr	r2, [sp, #0]
 8002cac:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002cae:	2400      	movs	r4, #0
 8002cb0:	4f29      	ldr	r7, [pc, #164]	; (8002d58 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d235      	bcs.n	8002d22 <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	2314      	movs	r3, #20
 8002cbc:	4353      	muls	r3, r2
 8002cbe:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <xTaskIncrementTick+0xf0>)
 8002cc0:	58d3      	ldr	r3, [r2, r3]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d900      	bls.n	8002cc8 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8002cc6:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <xTaskIncrementTick+0xf4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d000      	beq.n	8002cd2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8002cd0:	2401      	movs	r4, #1
}
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd6:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8002cd8:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cde:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d325      	bcc.n	8002d30 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce4:	1d2b      	adds	r3, r5, #4
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	f7ff ff9b 	bl	8002c24 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf4:	0028      	movs	r0, r5
 8002cf6:	3018      	adds	r0, #24
 8002cf8:	f7ff ff94 	bl	8002c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <xTaskIncrementTick+0xf8>)
 8002cfe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4290      	cmp	r0, r2
 8002d04:	d900      	bls.n	8002d08 <xTaskIncrementTick+0x9c>
 8002d06:	6018      	str	r0, [r3, #0]
 8002d08:	2314      	movs	r3, #20
 8002d0a:	4358      	muls	r0, r3
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <xTaskIncrementTick+0xf0>)
 8002d0e:	1d29      	adds	r1, r5, #4
 8002d10:	1818      	adds	r0, r3, r0
 8002d12:	f7ff ff7b 	bl	8002c0c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d300      	bcc.n	8002d22 <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 8002d20:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <xTaskIncrementTick+0xdc>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	d1d4      	bne.n	8002cd6 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 8002d30:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d32:	e7c0      	b.n	8002cb6 <xTaskIncrementTick+0x4a>
		++xPendedTicks;
 8002d34:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8002d36:	2400      	movs	r4, #0
		++xPendedTicks;
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8002d3e:	e7c8      	b.n	8002cd2 <xTaskIncrementTick+0x66>
 8002d40:	20000498 	.word	0x20000498
 8002d44:	200004c4 	.word	0x200004c4
 8002d48:	20000030 	.word	0x20000030
 8002d4c:	20000034 	.word	0x20000034
 8002d50:	200004a4 	.word	0x200004a4
 8002d54:	200004a0 	.word	0x200004a0
 8002d58:	2000002c 	.word	0x2000002c
 8002d5c:	20000038 	.word	0x20000038
 8002d60:	200004c8 	.word	0x200004c8
 8002d64:	2000049c 	.word	0x2000049c
 8002d68:	200004a8 	.word	0x200004a8

08002d6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <vTaskSwitchContext+0x58>)
{
 8002d6e:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <vTaskSwitchContext+0x5c>)
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	d002      	beq.n	8002d7e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
}
 8002d7c:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d7e:	2514      	movs	r5, #20
 8002d80:	4812      	ldr	r0, [pc, #72]	; (8002dcc <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8002d82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d84:	6802      	ldr	r2, [r0, #0]
 8002d86:	4912      	ldr	r1, [pc, #72]	; (8002dd0 <vTaskSwitchContext+0x64>)
 8002d88:	002b      	movs	r3, r5
 8002d8a:	4353      	muls	r3, r2
 8002d8c:	585c      	ldr	r4, [r3, r1]
 8002d8e:	2c00      	cmp	r4, #0
 8002d90:	d012      	beq.n	8002db8 <vTaskSwitchContext+0x4c>
 8002d92:	18cc      	adds	r4, r1, r3
 8002d94:	6865      	ldr	r5, [r4, #4]
 8002d96:	3308      	adds	r3, #8
 8002d98:	686d      	ldr	r5, [r5, #4]
 8002d9a:	185b      	adds	r3, r3, r1
 8002d9c:	6065      	str	r5, [r4, #4]
 8002d9e:	429d      	cmp	r5, r3
 8002da0:	d101      	bne.n	8002da6 <vTaskSwitchContext+0x3a>
 8002da2:	686b      	ldr	r3, [r5, #4]
 8002da4:	6063      	str	r3, [r4, #4]
 8002da6:	2314      	movs	r3, #20
 8002da8:	4353      	muls	r3, r2
 8002daa:	18c9      	adds	r1, r1, r3
 8002dac:	684b      	ldr	r3, [r1, #4]
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vTaskSwitchContext+0x68>)
 8002db2:	6019      	str	r1, [r3, #0]
 8002db4:	6002      	str	r2, [r0, #0]
}
 8002db6:	e7e1      	b.n	8002d7c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d101      	bne.n	8002dc0 <vTaskSwitchContext+0x54>
 8002dbc:	b672      	cpsid	i
 8002dbe:	e7fe      	b.n	8002dbe <vTaskSwitchContext+0x52>
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	e7e1      	b.n	8002d88 <vTaskSwitchContext+0x1c>
 8002dc4:	20000498 	.word	0x20000498
 8002dc8:	200004c8 	.word	0x200004c8
 8002dcc:	2000049c 	.word	0x2000049c
 8002dd0:	20000038 	.word	0x20000038
 8002dd4:	2000002c 	.word	0x2000002c

08002dd8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <xTaskGetSchedulerState+0x18>)
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dda:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <xTaskGetSchedulerState+0x14>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <xTaskGetSchedulerState+0x1c>)
 8002de4:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002de6:	4243      	negs	r3, r0
 8002de8:	4158      	adcs	r0, r3
 8002dea:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
 8002dec:	4770      	bx	lr
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200004c0 	.word	0x200004c0
 8002df4:	20000498 	.word	0x20000498

08002df8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dfa:	0004      	movs	r4, r0
 8002dfc:	000f      	movs	r7, r1
 8002dfe:	0015      	movs	r5, r2
 8002e00:	001e      	movs	r6, r3
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d101      	bne.n	8002e0a <xTaskGenericNotifyFromISR+0x12>
 8002e06:	b672      	cpsid	i
 8002e08:	e7fe      	b.n	8002e08 <xTaskGenericNotifyFromISR+0x10>
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e0a:	f000 f866 	bl	8002eda <ulSetInterruptMaskFromISR>
 8002e0e:	9001      	str	r0, [sp, #4]
		{
			if( pulPreviousNotificationValue != NULL )
 8002e10:	2e00      	cmp	r6, #0
 8002e12:	d001      	beq.n	8002e18 <xTaskGenericNotifyFromISR+0x20>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e16:	6033      	str	r3, [r6, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002e18:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002e1a:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002e1c:	3258      	adds	r2, #88	; 0x58
 8002e1e:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002e20:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002e22:	b2db      	uxtb	r3, r3

			switch( eAction )
 8002e24:	2d04      	cmp	r5, #4
 8002e26:	d818      	bhi.n	8002e5a <xTaskGenericNotifyFromISR+0x62>
 8002e28:	0028      	movs	r0, r5
 8002e2a:	f7fd f977 	bl	800011c <__gnu_thumb1_case_uqi>
 8002e2e:	0306      	.short	0x0306
 8002e30:	140e      	.short	0x140e
 8002e32:	12          	.byte	0x12
 8002e33:	00          	.byte	0x00
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002e34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002e36:	4339      	orrs	r1, r7
 8002e38:	6561      	str	r1, [r4, #84]	; 0x54

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d012      	beq.n	8002e64 <xTaskGenericNotifyFromISR+0x6c>
 8002e3e:	2401      	movs	r4, #1
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002e40:	9801      	ldr	r0, [sp, #4]
 8002e42:	f000 f84e 	bl	8002ee2 <vClearInterruptMaskFromISR>

		return xReturn;
	}
 8002e46:	0020      	movs	r0, r4
 8002e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8002e4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e4c:	3201      	adds	r2, #1
 8002e4e:	6562      	str	r2, [r4, #84]	; 0x54
					break;
 8002e50:	e7f3      	b.n	8002e3a <xTaskGenericNotifyFromISR+0x42>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d032      	beq.n	8002ebc <xTaskGenericNotifyFromISR+0xc4>
						pxTCB->ulNotifiedValue = ulValue;
 8002e56:	6567      	str	r7, [r4, #84]	; 0x54
 8002e58:	e7ef      	b.n	8002e3a <xTaskGenericNotifyFromISR+0x42>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002e5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e5c:	3201      	adds	r2, #1
 8002e5e:	d0ec      	beq.n	8002e3a <xTaskGenericNotifyFromISR+0x42>
 8002e60:	b672      	cpsid	i
 8002e62:	e7fe      	b.n	8002e62 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <xTaskGenericNotifyFromISR+0x76>
 8002e6a:	b672      	cpsid	i
 8002e6c:	e7fe      	b.n	8002e6c <xTaskGenericNotifyFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <xTaskGenericNotifyFromISR+0xc8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11e      	bne.n	8002eb4 <xTaskGenericNotifyFromISR+0xbc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e76:	1d25      	adds	r5, r4, #4
 8002e78:	0028      	movs	r0, r5
 8002e7a:	f7ff fed3 	bl	8002c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <xTaskGenericNotifyFromISR+0xcc>)
 8002e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e82:	6811      	ldr	r1, [r2, #0]
 8002e84:	428b      	cmp	r3, r1
 8002e86:	d900      	bls.n	8002e8a <xTaskGenericNotifyFromISR+0x92>
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	2014      	movs	r0, #20
 8002e8c:	0029      	movs	r1, r5
 8002e8e:	4358      	muls	r0, r3
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <xTaskGenericNotifyFromISR+0xd0>)
 8002e92:	18c0      	adds	r0, r0, r3
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002e94:	f7ff feba 	bl	8002c0c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <xTaskGenericNotifyFromISR+0xd4>)
 8002e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d9cc      	bls.n	8002e3e <xTaskGenericNotifyFromISR+0x46>
					if( pxHigherPriorityTaskWoken != NULL )
 8002ea4:	9a08      	ldr	r2, [sp, #32]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d000      	beq.n	8002eae <xTaskGenericNotifyFromISR+0xb6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002eac:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <xTaskGenericNotifyFromISR+0xd8>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e7c4      	b.n	8002e3e <xTaskGenericNotifyFromISR+0x46>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002eb4:	0021      	movs	r1, r4
 8002eb6:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <xTaskGenericNotifyFromISR+0xdc>)
 8002eb8:	3118      	adds	r1, #24
 8002eba:	e7eb      	b.n	8002e94 <xTaskGenericNotifyFromISR+0x9c>
						xReturn = pdFAIL;
 8002ebc:	2400      	movs	r4, #0
 8002ebe:	e7bf      	b.n	8002e40 <xTaskGenericNotifyFromISR+0x48>
 8002ec0:	20000498 	.word	0x20000498
 8002ec4:	2000049c 	.word	0x2000049c
 8002ec8:	20000038 	.word	0x20000038
 8002ecc:	2000002c 	.word	0x2000002c
 8002ed0:	200004c8 	.word	0x200004c8
 8002ed4:	200004ac 	.word	0x200004ac

08002ed8 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002ed8:	4770      	bx	lr

08002eda <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002eda:	f3ef 8010 	mrs	r0, PRIMASK
 8002ede:	b672      	cpsid	i
 8002ee0:	4770      	bx	lr

08002ee2 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002ee2:	f380 8810 	msr	PRIMASK, r0
 8002ee6:	4770      	bx	lr
	...

08002ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ef0:	f3ef 8009 	mrs	r0, PSP
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <pxCurrentTCBConst>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	3820      	subs	r0, #32
 8002efa:	6010      	str	r0, [r2, #0]
 8002efc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002efe:	4644      	mov	r4, r8
 8002f00:	464d      	mov	r5, r9
 8002f02:	4656      	mov	r6, sl
 8002f04:	465f      	mov	r7, fp
 8002f06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f08:	b508      	push	{r3, lr}
 8002f0a:	b672      	cpsid	i
 8002f0c:	f7ff ff2e 	bl	8002d6c <vTaskSwitchContext>
 8002f10:	b662      	cpsie	i
 8002f12:	bc0c      	pop	{r2, r3}
 8002f14:	6811      	ldr	r1, [r2, #0]
 8002f16:	6808      	ldr	r0, [r1, #0]
 8002f18:	3010      	adds	r0, #16
 8002f1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f1c:	46a0      	mov	r8, r4
 8002f1e:	46a9      	mov	r9, r5
 8002f20:	46b2      	mov	sl, r6
 8002f22:	46bb      	mov	fp, r7
 8002f24:	f380 8809 	msr	PSP, r0
 8002f28:	3820      	subs	r0, #32
 8002f2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f2c:	4718      	bx	r3
 8002f2e:	46c0      	nop			; (mov r8, r8)

08002f30 <pxCurrentTCBConst>:
 8002f30:	2000002c 	.word	0x2000002c

08002f34 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f34:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f36:	f7ff ffd0 	bl	8002eda <ulSetInterruptMaskFromISR>
 8002f3a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f3c:	f7ff fe96 	bl	8002c6c <xTaskIncrementTick>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d003      	beq.n	8002f4c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <xPortSysTickHandler+0x20>)
 8002f48:	0552      	lsls	r2, r2, #21
 8002f4a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002f4c:	0020      	movs	r0, r4
 8002f4e:	f7ff ffc8 	bl	8002ee2 <vClearInterruptMaskFromISR>
}
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	2600      	movs	r6, #0
 8002f6a:	f000 f82b 	bl	8002fc4 <_init>
 8002f6e:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	00b3      	lsls	r3, r6, #2
 8002f7e:	58eb      	ldr	r3, [r5, r3]
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	00b3      	lsls	r3, r6, #2
 8002f88:	58eb      	ldr	r3, [r5, r3]
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08003074 	.word	0x08003074
 8002f94:	08003074 	.word	0x08003074
 8002f98:	08003074 	.word	0x08003074
 8002f9c:	08003078 	.word	0x08003078

08002fa0 <memcpy>:
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d100      	bne.n	8002faa <memcpy+0xa>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	5ccc      	ldrb	r4, [r1, r3]
 8002fac:	54c4      	strb	r4, [r0, r3]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	e7f8      	b.n	8002fa4 <memcpy+0x4>

08002fb2 <memset>:
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	1882      	adds	r2, r0, r2
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <memset+0xa>
 8002fba:	4770      	bx	lr
 8002fbc:	7019      	strb	r1, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	e7f9      	b.n	8002fb6 <memset+0x4>
	...

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
