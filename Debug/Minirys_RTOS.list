
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006978  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d64  08006d64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d6c  08006d6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000167c  20000074  08006de8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016f0  08006de8  000216f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000343ad  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059a0  00000000  00000000  00054449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00059df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b349  00000000  00000000  0005b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b210  00000000  00000000  000766c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000aa91d  00000000  00000000  000a18d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014c1f6  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0001ecf0  00000000  00000000  0014c249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003848  00000000  00000000  0016af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004554  00000000  00000000  0016e788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a20 	.word	0x08006a20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08006a20 	.word	0x08006a20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	1c08      	adds	r0, r1, #0
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <start_main_logic_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_main_logic_loop */
void start_main_logic_loop(void *argument)
{
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	4647      	mov	r7, r8
 8000624:	46ce      	mov	lr, r9
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <start_main_logic_loop+0x74>)
 8000628:	b580      	push	{r7, lr}
 800062a:	4698      	mov	r8, r3
 800062c:	1d1d      	adds	r5, r3, #4
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <start_main_logic_loop+0x78>)
  /* Infinite loop */
  for(;;)
  {

		//zablokowanie pamieci wspoldzielonej
		xSemaphoreTake(modbus_h.ModBusSphrHandle , 100);
 8000630:	27b8      	movs	r7, #184	; 0xb8
 8000632:	4699      	mov	r9, r3
 8000634:	4e19      	ldr	r6, [pc, #100]	; (800069c <start_main_logic_loop+0x7c>)
 8000636:	4c1a      	ldr	r4, [pc, #104]	; (80006a0 <start_main_logic_loop+0x80>)
 8000638:	2164      	movs	r1, #100	; 0x64
 800063a:	59f0      	ldr	r0, [r6, r7]
 800063c:	f004 ff24 	bl	8005488 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, modbus_h.u16regs[0] & 0x1);
 8000640:	2398      	movs	r3, #152	; 0x98
 8000642:	2201      	movs	r2, #1
 8000644:	58f3      	ldr	r3, [r6, r3]
 8000646:	2104      	movs	r1, #4
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <start_main_logic_loop+0x84>)
 800064c:	401a      	ands	r2, r3
 800064e:	f001 f93b 	bl	80018c8 <HAL_GPIO_WritePin>

		//synchronizacja danych
		ModbusDATA[1]=MachineStateData.FanSpeedRPM;
 8000652:	4642      	mov	r2, r8
 8000654:	8b23      	ldrh	r3, [r4, #24]
 8000656:	8053      	strh	r3, [r2, #2]
 8000658:	2300      	movs	r3, #0
      */
void MSM_DataCopy(analog_data * Dest,const analog_data * Source, uint8_t NoOfBytes )
    {
    for(int i =0; i<NoOfBytes;++i)
	{
	Dest[i]=Source[i];
 800065a:	5ae2      	ldrh	r2, [r4, r3]
 800065c:	52ea      	strh	r2, [r5, r3]
    for(int i =0; i<NoOfBytes;++i)
 800065e:	3302      	adds	r3, #2
 8000660:	2b18      	cmp	r3, #24
 8000662:	d1fa      	bne.n	800065a <start_main_logic_loop+0x3a>
		MSM_DataCopy(&ModbusDATA[2],&MachineStateData.AnalogInputs.ADCInput[0],12);

		xSemaphoreGive(modbus_h.ModBusSphrHandle);
 8000664:	2300      	movs	r3, #0
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	59f0      	ldr	r0, [r6, r7]
 800066c:	f004 fd82 	bl	8005174 <xQueueGenericSend>
		//odblokowanie pamieci wspoldzielonej

		uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 8000670:	464b      	mov	r3, r9
 8000672:	681a      	ldr	r2, [r3, #0]
		htim17.Instance->CNT=0;
 8000674:	2300      	movs	r3, #0
		uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 8000676:	6a51      	ldr	r1, [r2, #36]	; 0x24
		htim17.Instance->CNT=0;
 8000678:	6253      	str	r3, [r2, #36]	; 0x24
		MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 800067a:	332d      	adds	r3, #45	; 0x2d
 800067c:	33ff      	adds	r3, #255	; 0xff
 800067e:	434b      	muls	r3, r1
		HAL_GPIO_ReadPin(LED_G_GPIO_Port, LED_G_Pin);
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <start_main_logic_loop+0x88>)
 8000682:	2140      	movs	r1, #64	; 0x40
		MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 8000684:	8323      	strh	r3, [r4, #24]
		HAL_GPIO_ReadPin(LED_G_GPIO_Port, LED_G_Pin);
 8000686:	f001 f919 	bl	80018bc <HAL_GPIO_ReadPin>
		osDelay(200);
 800068a:	20c8      	movs	r0, #200	; 0xc8
 800068c:	f004 f950 	bl	8004930 <osDelay>
  {
 8000690:	e7d2      	b.n	8000638 <start_main_logic_loop+0x18>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	200010b8 	.word	0x200010b8
 8000698:	2000106c 	.word	0x2000106c
 800069c:	2000119c 	.word	0x2000119c
 80006a0:	200013d4 	.word	0x200013d4
 80006a4:	50000400 	.word	0x50000400
 80006a8:	50000800 	.word	0x50000800

080006ac <SystemClock_Config>:
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b0:	2238      	movs	r2, #56	; 0x38
 80006b2:	2100      	movs	r1, #0
 80006b4:	a810      	add	r0, sp, #64	; 0x40
 80006b6:	f006 f8de 	bl	8006876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	2210      	movs	r2, #16
 80006bc:	2100      	movs	r1, #0
 80006be:	a801      	add	r0, sp, #4
 80006c0:	f006 f8d9 	bl	8006876 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	222c      	movs	r2, #44	; 0x2c
 80006c6:	2100      	movs	r1, #0
 80006c8:	a805      	add	r0, sp, #20
 80006ca:	f006 f8d4 	bl	8006876 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ce:	2080      	movs	r0, #128	; 0x80
 80006d0:	0080      	lsls	r0, r0, #2
 80006d2:	f001 f8ff 	bl	80018d4 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006e2:	3308      	adds	r3, #8
 80006e4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	029b      	lsls	r3, r3, #10
 80006ea:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	049b      	lsls	r3, r3, #18
 80006f0:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006f2:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006f8:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000704:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f001 f915 	bl	8001934 <HAL_RCC_OscConfig>
 800070a:	2800      	cmp	r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	2101      	movs	r1, #1
 800071a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000720:	f001 fbc6 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000724:	2800      	cmp	r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x80>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SystemClock_Config+0x9c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800072e:	9006      	str	r0, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000730:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000732:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000734:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	f001 fcb1 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 800073a:	2800      	cmp	r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x96>
 800073e:	b672      	cpsid	i
  while (1)
 8000740:	e7fe      	b.n	8000740 <SystemClock_Config+0x94>
}
 8000742:	b01e      	add	sp, #120	; 0x78
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	00004001 	.word	0x00004001

0800074c <main>:
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	46ce      	mov	lr, r9
 8000750:	4647      	mov	r7, r8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2601      	movs	r6, #1
{
 8000754:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4cae      	ldr	r4, [pc, #696]	; (8000a10 <main+0x2c4>)
{
 8000758:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800075a:	f000 faef 	bl	8000d3c <HAL_Init>
  SystemClock_Config();
 800075e:	f7ff ffa5 	bl	80006ac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	2214      	movs	r2, #20
 8000764:	2100      	movs	r1, #0
 8000766:	a805      	add	r0, sp, #20
 8000768:	f006 f885 	bl	8006876 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800076e:	48a9      	ldr	r0, [pc, #676]	; (8000a14 <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4333      	orrs	r3, r6
 8000772:	6363      	str	r3, [r4, #52]	; 0x34
 8000774:	6b63      	ldr	r3, [r4, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4033      	ands	r3, r6
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2302      	movs	r3, #2
 8000780:	6b62      	ldr	r2, [r4, #52]	; 0x34
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 8000782:	2740      	movs	r7, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	431a      	orrs	r2, r3
 8000786:	6362      	str	r2, [r4, #52]	; 0x34
 8000788:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800078a:	4013      	ands	r3, r2
 800078c:	9303      	str	r3, [sp, #12]
 800078e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	2304      	movs	r3, #4
 8000792:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000794:	431a      	orrs	r2, r3
 8000796:	6362      	str	r2, [r4, #52]	; 0x34
 8000798:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800079a:	4013      	ands	r3, r2
 800079c:	9304      	str	r3, [sp, #16]
 800079e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80007a0:	23de      	movs	r3, #222	; 0xde
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	0019      	movs	r1, r3
 80007a6:	2200      	movs	r2, #0
 80007a8:	4699      	mov	r9, r3
 80007aa:	f001 f88d 	bl	80018c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|ENABLE_SENSORS_Pin, GPIO_PIN_RESET);
 80007ae:	2381      	movs	r3, #129	; 0x81
 80007b0:	20a0      	movs	r0, #160	; 0xa0
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	0019      	movs	r1, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	4698      	mov	r8, r3
 80007bc:	f001 f884 	bl	80018c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	4894      	ldr	r0, [pc, #592]	; (8000a18 <main+0x2cc>)
 80007c6:	f001 f87f 	bl	80018c8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80007ca:	20a0      	movs	r0, #160	; 0xa0
 80007cc:	a905      	add	r1, sp, #20
 80007ce:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 80007d0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f000 ff85 	bl	80016e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80007da:	464b      	mov	r3, r9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	488d      	ldr	r0, [pc, #564]	; (8000a14 <main+0x2c8>)
 80007de:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80007e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f000 ff7c 	bl	80016e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80007ee:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	a905      	add	r1, sp, #20
 80007f2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80007f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f000 ff72 	bl	80016e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000800:	4885      	ldr	r0, [pc, #532]	; (8000a18 <main+0x2cc>)
 8000802:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000804:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800080c:	f000 ff6a 	bl	80016e4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000812:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000814:	4333      	orrs	r3, r6
 8000816:	63a3      	str	r3, [r4, #56]	; 0x38
 8000818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800081a:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081c:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800081e:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000824:	f000 fdd0 	bl	80013c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000828:	2009      	movs	r0, #9
 800082a:	f000 fdff 	bl	800142c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	220c      	movs	r2, #12
 8000830:	2100      	movs	r1, #0
 8000832:	a805      	add	r0, sp, #20
 8000834:	f006 f81f 	bl	8006876 <memset>
  hadc1.Instance = ADC1;
 8000838:	4c78      	ldr	r4, [pc, #480]	; (8000a1c <main+0x2d0>)
 800083a:	4b79      	ldr	r3, [pc, #484]	; (8000a20 <main+0x2d4>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	2220      	movs	r2, #32
  hadc1.Instance = ADC1;
 800083e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	6063      	str	r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	061b      	lsls	r3, r3, #24
 800084a:	6123      	str	r3, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800084c:	2308      	movs	r3, #8
 800084e:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000850:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000852:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000854:	320c      	adds	r2, #12
 8000856:	54a6      	strb	r6, [r4, r2]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000858:	3a25      	subs	r2, #37	; 0x25
 800085a:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085c:	3235      	adds	r2, #53	; 0x35
 800085e:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000860:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000862:	0020      	movs	r0, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000864:	059b      	lsls	r3, r3, #22
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000866:	8325      	strh	r5, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000868:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086a:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086c:	76a6      	strb	r6, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 800086e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000874:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000876:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	f000 fa86 	bl	8000d88 <HAL_ADC_Init>
 800087c:	2800      	cmp	r0, #0
 800087e:	d001      	beq.n	8000884 <main+0x138>
 8000880:	b672      	cpsid	i
  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x136>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	0020      	movs	r0, r4
 8000886:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 8000888:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800088a:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	f000 fbce 	bl	800102c <HAL_ADC_ConfigChannel>
 8000890:	2800      	cmp	r0, #0
 8000892:	d001      	beq.n	8000898 <main+0x14c>
 8000894:	b672      	cpsid	i
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_1;
 8000898:	4b62      	ldr	r3, [pc, #392]	; (8000a24 <main+0x2d8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	0020      	movs	r0, r4
 800089c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 800089e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	f000 fbc4 	bl	800102c <HAL_ADC_ConfigChannel>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d001      	beq.n	80008ac <main+0x160>
 80008a8:	b672      	cpsid	i
  while (1)
 80008aa:	e7fe      	b.n	80008aa <main+0x15e>
  sConfig.Channel = ADC_CHANNEL_2;
 80008ac:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <main+0x2dc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	0020      	movs	r0, r4
 80008b0:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_2;
 80008b2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	f000 fbba 	bl	800102c <HAL_ADC_ConfigChannel>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d001      	beq.n	80008c0 <main+0x174>
 80008bc:	b672      	cpsid	i
  while (1)
 80008be:	e7fe      	b.n	80008be <main+0x172>
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <main+0x2e0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	0020      	movs	r0, r4
 80008c4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_3;
 80008c6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	f000 fbb0 	bl	800102c <HAL_ADC_ConfigChannel>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d001      	beq.n	80008d4 <main+0x188>
 80008d0:	b672      	cpsid	i
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <main+0x186>
  sConfig.Channel = ADC_CHANNEL_4;
 80008d4:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <main+0x2e4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	0020      	movs	r0, r4
 80008d8:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 80008da:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	f000 fba6 	bl	800102c <HAL_ADC_ConfigChannel>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d001      	beq.n	80008e8 <main+0x19c>
 80008e4:	b672      	cpsid	i
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0x19a>
  sConfig.Channel = ADC_CHANNEL_5;
 80008e8:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <main+0x2e8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	0020      	movs	r0, r4
 80008ec:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 80008ee:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	f000 fb9c 	bl	800102c <HAL_ADC_ConfigChannel>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d001      	beq.n	80008fc <main+0x1b0>
 80008f8:	b672      	cpsid	i
  while (1)
 80008fa:	e7fe      	b.n	80008fa <main+0x1ae>
  sConfig.Channel = ADC_CHANNEL_7;
 80008fc:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <main+0x2ec>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	0020      	movs	r0, r4
 8000900:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_7;
 8000902:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	f000 fb92 	bl	800102c <HAL_ADC_ConfigChannel>
 8000908:	2800      	cmp	r0, #0
 800090a:	d001      	beq.n	8000910 <main+0x1c4>
 800090c:	b672      	cpsid	i
  while (1)
 800090e:	e7fe      	b.n	800090e <main+0x1c2>
  sConfig.Channel = ADC_CHANNEL_8;
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <main+0x2f0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	0020      	movs	r0, r4
 8000914:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_8;
 8000916:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	f000 fb88 	bl	800102c <HAL_ADC_ConfigChannel>
 800091c:	2800      	cmp	r0, #0
 800091e:	d001      	beq.n	8000924 <main+0x1d8>
 8000920:	b672      	cpsid	i
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0x1d6>
  sConfig.Channel = ADC_CHANNEL_9;
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <main+0x2f4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	0020      	movs	r0, r4
 8000928:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_9;
 800092a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092c:	f000 fb7e 	bl	800102c <HAL_ADC_ConfigChannel>
 8000930:	2800      	cmp	r0, #0
 8000932:	d001      	beq.n	8000938 <main+0x1ec>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x1ea>
  sConfig.Channel = ADC_CHANNEL_16;
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <main+0x2f8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	0020      	movs	r0, r4
 800093c:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_16;
 800093e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	f000 fb74 	bl	800102c <HAL_ADC_ConfigChannel>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <main+0x200>
 8000948:	b672      	cpsid	i
  while (1)
 800094a:	e7fe      	b.n	800094a <main+0x1fe>
  htim17.Instance = TIM17;
 800094c:	483e      	ldr	r0, [pc, #248]	; (8000a48 <main+0x2fc>)
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <main+0x300>)
  htim17.Init.Prescaler = 0;
 8000950:	6043      	str	r3, [r0, #4]
  htim17.Instance = TIM17;
 8000952:	6002      	str	r2, [r0, #0]
  htim17.Init.Period = 65535;
 8000954:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <main+0x304>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000958:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800095c:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000960:	f001 fdea 	bl	8002538 <HAL_TIM_Base_Init>
 8000964:	2800      	cmp	r0, #0
 8000966:	d001      	beq.n	800096c <main+0x220>
 8000968:	b672      	cpsid	i
  while (1)
 800096a:	e7fe      	b.n	800096a <main+0x21e>
  huart1.Instance = USART1;
 800096c:	4d39      	ldr	r5, [pc, #228]	; (8000a54 <main+0x308>)
 800096e:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <main+0x30c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000970:	60a8      	str	r0, [r5, #8]
  huart1.Instance = USART1;
 8000972:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000974:	23e1      	movs	r3, #225	; 0xe1
 8000976:	025b      	lsls	r3, r3, #9
 8000978:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000980:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000982:	61e8      	str	r0, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000984:	6228      	str	r0, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000986:	6268      	str	r0, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	62a8      	str	r0, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098a:	0028      	movs	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	f002 fe0b 	bl	80035a8 <HAL_UART_Init>
 8000992:	1e01      	subs	r1, r0, #0
 8000994:	d001      	beq.n	800099a <main+0x24e>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x24c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	0028      	movs	r0, r5
 800099c:	f002 ff4c 	bl	8003838 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	1e01      	subs	r1, r0, #0
 80009a2:	d001      	beq.n	80009a8 <main+0x25c>
 80009a4:	b672      	cpsid	i
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <main+0x25a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	0028      	movs	r0, r5
 80009aa:	f002 ff73 	bl	8003894 <HAL_UARTEx_SetRxFifoThreshold>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d001      	beq.n	80009b6 <main+0x26a>
 80009b2:	b672      	cpsid	i
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x268>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009b6:	0028      	movs	r0, r5
 80009b8:	f002 ff22 	bl	8003800 <HAL_UARTEx_DisableFifoMode>
 80009bc:	1e07      	subs	r7, r0, #0
 80009be:	d001      	beq.n	80009c4 <main+0x278>
 80009c0:	b672      	cpsid	i
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <main+0x276>
  modbus_h.uModbusType = MB_SLAVE;
 80009c4:	2303      	movs	r3, #3
  modbus_h.u16timeOut = 1000;
 80009c6:	22fa      	movs	r2, #250	; 0xfa
  modbus_h.uModbusType = MB_SLAVE;
 80009c8:	4e24      	ldr	r6, [pc, #144]	; (8000a5c <main+0x310>)
  modbus_h.u16timeOut = 1000;
 80009ca:	0092      	lsls	r2, r2, #2
  modbus_h.uModbusType = MB_SLAVE;
 80009cc:	7033      	strb	r3, [r6, #0]
  modbus_h.u8id = 10; //Modbus slave ID
 80009ce:	3307      	adds	r3, #7
 80009d0:	7233      	strb	r3, [r6, #8]
  modbus_h.u16timeOut = 1000;
 80009d2:	3398      	adds	r3, #152	; 0x98
 80009d4:	52f2      	strh	r2, [r6, r3]
  modbus_h.u16regs = ModbusDATA;
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <main+0x314>)
 80009d8:	3b0a      	subs	r3, #10
 80009da:	50f2      	str	r2, [r6, r3]
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80009dc:	2210      	movs	r2, #16
 80009de:	330c      	adds	r3, #12
  modbus_h.EN_Port = NULL;
 80009e0:	60f0      	str	r0, [r6, #12]
  ModbusInit(&modbus_h);
 80009e2:	0030      	movs	r0, r6
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80009e4:	52f2      	strh	r2, [r6, r3]
  modbus_h.port =  &huart1;
 80009e6:	6075      	str	r5, [r6, #4]
  ModbusInit(&modbus_h);
 80009e8:	f003 fde8 	bl	80045bc <ModbusInit>
  ModbusStart(&modbus_h);
 80009ec:	0030      	movs	r0, r6
 80009ee:	f003 fe5d 	bl	80046ac <ModbusStart>
   HAL_ADC_Start(&hadc1);
 80009f2:	0020      	movs	r0, r4
 80009f4:	f000 fcba 	bl	800136c <HAL_ADC_Start>
  osKernelInitialize();
 80009f8:	f003 ff16 	bl	8004828 <osKernelInitialize>
  main_logic_loopHandle = osThreadNew(start_main_logic_loop, NULL, &main_logic_loop_attributes);
 80009fc:	0039      	movs	r1, r7
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <main+0x318>)
 8000a00:	4819      	ldr	r0, [pc, #100]	; (8000a68 <main+0x31c>)
 8000a02:	f003 ff43 	bl	800488c <osThreadNew>
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <main+0x320>)
 8000a08:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000a0a:	f003 ff21 	bl	8004850 <osKernelStart>
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x2c2>
 8000a10:	40021000 	.word	0x40021000
 8000a14:	50000400 	.word	0x50000400
 8000a18:	50000800 	.word	0x50000800
 8000a1c:	200012e0 	.word	0x200012e0
 8000a20:	40012400 	.word	0x40012400
 8000a24:	04000002 	.word	0x04000002
 8000a28:	08000004 	.word	0x08000004
 8000a2c:	0c000008 	.word	0x0c000008
 8000a30:	10000010 	.word	0x10000010
 8000a34:	14000020 	.word	0x14000020
 8000a38:	1c000080 	.word	0x1c000080
 8000a3c:	20000100 	.word	0x20000100
 8000a40:	24000200 	.word	0x24000200
 8000a44:	40010000 	.word	0x40010000
 8000a48:	2000106c 	.word	0x2000106c
 8000a4c:	40014800 	.word	0x40014800
 8000a50:	0000ffff 	.word	0x0000ffff
 8000a54:	20001344 	.word	0x20001344
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	2000119c 	.word	0x2000119c
 8000a60:	200010b8 	.word	0x200010b8
 8000a64:	08006a48 	.word	0x08006a48
 8000a68:	08000621 	.word	0x08000621
 8000a6c:	20001068 	.word	0x20001068

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000a72:	6802      	ldr	r2, [r0, #0]
{
 8000a74:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d000      	beq.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000a7a:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000a7c:	f000 f972 	bl	8000d64 <HAL_IncTick>
}
 8000a80:	e7fb      	b.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40012c00 	.word	0x40012c00

08000a88 <Error_Handler>:
 8000a88:	b672      	cpsid	i
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <Error_Handler+0x2>

08000a8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x38>)
{
 8000a90:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a94:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4311      	orrs	r1, r2
 8000a98:	6419      	str	r1, [r3, #64]	; 0x40
 8000a9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8000a9c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	9200      	str	r2, [sp, #0]
 8000aa4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa8:	0549      	lsls	r1, r1, #21
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000ab0:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000abc:	f000 fc84 	bl	80013c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd00      	pop	{pc}
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	0004      	movs	r4, r0
 8000acc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	2214      	movs	r2, #20
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	a803      	add	r0, sp, #12
 8000ad4:	f005 fecf 	bl	8006876 <memset>
  if(hadc->Instance==ADC1)
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <HAL_ADC_MspInit+0xac>)
 8000ada:	6822      	ldr	r2, [r4, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d001      	beq.n	8000ae4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae0:	b008      	add	sp, #32
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae4:	2080      	movs	r0, #128	; 0x80
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_ADC_MspInit+0xb0>)
 8000ae8:	0340      	lsls	r0, r0, #13
 8000aea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aee:	4301      	orrs	r1, r0
 8000af0:	6419      	str	r1, [r3, #64]	; 0x40
 8000af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af4:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8000af6:	4002      	ands	r2, r0
 8000af8:	9200      	str	r2, [sp, #0]
 8000afa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	2201      	movs	r2, #1
 8000afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4311      	orrs	r1, r2
 8000b04:	6359      	str	r1, [r3, #52]	; 0x34
 8000b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	2202      	movs	r2, #2
 8000b12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b14:	4311      	orrs	r1, r2
 8000b16:	6359      	str	r1, [r3, #52]	; 0x34
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	9202      	str	r2, [sp, #8]
 8000b20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b24:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000b26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f000 fddb 	bl	80016e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <HAL_ADC_MspInit+0xb8>)
 8000b30:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000b32:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f000 fdd4 	bl	80016e4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000b3c:	4d11      	ldr	r5, [pc, #68]	; (8000b84 <HAL_ADC_MspInit+0xbc>)
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b40:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8000b42:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b44:	2305      	movs	r3, #5
 8000b46:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	337b      	adds	r3, #123	; 0x7b
 8000b4a:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4c:	3380      	adds	r3, #128	; 0x80
 8000b4e:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b56:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5a:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5c:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5e:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b60:	f000 fc70 	bl	8001444 <HAL_DMA_Init>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d102      	bne.n	8000b6e <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b68:	6525      	str	r5, [r4, #80]	; 0x50
 8000b6a:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8000b6c:	e7b8      	b.n	8000ae0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000b6e:	f7ff ff8b 	bl	8000a88 <Error_Handler>
 8000b72:	e7f9      	b.n	8000b68 <HAL_ADC_MspInit+0xa0>
 8000b74:	40012400 	.word	0x40012400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	000010bf 	.word	0x000010bf
 8000b80:	50000400 	.word	0x50000400
 8000b84:	200013f8 	.word	0x200013f8
 8000b88:	40020008 	.word	0x40020008

08000b8c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM17)
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_TIM_Base_MspInit+0x24>)
 8000b8e:	6802      	ldr	r2, [r0, #0]
{
 8000b90:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM17)
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d001      	beq.n	8000b9a <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b96:	b002      	add	sp, #8
 8000b98:	4770      	bx	lr
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b9a:	2080      	movs	r0, #128	; 0x80
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <HAL_TIM_Base_MspInit+0x28>)
 8000b9e:	02c0      	lsls	r0, r0, #11
 8000ba0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ba2:	4301      	orrs	r1, r0
 8000ba4:	6411      	str	r1, [r2, #64]	; 0x40
 8000ba6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ba8:	4003      	ands	r3, r0
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	9b01      	ldr	r3, [sp, #4]
}
 8000bae:	e7f2      	b.n	8000b96 <HAL_TIM_Base_MspInit+0xa>
 8000bb0:	40014800 	.word	0x40014800
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	0004      	movs	r4, r0
 8000bbc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	2214      	movs	r2, #20
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	a803      	add	r0, sp, #12
 8000bc4:	f005 fe57 	bl	8006876 <memset>
  if(huart->Instance==USART1)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0x70>)
 8000bca:	6822      	ldr	r2, [r4, #0]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d001      	beq.n	8000bd4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x74>)
 8000bd8:	01c0      	lsls	r0, r0, #7
 8000bda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000bdc:	4301      	orrs	r1, r0
 8000bde:	6419      	str	r1, [r3, #64]	; 0x40
 8000be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be2:	4002      	ands	r2, r0
 8000be4:	9201      	str	r2, [sp, #4]
 8000be6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	2201      	movs	r2, #1
 8000bea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4311      	orrs	r1, r2
 8000bf0:	6359      	str	r1, [r3, #52]	; 0x34
 8000bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfc:	23c0      	movs	r3, #192	; 0xc0
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c0e:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f000 fd68 	bl	80016e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2103      	movs	r1, #3
 8000c18:	201b      	movs	r0, #27
 8000c1a:	f000 fbd5 	bl	80013c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c1e:	201b      	movs	r0, #27
 8000c20:	f000 fc04 	bl	800142c <HAL_NVIC_EnableIRQ>
}
 8000c24:	e7d4      	b.n	8000bd0 <HAL_UART_MspInit+0x18>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	0001      	movs	r1, r0
 8000c34:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	200d      	movs	r0, #13
 8000c3a:	f000 fbc5 	bl	80013c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f000 fbf4 	bl	800142c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c44:	2080      	movs	r0, #128	; 0x80
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <HAL_InitTick+0x68>)
 8000c48:	0100      	lsls	r0, r0, #4
 8000c4a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c4c:	4301      	orrs	r1, r0
 8000c4e:	6411      	str	r1, [r2, #64]	; 0x40
 8000c50:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c52:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c54:	4003      	ands	r3, r0
 8000c56:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5c:	f001 fa04 	bl	8002068 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c60:	f001 f9ee 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c64:	4c0d      	ldr	r4, [pc, #52]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c68:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8000c6a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_InitTick+0x78>)
 8000c6e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c70:	f7ff fa4a 	bl	8000108 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000c74:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c76:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c78:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c7a:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000c7c:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c80:	f001 fc5a 	bl	8002538 <HAL_TIM_Base_Init>
 8000c84:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_InitTick+0x60>
}
 8000c8c:	b006      	add	sp, #24
 8000c8e:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c90:	0020      	movs	r0, r4
 8000c92:	f001 fb11 	bl	80022b8 <HAL_TIM_Base_Start_IT>
 8000c96:	e7f9      	b.n	8000c8c <HAL_InitTick+0x5c>
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	20001654 	.word	0x20001654
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	000f4240 	.word	0x000f4240
 8000ca8:	000003e7 	.word	0x000003e7

08000cac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler>
 8000cae:	46c0      	nop			; (mov r8, r8)

08000cb0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <HardFault_Handler>
 8000cb2:	46c0      	nop			; (mov r8, r8)

08000cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cb6:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Channel1_IRQHandler+0xc>)
 8000cb8:	f000 fcb8 	bl	800162c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	200013f8 	.word	0x200013f8

08000cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8000cc8:	f001 fb30 	bl	800232c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20001654 	.word	0x20001654

08000cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cd6:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <USART1_IRQHandler+0xc>)
 8000cd8:	f001 fe40 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20001344 	.word	0x20001344

08000ce4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	4770      	bx	lr
 8000ce6:	46c0      	nop			; (mov r8, r8)

08000ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cec:	f7ff fffa 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d16:	f005 fd7f 	bl	8006818 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d1a:	f7ff fd17 	bl	800074c <main>

08000d1e <LoopForever>:

LoopForever:
  b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   r0, =_estack
 8000d20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d2c:	08006d74 	.word	0x08006d74
  ldr r2, =_sbss
 8000d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d34:	200016f0 	.word	0x200016f0

08000d38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_IRQHandler>
	...

08000d3c <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_Init+0x24>)
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	6811      	ldr	r1, [r2, #0]
{
 8000d44:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d46:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d48:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4c:	f7ff ff70 	bl	8000c30 <HAL_InitTick>
 8000d50:	1e04      	subs	r4, r0, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d54:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000d56:	0020      	movs	r0, r4
 8000d58:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000d5a:	f7ff fe97 	bl	8000a8c <HAL_MspInit>
 8000d5e:	e7fa      	b.n	8000d56 <HAL_Init+0x1a>
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x10>)
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_IncTick+0x14>)
 8000d68:	6811      	ldr	r1, [r2, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	185b      	adds	r3, r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	4770      	bx	lr
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	200016a0 	.word	0x200016a0
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d7c:	4b01      	ldr	r3, [pc, #4]	; (8000d84 <HAL_GetTick+0x8>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
}
 8000d80:	4770      	bx	lr
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	200016a0 	.word	0x200016a0

08000d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	46d6      	mov	lr, sl
 8000d8c:	464f      	mov	r7, r9
 8000d8e:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d90:	2300      	movs	r3, #0
{
 8000d92:	b5c0      	push	{r6, r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8000d98:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d9a:	d100      	bne.n	8000d9e <HAL_ADC_Init+0x16>
 8000d9c:	e0ec      	b.n	8000f78 <HAL_ADC_Init+0x1f0>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d9e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000da0:	2d00      	cmp	r5, #0
 8000da2:	d100      	bne.n	8000da6 <HAL_ADC_Init+0x1e>
 8000da4:	e0de      	b.n	8000f64 <HAL_ADC_Init+0x1dc>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000da6:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000da8:	6825      	ldr	r5, [r4, #0]
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	68aa      	ldr	r2, [r5, #8]
 8000dae:	421a      	tst	r2, r3
 8000db0:	d115      	bne.n	8000dde <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8000db2:	68aa      	ldr	r2, [r5, #8]
 8000db4:	4993      	ldr	r1, [pc, #588]	; (8001004 <HAL_ADC_Init+0x27c>)
 8000db6:	400a      	ands	r2, r1
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dbc:	4b92      	ldr	r3, [pc, #584]	; (8001008 <HAL_ADC_Init+0x280>)
 8000dbe:	4993      	ldr	r1, [pc, #588]	; (800100c <HAL_ADC_Init+0x284>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f7ff f9a1 	bl	8000108 <__udivsi3>
 8000dc6:	3001      	adds	r0, #1
 8000dc8:	0040      	lsls	r0, r0, #1
 8000dca:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8000dcc:	9b01      	ldr	r3, [sp, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8000dd2:	9b01      	ldr	r3, [sp, #4]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000dd8:	9b01      	ldr	r3, [sp, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f9      	bne.n	8000dd2 <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dde:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2000      	movs	r0, #0
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	d400      	bmi.n	8000de8 <HAL_ADC_Init+0x60>
 8000de6:	e0af      	b.n	8000f48 <HAL_ADC_Init+0x1c0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000de8:	68ab      	ldr	r3, [r5, #8]
 8000dea:	075b      	lsls	r3, r3, #29
 8000dec:	d50b      	bpl.n	8000e06 <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dee:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df0:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8000df2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000df6:	4313      	orrs	r3, r2
 8000df8:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bce0      	pop	{r5, r6, r7}
 8000dfe:	46ba      	mov	sl, r7
 8000e00:	46b1      	mov	r9, r6
 8000e02:	46a8      	mov	r8, r5
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e06:	2210      	movs	r2, #16
 8000e08:	0011      	movs	r1, r2
 8000e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e0c:	4019      	ands	r1, r3
 8000e0e:	468a      	mov	sl, r1
 8000e10:	421a      	tst	r2, r3
 8000e12:	d1ed      	bne.n	8000df0 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e16:	4a7e      	ldr	r2, [pc, #504]	; (8001010 <HAL_ADC_Init+0x288>)
  uint32_t tmpCFGR2 = 0UL;
 8000e18:	2600      	movs	r6, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	3206      	adds	r2, #6
 8000e1e:	32ff      	adds	r2, #255	; 0xff
 8000e20:	4313      	orrs	r3, r2
 8000e22:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e24:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e26:	07db      	lsls	r3, r3, #31
 8000e28:	d430      	bmi.n	8000e8c <HAL_ADC_Init+0x104>
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e2a:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e2c:	68eb      	ldr	r3, [r5, #12]
 8000e2e:	3216      	adds	r2, #22
 8000e30:	4393      	bics	r3, r2
 8000e32:	68a2      	ldr	r2, [r4, #8]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e34:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e36:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e38:	6862      	ldr	r2, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e3a:	60eb      	str	r3, [r5, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e3c:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e3e:	0f93      	lsrs	r3, r2, #30
 8000e40:	079b      	lsls	r3, r3, #30
 8000e42:	4698      	mov	r8, r3
 8000e44:	431e      	orrs	r6, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e46:	2f01      	cmp	r7, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_ADC_Init+0xd4>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000e4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e4e:	4319      	orrs	r1, r3
 8000e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e52:	430e      	orrs	r6, r1
 8000e54:	431e      	orrs	r6, r3
 8000e56:	4643      	mov	r3, r8
 8000e58:	431e      	orrs	r6, r3
 8000e5a:	433e      	orrs	r6, r7
      MODIFY_REG(hadc->Instance->CFGR2,
 8000e5c:	692b      	ldr	r3, [r5, #16]
 8000e5e:	4f6d      	ldr	r7, [pc, #436]	; (8001014 <HAL_ADC_Init+0x28c>)
 8000e60:	403b      	ands	r3, r7
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e62:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000e64:	4333      	orrs	r3, r6
 8000e66:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e68:	0053      	lsls	r3, r2, #1
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	05ff      	lsls	r7, r7, #23
 8000e6e:	42bb      	cmp	r3, r7
 8000e70:	d00c      	beq.n	8000e8c <HAL_ADC_Init+0x104>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	061b      	lsls	r3, r3, #24
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d008      	beq.n	8000e8c <HAL_ADC_Init+0x104>
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e7a:	4f67      	ldr	r7, [pc, #412]	; (8001018 <HAL_ADC_Init+0x290>)
 8000e7c:	4967      	ldr	r1, [pc, #412]	; (800101c <HAL_ADC_Init+0x294>)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	400b      	ands	r3, r1
 8000e82:	21f0      	movs	r1, #240	; 0xf0
 8000e84:	0389      	lsls	r1, r1, #14
 8000e86:	400a      	ands	r2, r1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	603a      	str	r2, [r7, #0]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e8c:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e8e:	7e63      	ldrb	r3, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e90:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e92:	03db      	lsls	r3, r3, #15
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e94:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e96:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e98:	7ea3      	ldrb	r3, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e9a:	4689      	mov	r9, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_ADC_Init+0x122>
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0149      	lsls	r1, r1, #5
 8000ea8:	4689      	mov	r9, r1
 8000eaa:	68e1      	ldr	r1, [r4, #12]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000eac:	6927      	ldr	r7, [r4, #16]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	2f00      	cmp	r7, #0
 8000eb4:	db5c      	blt.n	8000f70 <HAL_ADC_Init+0x1e8>
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	039b      	lsls	r3, r3, #14
 8000eba:	4698      	mov	r8, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ebc:	232c      	movs	r3, #44	; 0x2c
 8000ebe:	5ce3      	ldrb	r3, [r4, r3]
 8000ec0:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	4642      	mov	r2, r8
 8000eca:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ecc:	2220      	movs	r2, #32
 8000ece:	4690      	mov	r8, r2
 8000ed0:	5ca2      	ldrb	r2, [r4, r2]
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	2a01      	cmp	r2, #1
 8000ed6:	d071      	beq.n	8000fbc <HAL_ADC_Init+0x234>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ed8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d005      	beq.n	8000eea <HAL_ADC_Init+0x162>
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ede:	21e0      	movs	r1, #224	; 0xe0
 8000ee0:	0049      	lsls	r1, r1, #1
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR1,
 8000eea:	68ea      	ldr	r2, [r5, #12]
 8000eec:	494c      	ldr	r1, [pc, #304]	; (8001020 <HAL_ADC_Init+0x298>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	60ea      	str	r2, [r5, #12]
    MODIFY_REG(hadc->Instance->CFGR2,
 8000ef4:	692a      	ldr	r2, [r5, #16]
 8000ef6:	494b      	ldr	r1, [pc, #300]	; (8001024 <HAL_ADC_Init+0x29c>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	4316      	orrs	r6, r2
 8000efc:	612e      	str	r6, [r5, #16]
  MODIFY_REG(ADCx->SMPR,
 8000efe:	2607      	movs	r6, #7
 8000f00:	696a      	ldr	r2, [r5, #20]
 8000f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f04:	43b2      	bics	r2, r6
 8000f06:	430a      	orrs	r2, r1
 8000f08:	2170      	movs	r1, #112	; 0x70
 8000f0a:	616a      	str	r2, [r5, #20]
 8000f0c:	696e      	ldr	r6, [r5, #20]
 8000f0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f10:	438e      	bics	r6, r1
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	4332      	orrs	r2, r6
 8000f16:	616a      	str	r2, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f18:	2f00      	cmp	r7, #0
 8000f1a:	d12f      	bne.n	8000f7c <HAL_ADC_Init+0x1f4>
      SET_BIT(hadc->Instance->CHSELR,
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000f20:	4252      	negs	r2, r2
 8000f22:	430a      	orrs	r2, r1
 8000f24:	62aa      	str	r2, [r5, #40]	; 0x28
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f26:	68ea      	ldr	r2, [r5, #12]
 8000f28:	493f      	ldr	r1, [pc, #252]	; (8001028 <HAL_ADC_Init+0x2a0>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d04c      	beq.n	8000fca <HAL_ADC_Init+0x242>
      ADC_STATE_CLR_SET(hadc->State,
 8000f30:	2212      	movs	r2, #18
 8000f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000f36:	4393      	bics	r3, r2
 8000f38:	3a02      	subs	r2, #2
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f40:	3a0f      	subs	r2, #15
 8000f42:	4313      	orrs	r3, r2
 8000f44:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8000f46:	e758      	b.n	8000dfa <HAL_ADC_Init+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f48:	2210      	movs	r2, #16
 8000f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f4c:	3001      	adds	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f54:	3a0f      	subs	r2, #15
 8000f56:	4313      	orrs	r3, r2
 8000f58:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f5a:	68ab      	ldr	r3, [r5, #8]
 8000f5c:	075b      	lsls	r3, r3, #29
 8000f5e:	d400      	bmi.n	8000f62 <HAL_ADC_Init+0x1da>
 8000f60:	e751      	b.n	8000e06 <HAL_ADC_Init+0x7e>
 8000f62:	e744      	b.n	8000dee <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8000f64:	f7ff fdb0 	bl	8000ac8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8000f68:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6a:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000f6c:	54e5      	strb	r5, [r4, r3]
 8000f6e:	e71a      	b.n	8000da6 <HAL_ADC_Init+0x1e>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f70:	007b      	lsls	r3, r7, #1
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	4698      	mov	r8, r3
 8000f76:	e7a1      	b.n	8000ebc <HAL_ADC_Init+0x134>
    return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e73e      	b.n	8000dfa <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	0392      	lsls	r2, r2, #14
 8000f80:	4297      	cmp	r7, r2
 8000f82:	d1d0      	bne.n	8000f26 <HAL_ADC_Init+0x19e>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000f84:	270f      	movs	r7, #15
 8000f86:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000f88:	4652      	mov	r2, sl
 8000f8a:	0031      	movs	r1, r6
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	40d1      	lsrs	r1, r2
 8000f90:	000a      	movs	r2, r1
 8000f92:	403a      	ands	r2, r7
 8000f94:	2a0f      	cmp	r2, #15
 8000f96:	d02c      	beq.n	8000ff2 <HAL_ADC_Init+0x26a>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	44e2      	add	sl, ip
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	2a08      	cmp	r2, #8
 8000fa2:	d1f1      	bne.n	8000f88 <HAL_ADC_Init+0x200>
        MODIFY_REG(hadc->Instance->CHSELR,
 8000fa4:	211c      	movs	r1, #28
 8000fa6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000fa8:	69e2      	ldr	r2, [r4, #28]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4011      	ands	r1, r2
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	4252      	negs	r2, r2
 8000fb4:	408a      	lsls	r2, r1
 8000fb6:	4316      	orrs	r6, r2
 8000fb8:	62ae      	str	r6, [r5, #40]	; 0x28
 8000fba:	e7b4      	b.n	8000f26 <HAL_ADC_Init+0x19e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fbc:	4661      	mov	r1, ip
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_ADC_Init+0x254>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	e786      	b.n	8000ed8 <HAL_ADC_Init+0x150>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fd2:	4393      	bics	r3, r2
 8000fd4:	3a02      	subs	r2, #2
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8000fda:	e70e      	b.n	8000dfa <HAL_ADC_Init+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fdc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000fde:	468c      	mov	ip, r1
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	4649      	mov	r1, r9
 8000fea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fec:	4311      	orrs	r1, r2
 8000fee:	65e1      	str	r1, [r4, #92]	; 0x5c
 8000ff0:	e772      	b.n	8000ed8 <HAL_ADC_Init+0x150>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d1d5      	bne.n	8000fa4 <HAL_ADC_Init+0x21c>
        SET_BIT(hadc->Instance->CHSELR,
 8000ff8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000ffa:	3a11      	subs	r2, #17
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62aa      	str	r2, [r5, #40]	; 0x28
 8001000:	e791      	b.n	8000f26 <HAL_ADC_Init+0x19e>
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	6fffffe8 	.word	0x6fffffe8
 8001008:	20000000 	.word	0x20000000
 800100c:	00030d40 	.word	0x00030d40
 8001010:	fffffefd 	.word	0xfffffefd
 8001014:	1ffffc02 	.word	0x1ffffc02
 8001018:	40012708 	.word	0x40012708
 800101c:	ffc3ffff 	.word	0xffc3ffff
 8001020:	fffe0219 	.word	0xfffe0219
 8001024:	dffffc02 	.word	0xdffffc02
 8001028:	833fffe7 	.word	0x833fffe7

0800102c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	4645      	mov	r5, r8
 8001030:	46de      	mov	lr, fp
 8001032:	4657      	mov	r7, sl
 8001034:	464e      	mov	r6, r9
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001036:	2300      	movs	r3, #0
{
 8001038:	b5e0      	push	{r5, r6, r7, lr}
 800103a:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800103c:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800103e:	3354      	adds	r3, #84	; 0x54
 8001040:	5cc2      	ldrb	r2, [r0, r3]
{
 8001042:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001044:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001046:	2a01      	cmp	r2, #1
 8001048:	d100      	bne.n	800104c <HAL_ADC_ConfigChannel+0x20>
 800104a:	e091      	b.n	8001170 <HAL_ADC_ConfigChannel+0x144>
 800104c:	2001      	movs	r0, #1
 800104e:	2204      	movs	r2, #4
 8001050:	54e0      	strb	r0, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	689e      	ldr	r6, [r3, #8]
 8001056:	4232      	tst	r2, r6
 8001058:	d00d      	beq.n	8001076 <HAL_ADC_ConfigChannel+0x4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800105c:	321c      	adds	r2, #28
 800105e:	4313      	orrs	r3, r2
 8001060:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8001062:	2354      	movs	r3, #84	; 0x54
 8001064:	2200      	movs	r2, #0
 8001066:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8001068:	b005      	add	sp, #20
 800106a:	bcf0      	pop	{r4, r5, r6, r7}
 800106c:	46bb      	mov	fp, r7
 800106e:	46b2      	mov	sl, r6
 8001070:	46a9      	mov	r9, r5
 8001072:	46a0      	mov	r8, r4
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8001076:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001078:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 800107a:	2e02      	cmp	r6, #2
 800107c:	d05c      	beq.n	8001138 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800107e:	2780      	movs	r7, #128	; 0x80
 8001080:	063f      	lsls	r7, r7, #24
 8001082:	42bd      	cmp	r5, r7
 8001084:	d051      	beq.n	800112a <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001086:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001088:	270f      	movs	r7, #15
 800108a:	46aa      	mov	sl, r5
 800108c:	251f      	movs	r5, #31
 800108e:	46ac      	mov	ip, r5
 8001090:	4035      	ands	r5, r6
 8001092:	40af      	lsls	r7, r5
 8001094:	46a9      	mov	r9, r5
 8001096:	43fd      	mvns	r5, r7
 8001098:	9500      	str	r5, [sp, #0]
 800109a:	4655      	mov	r5, sl
 800109c:	43bd      	bics	r5, r7
 800109e:	46a8      	mov	r8, r5
 80010a0:	680d      	ldr	r5, [r1, #0]
 80010a2:	9701      	str	r7, [sp, #4]
 80010a4:	036f      	lsls	r7, r5, #13
 80010a6:	d16c      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x156>
 80010a8:	4660      	mov	r0, ip
 80010aa:	0eaa      	lsrs	r2, r5, #26
 80010ac:	4010      	ands	r0, r2
 80010ae:	0002      	movs	r2, r0
 80010b0:	4648      	mov	r0, r9
 80010b2:	4082      	lsls	r2, r0
 80010b4:	4640      	mov	r0, r8
 80010b6:	4310      	orrs	r0, r2
 80010b8:	4680      	mov	r8, r0
 80010ba:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80010bc:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010be:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80010c0:	69e2      	ldr	r2, [r4, #28]
 80010c2:	3601      	adds	r6, #1
 80010c4:	4296      	cmp	r6, r2
 80010c6:	d808      	bhi.n	80010da <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 80010c8:	464e      	mov	r6, r9
 80010ca:	00aa      	lsls	r2, r5, #2
 80010cc:	0f12      	lsrs	r2, r2, #28
 80010ce:	40b2      	lsls	r2, r6
 80010d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010d2:	9e00      	ldr	r6, [sp, #0]
 80010d4:	4030      	ands	r0, r6
 80010d6:	4302      	orrs	r2, r0
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80010da:	0228      	lsls	r0, r5, #8
 80010dc:	688a      	ldr	r2, [r1, #8]
 80010de:	0001      	movs	r1, r0
 80010e0:	695e      	ldr	r6, [r3, #20]
 80010e2:	4002      	ands	r2, r0
 80010e4:	4866      	ldr	r0, [pc, #408]	; (8001280 <HAL_ADC_ConfigChannel+0x254>)
 80010e6:	438e      	bics	r6, r1
 80010e8:	4002      	ands	r2, r0
 80010ea:	4332      	orrs	r2, r6
 80010ec:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	db01      	blt.n	80010f6 <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f2:	2000      	movs	r0, #0
}
 80010f4:	e7b5      	b.n	8001062 <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010f6:	21e0      	movs	r1, #224	; 0xe0
 80010f8:	4862      	ldr	r0, [pc, #392]	; (8001284 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010fa:	4a63      	ldr	r2, [pc, #396]	; (8001288 <HAL_ADC_ConfigChannel+0x25c>)
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	0449      	lsls	r1, r1, #17
 8001100:	4019      	ands	r1, r3
 8001102:	4295      	cmp	r5, r2
 8001104:	d051      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001106:	4a61      	ldr	r2, [pc, #388]	; (800128c <HAL_ADC_ConfigChannel+0x260>)
 8001108:	4295      	cmp	r5, r2
 800110a:	d045      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800110c:	4a60      	ldr	r2, [pc, #384]	; (8001290 <HAL_ADC_ConfigChannel+0x264>)
 800110e:	4295      	cmp	r5, r2
 8001110:	d1ef      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001112:	2580      	movs	r5, #128	; 0x80
 8001114:	03ed      	lsls	r5, r5, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001116:	422b      	tst	r3, r5
 8001118:	d1eb      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800111a:	6802      	ldr	r2, [r0, #0]
 800111c:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_ADC_ConfigChannel+0x268>)
 800111e:	401a      	ands	r2, r3
 8001120:	430a      	orrs	r2, r1
 8001122:	4315      	orrs	r5, r2
 8001124:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001126:	2000      	movs	r0, #0
}
 8001128:	e79b      	b.n	8001062 <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800112a:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800112c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800112e:	036a      	lsls	r2, r5, #13
 8001130:	0b52      	lsrs	r2, r2, #13
 8001132:	4302      	orrs	r2, r0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001136:	e7d0      	b.n	80010da <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	0612      	lsls	r2, r2, #24
 800113c:	4295      	cmp	r5, r2
 800113e:	d019      	beq.n	8001174 <HAL_ADC_ConfigChannel+0x148>
 8001140:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001142:	2a00      	cmp	r2, #0
 8001144:	dad5      	bge.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001146:	494f      	ldr	r1, [pc, #316]	; (8001284 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001148:	484f      	ldr	r0, [pc, #316]	; (8001288 <HAL_ADC_ConfigChannel+0x25c>)
 800114a:	680b      	ldr	r3, [r1, #0]
 800114c:	4282      	cmp	r2, r0
 800114e:	d029      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001150:	484e      	ldr	r0, [pc, #312]	; (800128c <HAL_ADC_ConfigChannel+0x260>)
 8001152:	4282      	cmp	r2, r0
 8001154:	d04c      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001156:	484e      	ldr	r0, [pc, #312]	; (8001290 <HAL_ADC_ConfigChannel+0x264>)
 8001158:	4282      	cmp	r2, r0
 800115a:	d1ca      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800115c:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800115e:	680a      	ldr	r2, [r1, #0]
 8001160:	0440      	lsls	r0, r0, #17
 8001162:	4003      	ands	r3, r0
 8001164:	484b      	ldr	r0, [pc, #300]	; (8001294 <HAL_ADC_ConfigChannel+0x268>)
 8001166:	4002      	ands	r2, r0
 8001168:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116a:	2000      	movs	r0, #0
 800116c:	600b      	str	r3, [r1, #0]
 800116e:	e778      	b.n	8001062 <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8001170:	2002      	movs	r0, #2
 8001172:	e779      	b.n	8001068 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001174:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001176:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001178:	0350      	lsls	r0, r2, #13
 800117a:	0b40      	lsrs	r0, r0, #13
 800117c:	4381      	bics	r1, r0
 800117e:	6299      	str	r1, [r3, #40]	; 0x28
}
 8001180:	e7df      	b.n	8001142 <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001182:	4228      	tst	r0, r5
 8001184:	d199      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x8e>
 8001186:	2702      	movs	r7, #2
 8001188:	422f      	tst	r7, r5
 800118a:	d02d      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0x1bc>
 800118c:	464a      	mov	r2, r9
 800118e:	4090      	lsls	r0, r2
 8001190:	4642      	mov	r2, r8
 8001192:	4302      	orrs	r2, r0
 8001194:	4690      	mov	r8, r2
 8001196:	e790      	b.n	80010ba <HAL_ADC_ConfigChannel+0x8e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001198:	2580      	movs	r5, #128	; 0x80
 800119a:	046d      	lsls	r5, r5, #17
 800119c:	422b      	tst	r3, r5
 800119e:	d0bc      	beq.n	800111a <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a0:	2000      	movs	r0, #0
 80011a2:	e75e      	b.n	8001062 <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011a4:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a6:	680a      	ldr	r2, [r1, #0]
 80011a8:	e7da      	b.n	8001160 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011aa:	2580      	movs	r5, #128	; 0x80
 80011ac:	042d      	lsls	r5, r5, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011ae:	422b      	tst	r3, r5
 80011b0:	d19f      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
 80011b2:	6802      	ldr	r2, [r0, #0]
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_ADC_ConfigChannel+0x268>)
 80011b6:	401a      	ands	r2, r3
 80011b8:	430a      	orrs	r2, r1
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_ADC_ConfigChannel+0x26c>)
 80011bc:	4315      	orrs	r5, r2
 80011be:	6005      	str	r5, [r0, #0]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	4936      	ldr	r1, [pc, #216]	; (800129c <HAL_ADC_ConfigChannel+0x270>)
 80011c4:	f7fe ffa0 	bl	8000108 <__udivsi3>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	0058      	lsls	r0, r3, #1
 80011cc:	18c0      	adds	r0, r0, r3
 80011ce:	0080      	lsls	r0, r0, #2
 80011d0:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 80011d2:	9b03      	ldr	r3, [sp, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d08c      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 80011d8:	9b03      	ldr	r3, [sp, #12]
 80011da:	3b01      	subs	r3, #1
 80011dc:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80011de:	9b03      	ldr	r3, [sp, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	e73c      	b.n	8001062 <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011e8:	422a      	tst	r2, r5
 80011ea:	d005      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x1cc>
 80011ec:	003a      	movs	r2, r7
 80011ee:	e75f      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011f0:	20c0      	movs	r0, #192	; 0xc0
 80011f2:	680a      	ldr	r2, [r1, #0]
 80011f4:	0400      	lsls	r0, r0, #16
 80011f6:	e7b4      	b.n	8001162 <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011f8:	072a      	lsls	r2, r5, #28
 80011fa:	d501      	bpl.n	8001200 <HAL_ADC_ConfigChannel+0x1d4>
 80011fc:	2203      	movs	r2, #3
 80011fe:	e757      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001200:	06ea      	lsls	r2, r5, #27
 8001202:	d501      	bpl.n	8001208 <HAL_ADC_ConfigChannel+0x1dc>
 8001204:	2204      	movs	r2, #4
 8001206:	e753      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001208:	06aa      	lsls	r2, r5, #26
 800120a:	d501      	bpl.n	8001210 <HAL_ADC_ConfigChannel+0x1e4>
 800120c:	2205      	movs	r2, #5
 800120e:	e74f      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001210:	066a      	lsls	r2, r5, #25
 8001212:	d501      	bpl.n	8001218 <HAL_ADC_ConfigChannel+0x1ec>
 8001214:	2206      	movs	r2, #6
 8001216:	e74b      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001218:	062a      	lsls	r2, r5, #24
 800121a:	d501      	bpl.n	8001220 <HAL_ADC_ConfigChannel+0x1f4>
 800121c:	2207      	movs	r2, #7
 800121e:	e747      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001220:	05ea      	lsls	r2, r5, #23
 8001222:	d501      	bpl.n	8001228 <HAL_ADC_ConfigChannel+0x1fc>
 8001224:	2208      	movs	r2, #8
 8001226:	e743      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001228:	05aa      	lsls	r2, r5, #22
 800122a:	d501      	bpl.n	8001230 <HAL_ADC_ConfigChannel+0x204>
 800122c:	2209      	movs	r2, #9
 800122e:	e73f      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001230:	056a      	lsls	r2, r5, #21
 8001232:	d501      	bpl.n	8001238 <HAL_ADC_ConfigChannel+0x20c>
 8001234:	220a      	movs	r2, #10
 8001236:	e73b      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001238:	052a      	lsls	r2, r5, #20
 800123a:	d501      	bpl.n	8001240 <HAL_ADC_ConfigChannel+0x214>
 800123c:	220b      	movs	r2, #11
 800123e:	e737      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001240:	04ea      	lsls	r2, r5, #19
 8001242:	d501      	bpl.n	8001248 <HAL_ADC_ConfigChannel+0x21c>
 8001244:	220c      	movs	r2, #12
 8001246:	e733      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001248:	04aa      	lsls	r2, r5, #18
 800124a:	d501      	bpl.n	8001250 <HAL_ADC_ConfigChannel+0x224>
 800124c:	220d      	movs	r2, #13
 800124e:	e72f      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001250:	046a      	lsls	r2, r5, #17
 8001252:	d501      	bpl.n	8001258 <HAL_ADC_ConfigChannel+0x22c>
 8001254:	220e      	movs	r2, #14
 8001256:	e72b      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001258:	042a      	lsls	r2, r5, #16
 800125a:	d504      	bpl.n	8001266 <HAL_ADC_ConfigChannel+0x23a>
 800125c:	4652      	mov	r2, sl
 800125e:	9801      	ldr	r0, [sp, #4]
 8001260:	4302      	orrs	r2, r0
 8001262:	4690      	mov	r8, r2
 8001264:	e729      	b.n	80010ba <HAL_ADC_ConfigChannel+0x8e>
 8001266:	03ea      	lsls	r2, r5, #15
 8001268:	d501      	bpl.n	800126e <HAL_ADC_ConfigChannel+0x242>
 800126a:	2210      	movs	r2, #16
 800126c:	e720      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 800126e:	03aa      	lsls	r2, r5, #14
 8001270:	d501      	bpl.n	8001276 <HAL_ADC_ConfigChannel+0x24a>
 8001272:	2211      	movs	r2, #17
 8001274:	e71c      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001276:	036a      	lsls	r2, r5, #13
 8001278:	d400      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x250>
 800127a:	e71e      	b.n	80010ba <HAL_ADC_ConfigChannel+0x8e>
 800127c:	2212      	movs	r2, #18
 800127e:	e717      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x84>
 8001280:	07ffff00 	.word	0x07ffff00
 8001284:	40012708 	.word	0x40012708
 8001288:	b0001000 	.word	0xb0001000
 800128c:	b8004000 	.word	0xb8004000
 8001290:	b4002000 	.word	0xb4002000
 8001294:	fe3fffff 	.word	0xfe3fffff
 8001298:	20000000 	.word	0x20000000
 800129c:	00030d40 	.word	0x00030d40

080012a0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80012a0:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a2:	2201      	movs	r2, #1
{
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80012a8:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012aa:	6803      	ldr	r3, [r0, #0]
{
 80012ac:	0004      	movs	r4, r0
 80012ae:	6899      	ldr	r1, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012b0:	420a      	tst	r2, r1
 80012b2:	d11f      	bne.n	80012f4 <ADC_Enable+0x54>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80012b4:	6898      	ldr	r0, [r3, #8]
 80012b6:	4928      	ldr	r1, [pc, #160]	; (8001358 <ADC_Enable+0xb8>)
 80012b8:	4208      	tst	r0, r1
 80012ba:	d11e      	bne.n	80012fa <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80012bc:	6899      	ldr	r1, [r3, #8]
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <ADC_Enable+0xbc>)
 80012c0:	4001      	ands	r1, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <ADC_Enable+0xc0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	d50f      	bpl.n	80012ee <ADC_Enable+0x4e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <ADC_Enable+0xc4>)
 80012d0:	4925      	ldr	r1, [pc, #148]	; (8001368 <ADC_Enable+0xc8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f7fe ff18 	bl	8000108 <__udivsi3>
 80012d8:	3001      	adds	r0, #1
 80012da:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <ADC_Enable+0x4e>
      {
        wait_loop_index--;
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80012e8:	9b01      	ldr	r3, [sp, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <ADC_Enable+0x42>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012ee:	7e63      	ldrb	r3, [r4, #25]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10b      	bne.n	800130c <ADC_Enable+0x6c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80012f4:	2000      	movs	r0, #0
}
 80012f6:	b003      	add	sp, #12
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	2110      	movs	r1, #16
 80012fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80012fe:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	430b      	orrs	r3, r1
 8001302:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001304:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001306:	431a      	orrs	r2, r3
 8001308:	65e2      	str	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800130a:	e7f4      	b.n	80012f6 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 800130c:	f7ff fd36 	bl	8000d7c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001310:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001312:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	07d2      	lsls	r2, r2, #31
 8001318:	d4ec      	bmi.n	80012f4 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800131a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800131c:	4f0f      	ldr	r7, [pc, #60]	; (800135c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800131e:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001320:	4215      	tst	r5, r2
 8001322:	d103      	bne.n	800132c <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	403a      	ands	r2, r7
 8001328:	432a      	orrs	r2, r5
 800132a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800132c:	f7ff fd26 	bl	8000d7c <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001330:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001332:	1b80      	subs	r0, r0, r6
 8001334:	2802      	cmp	r0, #2
 8001336:	d902      	bls.n	800133e <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4215      	tst	r5, r2
 800133c:	d003      	beq.n	8001346 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4215      	tst	r5, r2
 8001342:	d0ec      	beq.n	800131e <ADC_Enable+0x7e>
 8001344:	e7d6      	b.n	80012f4 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	2210      	movs	r2, #16
 8001348:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134c:	4313      	orrs	r3, r2
 800134e:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001350:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001352:	431d      	orrs	r5, r3
 8001354:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8001356:	e7ce      	b.n	80012f6 <ADC_Enable+0x56>
 8001358:	80000017 	.word	0x80000017
 800135c:	7fffffe8 	.word	0x7fffffe8
 8001360:	40012708 	.word	0x40012708
 8001364:	20000000 	.word	0x20000000
 8001368:	00030d40 	.word	0x00030d40

0800136c <HAL_ADC_Start>:
{
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800136e:	2504      	movs	r5, #4
 8001370:	002f      	movs	r7, r5
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001372:	6803      	ldr	r3, [r0, #0]
{
 8001374:	0004      	movs	r4, r0
 8001376:	689b      	ldr	r3, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 8001378:	2002      	movs	r0, #2
 800137a:	401f      	ands	r7, r3
 800137c:	421d      	tst	r5, r3
 800137e:	d11b      	bne.n	80013b8 <HAL_ADC_Start+0x4c>
    __HAL_LOCK(hadc);
 8001380:	2654      	movs	r6, #84	; 0x54
 8001382:	5da3      	ldrb	r3, [r4, r6]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d017      	beq.n	80013b8 <HAL_ADC_Start+0x4c>
 8001388:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800138a:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 800138c:	55a3      	strb	r3, [r4, r6]
    tmp_hal_status = ADC_Enable(hadc);
 800138e:	f7ff ff87 	bl	80012a0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001392:	2800      	cmp	r0, #0
 8001394:	d111      	bne.n	80013ba <HAL_ADC_Start+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8001396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 800139a:	490a      	ldr	r1, [pc, #40]	; (80013c4 <HAL_ADC_Start+0x58>)
 800139c:	401a      	ands	r2, r3
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4313      	orrs	r3, r2
 80013a4:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013a6:	231c      	movs	r3, #28
 80013a8:	6822      	ldr	r2, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80013aa:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013ac:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 80013ae:	55a0      	strb	r0, [r4, r6]
 80013b0:	6893      	ldr	r3, [r2, #8]
 80013b2:	400b      	ands	r3, r1
 80013b4:	432b      	orrs	r3, r5
 80013b6:	6093      	str	r3, [r2, #8]
}
 80013b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 80013ba:	55a7      	strb	r7, [r4, r6]
 80013bc:	e7fc      	b.n	80013b8 <HAL_ADC_Start+0x4c>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	fffff0fe 	.word	0xfffff0fe
 80013c4:	7fffffe8 	.word	0x7fffffe8

080013c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80013ca:	2800      	cmp	r0, #0
 80013cc:	db14      	blt.n	80013f8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_NVIC_SetPriority+0x5c>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	469c      	mov	ip, r3
 80013d4:	23ff      	movs	r3, #255	; 0xff
 80013d6:	0884      	lsrs	r4, r0, #2
 80013d8:	4010      	ands	r0, r2
 80013da:	001a      	movs	r2, r3
 80013dc:	26c0      	movs	r6, #192	; 0xc0
 80013de:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e4:	400b      	ands	r3, r1
 80013e6:	4083      	lsls	r3, r0
 80013e8:	00a4      	lsls	r4, r4, #2
 80013ea:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	00b6      	lsls	r6, r6, #2
 80013ee:	59a5      	ldr	r5, [r4, r6]
 80013f0:	4395      	bics	r5, r2
 80013f2:	432b      	orrs	r3, r5
 80013f4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_NVIC_SetPriority+0x60>)
 80013fa:	230f      	movs	r3, #15
 80013fc:	4694      	mov	ip, r2
 80013fe:	2203      	movs	r2, #3
 8001400:	4003      	ands	r3, r0
 8001402:	4010      	ands	r0, r2
 8001404:	32fc      	adds	r2, #252	; 0xfc
 8001406:	0015      	movs	r5, r2
 8001408:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	400a      	ands	r2, r1
 8001410:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001412:	3b08      	subs	r3, #8
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4463      	add	r3, ip
 800141a:	69dc      	ldr	r4, [r3, #28]
 800141c:	43ac      	bics	r4, r5
 800141e:	4322      	orrs	r2, r4
 8001420:	61da      	str	r2, [r3, #28]
 8001422:	e7e8      	b.n	80013f6 <HAL_NVIC_SetPriority+0x2e>
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800142c:	2800      	cmp	r0, #0
 800142e:	db05      	blt.n	800143c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001430:	231f      	movs	r3, #31
 8001432:	4018      	ands	r0, r3
 8001434:	3b1e      	subs	r3, #30
 8001436:	4083      	lsls	r3, r0
 8001438:	4a01      	ldr	r2, [pc, #4]	; (8001440 <HAL_NVIC_EnableIRQ+0x14>)
 800143a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800143c:	4770      	bx	lr
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	e000e100 	.word	0xe000e100

08001444 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	46c6      	mov	lr, r8
 8001448:	0004      	movs	r4, r0
 800144a:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800144c:	2800      	cmp	r0, #0
 800144e:	d062      	beq.n	8001516 <HAL_DMA_Init+0xd2>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001450:	6805      	ldr	r5, [r0, #0]
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_DMA_Init+0xd8>)
 8001454:	2114      	movs	r1, #20
 8001456:	18e8      	adds	r0, r5, r3
 8001458:	f7fe fe56 	bl	8000108 <__udivsi3>
 800145c:	0083      	lsls	r3, r0, #2
 800145e:	6423      	str	r3, [r4, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001460:	2202      	movs	r2, #2
 8001462:	2325      	movs	r3, #37	; 0x25
 8001464:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_DMA_Init+0xdc>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800146a:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800146c:	4013      	ands	r3, r2
 800146e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001470:	68e3      	ldr	r3, [r4, #12]
 8001472:	6921      	ldr	r1, [r4, #16]
 8001474:	4333      	orrs	r3, r6
 8001476:	430b      	orrs	r3, r1
 8001478:	6961      	ldr	r1, [r4, #20]
 800147a:	682a      	ldr	r2, [r5, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	69a1      	ldr	r1, [r4, #24]
 8001480:	430b      	orrs	r3, r1
 8001482:	69e1      	ldr	r1, [r4, #28]
 8001484:	430b      	orrs	r3, r1
 8001486:	6a21      	ldr	r1, [r4, #32]
 8001488:	430b      	orrs	r3, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001490:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001492:	469c      	mov	ip, r3
 8001494:	4460      	add	r0, ip
 8001496:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001498:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800149c:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800149e:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014a0:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a2:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014a4:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a6:	f7fe fe2f 	bl	8000108 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014aa:	231f      	movs	r3, #31
 80014ac:	2201      	movs	r2, #1
 80014ae:	4003      	ands	r3, r0
 80014b0:	0010      	movs	r0, r2
 80014b2:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014b4:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014b6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	429e      	cmp	r6, r3
 80014bc:	d021      	beq.n	8001502 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014be:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c0:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014c2:	6861      	ldr	r1, [r4, #4]
 80014c4:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014c6:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014c8:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ca:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014cc:	2903      	cmp	r1, #3
 80014ce:	d81d      	bhi.n	800150c <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014d0:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014d2:	4916      	ldr	r1, [pc, #88]	; (800152c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014d4:	4d16      	ldr	r5, [pc, #88]	; (8001530 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014d6:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014d8:	3b01      	subs	r3, #1
 80014da:	4003      	ands	r3, r0
 80014dc:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014de:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014e0:	0089      	lsls	r1, r1, #2
 80014e2:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014e4:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014e6:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014e8:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ea:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014ee:	2225      	movs	r2, #37	; 0x25
 80014f0:	2101      	movs	r1, #1
  return HAL_OK;
 80014f2:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80014f6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80014f8:	3a01      	subs	r2, #1
 80014fa:	54a3      	strb	r3, [r4, r2]
}
 80014fc:	bc80      	pop	{r7}
 80014fe:	46b8      	mov	r8, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001502:	2300      	movs	r3, #0
 8001504:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001506:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001508:	4643      	mov	r3, r8
 800150a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001510:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001512:	65a3      	str	r3, [r4, #88]	; 0x58
 8001514:	e7ea      	b.n	80014ec <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e7f0      	b.n	80014fc <HAL_DMA_Init+0xb8>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	bffdfff8 	.word	0xbffdfff8
 8001520:	ffff800f 	.word	0xffff800f
 8001524:	10008200 	.word	0x10008200
 8001528:	40020880 	.word	0x40020880
 800152c:	1000823f 	.word	0x1000823f
 8001530:	40020940 	.word	0x40020940

08001534 <HAL_DMA_Abort>:
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8001536:	2800      	cmp	r0, #0
 8001538:	d034      	beq.n	80015a4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	2325      	movs	r3, #37	; 0x25
 800153c:	5cc3      	ldrb	r3, [r0, r3]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d129      	bne.n	8001596 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001542:	210e      	movs	r1, #14
 8001544:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001546:	4c18      	ldr	r4, [pc, #96]	; (80015a8 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001548:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800154a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154c:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800154e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001552:	680b      	ldr	r3, [r1, #0]
 8001554:	4023      	ands	r3, r4
 8001556:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001558:	2301      	movs	r3, #1
 800155a:	6811      	ldr	r1, [r2, #0]
 800155c:	4399      	bics	r1, r3
 800155e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001560:	221c      	movs	r2, #28
 8001562:	4032      	ands	r2, r6
 8001564:	4093      	lsls	r3, r2
 8001566:	4911      	ldr	r1, [pc, #68]	; (80015ac <HAL_DMA_Abort+0x78>)
 8001568:	684d      	ldr	r5, [r1, #4]
 800156a:	432b      	orrs	r3, r5
 800156c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001570:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001572:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001574:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4014      	ands	r4, r2
 800157e:	601c      	str	r4, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001580:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001582:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001584:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	2325      	movs	r3, #37	; 0x25
 8001588:	2201      	movs	r2, #1
 800158a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800158c:	2200      	movs	r2, #0
 800158e:	3b01      	subs	r3, #1
 8001590:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001592:	2000      	movs	r0, #0
}
 8001594:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001596:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8001598:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800159c:	3320      	adds	r3, #32
 800159e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
 80015a2:	e7f7      	b.n	8001594 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
 80015a6:	e7f5      	b.n	8001594 <HAL_DMA_Abort+0x60>
 80015a8:	fffffeff 	.word	0xfffffeff
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	2325      	movs	r3, #37	; 0x25
{
 80015b2:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015b4:	5cc3      	ldrb	r3, [r0, r3]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d003      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	2304      	movs	r3, #4
 80015bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80015be:	2001      	movs	r0, #1
}
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c2:	210e      	movs	r1, #14
 80015c4:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015c6:	4c17      	ldr	r4, [pc, #92]	; (8001624 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015ca:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015cc:	438b      	bics	r3, r1
 80015ce:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80015d0:	2301      	movs	r3, #1
 80015d2:	6811      	ldr	r1, [r2, #0]
 80015d4:	4399      	bics	r1, r3
 80015d6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80015da:	680a      	ldr	r2, [r1, #0]
 80015dc:	4022      	ands	r2, r4
 80015de:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015e0:	221c      	movs	r2, #28
 80015e2:	4032      	ands	r2, r6
 80015e4:	4093      	lsls	r3, r2
 80015e6:	4910      	ldr	r1, [pc, #64]	; (8001628 <HAL_DMA_Abort_IT+0x78>)
 80015e8:	684d      	ldr	r5, [r1, #4]
 80015ea:	432b      	orrs	r3, r5
 80015ec:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ee:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80015f0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80015f2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80015f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4022      	ands	r2, r4
 80015fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001600:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001602:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001604:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	2325      	movs	r3, #37	; 0x25
 8001608:	2201      	movs	r2, #1
 800160a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800160c:	2200      	movs	r2, #0
 800160e:	3b01      	subs	r3, #1
 8001610:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001612:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001618:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2000      	movs	r0, #0
 800161c:	e7d0      	b.n	80015c0 <HAL_DMA_Abort_IT+0x10>
 800161e:	2000      	movs	r0, #0
 8001620:	e7ce      	b.n	80015c0 <HAL_DMA_Abort_IT+0x10>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	fffffeff 	.word	0xfffffeff
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_DMA_IRQHandler+0xb4>)
{
 800162e:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8001630:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001632:	2504      	movs	r5, #4
 8001634:	231c      	movs	r3, #28
 8001636:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001638:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163a:	4023      	ands	r3, r4
 800163c:	002c      	movs	r4, r5
 800163e:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001640:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001642:	4222      	tst	r2, r4
 8001644:	d010      	beq.n	8001668 <HAL_DMA_IRQHandler+0x3c>
 8001646:	4235      	tst	r5, r6
 8001648:	d00e      	beq.n	8001668 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164a:	680b      	ldr	r3, [r1, #0]
 800164c:	069b      	lsls	r3, r3, #26
 800164e:	d402      	bmi.n	8001656 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001650:	680b      	ldr	r3, [r1, #0]
 8001652:	43ab      	bics	r3, r5
 8001654:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_DMA_IRQHandler+0xb4>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4314      	orrs	r4, r2
 800165c:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800165e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8001664:	4798      	blx	r3
}
 8001666:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001668:	2502      	movs	r5, #2
 800166a:	002c      	movs	r4, r5
 800166c:	409c      	lsls	r4, r3
 800166e:	4222      	tst	r2, r4
 8001670:	d017      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x76>
 8001672:	4235      	tst	r5, r6
 8001674:	d015      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001676:	680b      	ldr	r3, [r1, #0]
 8001678:	069b      	lsls	r3, r3, #26
 800167a:	d406      	bmi.n	800168a <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800167c:	220a      	movs	r2, #10
 800167e:	680b      	ldr	r3, [r1, #0]
 8001680:	4393      	bics	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001684:	2325      	movs	r3, #37	; 0x25
 8001686:	3a09      	subs	r2, #9
 8001688:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_DMA_IRQHandler+0xb4>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4314      	orrs	r4, r2
 8001690:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001692:	2200      	movs	r2, #0
 8001694:	2324      	movs	r3, #36	; 0x24
 8001696:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8001698:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0e3      	beq.n	8001666 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800169e:	4798      	blx	r3
  return;
 80016a0:	e7e1      	b.n	8001666 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016a2:	2408      	movs	r4, #8
 80016a4:	0025      	movs	r5, r4
 80016a6:	409d      	lsls	r5, r3
 80016a8:	422a      	tst	r2, r5
 80016aa:	d0dc      	beq.n	8001666 <HAL_DMA_IRQHandler+0x3a>
 80016ac:	4234      	tst	r4, r6
 80016ae:	d0da      	beq.n	8001666 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	680a      	ldr	r2, [r1, #0]
 80016b2:	3406      	adds	r4, #6
 80016b4:	43a2      	bics	r2, r4
 80016b6:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80016b8:	2201      	movs	r2, #1
 80016ba:	0015      	movs	r5, r2
 80016bc:	409d      	lsls	r5, r3
 80016be:	002b      	movs	r3, r5
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <HAL_DMA_IRQHandler+0xb4>)
 80016c2:	684c      	ldr	r4, [r1, #4]
 80016c4:	4323      	orrs	r3, r4
 80016c6:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016c8:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ca:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80016cc:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80016ce:	2200      	movs	r2, #0
 80016d0:	3b01      	subs	r3, #1
 80016d2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80016d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0c5      	beq.n	8001666 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80016da:	4798      	blx	r3
  return;
 80016dc:	e7c3      	b.n	8001666 <HAL_DMA_IRQHandler+0x3a>
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	464e      	mov	r6, r9
 80016e8:	46de      	mov	lr, fp
 80016ea:	4657      	mov	r7, sl
 80016ec:	4645      	mov	r5, r8
 80016ee:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f0:	680a      	ldr	r2, [r1, #0]
{
 80016f2:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 80016f4:	2300      	movs	r3, #0
{
 80016f6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d066      	beq.n	80017ca <HAL_GPIO_Init+0xe6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016fc:	2401      	movs	r4, #1
 80016fe:	0015      	movs	r5, r2
 8001700:	409c      	lsls	r4, r3
 8001702:	4025      	ands	r5, r4
 8001704:	46ac      	mov	ip, r5

    if (iocurrent != 0x00u)
 8001706:	4222      	tst	r2, r4
 8001708:	d05b      	beq.n	80017c2 <HAL_GPIO_Init+0xde>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800170a:	464d      	mov	r5, r9
 800170c:	2703      	movs	r7, #3
 800170e:	686d      	ldr	r5, [r5, #4]
 8001710:	402f      	ands	r7, r5
 8001712:	1e7e      	subs	r6, r7, #1
 8001714:	2e01      	cmp	r6, #1
 8001716:	d95f      	bls.n	80017d8 <HAL_GPIO_Init+0xf4>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	0059      	lsls	r1, r3, #1
 800171a:	4688      	mov	r8, r1
 800171c:	2f03      	cmp	r7, #3
 800171e:	d000      	beq.n	8001722 <HAL_GPIO_Init+0x3e>
 8001720:	e0a6      	b.n	8001870 <HAL_GPIO_Init+0x18c>
 8001722:	003c      	movs	r4, r7
 8001724:	408c      	lsls	r4, r1
 8001726:	43e1      	mvns	r1, r4
 8001728:	9101      	str	r1, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172c:	9e01      	ldr	r6, [sp, #4]
 800172e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001730:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001732:	24c0      	movs	r4, #192	; 0xc0
 8001734:	02a4      	lsls	r4, r4, #10
      GPIOx->MODER = temp;
 8001736:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001738:	4225      	tst	r5, r4
 800173a:	d042      	beq.n	80017c2 <HAL_GPIO_Init+0xde>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800173c:	495b      	ldr	r1, [pc, #364]	; (80018ac <HAL_GPIO_Init+0x1c8>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800173e:	2703      	movs	r7, #3
 8001740:	4688      	mov	r8, r1
 8001742:	210f      	movs	r1, #15
 8001744:	401f      	ands	r7, r3
 8001746:	00ff      	lsls	r7, r7, #3
 8001748:	40b9      	lsls	r1, r7
        temp = EXTI->EXTICR[position >> 2u];
 800174a:	089c      	lsrs	r4, r3, #2
 800174c:	00a4      	lsls	r4, r4, #2
 800174e:	4444      	add	r4, r8
 8001750:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001752:	438e      	bics	r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001754:	21a0      	movs	r1, #160	; 0xa0
 8001756:	05c9      	lsls	r1, r1, #23
 8001758:	4288      	cmp	r0, r1
 800175a:	d00e      	beq.n	800177a <HAL_GPIO_Init+0x96>
 800175c:	4954      	ldr	r1, [pc, #336]	; (80018b0 <HAL_GPIO_Init+0x1cc>)
 800175e:	4288      	cmp	r0, r1
 8001760:	d100      	bne.n	8001764 <HAL_GPIO_Init+0x80>
 8001762:	e09b      	b.n	800189c <HAL_GPIO_Init+0x1b8>
 8001764:	4953      	ldr	r1, [pc, #332]	; (80018b4 <HAL_GPIO_Init+0x1d0>)
 8001766:	4288      	cmp	r0, r1
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x88>
 800176a:	e09b      	b.n	80018a4 <HAL_GPIO_Init+0x1c0>
 800176c:	4952      	ldr	r1, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x1d4>)
 800176e:	4288      	cmp	r0, r1
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_Init+0x90>
 8001772:	e08f      	b.n	8001894 <HAL_GPIO_Init+0x1b0>
 8001774:	2105      	movs	r1, #5
 8001776:	40b9      	lsls	r1, r7
 8001778:	430e      	orrs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800177a:	2180      	movs	r1, #128	; 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 800177c:	6626      	str	r6, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 800177e:	4c4b      	ldr	r4, [pc, #300]	; (80018ac <HAL_GPIO_Init+0x1c8>)
 8001780:	5864      	ldr	r4, [r4, r1]
        temp &= ~(iocurrent);
 8001782:	4661      	mov	r1, ip
 8001784:	43cf      	mvns	r7, r1
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0249      	lsls	r1, r1, #9
 800178a:	420d      	tst	r5, r1
 800178c:	d000      	beq.n	8001790 <HAL_GPIO_Init+0xac>
 800178e:	e07e      	b.n	800188e <HAL_GPIO_Init+0x1aa>
        temp &= ~(iocurrent);
 8001790:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	4e45      	ldr	r6, [pc, #276]	; (80018ac <HAL_GPIO_Init+0x1c8>)
 8001796:	5074      	str	r4, [r6, r1]

        temp = EXTI->EMR1;
 8001798:	2484      	movs	r4, #132	; 0x84
 800179a:	5936      	ldr	r6, [r6, r4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179c:	03a9      	lsls	r1, r5, #14
 800179e:	d500      	bpl.n	80017a2 <HAL_GPIO_Init+0xbe>
 80017a0:	e072      	b.n	8001888 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80017a2:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80017a4:	2484      	movs	r4, #132	; 0x84
 80017a6:	4941      	ldr	r1, [pc, #260]	; (80018ac <HAL_GPIO_Init+0x1c8>)
 80017a8:	510e      	str	r6, [r1, r4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017aa:	680e      	ldr	r6, [r1, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ac:	02e9      	lsls	r1, r5, #11
 80017ae:	d468      	bmi.n	8001882 <HAL_GPIO_Init+0x19e>
        temp &= ~(iocurrent);
 80017b0:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80017b2:	493e      	ldr	r1, [pc, #248]	; (80018ac <HAL_GPIO_Init+0x1c8>)
 80017b4:	600e      	str	r6, [r1, #0]

        temp = EXTI->FTSR1;
 80017b6:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b8:	02a9      	lsls	r1, r5, #10
 80017ba:	d45e      	bmi.n	800187a <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 80017bc:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80017be:	493b      	ldr	r1, [pc, #236]	; (80018ac <HAL_GPIO_Init+0x1c8>)
 80017c0:	604c      	str	r4, [r1, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	0014      	movs	r4, r2
      }
    }

    position++;
 80017c4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	40dc      	lsrs	r4, r3
 80017c8:	d198      	bne.n	80016fc <HAL_GPIO_Init+0x18>
  }
}
 80017ca:	b003      	add	sp, #12
 80017cc:	bcf0      	pop	{r4, r5, r6, r7}
 80017ce:	46bb      	mov	fp, r7
 80017d0:	46b2      	mov	sl, r6
 80017d2:	46a9      	mov	r9, r5
 80017d4:	46a0      	mov	r8, r4
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80017d8:	6881      	ldr	r1, [r0, #8]
 80017da:	468a      	mov	sl, r1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017dc:	0059      	lsls	r1, r3, #1
 80017de:	4688      	mov	r8, r1
 80017e0:	2103      	movs	r1, #3
 80017e2:	4646      	mov	r6, r8
 80017e4:	40b1      	lsls	r1, r6
 80017e6:	468b      	mov	fp, r1
 80017e8:	43c9      	mvns	r1, r1
 80017ea:	465e      	mov	r6, fp
 80017ec:	9101      	str	r1, [sp, #4]
 80017ee:	4651      	mov	r1, sl
 80017f0:	43b1      	bics	r1, r6
 80017f2:	468b      	mov	fp, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f4:	4649      	mov	r1, r9
 80017f6:	4646      	mov	r6, r8
 80017f8:	68c9      	ldr	r1, [r1, #12]
 80017fa:	40b1      	lsls	r1, r6
 80017fc:	468a      	mov	sl, r1
 80017fe:	4659      	mov	r1, fp
 8001800:	4656      	mov	r6, sl
 8001802:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8001804:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8001806:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001808:	43a1      	bics	r1, r4
 800180a:	468a      	mov	sl, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	2101      	movs	r1, #1
 800180e:	092c      	lsrs	r4, r5, #4
 8001810:	400c      	ands	r4, r1
 8001812:	409c      	lsls	r4, r3
 8001814:	4651      	mov	r1, sl
 8001816:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 8001818:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800181a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800181c:	9901      	ldr	r1, [sp, #4]
 800181e:	400c      	ands	r4, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001820:	4649      	mov	r1, r9
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001822:	46a2      	mov	sl, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001824:	688c      	ldr	r4, [r1, #8]
 8001826:	4641      	mov	r1, r8
 8001828:	408c      	lsls	r4, r1
 800182a:	4651      	mov	r1, sl
 800182c:	430c      	orrs	r4, r1
        GPIOx->PUPDR = temp;
 800182e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	4641      	mov	r1, r8
 8001832:	003c      	movs	r4, r7
 8001834:	408c      	lsls	r4, r1
 8001836:	2f02      	cmp	r7, #2
 8001838:	d000      	beq.n	800183c <HAL_GPIO_Init+0x158>
 800183a:	e776      	b.n	800172a <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 800183c:	08df      	lsrs	r7, r3, #3
 800183e:	00bf      	lsls	r7, r7, #2
 8001840:	46b8      	mov	r8, r7
 8001842:	4480      	add	r8, r0
 8001844:	4641      	mov	r1, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001846:	2707      	movs	r7, #7
        temp = GPIOx->AFR[position >> 3u];
 8001848:	6a09      	ldr	r1, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184a:	401f      	ands	r7, r3
        temp = GPIOx->AFR[position >> 3u];
 800184c:	468a      	mov	sl, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184e:	210f      	movs	r1, #15
 8001850:	00bf      	lsls	r7, r7, #2
 8001852:	40b9      	lsls	r1, r7
 8001854:	468b      	mov	fp, r1
 8001856:	4651      	mov	r1, sl
 8001858:	465e      	mov	r6, fp
 800185a:	43b1      	bics	r1, r6
 800185c:	468a      	mov	sl, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185e:	4649      	mov	r1, r9
 8001860:	6909      	ldr	r1, [r1, #16]
 8001862:	40b9      	lsls	r1, r7
 8001864:	000f      	movs	r7, r1
 8001866:	4651      	mov	r1, sl
 8001868:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800186a:	4641      	mov	r1, r8
 800186c:	620f      	str	r7, [r1, #32]
 800186e:	e75c      	b.n	800172a <HAL_GPIO_Init+0x46>
 8001870:	2603      	movs	r6, #3
 8001872:	408e      	lsls	r6, r1
 8001874:	43f1      	mvns	r1, r6
 8001876:	9101      	str	r1, [sp, #4]
 8001878:	e7cf      	b.n	800181a <HAL_GPIO_Init+0x136>
          temp |= iocurrent;
 800187a:	4661      	mov	r1, ip
 800187c:	4321      	orrs	r1, r4
 800187e:	000c      	movs	r4, r1
 8001880:	e79d      	b.n	80017be <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 8001882:	4661      	mov	r1, ip
 8001884:	430e      	orrs	r6, r1
 8001886:	e794      	b.n	80017b2 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8001888:	4661      	mov	r1, ip
 800188a:	430e      	orrs	r6, r1
 800188c:	e78a      	b.n	80017a4 <HAL_GPIO_Init+0xc0>
          temp |= iocurrent;
 800188e:	4661      	mov	r1, ip
 8001890:	430c      	orrs	r4, r1
 8001892:	e77e      	b.n	8001792 <HAL_GPIO_Init+0xae>
 8001894:	2103      	movs	r1, #3
 8001896:	40b9      	lsls	r1, r7
 8001898:	430e      	orrs	r6, r1
 800189a:	e76e      	b.n	800177a <HAL_GPIO_Init+0x96>
 800189c:	2101      	movs	r1, #1
 800189e:	40b9      	lsls	r1, r7
 80018a0:	430e      	orrs	r6, r1
 80018a2:	e76a      	b.n	800177a <HAL_GPIO_Init+0x96>
 80018a4:	2102      	movs	r1, #2
 80018a6:	40b9      	lsls	r1, r7
 80018a8:	430e      	orrs	r6, r1
 80018aa:	e766      	b.n	800177a <HAL_GPIO_Init+0x96>
 80018ac:	40021800 	.word	0x40021800
 80018b0:	50000400 	.word	0x50000400
 80018b4:	50000800 	.word	0x50000800
 80018b8:	50000c00 	.word	0x50000c00

080018bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018bc:	6900      	ldr	r0, [r0, #16]
 80018be:	4008      	ands	r0, r1
 80018c0:	1e41      	subs	r1, r0, #1
 80018c2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80018c4:	b2c0      	uxtb	r0, r0
}
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ce:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80018d2:	e7fc      	b.n	80018ce <HAL_GPIO_WritePin+0x6>

080018d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018d6:	4c13      	ldr	r4, [pc, #76]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80018d8:	4a13      	ldr	r2, [pc, #76]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80018da:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80018dc:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018de:	4013      	ands	r3, r2
 80018e0:	4303      	orrs	r3, r0
 80018e2:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4298      	cmp	r0, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80018ec:	0028      	movs	r0, r5
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_PWREx_ControlVoltageScaling+0x58>)
 80018f2:	490f      	ldr	r1, [pc, #60]	; (8001930 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0058      	lsls	r0, r3, #1
 80018f8:	18c0      	adds	r0, r0, r3
 80018fa:	0040      	lsls	r0, r0, #1
 80018fc:	f7fe fc04 	bl	8000108 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	6961      	ldr	r1, [r4, #20]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	001a      	movs	r2, r3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001908:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190a:	4219      	tst	r1, r3
 800190c:	d102      	bne.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x40>
 800190e:	e7ed      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8001910:	2800      	cmp	r0, #0
 8001912:	d005      	beq.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x4c>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001914:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001916:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001918:	4213      	tst	r3, r2
 800191a:	d1f9      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x3c>
  return HAL_OK;
 800191c:	2500      	movs	r5, #0
 800191e:	e7e5      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8001920:	2503      	movs	r5, #3
 8001922:	e7e3      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x18>
 8001924:	40007000 	.word	0x40007000
 8001928:	fffff9ff 	.word	0xfffff9ff
 800192c:	20000000 	.word	0x20000000
 8001930:	000f4240 	.word	0x000f4240

08001934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	46ce      	mov	lr, r9
 8001938:	4647      	mov	r7, r8
 800193a:	b580      	push	{r7, lr}
 800193c:	0004      	movs	r4, r0
 800193e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	2800      	cmp	r0, #0
 8001942:	d100      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
 8001944:	e0f9      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	07da      	lsls	r2, r3, #31
 800194a:	d531      	bpl.n	80019b0 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194c:	2238      	movs	r2, #56	; 0x38
 800194e:	49c5      	ldr	r1, [pc, #788]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001950:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001952:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001954:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001956:	2a10      	cmp	r2, #16
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x28>
 800195a:	e0f4      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800195c:	2a08      	cmp	r2, #8
 800195e:	d100      	bne.n	8001962 <HAL_RCC_OscConfig+0x2e>
 8001960:	e0f5      	b.n	8001b4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	0252      	lsls	r2, r2, #9
 8001968:	4293      	cmp	r3, r2
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x3a>
 800196c:	e102      	b.n	8001b74 <HAL_RCC_OscConfig+0x240>
 800196e:	21a0      	movs	r1, #160	; 0xa0
 8001970:	02c9      	lsls	r1, r1, #11
 8001972:	428b      	cmp	r3, r1
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x44>
 8001976:	e1dd      	b.n	8001d34 <HAL_RCC_OscConfig+0x400>
 8001978:	4dba      	ldr	r5, [pc, #744]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 800197a:	49bb      	ldr	r1, [pc, #748]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 800197c:	682a      	ldr	r2, [r5, #0]
 800197e:	400a      	ands	r2, r1
 8001980:	602a      	str	r2, [r5, #0]
 8001982:	682a      	ldr	r2, [r5, #0]
 8001984:	49b9      	ldr	r1, [pc, #740]	; (8001c6c <HAL_RCC_OscConfig+0x338>)
 8001986:	400a      	ands	r2, r1
 8001988:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	2b00      	cmp	r3, #0
 800198c:	d000      	beq.n	8001990 <HAL_RCC_OscConfig+0x5c>
 800198e:	e0f5      	b.n	8001b7c <HAL_RCC_OscConfig+0x248>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f9f4 	bl	8000d7c <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001994:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001996:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001998:	02bf      	lsls	r7, r7, #10
 800199a:	e005      	b.n	80019a8 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f9ee 	bl	8000d7c <HAL_GetTick>
 80019a0:	1b80      	subs	r0, r0, r6
 80019a2:	2864      	cmp	r0, #100	; 0x64
 80019a4:	d900      	bls.n	80019a8 <HAL_RCC_OscConfig+0x74>
 80019a6:	e13d      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	423b      	tst	r3, r7
 80019ac:	d1f6      	bne.n	800199c <HAL_RCC_OscConfig+0x68>
 80019ae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b0:	079a      	lsls	r2, r3, #30
 80019b2:	d52c      	bpl.n	8001a0e <HAL_RCC_OscConfig+0xda>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	2338      	movs	r3, #56	; 0x38
 80019b6:	4aab      	ldr	r2, [pc, #684]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 80019b8:	6891      	ldr	r1, [r2, #8]
 80019ba:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x90>
 80019c2:	e0ec      	b.n	8001b9e <HAL_RCC_OscConfig+0x26a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d000      	beq.n	80019ca <HAL_RCC_OscConfig+0x96>
 80019c8:	e0ee      	b.n	8001ba8 <HAL_RCC_OscConfig+0x274>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	055b      	lsls	r3, r3, #21
 80019ce:	d500      	bpl.n	80019d2 <HAL_RCC_OscConfig+0x9e>
 80019d0:	e0af      	b.n	8001b32 <HAL_RCC_OscConfig+0x1fe>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	6851      	ldr	r1, [r2, #4]
 80019d4:	6963      	ldr	r3, [r4, #20]
 80019d6:	48a6      	ldr	r0, [pc, #664]	; (8001c70 <HAL_RCC_OscConfig+0x33c>)
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	4001      	ands	r1, r0
 80019dc:	430b      	orrs	r3, r1
 80019de:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019e0:	4aa0      	ldr	r2, [pc, #640]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 80019e2:	49a4      	ldr	r1, [pc, #656]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	400b      	ands	r3, r1
 80019e8:	6921      	ldr	r1, [r4, #16]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	4aa1      	ldr	r2, [pc, #644]	; (8001c78 <HAL_RCC_OscConfig+0x344>)
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	0f5b      	lsrs	r3, r3, #29
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	4aa0      	ldr	r2, [pc, #640]	; (8001c7c <HAL_RCC_OscConfig+0x348>)
 80019fc:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019fe:	4ba0      	ldr	r3, [pc, #640]	; (8001c80 <HAL_RCC_OscConfig+0x34c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f7ff f915 	bl	8000c30 <HAL_InitTick>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d000      	beq.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 8001a0a:	e096      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
 8001a0c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	071a      	lsls	r2, r3, #28
 8001a10:	d471      	bmi.n	8001af6 <HAL_RCC_OscConfig+0x1c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a12:	075b      	lsls	r3, r3, #29
 8001a14:	d545      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x16e>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a16:	2338      	movs	r3, #56	; 0x38
 8001a18:	4a92      	ldr	r2, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	6891      	ldr	r1, [r2, #8]
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_OscConfig+0xf0>
 8001a22:	e0e7      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a24:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a2a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001a2c:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a2e:	4219      	tst	r1, r3
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_OscConfig+0x110>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a34:	4319      	orrs	r1, r3
 8001a36:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	2780      	movs	r7, #128	; 0x80
 8001a46:	4e8f      	ldr	r6, [pc, #572]	; (8001c84 <HAL_RCC_OscConfig+0x350>)
 8001a48:	007f      	lsls	r7, r7, #1
 8001a4a:	6833      	ldr	r3, [r6, #0]
 8001a4c:	423b      	tst	r3, r7
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x11e>
 8001a50:	e0d9      	b.n	8001c06 <HAL_RCC_OscConfig+0x2d2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a52:	68a3      	ldr	r3, [r4, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d100      	bne.n	8001a5a <HAL_RCC_OscConfig+0x126>
 8001a58:	e128      	b.n	8001cac <HAL_RCC_OscConfig+0x378>
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d100      	bne.n	8001a60 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	e1c8      	b.n	8001df2 <HAL_RCC_OscConfig+0x4be>
 8001a60:	2101      	movs	r1, #1
 8001a62:	4e80      	ldr	r6, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001a64:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8001a66:	438a      	bics	r2, r1
 8001a68:	65f2      	str	r2, [r6, #92]	; 0x5c
 8001a6a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8001a6c:	3103      	adds	r1, #3
 8001a6e:	438a      	bics	r2, r1
 8001a70:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d000      	beq.n	8001a78 <HAL_RCC_OscConfig+0x144>
 8001a76:	e11d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x380>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f980 	bl	8000d7c <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8001a7e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	4d81      	ldr	r5, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x354>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f979 	bl	8000d7c <HAL_GetTick>
 8001a8a:	1bc0      	subs	r0, r0, r7
 8001a8c:	42a8      	cmp	r0, r5
 8001a8e:	d900      	bls.n	8001a92 <HAL_RCC_OscConfig+0x15e>
 8001a90:	e0c8      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a92:	4642      	mov	r2, r8
 8001a94:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001a96:	421a      	tst	r2, r3
 8001a98:	d1f5      	bne.n	8001a86 <HAL_RCC_OscConfig+0x152>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
 8001aa0:	e161      	b.n	8001d66 <HAL_RCC_OscConfig+0x432>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa2:	69e3      	ldr	r3, [r4, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d024      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	2238      	movs	r2, #56	; 0x38
 8001aaa:	4d6e      	ldr	r5, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001aac:	68a9      	ldr	r1, [r5, #8]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	2a10      	cmp	r2, #16
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x182>
 8001ab4:	e110      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x188>
 8001aba:	e15a      	b.n	8001d72 <HAL_RCC_OscConfig+0x43e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	4a73      	ldr	r2, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x358>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4013      	ands	r3, r2
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001ac4:	2203      	movs	r2, #3
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001ac8:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aca:	04b6      	lsls	r6, r6, #18
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001acc:	4393      	bics	r3, r2
 8001ace:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ad0:	68eb      	ldr	r3, [r5, #12]
 8001ad2:	4a6f      	ldr	r2, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x35c>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f950 	bl	8000d7c <HAL_GetTick>
 8001adc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ade:	e005      	b.n	8001aec <HAL_RCC_OscConfig+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f94c 	bl	8000d7c <HAL_GetTick>
 8001ae4:	1b00      	subs	r0, r0, r4
 8001ae6:	2802      	cmp	r0, #2
 8001ae8:	d900      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b8>
 8001aea:	e09b      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	4233      	tst	r3, r6
 8001af0:	d1f6      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x1ac>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001af2:	2000      	movs	r0, #0
 8001af4:	e022      	b.n	8001b3c <HAL_RCC_OscConfig+0x208>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001af6:	2238      	movs	r2, #56	; 0x38
 8001af8:	4d5a      	ldr	r5, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001afa:	68a9      	ldr	r1, [r5, #8]
 8001afc:	400a      	ands	r2, r1
 8001afe:	2a18      	cmp	r2, #24
 8001b00:	d02f      	beq.n	8001b62 <HAL_RCC_OscConfig+0x22e>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b02:	69a3      	ldr	r3, [r4, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x1d6>
 8001b08:	e08e      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_LSI_ENABLE();
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001b10:	4313      	orrs	r3, r2
 8001b12:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b14:	f7ff f932 	bl	8000d7c <HAL_GetTick>
 8001b18:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	e005      	b.n	8001b28 <HAL_RCC_OscConfig+0x1f4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f92e 	bl	8000d7c <HAL_GetTick>
 8001b20:	1b80      	subs	r0, r0, r6
 8001b22:	2802      	cmp	r0, #2
 8001b24:	d900      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1f4>
 8001b26:	e07d      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b28:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001b2a:	421f      	tst	r7, r3
 8001b2c:	d0f6      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1e8>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	e76f      	b.n	8001a12 <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b32:	68e3      	ldr	r3, [r4, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d000      	beq.n	8001b3a <HAL_RCC_OscConfig+0x206>
 8001b38:	e74b      	b.n	80019d2 <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	b003      	add	sp, #12
 8001b3e:	bcc0      	pop	{r6, r7}
 8001b40:	46b9      	mov	r9, r7
 8001b42:	46b0      	mov	r8, r6
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b46:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b48:	078a      	lsls	r2, r1, #30
 8001b4a:	d000      	beq.n	8001b4e <HAL_RCC_OscConfig+0x21a>
 8001b4c:	e709      	b.n	8001962 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	0392      	lsls	r2, r2, #14
 8001b54:	d400      	bmi.n	8001b58 <HAL_RCC_OscConfig+0x224>
 8001b56:	e72b      	b.n	80019b0 <HAL_RCC_OscConfig+0x7c>
 8001b58:	6862      	ldr	r2, [r4, #4]
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d000      	beq.n	8001b60 <HAL_RCC_OscConfig+0x22c>
 8001b5e:	e727      	b.n	80019b0 <HAL_RCC_OscConfig+0x7c>
 8001b60:	e7eb      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b62:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001b64:	0792      	lsls	r2, r2, #30
 8001b66:	d400      	bmi.n	8001b6a <HAL_RCC_OscConfig+0x236>
 8001b68:	e753      	b.n	8001a12 <HAL_RCC_OscConfig+0xde>
 8001b6a:	69a2      	ldr	r2, [r4, #24]
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	d000      	beq.n	8001b72 <HAL_RCC_OscConfig+0x23e>
 8001b70:	e74f      	b.n	8001a12 <HAL_RCC_OscConfig+0xde>
 8001b72:	e7e2      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b74:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001b76:	6811      	ldr	r1, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f8fe 	bl	8000d7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b80:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b82:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b84:	4f37      	ldr	r7, [pc, #220]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001b86:	02b6      	lsls	r6, r6, #10
 8001b88:	e004      	b.n	8001b94 <HAL_RCC_OscConfig+0x260>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f8f7 	bl	8000d7c <HAL_GetTick>
 8001b8e:	1b40      	subs	r0, r0, r5
 8001b90:	2864      	cmp	r0, #100	; 0x64
 8001b92:	d847      	bhi.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4233      	tst	r3, r6
 8001b98:	d0f7      	beq.n	8001b8a <HAL_RCC_OscConfig+0x256>
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	e708      	b.n	80019b0 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9e:	3b0d      	subs	r3, #13
 8001ba0:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x274>
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_OscConfig+0x414>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba8:	68e3      	ldr	r3, [r4, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d04f      	beq.n	8001c4e <HAL_RCC_OscConfig+0x31a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bae:	4e2d      	ldr	r6, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001bb2:	6833      	ldr	r3, [r6, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bba:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	6832      	ldr	r2, [r6, #0]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bca:	f7ff f8d7 	bl	8000d7c <HAL_GetTick>
 8001bce:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	e004      	b.n	8001bdc <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f8d3 	bl	8000d7c <HAL_GetTick>
 8001bd6:	1b40      	subs	r0, r0, r5
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d823      	bhi.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	6833      	ldr	r3, [r6, #0]
 8001bde:	423b      	tst	r3, r7
 8001be0:	d0f7      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	6872      	ldr	r2, [r6, #4]
 8001be4:	6963      	ldr	r3, [r4, #20]
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	400a      	ands	r2, r1
 8001bec:	4313      	orrs	r3, r2
 8001bee:	6073      	str	r3, [r6, #4]
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	e70c      	b.n	8001a0e <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bf4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001bf6:	079b      	lsls	r3, r3, #30
 8001bf8:	d400      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
 8001bfa:	e752      	b.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
 8001bfc:	68a3      	ldr	r3, [r4, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d000      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2d0>
 8001c02:	e74e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
 8001c04:	e799      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c06:	6833      	ldr	r3, [r6, #0]
 8001c08:	433b      	orrs	r3, r7
 8001c0a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f8b6 	bl	8000d7c <HAL_GetTick>
 8001c10:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c12:	6833      	ldr	r3, [r6, #0]
 8001c14:	423b      	tst	r3, r7
 8001c16:	d000      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2e6>
 8001c18:	e71b      	b.n	8001a52 <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f8af 	bl	8000d7c <HAL_GetTick>
 8001c1e:	1b40      	subs	r0, r0, r5
 8001c20:	2802      	cmp	r0, #2
 8001c22:	d9f6      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
 8001c26:	e789      	b.n	8001b3c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_LSI_DISABLE();
 8001c28:	2201      	movs	r2, #1
 8001c2a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c2c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001c2e:	4393      	bics	r3, r2
 8001c30:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c32:	f7ff f8a3 	bl	8000d7c <HAL_GetTick>
 8001c36:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	e004      	b.n	8001c44 <HAL_RCC_OscConfig+0x310>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f89f 	bl	8000d7c <HAL_GetTick>
 8001c3e:	1b80      	subs	r0, r0, r6
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d8ef      	bhi.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001c46:	421f      	tst	r7, r3
 8001c48:	d1f7      	bne.n	8001c3a <HAL_RCC_OscConfig+0x306>
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	e6e1      	b.n	8001a12 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4d05      	ldr	r5, [pc, #20]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001c50:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x360>)
 8001c52:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4013      	ands	r3, r2
 8001c58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f88f 	bl	8000d7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5e:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8001c60:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c62:	e01e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	fffeffff 	.word	0xfffeffff
 8001c6c:	fffbffff 	.word	0xfffbffff
 8001c70:	ffff80ff 	.word	0xffff80ff
 8001c74:	ffffc7ff 	.word	0xffffc7ff
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	40007000 	.word	0x40007000
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	feffffff 	.word	0xfeffffff
 8001c90:	eefeffff 	.word	0xeefeffff
 8001c94:	fffffeff 	.word	0xfffffeff
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff f870 	bl	8000d7c <HAL_GetTick>
 8001c9c:	1b80      	subs	r0, r0, r6
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d8c0      	bhi.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	423b      	tst	r3, r7
 8001ca6:	d1f7      	bne.n	8001c98 <HAL_RCC_OscConfig+0x364>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	e6b0      	b.n	8001a0e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	4956      	ldr	r1, [pc, #344]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
 8001cae:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f862 	bl	8000d7c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
        tickstart = HAL_GetTick();
 8001cba:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	4d52      	ldr	r5, [pc, #328]	; (8001e0c <HAL_RCC_OscConfig+0x4d8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc2:	e004      	b.n	8001cce <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f85a 	bl	8000d7c <HAL_GetTick>
 8001cc8:	1b80      	subs	r0, r0, r6
 8001cca:	42a8      	cmp	r0, r5
 8001ccc:	d8aa      	bhi.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	4643      	mov	r3, r8
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	421f      	tst	r7, r3
 8001cd4:	d0f6      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x390>
 8001cd6:	e6e0      	b.n	8001a9a <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x3aa>
 8001cdc:	e72d      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001ce0:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	6a21      	ldr	r1, [r4, #32]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	428b      	cmp	r3, r1
 8001ce8:	d000      	beq.n	8001cec <HAL_RCC_OscConfig+0x3b8>
 8001cea:	e726      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cec:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf0:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	428b      	cmp	r3, r1
 8001cf4:	d000      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x3c4>
 8001cf6:	e720      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf8:	21fe      	movs	r1, #254	; 0xfe
 8001cfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cfc:	01c9      	lsls	r1, r1, #7
 8001cfe:	4011      	ands	r1, r2
 8001d00:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	4299      	cmp	r1, r3
 8001d04:	d000      	beq.n	8001d08 <HAL_RCC_OscConfig+0x3d4>
 8001d06:	e718      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d08:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d0c:	039b      	lsls	r3, r3, #14
 8001d0e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d000      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3e2>
 8001d14:	e711      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d16:	23e0      	movs	r3, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d1a:	051b      	lsls	r3, r3, #20
 8001d1c:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d1e:	428b      	cmp	r3, r1
 8001d20:	d000      	beq.n	8001d24 <HAL_RCC_OscConfig+0x3f0>
 8001d22:	e70a      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d26:	0f52      	lsrs	r2, r2, #29
 8001d28:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d000      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3fc>
 8001d2e:	e704      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
  return HAL_OK;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e703      	b.n	8001b3c <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
 8001d38:	02c9      	lsls	r1, r1, #11
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	4301      	orrs	r1, r0
 8001d3e:	6019      	str	r1, [r3, #0]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d46:	e719      	b.n	8001b7c <HAL_RCC_OscConfig+0x248>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	055b      	lsls	r3, r3, #21
 8001d4c:	d503      	bpl.n	8001d56 <HAL_RCC_OscConfig+0x422>
 8001d4e:	68e3      	ldr	r3, [r4, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x422>
 8001d54:	e6f1      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	6851      	ldr	r1, [r2, #4]
 8001d58:	6963      	ldr	r3, [r4, #20]
 8001d5a:	482d      	ldr	r0, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	4001      	ands	r1, r0
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d64:	e64b      	b.n	80019fe <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
 8001d68:	492a      	ldr	r1, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x4e0>)
 8001d6a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d70:	e697      	b.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8001d72:	682b      	ldr	r3, [r5, #0]
 8001d74:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <HAL_RCC_OscConfig+0x4e4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d76:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4013      	ands	r3, r2
 8001d7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fffe 	bl	8000d7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001d82:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	e005      	b.n	8001d92 <HAL_RCC_OscConfig+0x45e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fff9 	bl	8000d7c <HAL_GetTick>
 8001d8a:	1b80      	subs	r0, r0, r6
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d900      	bls.n	8001d92 <HAL_RCC_OscConfig+0x45e>
 8001d90:	e748      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	423b      	tst	r3, r7
 8001d96:	d1f6      	bne.n	8001d86 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d9a:	6a23      	ldr	r3, [r4, #32]
 8001d9c:	68ea      	ldr	r2, [r5, #12]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	491e      	ldr	r1, [pc, #120]	; (8001e1c <HAL_RCC_OscConfig+0x4e8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	4e19      	ldr	r6, [pc, #100]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	400a      	ands	r2, r1
 8001da6:	4313      	orrs	r3, r2
 8001da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001daa:	4313      	orrs	r3, r2
 8001dac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dae:	4313      	orrs	r3, r2
 8001db0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001db2:	4313      	orrs	r3, r2
 8001db4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001db6:	0212      	lsls	r2, r2, #8
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	682a      	ldr	r2, [r5, #0]
 8001dc0:	045b      	lsls	r3, r3, #17
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	68ea      	ldr	r2, [r5, #12]
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ffd4 	bl	8000d7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001dd6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd8:	04ad      	lsls	r5, r5, #18
 8001dda:	e005      	b.n	8001de8 <HAL_RCC_OscConfig+0x4b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ffce 	bl	8000d7c <HAL_GetTick>
 8001de0:	1b00      	subs	r0, r0, r4
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d900      	bls.n	8001de8 <HAL_RCC_OscConfig+0x4b4>
 8001de6:	e71d      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	422b      	tst	r3, r5
 8001dec:	d0f6      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4a8>
  return HAL_OK;
 8001dee:	2000      	movs	r0, #0
 8001df0:	e6a4      	b.n	8001b3c <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	2104      	movs	r1, #4
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_OscConfig+0x4d4>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfe:	3903      	subs	r1, #3
 8001e00:	430a      	orrs	r2, r1
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e04:	e756      	b.n	8001cb4 <HAL_RCC_OscConfig+0x380>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	00001388 	.word	0x00001388
 8001e10:	ffff80ff 	.word	0xffff80ff
 8001e14:	efffffff 	.word	0xefffffff
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	11c1808c 	.word	0x11c1808c

08001e20 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e20:	2338      	movs	r3, #56	; 0x38
 8001e22:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001e24:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e26:	6891      	ldr	r1, [r2, #8]
 8001e28:	420b      	tst	r3, r1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e2c:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e2e:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x88>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e30:	049b      	lsls	r3, r3, #18
 8001e32:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e34:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001e36:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e38:	6891      	ldr	r1, [r2, #8]
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	2908      	cmp	r1, #8
 8001e3e:	d027      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	6891      	ldr	r1, [r2, #8]
 8001e42:	4019      	ands	r1, r3
 8001e44:	2910      	cmp	r1, #16
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e48:	6891      	ldr	r1, [r2, #8]
 8001e4a:	4019      	ands	r1, r3
 8001e4c:	2920      	cmp	r1, #32
 8001e4e:	d021      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e50:	6890      	ldr	r0, [r2, #8]
 8001e52:	4003      	ands	r3, r0
    sysclockfreq = 0U;
 8001e54:	3b18      	subs	r3, #24
 8001e56:	4258      	negs	r0, r3
 8001e58:	4158      	adcs	r0, r3
 8001e5a:	23fa      	movs	r3, #250	; 0xfa
 8001e5c:	4240      	negs	r0, r0
 8001e5e:	01db      	lsls	r3, r3, #7
 8001e60:	4018      	ands	r0, r3
 8001e62:	e7e8      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e64:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e66:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e68:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e6a:	68d0      	ldr	r0, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e6c:	0649      	lsls	r1, r1, #25
 8001e6e:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e70:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e72:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e74:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8001e76:	079b      	lsls	r3, r3, #30
 8001e78:	d00f      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001e7c:	f7fe f944 	bl	8000108 <__udivsi3>
 8001e80:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	0f49      	lsrs	r1, r1, #29
 8001e88:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001e8a:	f7fe f93d 	bl	8000108 <__udivsi3>
  return sysclockfreq;
 8001e8e:	e7d2      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001e90:	4806      	ldr	r0, [pc, #24]	; (8001eac <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e92:	e7d0      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8001e94:	2080      	movs	r0, #128	; 0x80
 8001e96:	0200      	lsls	r0, r0, #8
 8001e98:	e7cd      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e9c:	f7fe f934 	bl	8000108 <__udivsi3>
 8001ea0:	4360      	muls	r0, r4
        break;
 8001ea2:	e7ee      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x62>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_ClockConfig>:
{
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	46ce      	mov	lr, r9
 8001eb4:	4647      	mov	r7, r8
 8001eb6:	0005      	movs	r5, r0
 8001eb8:	000c      	movs	r4, r1
 8001eba:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d026      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	4e57      	ldr	r6, [pc, #348]	; (8002020 <HAL_RCC_ClockConfig+0x170>)
 8001ec4:	6833      	ldr	r3, [r6, #0]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d35e      	bcc.n	8001f8a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	079a      	lsls	r2, r3, #30
 8001ed0:	d50e      	bpl.n	8001ef0 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	075a      	lsls	r2, r3, #29
 8001ed4:	d505      	bpl.n	8001ee2 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ed6:	22e0      	movs	r2, #224	; 0xe0
 8001ed8:	4952      	ldr	r1, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
 8001eda:	01d2      	lsls	r2, r2, #7
 8001edc:	6888      	ldr	r0, [r1, #8]
 8001ede:	4302      	orrs	r2, r0
 8001ee0:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee2:	4950      	ldr	r1, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
 8001ee4:	4850      	ldr	r0, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x178>)
 8001ee6:	688a      	ldr	r2, [r1, #8]
 8001ee8:	4002      	ands	r2, r0
 8001eea:	68a8      	ldr	r0, [r5, #8]
 8001eec:	4302      	orrs	r2, r0
 8001eee:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef0:	07db      	lsls	r3, r3, #31
 8001ef2:	d52b      	bpl.n	8001f4c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef4:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_ClockConfig+0x4e>
 8001efc:	e07c      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d007      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d000      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x58>
 8001f06:	e07d      	b.n	8002004 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	0552      	lsls	r2, r2, #21
 8001f0c:	d404      	bmi.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	e037      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	0192      	lsls	r2, r2, #6
 8001f16:	d5fa      	bpl.n	8001f0e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f18:	2107      	movs	r1, #7
 8001f1a:	4e42      	ldr	r6, [pc, #264]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
 8001f1c:	68b2      	ldr	r2, [r6, #8]
 8001f1e:	438a      	bics	r2, r1
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff2a 	bl	8000d7c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f28:	2338      	movs	r3, #56	; 0x38
 8001f2a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001f2e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	e004      	b.n	8001f3e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe ff22 	bl	8000d7c <HAL_GetTick>
 8001f38:	1bc0      	subs	r0, r0, r7
 8001f3a:	4548      	cmp	r0, r9
 8001f3c:	d83b      	bhi.n	8001fb6 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4643      	mov	r3, r8
 8001f40:	68b2      	ldr	r2, [r6, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	686b      	ldr	r3, [r5, #4]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1f3      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4e34      	ldr	r6, [pc, #208]	; (8002020 <HAL_RCC_ClockConfig+0x170>)
 8001f50:	6833      	ldr	r3, [r6, #0]
 8001f52:	4013      	ands	r3, r2
 8001f54:	42a3      	cmp	r3, r4
 8001f56:	d838      	bhi.n	8001fca <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	075b      	lsls	r3, r3, #29
 8001f5c:	d42d      	bmi.n	8001fba <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f5e:	f7ff ff5f 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
 8001f64:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_RCC_ClockConfig+0x180>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	051b      	lsls	r3, r3, #20
 8001f6a:	0f1b      	lsrs	r3, r3, #28
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	589b      	ldr	r3, [r3, r2]
 8001f70:	221f      	movs	r2, #31
 8001f72:	4013      	ands	r3, r2
 8001f74:	40d8      	lsrs	r0, r3
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_RCC_ClockConfig+0x184>)
 8001f78:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_ClockConfig+0x188>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f7fe fe57 	bl	8000c30 <HAL_InitTick>
}
 8001f82:	bcc0      	pop	{r6, r7}
 8001f84:	46b9      	mov	r9, r7
 8001f86:	46b0      	mov	r8, r6
 8001f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	6833      	ldr	r3, [r6, #0]
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f92:	f7fe fef3 	bl	8000d7c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f96:	2307      	movs	r3, #7
 8001f98:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001f9c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	6833      	ldr	r3, [r6, #0]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	42a3      	cmp	r3, r4
 8001fa8:	d100      	bne.n	8001fac <HAL_RCC_ClockConfig+0xfc>
 8001faa:	e78f      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7fe fee6 	bl	8000d7c <HAL_GetTick>
 8001fb0:	1bc0      	subs	r0, r0, r7
 8001fb2:	4548      	cmp	r0, r9
 8001fb4:	d9f4      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	e7e3      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_RCC_ClockConfig+0x174>)
 8001fbc:	491f      	ldr	r1, [pc, #124]	; (800203c <HAL_RCC_ClockConfig+0x18c>)
 8001fbe:	6893      	ldr	r3, [r2, #8]
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	68e9      	ldr	r1, [r5, #12]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	e7c9      	b.n	8001f5e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	6833      	ldr	r3, [r6, #0]
 8001fcc:	4393      	bics	r3, r2
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001fd2:	f7fe fed3 	bl	8000d7c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001fdc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fde:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	42a3      	cmp	r3, r4
 8001fe8:	d0b6      	beq.n	8001f58 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe fec7 	bl	8000d7c <HAL_GetTick>
 8001fee:	1bc0      	subs	r0, r0, r7
 8001ff0:	4548      	cmp	r0, r9
 8001ff2:	d9f5      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	e7c4      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	0392      	lsls	r2, r2, #14
 8001ffc:	d500      	bpl.n	8002000 <HAL_RCC_ClockConfig+0x150>
 8001ffe:	e78b      	b.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	e7be      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002004:	2b03      	cmp	r3, #3
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800200a:	0792      	lsls	r2, r2, #30
 800200c:	d500      	bpl.n	8002010 <HAL_RCC_ClockConfig+0x160>
 800200e:	e783      	b.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
 8002012:	e7b6      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002014:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002016:	0792      	lsls	r2, r2, #30
 8002018:	d500      	bpl.n	800201c <HAL_RCC_ClockConfig+0x16c>
 800201a:	e77d      	b.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800201c:	2001      	movs	r0, #1
 800201e:	e7b0      	b.n	8001f82 <HAL_RCC_ClockConfig+0xd2>
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
 8002028:	fffff0ff 	.word	0xfffff0ff
 800202c:	00001388 	.word	0x00001388
 8002030:	08006a6c 	.word	0x08006a6c
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	ffff8fff 	.word	0xffff8fff

08002040 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	045b      	lsls	r3, r3, #17
 8002048:	0f5b      	lsrs	r3, r3, #29
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	589b      	ldr	r3, [r3, r2]
 800204e:	221f      	movs	r2, #31
 8002050:	4013      	ands	r3, r2
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002054:	6810      	ldr	r0, [r2, #0]
 8002056:	40d8      	lsrs	r0, r3
}
 8002058:	4770      	bx	lr
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	08006aac 	.word	0x08006aac
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002068:	2307      	movs	r3, #7
{
 800206a:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800206c:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002070:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002072:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002074:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002076:	401c      	ands	r4, r3
 8002078:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800207a:	6894      	ldr	r4, [r2, #8]
 800207c:	402c      	ands	r4, r5
 800207e:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002080:	24e0      	movs	r4, #224	; 0xe0
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	01e4      	lsls	r4, r4, #7
 8002086:	4022      	ands	r2, r4
 8002088:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800208a:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_RCC_GetClockConfig+0x30>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4013      	ands	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
}
 8002092:	bd30      	pop	{r4, r5, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	46ce      	mov	lr, r9
 80020a0:	4647      	mov	r7, r8
 80020a2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	6803      	ldr	r3, [r0, #0]
{
 80020a6:	0004      	movs	r4, r0
 80020a8:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020aa:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	039a      	lsls	r2, r3, #14
 80020ae:	d552      	bpl.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xba>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020b4:	0552      	lsls	r2, r2, #21
 80020b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80020b8:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4211      	tst	r1, r2
 80020bc:	d100      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80020be:	e0b0      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x186>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	2680      	movs	r6, #128	; 0x80
 80020c2:	4d71      	ldr	r5, [pc, #452]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80020c4:	0076      	lsls	r6, r6, #1
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	4333      	orrs	r3, r6
 80020ca:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fe56 	bl	8000d7c <HAL_GetTick>
 80020d0:	0007      	movs	r7, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7fe fe52 	bl	8000d7c <HAL_GetTick>
 80020d8:	1bc0      	subs	r0, r0, r7
 80020da:	2802      	cmp	r0, #2
 80020dc:	d900      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020de:	e0aa      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	4233      	tst	r3, r6
 80020e4:	d0f6      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4d67      	ldr	r5, [pc, #412]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	0011      	movs	r1, r2
 80020f0:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	421a      	tst	r2, r3
 80020f4:	d022      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80020f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80020f8:	4288      	cmp	r0, r1
 80020fa:	d020      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020fc:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fe:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002100:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8002102:	0252      	lsls	r2, r2, #9
 8002104:	4332      	orrs	r2, r6
 8002106:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002108:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210c:	4e60      	ldr	r6, [pc, #384]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210e:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4032      	ands	r2, r6
 8002112:	65ea      	str	r2, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	65eb      	str	r3, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002116:	07cb      	lsls	r3, r1, #31
 8002118:	d400      	bmi.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800211a:	e0b0      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fe2e 	bl	8000d7c <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
        tickstart = HAL_GetTick();
 8002122:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002124:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	e005      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fe27 	bl	8000d7c <HAL_GetTick>
 800212e:	1b80      	subs	r0, r0, r6
 8002130:	4548      	cmp	r0, r9
 8002132:	d900      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002134:	e07f      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002138:	421f      	tst	r7, r3
 800213a:	d0f6      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800213c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213e:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002140:	4852      	ldr	r0, [pc, #328]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002142:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002144:	4003      	ands	r3, r0
 8002146:	430b      	orrs	r3, r1
 8002148:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800214a:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800214c:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 800214e:	2b01      	cmp	r3, #1
 8002150:	d100      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8002152:	e075      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002154:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002156:	07da      	lsls	r2, r3, #31
 8002158:	d506      	bpl.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215a:	2503      	movs	r5, #3
 800215c:	4949      	ldr	r1, [pc, #292]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800215e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002160:	43aa      	bics	r2, r5
 8002162:	6865      	ldr	r5, [r4, #4]
 8002164:	432a      	orrs	r2, r5
 8002166:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002168:	06da      	lsls	r2, r3, #27
 800216a:	d506      	bpl.n	800217a <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800216c:	4945      	ldr	r1, [pc, #276]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800216e:	4d4a      	ldr	r5, [pc, #296]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002170:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002172:	402a      	ands	r2, r5
 8002174:	68a5      	ldr	r5, [r4, #8]
 8002176:	432a      	orrs	r2, r5
 8002178:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217a:	059a      	lsls	r2, r3, #22
 800217c:	d506      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800217e:	4941      	ldr	r1, [pc, #260]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002180:	4d46      	ldr	r5, [pc, #280]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002182:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002184:	402a      	ands	r2, r5
 8002186:	6965      	ldr	r5, [r4, #20]
 8002188:	432a      	orrs	r2, r5
 800218a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800218c:	055a      	lsls	r2, r3, #21
 800218e:	d506      	bpl.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002190:	493c      	ldr	r1, [pc, #240]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002192:	4d43      	ldr	r5, [pc, #268]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002194:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002196:	402a      	ands	r2, r5
 8002198:	69a5      	ldr	r5, [r4, #24]
 800219a:	432a      	orrs	r2, r5
 800219c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219e:	069a      	lsls	r2, r3, #26
 80021a0:	d506      	bpl.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a2:	4938      	ldr	r1, [pc, #224]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021a4:	4d3f      	ldr	r5, [pc, #252]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80021a6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021a8:	402a      	ands	r2, r5
 80021aa:	68e5      	ldr	r5, [r4, #12]
 80021ac:	432a      	orrs	r2, r5
 80021ae:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b0:	035a      	lsls	r2, r3, #13
 80021b2:	d50a      	bpl.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021b4:	4933      	ldr	r1, [pc, #204]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021b6:	4e3c      	ldr	r6, [pc, #240]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80021b8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021ba:	69e5      	ldr	r5, [r4, #28]
 80021bc:	4032      	ands	r2, r6
 80021be:	432a      	orrs	r2, r5
 80021c0:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021c2:	22c0      	movs	r2, #192	; 0xc0
 80021c4:	0512      	lsls	r2, r2, #20
 80021c6:	4295      	cmp	r5, r2
 80021c8:	d041      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ca:	045a      	lsls	r2, r3, #17
 80021cc:	d50a      	bpl.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021ce:	492d      	ldr	r1, [pc, #180]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021d0:	6a25      	ldr	r5, [r4, #32]
 80021d2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	0892      	lsrs	r2, r2, #2
 80021d8:	432a      	orrs	r2, r5
 80021da:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	05d2      	lsls	r2, r2, #23
 80021e0:	4295      	cmp	r5, r2
 80021e2:	d03a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021e4:	029a      	lsls	r2, r3, #10
 80021e6:	d50a      	bpl.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021e8:	4926      	ldr	r1, [pc, #152]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021ea:	4e30      	ldr	r6, [pc, #192]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80021ec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80021f0:	4032      	ands	r2, r6
 80021f2:	432a      	orrs	r2, r5
 80021f4:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	03d2      	lsls	r2, r2, #15
 80021fa:	4295      	cmp	r5, r2
 80021fc:	d033      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021fe:	051b      	lsls	r3, r3, #20
 8002200:	d50a      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002202:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002204:	6921      	ldr	r1, [r4, #16]
 8002206:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002208:	4c29      	ldr	r4, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800220a:	4023      	ands	r3, r4
 800220c:	430b      	orrs	r3, r1
 800220e:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	01db      	lsls	r3, r3, #7
 8002214:	4299      	cmp	r1, r3
 8002216:	d02c      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002218:	b003      	add	sp, #12
 800221a:	bcc0      	pop	{r6, r7}
 800221c:	46b9      	mov	r9, r7
 800221e:	46b0      	mov	r8, r6
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002224:	4311      	orrs	r1, r2
 8002226:	63d9      	str	r1, [r3, #60]	; 0x3c
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	401a      	ands	r2, r3
 800222c:	9201      	str	r2, [sp, #4]
 800222e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	4698      	mov	r8, r3
 8002234:	e744      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8002236:	4643      	mov	r3, r8
        ret = HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 800223a:	2b01      	cmp	r3, #1
 800223c:	d000      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800223e:	e789      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002242:	491c      	ldr	r1, [pc, #112]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002244:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002246:	400b      	ands	r3, r1
 8002248:	63d3      	str	r3, [r2, #60]	; 0x3c
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	e783      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	68cd      	ldr	r5, [r1, #12]
 8002252:	0452      	lsls	r2, r2, #17
 8002254:	432a      	orrs	r2, r5
 8002256:	60ca      	str	r2, [r1, #12]
 8002258:	e7b7      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	68cd      	ldr	r5, [r1, #12]
 800225e:	0252      	lsls	r2, r2, #9
 8002260:	432a      	orrs	r2, r5
 8002262:	60ca      	str	r2, [r1, #12]
 8002264:	e7be      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	68cd      	ldr	r5, [r1, #12]
 800226a:	0452      	lsls	r2, r2, #17
 800226c:	432a      	orrs	r2, r5
 800226e:	60ca      	str	r2, [r1, #12]
 8002270:	e7c5      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x162>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	68d1      	ldr	r1, [r2, #12]
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	430b      	orrs	r3, r1
 800227a:	60d3      	str	r3, [r2, #12]
  return status;
 800227c:	e7cc      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800227e:	0001      	movs	r1, r0
 8002280:	e75d      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	fffffcff 	.word	0xfffffcff
 8002290:	fffeffff 	.word	0xfffeffff
 8002294:	00001388 	.word	0x00001388
 8002298:	fffff3ff 	.word	0xfffff3ff
 800229c:	fff3ffff 	.word	0xfff3ffff
 80022a0:	ffcfffff 	.word	0xffcfffff
 80022a4:	ffffcfff 	.word	0xffffcfff
 80022a8:	f3ffffff 	.word	0xf3ffffff
 80022ac:	ffbfffff 	.word	0xffbfffff
 80022b0:	ffff3fff 	.word	0xffff3fff
 80022b4:	efffffff 	.word	0xefffffff

080022b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b8:	223d      	movs	r2, #61	; 0x3d
 80022ba:	5c81      	ldrb	r1, [r0, r2]
{
 80022bc:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80022c0:	2901      	cmp	r1, #1
 80022c2:	d113      	bne.n	80022ec <HAL_TIM_Base_Start_IT+0x34>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	3101      	adds	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4302      	orrs	r2, r0
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_TIM_Base_Start_IT+0x58>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00b      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x36>
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	05d2      	lsls	r2, r2, #23
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x36>
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_TIM_Base_Start_IT+0x5c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x36>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4310      	orrs	r0, r2
 80022e8:	6018      	str	r0, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2000      	movs	r0, #0
}
 80022ec:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <HAL_TIM_Base_Start_IT+0x60>)
 80022f2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f4:	2a06      	cmp	r2, #6
 80022f6:	d008      	beq.n	800230a <HAL_TIM_Base_Start_IT+0x52>
 80022f8:	3907      	subs	r1, #7
 80022fa:	428a      	cmp	r2, r1
 80022fc:	d005      	beq.n	800230a <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 80022fe:	2101      	movs	r1, #1
 8002300:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002302:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e7f0      	b.n	80022ec <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 800230a:	2000      	movs	r0, #0
 800230c:	e7ee      	b.n	80022ec <HAL_TIM_Base_Start_IT+0x34>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400
 8002318:	00010007 	.word	0x00010007

0800231c <HAL_TIM_OC_DelayElapsedCallback>:
 800231c:	4770      	bx	lr
 800231e:	46c0      	nop			; (mov r8, r8)

08002320 <HAL_TIM_IC_CaptureCallback>:
 8002320:	4770      	bx	lr
 8002322:	46c0      	nop			; (mov r8, r8)

08002324 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002324:	4770      	bx	lr
 8002326:	46c0      	nop			; (mov r8, r8)

08002328 <HAL_TIM_TriggerCallback>:
 8002328:	4770      	bx	lr
 800232a:	46c0      	nop			; (mov r8, r8)

0800232c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800232c:	2202      	movs	r2, #2
 800232e:	6803      	ldr	r3, [r0, #0]
{
 8002330:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002332:	6919      	ldr	r1, [r3, #16]
{
 8002334:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002336:	420a      	tst	r2, r1
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	420a      	tst	r2, r1
 800233e:	d000      	beq.n	8002342 <HAL_TIM_IRQHandler+0x16>
 8002340:	e06e      	b.n	8002420 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002342:	2204      	movs	r2, #4
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	420a      	tst	r2, r1
 8002348:	d002      	beq.n	8002350 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	420a      	tst	r2, r1
 800234e:	d154      	bne.n	80023fa <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002350:	2208      	movs	r2, #8
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	420a      	tst	r2, r1
 8002356:	d002      	beq.n	800235e <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	420a      	tst	r2, r1
 800235c:	d13c      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800235e:	2210      	movs	r2, #16
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	420a      	tst	r2, r1
 8002364:	d002      	beq.n	800236c <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	420a      	tst	r2, r1
 800236a:	d122      	bne.n	80023b2 <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800236c:	2201      	movs	r2, #1
 800236e:	6919      	ldr	r1, [r3, #16]
 8002370:	420a      	tst	r2, r1
 8002372:	d002      	beq.n	800237a <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	420a      	tst	r2, r1
 8002378:	d168      	bne.n	800244c <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	420a      	tst	r2, r1
 8002380:	d002      	beq.n	8002388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002382:	68d9      	ldr	r1, [r3, #12]
 8002384:	420a      	tst	r2, r1
 8002386:	d168      	bne.n	800245a <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	05d2      	lsls	r2, r2, #23
 800238c:	d502      	bpl.n	8002394 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	0612      	lsls	r2, r2, #24
 8002392:	d46a      	bmi.n	800246a <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	420a      	tst	r2, r1
 800239a:	d002      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	420a      	tst	r2, r1
 80023a0:	d16a      	bne.n	8002478 <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a2:	2220      	movs	r2, #32
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	420a      	tst	r2, r1
 80023a8:	d002      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	420a      	tst	r2, r1
 80023ae:	d147      	bne.n	8002440 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b0:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b2:	3a21      	subs	r2, #33	; 0x21
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b6:	3219      	adds	r2, #25
 80023b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80023c0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c2:	421a      	tst	r2, r3
 80023c4:	d168      	bne.n	8002498 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	f7ff ffa9 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ca:	0020      	movs	r0, r4
 80023cc:	f7ff ffaa 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d0:	2300      	movs	r3, #0
 80023d2:	7723      	strb	r3, [r4, #28]
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	e7c9      	b.n	800236c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	3a11      	subs	r2, #17
 80023da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023dc:	320d      	adds	r2, #13
 80023de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e4:	079b      	lsls	r3, r3, #30
 80023e6:	d154      	bne.n	8002492 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	f7ff ff98 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	0020      	movs	r0, r4
 80023ee:	f7ff ff99 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	2300      	movs	r3, #0
 80023f4:	7723      	strb	r3, [r4, #28]
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	e7b1      	b.n	800235e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023fa:	3a09      	subs	r2, #9
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fe:	3207      	adds	r2, #7
 8002400:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002408:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240a:	421a      	tst	r2, r3
 800240c:	d13e      	bne.n	800248c <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	f7ff ff85 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	0020      	movs	r0, r4
 8002414:	f7ff ff86 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002418:	2300      	movs	r3, #0
 800241a:	7723      	strb	r3, [r4, #28]
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	e797      	b.n	8002350 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002420:	3a05      	subs	r2, #5
 8002422:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002424:	3204      	adds	r2, #4
 8002426:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	079b      	lsls	r3, r3, #30
 800242c:	d12b      	bne.n	8002486 <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	f7ff ff75 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002432:	0020      	movs	r0, r4
 8002434:	f7ff ff76 	bl	8002324 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002438:	2300      	movs	r3, #0
 800243a:	7723      	strb	r3, [r4, #28]
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	e780      	b.n	8002342 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002440:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8002442:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002444:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002446:	f000 f8a7 	bl	8002598 <HAL_TIMEx_CommutCallback>
}
 800244a:	e7b1      	b.n	80023b0 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800244c:	3a03      	subs	r2, #3
 800244e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002450:	0020      	movs	r0, r4
 8002452:	f7fe fb0d 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	e78f      	b.n	800237a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800245a:	3a02      	subs	r2, #2
 800245c:	3aff      	subs	r2, #255	; 0xff
 800245e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002460:	0020      	movs	r0, r4
 8002462:	f000 f89b 	bl	800259c <HAL_TIMEx_BreakCallback>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	e78e      	b.n	8002388 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 800246c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800246e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002470:	f000 f896 	bl	80025a0 <HAL_TIMEx_Break2Callback>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	e78d      	b.n	8002394 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002478:	3a81      	subs	r2, #129	; 0x81
 800247a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800247c:	0020      	movs	r0, r4
 800247e:	f7ff ff53 	bl	8002328 <HAL_TIM_TriggerCallback>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	e78d      	b.n	80023a2 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 8002486:	f7ff ff4b 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 800248a:	e7d5      	b.n	8002438 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800248c:	f7ff ff48 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 8002490:	e7c2      	b.n	8002418 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	f7ff ff45 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 8002496:	e7ac      	b.n	80023f2 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002498:	f7ff ff42 	bl	8002320 <HAL_TIM_IC_CaptureCallback>
 800249c:	e798      	b.n	80023d0 <HAL_TIM_IRQHandler+0xa4>
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	fffffeff 	.word	0xfffffeff

080024a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80024a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	4290      	cmp	r0, r2
 80024aa:	d033      	beq.n	8002514 <TIM_Base_SetConfig+0x70>
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	05d2      	lsls	r2, r2, #23
 80024b0:	4290      	cmp	r0, r2
 80024b2:	d01b      	beq.n	80024ec <TIM_Base_SetConfig+0x48>
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <TIM_Base_SetConfig+0x80>)
 80024b6:	4290      	cmp	r0, r2
 80024b8:	d018      	beq.n	80024ec <TIM_Base_SetConfig+0x48>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <TIM_Base_SetConfig+0x84>)
 80024bc:	4290      	cmp	r0, r2
 80024be:	d019      	beq.n	80024f4 <TIM_Base_SetConfig+0x50>
 80024c0:	4a1a      	ldr	r2, [pc, #104]	; (800252c <TIM_Base_SetConfig+0x88>)
 80024c2:	4290      	cmp	r0, r2
 80024c4:	d002      	beq.n	80024cc <TIM_Base_SetConfig+0x28>
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <TIM_Base_SetConfig+0x8c>)
 80024c8:	4290      	cmp	r0, r2
 80024ca:	d117      	bne.n	80024fc <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <TIM_Base_SetConfig+0x90>)
 80024ce:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d0:	68ca      	ldr	r2, [r1, #12]
 80024d2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	4393      	bics	r3, r2
 80024d8:	694a      	ldr	r2, [r1, #20]
 80024da:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80024dc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024de:	688b      	ldr	r3, [r1, #8]
 80024e0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e2:	680b      	ldr	r3, [r1, #0]
 80024e4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e6:	690b      	ldr	r3, [r1, #16]
 80024e8:	6303      	str	r3, [r0, #48]	; 0x30
 80024ea:	e010      	b.n	800250e <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	2270      	movs	r2, #112	; 0x70
 80024ee:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80024f0:	684a      	ldr	r2, [r1, #4]
 80024f2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <TIM_Base_SetConfig+0x90>)
 80024f6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024f8:	68ca      	ldr	r2, [r1, #12]
 80024fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	4393      	bics	r3, r2
 8002500:	694a      	ldr	r2, [r1, #20]
 8002502:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002504:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002506:	688b      	ldr	r3, [r1, #8]
 8002508:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800250a:	680b      	ldr	r3, [r1, #0]
 800250c:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800250e:	2301      	movs	r3, #1
 8002510:	6143      	str	r3, [r0, #20]
}
 8002512:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	2270      	movs	r2, #112	; 0x70
 8002516:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002518:	684a      	ldr	r2, [r1, #4]
 800251a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800251c:	e7d6      	b.n	80024cc <TIM_Base_SetConfig+0x28>
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40002000 	.word	0x40002000
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800
 8002534:	fffffcff 	.word	0xfffffcff

08002538 <HAL_TIM_Base_Init>:
{
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800253c:	d02a      	beq.n	8002594 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	233d      	movs	r3, #61	; 0x3d
 8002540:	5cc3      	ldrb	r3, [r0, r3]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	2302      	movs	r3, #2
 800254a:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800254e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	c901      	ldmia	r1!, {r0}
 8002552:	f7ff ffa7 	bl	80024a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002556:	2301      	movs	r3, #1
 8002558:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 800255a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255e:	3a0a      	subs	r2, #10
 8002560:	54a3      	strb	r3, [r4, r2]
 8002562:	3201      	adds	r2, #1
 8002564:	54a3      	strb	r3, [r4, r2]
 8002566:	3201      	adds	r2, #1
 8002568:	54a3      	strb	r3, [r4, r2]
 800256a:	3201      	adds	r2, #1
 800256c:	54a3      	strb	r3, [r4, r2]
 800256e:	3201      	adds	r2, #1
 8002570:	54a3      	strb	r3, [r4, r2]
 8002572:	3201      	adds	r2, #1
 8002574:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	3201      	adds	r2, #1
 8002578:	54a3      	strb	r3, [r4, r2]
 800257a:	3201      	adds	r2, #1
 800257c:	54a3      	strb	r3, [r4, r2]
 800257e:	3201      	adds	r2, #1
 8002580:	54a3      	strb	r3, [r4, r2]
 8002582:	3201      	adds	r2, #1
 8002584:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002586:	5563      	strb	r3, [r4, r5]
}
 8002588:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800258a:	333c      	adds	r3, #60	; 0x3c
 800258c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800258e:	f7fe fafd 	bl	8000b8c <HAL_TIM_Base_MspInit>
 8002592:	e7d9      	b.n	8002548 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
 8002596:	e7f7      	b.n	8002588 <HAL_TIM_Base_Init+0x50>

08002598 <HAL_TIMEx_CommutCallback>:
 8002598:	4770      	bx	lr
 800259a:	46c0      	nop			; (mov r8, r8)

0800259c <HAL_TIMEx_BreakCallback>:
 800259c:	4770      	bx	lr
 800259e:	46c0      	nop			; (mov r8, r8)

080025a0 <HAL_TIMEx_Break2Callback>:
 80025a0:	4770      	bx	lr
 80025a2:	46c0      	nop			; (mov r8, r8)

080025a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025aa:	2201      	movs	r2, #1
 80025ac:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025b0:	6801      	ldr	r1, [r0, #0]
 80025b2:	4d13      	ldr	r5, [pc, #76]	; (8002600 <UART_EndRxTransfer+0x5c>)
 80025b4:	680b      	ldr	r3, [r1, #0]
 80025b6:	402b      	ands	r3, r5
 80025b8:	600b      	str	r3, [r1, #0]
 80025ba:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025c6:	6802      	ldr	r2, [r0, #0]
 80025c8:	4c0e      	ldr	r4, [pc, #56]	; (8002604 <UART_EndRxTransfer+0x60>)
 80025ca:	6893      	ldr	r3, [r2, #8]
 80025cc:	4023      	ands	r3, r4
 80025ce:	6093      	str	r3, [r2, #8]
 80025d0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10a      	bne.n	80025f0 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e2:	2410      	movs	r4, #16
 80025e4:	6802      	ldr	r2, [r0, #0]
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	43a3      	bics	r3, r4
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025f0:	2388      	movs	r3, #136	; 0x88
 80025f2:	2220      	movs	r2, #32
 80025f4:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f6:	2300      	movs	r3, #0
 80025f8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025fa:	6703      	str	r3, [r0, #112]	; 0x70
}
 80025fc:	bd30      	pop	{r4, r5, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	fffffedf 	.word	0xfffffedf
 8002604:	effffffe 	.word	0xeffffffe

08002608 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 8002608:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	2201      	movs	r2, #1
 8002610:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002614:	2580      	movs	r5, #128	; 0x80
 8002616:	6801      	ldr	r1, [r0, #0]
 8002618:	680b      	ldr	r3, [r1, #0]
 800261a:	43ab      	bics	r3, r5
 800261c:	600b      	str	r3, [r1, #0]
 800261e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002622:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800262a:	6802      	ldr	r2, [r0, #0]
 800262c:	2040      	movs	r0, #64	; 0x40
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	4303      	orrs	r3, r0
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002638:	bd30      	pop	{r4, r5, pc}
 800263a:	46c0      	nop			; (mov r8, r8)

0800263c <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800263c:	2384      	movs	r3, #132	; 0x84
 800263e:	58c3      	ldr	r3, [r0, r3]
{
 8002640:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002642:	2b21      	cmp	r3, #33	; 0x21
 8002644:	d000      	beq.n	8002648 <UART_TxISR_8BIT+0xc>
}
 8002646:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002648:	3335      	adds	r3, #53	; 0x35
 800264a:	5ac2      	ldrh	r2, [r0, r3]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d102      	bne.n	8002656 <UART_TxISR_8BIT+0x1a>
 8002650:	f7ff ffda 	bl	8002608 <UART_TxISR_16BIT.part.0>
 8002654:	e7f7      	b.n	8002646 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002656:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002658:	6801      	ldr	r1, [r0, #0]
 800265a:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 800265c:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800265e:	628c      	str	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002660:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002662:	5ac2      	ldrh	r2, [r0, r3]
 8002664:	3a01      	subs	r2, #1
 8002666:	b292      	uxth	r2, r2
 8002668:	52c2      	strh	r2, [r0, r3]
}
 800266a:	e7ec      	b.n	8002646 <UART_TxISR_8BIT+0xa>

0800266c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800266c:	2384      	movs	r3, #132	; 0x84
 800266e:	58c3      	ldr	r3, [r0, r3]
{
 8002670:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002672:	2b21      	cmp	r3, #33	; 0x21
 8002674:	d000      	beq.n	8002678 <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002676:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002678:	3335      	adds	r3, #53	; 0x35
 800267a:	5ac2      	ldrh	r2, [r0, r3]
 800267c:	2a00      	cmp	r2, #0
 800267e:	d102      	bne.n	8002686 <UART_TxISR_16BIT+0x1a>
 8002680:	f7ff ffc2 	bl	8002608 <UART_TxISR_16BIT.part.0>
 8002684:	e7f7      	b.n	8002676 <UART_TxISR_16BIT+0xa>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002686:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002688:	6804      	ldr	r4, [r0, #0]
 800268a:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 800268c:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800268e:	05d2      	lsls	r2, r2, #23
 8002690:	0dd2      	lsrs	r2, r2, #23
 8002692:	62a2      	str	r2, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002694:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002696:	5ac2      	ldrh	r2, [r0, r3]
 8002698:	3a01      	subs	r2, #1
 800269a:	b292      	uxth	r2, r2
 800269c:	52c2      	strh	r2, [r0, r3]
}
 800269e:	e7ea      	b.n	8002676 <UART_TxISR_16BIT+0xa>

080026a0 <UART_TxISR_16BIT_FIFOEN.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
 80026a0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	2201      	movs	r2, #1
 80026a8:	f382 8810 	msr	PRIMASK, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
    {
      if (huart->TxXferCount == 0U)
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80026ac:	6801      	ldr	r1, [r0, #0]
 80026ae:	4d09      	ldr	r5, [pc, #36]	; (80026d4 <UART_TxISR_16BIT_FIFOEN.part.0+0x34>)
 80026b0:	688b      	ldr	r3, [r1, #8]
 80026b2:	402b      	ands	r3, r5
 80026b4:	608b      	str	r3, [r1, #8]
 80026b6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	f382 8810 	msr	PRIMASK, r2

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	2040      	movs	r0, #64	; 0x40
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	4303      	orrs	r3, r0
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 80026d0:	bd30      	pop	{r4, r5, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	ff7fffff 	.word	0xff7fffff

080026d8 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d8:	2384      	movs	r3, #132	; 0x84
 80026da:	58c3      	ldr	r3, [r0, r3]
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026de:	2b21      	cmp	r3, #33	; 0x21
 80026e0:	d000      	beq.n	80026e4 <UART_TxISR_8BIT_FIFOEN+0xc>
}
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80026e4:	3349      	adds	r3, #73	; 0x49
 80026e6:	5ac3      	ldrh	r3, [r0, r3]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0fa      	beq.n	80026e2 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 80026ec:	2456      	movs	r4, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80026ee:	2580      	movs	r5, #128	; 0x80
 80026f0:	e010      	b.n	8002714 <UART_TxISR_8BIT_FIFOEN+0x3c>
 80026f2:	6802      	ldr	r2, [r0, #0]
 80026f4:	69d1      	ldr	r1, [r2, #28]
 80026f6:	420d      	tst	r5, r1
 80026f8:	d008      	beq.n	800270c <UART_TxISR_8BIT_FIFOEN+0x34>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80026fa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80026fc:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 80026fe:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002700:	6296      	str	r6, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8002702:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002704:	5b02      	ldrh	r2, [r0, r4]
 8002706:	3a01      	subs	r2, #1
 8002708:	b292      	uxth	r2, r2
 800270a:	5302      	strh	r2, [r0, r4]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0e6      	beq.n	80026e2 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002714:	5b02      	ldrh	r2, [r0, r4]
 8002716:	2a00      	cmp	r2, #0
 8002718:	d1eb      	bne.n	80026f2 <UART_TxISR_8BIT_FIFOEN+0x1a>
 800271a:	f7ff ffc1 	bl	80026a0 <UART_TxISR_16BIT_FIFOEN.part.0>
 800271e:	e7e0      	b.n	80026e2 <UART_TxISR_8BIT_FIFOEN+0xa>

08002720 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002720:	2384      	movs	r3, #132	; 0x84
 8002722:	58c3      	ldr	r3, [r0, r3]
{
 8002724:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002726:	2b21      	cmp	r3, #33	; 0x21
 8002728:	d000      	beq.n	800272c <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 800272a:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800272c:	3349      	adds	r3, #73	; 0x49
 800272e:	5ac3      	ldrh	r3, [r0, r3]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0fa      	beq.n	800272a <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002734:	2556      	movs	r5, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002736:	2680      	movs	r6, #128	; 0x80
 8002738:	e012      	b.n	8002760 <UART_TxISR_16BIT_FIFOEN+0x40>
 800273a:	6801      	ldr	r1, [r0, #0]
 800273c:	69ca      	ldr	r2, [r1, #28]
 800273e:	4216      	tst	r6, r2
 8002740:	d00a      	beq.n	8002758 <UART_TxISR_16BIT_FIFOEN+0x38>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8002742:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002744:	8822      	ldrh	r2, [r4, #0]
        huart->pTxBuffPtr += 2U;
 8002746:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002748:	05d2      	lsls	r2, r2, #23
 800274a:	0dd2      	lsrs	r2, r2, #23
 800274c:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800274e:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002750:	5b42      	ldrh	r2, [r0, r5]
 8002752:	3a01      	subs	r2, #1
 8002754:	b292      	uxth	r2, r2
 8002756:	5342      	strh	r2, [r0, r5]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002758:	3b01      	subs	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0e4      	beq.n	800272a <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002760:	5b42      	ldrh	r2, [r0, r5]
 8002762:	2a00      	cmp	r2, #0
 8002764:	d1e9      	bne.n	800273a <UART_TxISR_16BIT_FIFOEN+0x1a>
 8002766:	f7ff ff9b 	bl	80026a0 <UART_TxISR_16BIT_FIFOEN.part.0>
 800276a:	e7de      	b.n	800272a <UART_TxISR_16BIT_FIFOEN+0xa>

0800276c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800276c:	2384      	movs	r3, #132	; 0x84
 800276e:	58c3      	ldr	r3, [r0, r3]
{
 8002770:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002772:	2b20      	cmp	r3, #32
 8002774:	d13b      	bne.n	80027ee <HAL_UART_Transmit_IT+0x82>
    if ((pData == NULL) || (Size == 0U))
 8002776:	2900      	cmp	r1, #0
 8002778:	d037      	beq.n	80027ea <HAL_UART_Transmit_IT+0x7e>
 800277a:	2a00      	cmp	r2, #0
 800277c:	d035      	beq.n	80027ea <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277e:	2480      	movs	r4, #128	; 0x80
 8002780:	6883      	ldr	r3, [r0, #8]
 8002782:	0164      	lsls	r4, r4, #5
 8002784:	42a3      	cmp	r3, r4
 8002786:	d02b      	beq.n	80027e0 <HAL_UART_Transmit_IT+0x74>
    __HAL_LOCK(huart);
 8002788:	2480      	movs	r4, #128	; 0x80
 800278a:	5d05      	ldrb	r5, [r0, r4]
 800278c:	2d01      	cmp	r5, #1
 800278e:	d02e      	beq.n	80027ee <HAL_UART_Transmit_IT+0x82>
 8002790:	2501      	movs	r5, #1
 8002792:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8002794:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002796:	2154      	movs	r1, #84	; 0x54
 8002798:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 800279a:	3102      	adds	r1, #2
 800279c:	5242      	strh	r2, [r0, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	228c      	movs	r2, #140	; 0x8c
 80027a0:	2100      	movs	r1, #0
 80027a2:	5081      	str	r1, [r0, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	3a08      	subs	r2, #8
 80027a6:	3121      	adds	r1, #33	; 0x21
 80027a8:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80027ae:	0592      	lsls	r2, r2, #22
 80027b0:	4291      	cmp	r1, r2
 80027b2:	d01e      	beq.n	80027f2 <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0152      	lsls	r2, r2, #5
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d032      	beq.n	8002822 <HAL_UART_Transmit_IT+0xb6>
        huart->TxISR = UART_TxISR_8BIT;
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_UART_Transmit_IT+0xcc>)
 80027be:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	2300      	movs	r3, #0
 80027c4:	5443      	strb	r3, [r0, r1]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	3301      	adds	r3, #1
 80027cc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	f384 8810 	msr	PRIMASK, r4
    return HAL_OK;
 80027dc:	2000      	movs	r0, #0
}
 80027de:	e005      	b.n	80027ec <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	6904      	ldr	r4, [r0, #16]
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d1d0      	bne.n	8002788 <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80027e6:	07cc      	lsls	r4, r1, #31
 80027e8:	d5ce      	bpl.n	8002788 <HAL_UART_Transmit_IT+0x1c>
      return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
}
 80027ec:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80027ee:	2002      	movs	r0, #2
 80027f0:	e7fc      	b.n	80027ec <HAL_UART_Transmit_IT+0x80>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0152      	lsls	r2, r2, #5
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d018      	beq.n	800282c <HAL_UART_Transmit_IT+0xc0>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_UART_Transmit_IT+0xd0>)
 80027fc:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80027fe:	2200      	movs	r2, #0
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002808:	3b7f      	subs	r3, #127	; 0x7f
 800280a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	6890      	ldr	r0, [r2, #8]
 8002816:	4303      	orrs	r3, r0
 8002818:	6093      	str	r3, [r2, #8]
 800281a:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 800281e:	2000      	movs	r0, #0
}
 8002820:	e7e4      	b.n	80027ec <HAL_UART_Transmit_IT+0x80>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002822:	6903      	ldr	r3, [r0, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1c9      	bne.n	80027bc <HAL_UART_Transmit_IT+0x50>
        huart->TxISR = UART_TxISR_16BIT;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_UART_Transmit_IT+0xd4>)
 800282a:	e7c8      	b.n	80027be <HAL_UART_Transmit_IT+0x52>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	6903      	ldr	r3, [r0, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e3      	bne.n	80027fa <HAL_UART_Transmit_IT+0x8e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_UART_Transmit_IT+0xd8>)
 8002834:	e7e2      	b.n	80027fc <HAL_UART_Transmit_IT+0x90>
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	0800263d 	.word	0x0800263d
 800283c:	080026d9 	.word	0x080026d9
 8002840:	0800266d 	.word	0x0800266d
 8002844:	08002721 	.word	0x08002721

08002848 <HAL_UART_ErrorCallback>:
 8002848:	4770      	bx	lr
 800284a:	46c0      	nop			; (mov r8, r8)

0800284c <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	225e      	movs	r2, #94	; 0x5e
{
 8002850:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002852:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002854:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002856:	3a08      	subs	r2, #8
 8002858:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 800285a:	f7ff fff5 	bl	8002848 <HAL_UART_ErrorCallback>
}
 800285e:	bd10      	pop	{r4, pc}

08002860 <HAL_UART_AbortReceiveCpltCallback>:
 8002860:	4770      	bx	lr
 8002862:	46c0      	nop			; (mov r8, r8)

08002864 <HAL_UART_AbortReceive_IT>:
{
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002868:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	2201      	movs	r2, #1
 800286e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8002872:	6821      	ldr	r1, [r4, #0]
 8002874:	4d2b      	ldr	r5, [pc, #172]	; (8002924 <HAL_UART_AbortReceive_IT+0xc0>)
 8002876:	680b      	ldr	r3, [r1, #0]
 8002878:	402b      	ands	r3, r5
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002880:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	4827      	ldr	r0, [pc, #156]	; (8002928 <HAL_UART_AbortReceive_IT+0xc4>)
 800288c:	6893      	ldr	r3, [r2, #8]
 800288e:	4003      	ands	r3, r0
 8002890:	6093      	str	r3, [r2, #8]
 8002892:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002896:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10a      	bne.n	80028b2 <HAL_UART_AbortReceive_IT+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80028a4:	2010      	movs	r0, #16
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	4383      	bics	r3, r0
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	f381 8810 	msr	PRIMASK, r1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	0018      	movs	r0, r3
 80028b6:	6821      	ldr	r1, [r4, #0]
 80028b8:	688a      	ldr	r2, [r1, #8]
 80028ba:	4010      	ands	r0, r2
 80028bc:	4213      	tst	r3, r2
 80028be:	d02a      	beq.n	8002916 <HAL_UART_AbortReceive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	2201      	movs	r2, #1
 80028c6:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ca:	6821      	ldr	r1, [r4, #0]
 80028cc:	688a      	ldr	r2, [r1, #8]
 80028ce:	439a      	bics	r2, r3
 80028d0:	608a      	str	r2, [r1, #8]
 80028d2:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmarx != NULL)
 80028d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80028d8:	2800      	cmp	r0, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_UART_AbortReceive_IT+0xc8>)
 80028de:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028e0:	f7fe fe66 	bl	80015b0 <HAL_DMA_Abort_IT>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d002      	beq.n	80028ee <HAL_UART_AbortReceive_IT+0x8a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80028ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028ec:	4798      	blx	r3
}
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
      huart->RxXferCount = 0U;
 80028f2:	235e      	movs	r3, #94	; 0x5e
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80028f4:	220f      	movs	r2, #15
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028f6:	2108      	movs	r1, #8
      huart->RxXferCount = 0U;
 80028f8:	52e0      	strh	r0, [r4, r3]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80028fa:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr = NULL;
 80028fc:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80028fe:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8002906:	2388      	movs	r3, #136	; 0x88
    huart->RxState = HAL_UART_STATE_READY;
 8002908:	2220      	movs	r2, #32
 800290a:	50e2      	str	r2, [r4, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	66e0      	str	r0, [r4, #108]	; 0x6c
    HAL_UART_AbortReceiveCpltCallback(huart);
 800290e:	0020      	movs	r0, r4
 8002910:	f7ff ffa6 	bl	8002860 <HAL_UART_AbortReceiveCpltCallback>
 8002914:	e7eb      	b.n	80028ee <HAL_UART_AbortReceive_IT+0x8a>
    huart->RxXferCount = 0U;
 8002916:	235e      	movs	r3, #94	; 0x5e
 8002918:	52e0      	strh	r0, [r4, r3]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800291a:	3b4f      	subs	r3, #79	; 0x4f
    huart->pRxBuffPtr = NULL;
 800291c:	65a0      	str	r0, [r4, #88]	; 0x58
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800291e:	620b      	str	r3, [r1, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8002920:	3379      	adds	r3, #121	; 0x79
 8002922:	e7f1      	b.n	8002908 <HAL_UART_AbortReceive_IT+0xa4>
 8002924:	fffffedf 	.word	0xfffffedf
 8002928:	effffffe 	.word	0xeffffffe
 800292c:	08002931 	.word	0x08002931

08002930 <UART_DMARxOnlyAbortCallback>:
  huart->RxXferCount = 0U;
 8002930:	2100      	movs	r1, #0
 8002932:	235e      	movs	r3, #94	; 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002934:	220f      	movs	r2, #15
{
 8002936:	b510      	push	{r4, lr}
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002938:	2408      	movs	r4, #8
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800293c:	52c1      	strh	r1, [r0, r3]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800293e:	6803      	ldr	r3, [r0, #0]
 8002940:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	4322      	orrs	r2, r4
 8002946:	619a      	str	r2, [r3, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	2388      	movs	r3, #136	; 0x88
 800294a:	2220      	movs	r2, #32
 800294c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	66c1      	str	r1, [r0, #108]	; 0x6c
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002950:	f7ff ff86 	bl	8002860 <HAL_UART_AbortReceiveCpltCallback>
}
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			; (mov r8, r8)

08002958 <HAL_UARTEx_RxEventCallback>:
}
 8002958:	4770      	bx	lr
 800295a:	46c0      	nop			; (mov r8, r8)

0800295c <HAL_UART_IRQHandler>:
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	46d6      	mov	lr, sl
 8002960:	464f      	mov	r7, r9
 8002962:	4646      	mov	r6, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002964:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002966:	4db2      	ldr	r5, [pc, #712]	; (8002c30 <HAL_UART_IRQHandler+0x2d4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002968:	69d3      	ldr	r3, [r2, #28]
{
 800296a:	0004      	movs	r4, r0
 800296c:	b5c0      	push	{r6, r7, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296e:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002970:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8002972:	422b      	tst	r3, r5
 8002974:	d02e      	beq.n	80029d4 <HAL_UART_IRQHandler+0x78>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002976:	4eaf      	ldr	r6, [pc, #700]	; (8002c34 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002978:	4daf      	ldr	r5, [pc, #700]	; (8002c38 <HAL_UART_IRQHandler+0x2dc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800297a:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800297c:	4005      	ands	r5, r0
 800297e:	4335      	orrs	r5, r6
 8002980:	d160      	bne.n	8002a44 <HAL_UART_IRQHandler+0xe8>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002982:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002984:	2d01      	cmp	r5, #1
 8002986:	d033      	beq.n	80029f0 <HAL_UART_IRQHandler+0x94>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002988:	2580      	movs	r5, #128	; 0x80
 800298a:	036d      	lsls	r5, r5, #13
 800298c:	422b      	tst	r3, r5
 800298e:	d002      	beq.n	8002996 <HAL_UART_IRQHandler+0x3a>
 8002990:	024e      	lsls	r6, r1, #9
 8002992:	d500      	bpl.n	8002996 <HAL_UART_IRQHandler+0x3a>
 8002994:	e0db      	b.n	8002b4e <HAL_UART_IRQHandler+0x1f2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	421a      	tst	r2, r3
 800299a:	d006      	beq.n	80029aa <HAL_UART_IRQHandler+0x4e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800299c:	2580      	movs	r5, #128	; 0x80
 800299e:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029a0:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029a2:	4029      	ands	r1, r5
 80029a4:	4311      	orrs	r1, r2
 80029a6:	d000      	beq.n	80029aa <HAL_UART_IRQHandler+0x4e>
 80029a8:	e0ca      	b.n	8002b40 <HAL_UART_IRQHandler+0x1e4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	421a      	tst	r2, r3
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_IRQHandler+0x5a>
 80029b0:	4202      	tst	r2, r0
 80029b2:	d000      	beq.n	80029b6 <HAL_UART_IRQHandler+0x5a>
 80029b4:	e0d4      	b.n	8002b60 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	d502      	bpl.n	80029c0 <HAL_UART_IRQHandler+0x64>
 80029ba:	0042      	lsls	r2, r0, #1
 80029bc:	d500      	bpl.n	80029c0 <HAL_UART_IRQHandler+0x64>
 80029be:	e0e3      	b.n	8002b88 <HAL_UART_IRQHandler+0x22c>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	d502      	bpl.n	80029ca <HAL_UART_IRQHandler+0x6e>
 80029c4:	2800      	cmp	r0, #0
 80029c6:	da00      	bge.n	80029ca <HAL_UART_IRQHandler+0x6e>
 80029c8:	e12a      	b.n	8002c20 <HAL_UART_IRQHandler+0x2c4>
}
 80029ca:	bce0      	pop	{r5, r6, r7}
 80029cc:	46ba      	mov	sl, r7
 80029ce:	46b1      	mov	r9, r6
 80029d0:	46a8      	mov	r8, r5
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029d4:	2520      	movs	r5, #32
 80029d6:	421d      	tst	r5, r3
 80029d8:	d0d3      	beq.n	8002982 <HAL_UART_IRQHandler+0x26>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029da:	2680      	movs	r6, #128	; 0x80
 80029dc:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029de:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029e0:	400e      	ands	r6, r1
 80029e2:	4335      	orrs	r5, r6
 80029e4:	d0cd      	beq.n	8002982 <HAL_UART_IRQHandler+0x26>
      if (huart->RxISR != NULL)
 80029e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d000      	beq.n	80029ee <HAL_UART_IRQHandler+0x92>
 80029ec:	e0ac      	b.n	8002b48 <HAL_UART_IRQHandler+0x1ec>
 80029ee:	e7ec      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029f0:	2610      	movs	r6, #16
 80029f2:	421e      	tst	r6, r3
 80029f4:	d0c8      	beq.n	8002988 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029f6:	4206      	tst	r6, r0
 80029f8:	d0c6      	beq.n	8002988 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029fe:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	6892      	ldr	r2, [r2, #8]
 8002a02:	4010      	ands	r0, r2
 8002a04:	4213      	tst	r3, r2
 8002a06:	d100      	bne.n	8002a0a <HAL_UART_IRQHandler+0xae>
 8002a08:	e0c9      	b.n	8002b9e <HAL_UART_IRQHandler+0x242>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a0a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002a0c:	6810      	ldr	r0, [r2, #0]
 8002a0e:	6842      	ldr	r2, [r0, #4]
 8002a10:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	d0d9      	beq.n	80029ca <HAL_UART_IRQHandler+0x6e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a16:	215c      	movs	r1, #92	; 0x5c
 8002a18:	468a      	mov	sl, r1
 8002a1a:	5a61      	ldrh	r1, [r4, r1]
 8002a1c:	4291      	cmp	r1, r2
 8002a1e:	d9d4      	bls.n	80029ca <HAL_UART_IRQHandler+0x6e>
        huart->RxXferCount = nb_remaining_rx_data;
 8002a20:	275e      	movs	r7, #94	; 0x5e
 8002a22:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a24:	2220      	movs	r2, #32
 8002a26:	0017      	movs	r7, r2
 8002a28:	6800      	ldr	r0, [r0, #0]
 8002a2a:	4007      	ands	r7, r0
 8002a2c:	46bc      	mov	ip, r7
 8002a2e:	4202      	tst	r2, r0
 8002a30:	d100      	bne.n	8002a34 <HAL_UART_IRQHandler+0xd8>
 8002a32:	e109      	b.n	8002c48 <HAL_UART_IRQHandler+0x2ec>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a34:	235e      	movs	r3, #94	; 0x5e
 8002a36:	5ae3      	ldrh	r3, [r4, r3]
 8002a38:	0020      	movs	r0, r4
 8002a3a:	1ac9      	subs	r1, r1, r3
 8002a3c:	b289      	uxth	r1, r1
 8002a3e:	f7ff ff8b 	bl	8002958 <HAL_UARTEx_RxEventCallback>
 8002a42:	e7c2      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a44:	2501      	movs	r5, #1
 8002a46:	421d      	tst	r5, r3
 8002a48:	d008      	beq.n	8002a5c <HAL_UART_IRQHandler+0x100>
 8002a4a:	05c7      	lsls	r7, r0, #23
 8002a4c:	d506      	bpl.n	8002a5c <HAL_UART_IRQHandler+0x100>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a4e:	278c      	movs	r7, #140	; 0x8c
 8002a50:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a52:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a54:	59e7      	ldr	r7, [r4, r7]
 8002a56:	433d      	orrs	r5, r7
 8002a58:	4667      	mov	r7, ip
 8002a5a:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a5c:	2502      	movs	r5, #2
 8002a5e:	421d      	tst	r5, r3
 8002a60:	d05d      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1c2>
 8002a62:	07cf      	lsls	r7, r1, #31
 8002a64:	d50b      	bpl.n	8002a7e <HAL_UART_IRQHandler+0x122>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a66:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a68:	358a      	adds	r5, #138	; 0x8a
 8002a6a:	2704      	movs	r7, #4
 8002a6c:	46ac      	mov	ip, r5
 8002a6e:	5965      	ldr	r5, [r4, r5]
 8002a70:	46b8      	mov	r8, r7
 8002a72:	433d      	orrs	r5, r7
 8002a74:	4667      	mov	r7, ip
 8002a76:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a78:	4645      	mov	r5, r8
 8002a7a:	421d      	tst	r5, r3
 8002a7c:	d153      	bne.n	8002b26 <HAL_UART_IRQHandler+0x1ca>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a7e:	2708      	movs	r7, #8
 8002a80:	421f      	tst	r7, r3
 8002a82:	d008      	beq.n	8002a96 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a84:	2520      	movs	r5, #32
 8002a86:	4005      	ands	r5, r0
 8002a88:	432e      	orrs	r6, r5
 8002a8a:	d004      	beq.n	8002a96 <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8c:	268c      	movs	r6, #140	; 0x8c
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a8e:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a90:	59a5      	ldr	r5, [r4, r6]
 8002a92:	432f      	orrs	r7, r5
 8002a94:	51a7      	str	r7, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a96:	2580      	movs	r5, #128	; 0x80
 8002a98:	012d      	lsls	r5, r5, #4
 8002a9a:	422b      	tst	r3, r5
 8002a9c:	d007      	beq.n	8002aae <HAL_UART_IRQHandler+0x152>
 8002a9e:	0146      	lsls	r6, r0, #5
 8002aa0:	d505      	bpl.n	8002aae <HAL_UART_IRQHandler+0x152>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002aa2:	268c      	movs	r6, #140	; 0x8c
 8002aa4:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002aa8:	59a5      	ldr	r5, [r4, r6]
 8002aaa:	433d      	orrs	r5, r7
 8002aac:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aae:	258c      	movs	r5, #140	; 0x8c
 8002ab0:	5965      	ldr	r5, [r4, r5]
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	d100      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x15c>
 8002ab6:	e788      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ab8:	2520      	movs	r5, #32
 8002aba:	421d      	tst	r5, r3
 8002abc:	d005      	beq.n	8002aca <HAL_UART_IRQHandler+0x16e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002abe:	4028      	ands	r0, r5
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ac0:	2580      	movs	r5, #128	; 0x80
 8002ac2:	056d      	lsls	r5, r5, #21
 8002ac4:	4029      	ands	r1, r5
 8002ac6:	4308      	orrs	r0, r1
 8002ac8:	d162      	bne.n	8002b90 <HAL_UART_IRQHandler+0x234>
      errorcode = huart->ErrorCode;
 8002aca:	268c      	movs	r6, #140	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002acc:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ace:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 8002ad0:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad2:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ad4:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad6:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8002ad8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ada:	431d      	orrs	r5, r3
 8002adc:	d100      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x184>
 8002ade:	e0a3      	b.n	8002c28 <HAL_UART_IRQHandler+0x2cc>
        UART_EndRxTransfer(huart);
 8002ae0:	f7ff fd60 	bl	80025a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	421f      	tst	r7, r3
 8002aea:	d035      	beq.n	8002b58 <HAL_UART_IRQHandler+0x1fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	2301      	movs	r3, #1
 8002af2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	6893      	ldr	r3, [r2, #8]
 8002afa:	43bb      	bics	r3, r7
 8002afc:	6093      	str	r3, [r2, #8]
 8002afe:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002b02:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d027      	beq.n	8002b58 <HAL_UART_IRQHandler+0x1fc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_UART_IRQHandler+0x2e0>)
 8002b0a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b0c:	f7fe fd50 	bl	80015b0 <HAL_DMA_Abort_IT>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d100      	bne.n	8002b16 <HAL_UART_IRQHandler+0x1ba>
 8002b14:	e759      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b16:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002b18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b1a:	4798      	blx	r3
 8002b1c:	e755      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1e:	075d      	lsls	r5, r3, #29
 8002b20:	d5ad      	bpl.n	8002a7e <HAL_UART_IRQHandler+0x122>
 8002b22:	07cd      	lsls	r5, r1, #31
 8002b24:	d5ab      	bpl.n	8002a7e <HAL_UART_IRQHandler+0x122>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b26:	2504      	movs	r5, #4
 8002b28:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2a:	3588      	adds	r5, #136	; 0x88
 8002b2c:	46a9      	mov	r9, r5
 8002b2e:	5965      	ldr	r5, [r4, r5]
 8002b30:	46a8      	mov	r8, r5
 8002b32:	2502      	movs	r5, #2
 8002b34:	4647      	mov	r7, r8
 8002b36:	432f      	orrs	r7, r5
 8002b38:	003d      	movs	r5, r7
 8002b3a:	464f      	mov	r7, r9
 8002b3c:	51e5      	str	r5, [r4, r7]
 8002b3e:	e79e      	b.n	8002a7e <HAL_UART_IRQHandler+0x122>
    if (huart->TxISR != NULL)
 8002b40:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d100      	bne.n	8002b48 <HAL_UART_IRQHandler+0x1ec>
 8002b46:	e740      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
      huart->TxISR(huart);
 8002b48:	0020      	movs	r0, r4
 8002b4a:	4798      	blx	r3
 8002b4c:	e73d      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
    HAL_UARTEx_WakeupCallback(huart);
 8002b4e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b50:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002b52:	f000 fe4f 	bl	80037f4 <HAL_UARTEx_WakeupCallback>
    return;
 8002b56:	e738      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
            HAL_UART_ErrorCallback(huart);
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff fe75 	bl	8002848 <HAL_UART_ErrorCallback>
 8002b5e:	e734      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	2301      	movs	r3, #1
 8002b66:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b6a:	6821      	ldr	r1, [r4, #0]
 8002b6c:	680b      	ldr	r3, [r1, #0]
 8002b6e:	4393      	bics	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
 8002b72:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b76:	2384      	movs	r3, #132	; 0x84
 8002b78:	3a20      	subs	r2, #32
 8002b7a:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b7c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b7e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002b80:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8002b82:	f001 fdd3 	bl	800472c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b86:	e720      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f000 fe37 	bl	80037fc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002b8e:	e71c      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
        if (huart->RxISR != NULL)
 8002b90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d099      	beq.n	8002aca <HAL_UART_IRQHandler+0x16e>
          huart->RxISR(huart);
 8002b96:	0020      	movs	r0, r4
 8002b98:	4798      	blx	r3
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	e795      	b.n	8002aca <HAL_UART_IRQHandler+0x16e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b9e:	225e      	movs	r2, #94	; 0x5e
 8002ba0:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8002ba2:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba4:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	d100      	bne.n	8002bac <HAL_UART_IRQHandler+0x250>
 8002baa:	e70e      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bac:	225c      	movs	r2, #92	; 0x5c
 8002bae:	5aa1      	ldrh	r1, [r4, r2]
 8002bb0:	1ac9      	subs	r1, r1, r3
 8002bb2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002bb4:	2900      	cmp	r1, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_UART_IRQHandler+0x25e>
 8002bb8:	e707      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bba:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4698      	mov	r8, r3
 8002bca:	4642      	mov	r2, r8
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <HAL_UART_IRQHandler+0x2e4>)
 8002bce:	401a      	ands	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bda:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	4699      	mov	r9, r3
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4698      	mov	r8, r3
 8002bea:	4642      	mov	r2, r8
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_UART_IRQHandler+0x2e8>)
 8002bee:	401a      	ands	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	464a      	mov	r2, r9
 8002bf4:	6093      	str	r3, [r2, #8]
 8002bf6:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	2388      	movs	r3, #136	; 0x88
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002c02:	6720      	str	r0, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	43b3      	bics	r3, r6
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c18:	0020      	movs	r0, r4
 8002c1a:	f7ff fe9d 	bl	8002958 <HAL_UARTEx_RxEventCallback>
 8002c1e:	e6d4      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c20:	0020      	movs	r0, r4
 8002c22:	f000 fde9 	bl	80037f8 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002c26:	e6d0      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
        HAL_UART_ErrorCallback(huart);
 8002c28:	f7ff fe0e 	bl	8002848 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	51a5      	str	r5, [r4, r6]
 8002c2e:	e6cc      	b.n	80029ca <HAL_UART_IRQHandler+0x6e>
 8002c30:	0000080f 	.word	0x0000080f
 8002c34:	10000001 	.word	0x10000001
 8002c38:	04000120 	.word	0x04000120
 8002c3c:	0800284d 	.word	0x0800284d
 8002c40:	fffffedf 	.word	0xfffffedf
 8002c44:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c48:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	4f17      	ldr	r7, [pc, #92]	; (8002cb0 <HAL_UART_IRQHandler+0x354>)
 8002c54:	6801      	ldr	r1, [r0, #0]
 8002c56:	4039      	ands	r1, r7
 8002c58:	6001      	str	r1, [r0, #0]
 8002c5a:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5e:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c62:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	6881      	ldr	r1, [r0, #8]
 8002c6a:	43a9      	bics	r1, r5
 8002c6c:	6081      	str	r1, [r0, #8]
 8002c6e:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	6881      	ldr	r1, [r0, #8]
 8002c7e:	4399      	bics	r1, r3
 8002c80:	6081      	str	r1, [r0, #8]
 8002c82:	f388 8810 	msr	PRIMASK, r8
          huart->RxState = HAL_UART_STATE_READY;
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	4663      	mov	r3, ip
 8002c8c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	43b3      	bics	r3, r6
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ca2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002ca4:	f7fe fc46 	bl	8001534 <HAL_DMA_Abort>
 8002ca8:	4653      	mov	r3, sl
 8002caa:	5ae1      	ldrh	r1, [r4, r3]
 8002cac:	e6c2      	b.n	8002a34 <HAL_UART_IRQHandler+0xd8>
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	fffffeff 	.word	0xfffffeff

08002cb4 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8002cb4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cc0:	6801      	ldr	r1, [r0, #0]
 8002cc2:	4d19      	ldr	r5, [pc, #100]	; (8002d28 <UART_RxISR_16BIT.part.0+0x74>)
 8002cc4:	680b      	ldr	r3, [r1, #0]
 8002cc6:	402b      	ands	r3, r5
 8002cc8:	600b      	str	r3, [r1, #0]
 8002cca:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	6801      	ldr	r1, [r0, #0]
 8002cd8:	688b      	ldr	r3, [r1, #8]
 8002cda:	4393      	bics	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
 8002cde:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	2388      	movs	r3, #136	; 0x88
 8002ce4:	321f      	adds	r2, #31
 8002ce6:	50c2      	str	r2, [r0, r3]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ce8:	2200      	movs	r2, #0

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8002cec:	6702      	str	r2, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d116      	bne.n	8002d20 <UART_RxISR_16BIT.part.0+0x6c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	66c2      	str	r2, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	6801      	ldr	r1, [r0, #0]
 8002cfe:	3210      	adds	r2, #16
 8002d00:	680b      	ldr	r3, [r1, #0]
 8002d02:	4393      	bics	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
 8002d06:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d0a:	6803      	ldr	r3, [r0, #0]
 8002d0c:	69d9      	ldr	r1, [r3, #28]
 8002d0e:	420a      	tst	r2, r1
 8002d10:	d104      	bne.n	8002d1c <UART_RxISR_16BIT.part.0+0x68>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d12:	235c      	movs	r3, #92	; 0x5c
 8002d14:	5ac1      	ldrh	r1, [r0, r3]
 8002d16:	f7ff fe1f 	bl	8002958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d1c:	621a      	str	r2, [r3, #32]
 8002d1e:	e7f8      	b.n	8002d12 <UART_RxISR_16BIT.part.0+0x5e>
        HAL_UART_RxCpltCallback(huart);
 8002d20:	f001 fd30 	bl	8004784 <HAL_UART_RxCpltCallback>
}
 8002d24:	e7f9      	b.n	8002d1a <UART_RxISR_16BIT.part.0+0x66>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	fffffedf 	.word	0xfffffedf

08002d2c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d2c:	2388      	movs	r3, #136	; 0x88
 8002d2e:	58c3      	ldr	r3, [r0, r3]
{
 8002d30:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d005      	beq.n	8002d42 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d36:	2108      	movs	r1, #8
 8002d38:	6802      	ldr	r2, [r0, #0]
 8002d3a:	6993      	ldr	r3, [r2, #24]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6193      	str	r3, [r2, #24]
  }
}
 8002d40:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 8002d42:	2160      	movs	r1, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d44:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d46:	5a41      	ldrh	r1, [r0, r1]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d4a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	801a      	strh	r2, [r3, #0]
    huart->RxXferCount--;
 8002d50:	225e      	movs	r2, #94	; 0x5e
    huart->pRxBuffPtr += 2U;
 8002d52:	3302      	adds	r3, #2
 8002d54:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d56:	5a83      	ldrh	r3, [r0, r2]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002d5e:	5a83      	ldrh	r3, [r0, r2]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ed      	bne.n	8002d40 <UART_RxISR_16BIT+0x14>
 8002d64:	f7ff ffa6 	bl	8002cb4 <UART_RxISR_16BIT.part.0>
 8002d68:	e7ea      	b.n	8002d40 <UART_RxISR_16BIT+0x14>
 8002d6a:	46c0      	nop			; (mov r8, r8)

08002d6c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d6c:	2388      	movs	r3, #136	; 0x88
 8002d6e:	58c3      	ldr	r3, [r0, r3]
{
 8002d70:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d72:	2b22      	cmp	r3, #34	; 0x22
 8002d74:	d005      	beq.n	8002d82 <UART_RxISR_8BIT+0x16>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d76:	2108      	movs	r1, #8
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6993      	ldr	r3, [r2, #24]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6193      	str	r3, [r2, #24]
}
 8002d80:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 8002d82:	2260      	movs	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d84:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d86:	5a82      	ldrh	r2, [r0, r2]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002d8e:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8002d90:	225e      	movs	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8002d92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d94:	3301      	adds	r3, #1
 8002d96:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d98:	5a83      	ldrh	r3, [r0, r2]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002da0:	5a83      	ldrh	r3, [r0, r2]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1ec      	bne.n	8002d80 <UART_RxISR_8BIT+0x14>
 8002da6:	f7ff ff85 	bl	8002cb4 <UART_RxISR_16BIT.part.0>
 8002daa:	e7e9      	b.n	8002d80 <UART_RxISR_8BIT+0x14>

08002dac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002dae:	6803      	ldr	r3, [r0, #0]
{
 8002db0:	464e      	mov	r6, r9
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002db2:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002db4:	681a      	ldr	r2, [r3, #0]
{
 8002db6:	0004      	movs	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002db8:	4691      	mov	r9, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dba:	2288      	movs	r2, #136	; 0x88
{
 8002dbc:	46de      	mov	lr, fp
 8002dbe:	4657      	mov	r7, sl
 8002dc0:	4645      	mov	r5, r8
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002dc2:	6898      	ldr	r0, [r3, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc4:	58a2      	ldr	r2, [r4, r2]
{
 8002dc6:	b5e0      	push	{r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc8:	2a22      	cmp	r2, #34	; 0x22
 8002dca:	d009      	beq.n	8002de0 <UART_RxISR_8BIT_FIFOEN+0x34>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002dcc:	2108      	movs	r1, #8
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
  }
}
 8002dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd6:	46bb      	mov	fp, r7
 8002dd8:	46b2      	mov	sl, r6
 8002dda:	46a9      	mov	r9, r5
 8002ddc:	46a0      	mov	r8, r4
 8002dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8002de0:	3246      	adds	r2, #70	; 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002de2:	5aa2      	ldrh	r2, [r4, r2]
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d100      	bne.n	8002dea <UART_RxISR_8BIT_FIFOEN+0x3e>
 8002de8:	e0b9      	b.n	8002f5e <UART_RxISR_8BIT_FIFOEN+0x1b2>
 8002dea:	068a      	lsls	r2, r1, #26
 8002dec:	d400      	bmi.n	8002df0 <UART_RxISR_8BIT_FIFOEN+0x44>
 8002dee:	e08a      	b.n	8002f06 <UART_RxISR_8BIT_FIFOEN+0x15a>
 8002df0:	2260      	movs	r2, #96	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df2:	2601      	movs	r6, #1
 8002df4:	5ca2      	ldrb	r2, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df6:	4030      	ands	r0, r6
 8002df8:	4692      	mov	sl, r2
      huart->RxXferCount--;
 8002dfa:	255e      	movs	r5, #94	; 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dfc:	4680      	mov	r8, r0
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002dfe:	4652      	mov	r2, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e02:	4013      	ands	r3, r2
 8002e04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002e06:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002e0e:	5b63      	ldrh	r3, [r4, r5]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e1a:	077a      	lsls	r2, r7, #29
 8002e1c:	d023      	beq.n	8002e66 <UART_RxISR_8BIT_FIFOEN+0xba>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e1e:	423e      	tst	r6, r7
 8002e20:	d007      	beq.n	8002e32 <UART_RxISR_8BIT_FIFOEN+0x86>
 8002e22:	464a      	mov	r2, r9
 8002e24:	05d2      	lsls	r2, r2, #23
 8002e26:	d504      	bpl.n	8002e32 <UART_RxISR_8BIT_FIFOEN+0x86>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e28:	218c      	movs	r1, #140	; 0x8c
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e2a:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e2c:	5862      	ldr	r2, [r4, r1]
 8002e2e:	4332      	orrs	r2, r6
 8002e30:	5062      	str	r2, [r4, r1]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e32:	2202      	movs	r2, #2
 8002e34:	423a      	tst	r2, r7
 8002e36:	d054      	beq.n	8002ee2 <UART_RxISR_8BIT_FIFOEN+0x136>
 8002e38:	4641      	mov	r1, r8
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	d00e      	beq.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0xb0>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e3e:	208c      	movs	r0, #140	; 0x8c
 8002e40:	2104      	movs	r1, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e42:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e44:	5822      	ldr	r2, [r4, r0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	5022      	str	r2, [r4, r0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e4a:	4239      	tst	r1, r7
 8002e4c:	d006      	beq.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e4e:	2204      	movs	r2, #4
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e50:	2102      	movs	r1, #2
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e52:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e54:	3288      	adds	r2, #136	; 0x88
 8002e56:	58a3      	ldr	r3, [r4, r2]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e5c:	238c      	movs	r3, #140	; 0x8c
 8002e5e:	469b      	mov	fp, r3
 8002e60:	58e3      	ldr	r3, [r4, r3]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d174      	bne.n	8002f50 <UART_RxISR_8BIT_FIFOEN+0x1a4>
      if (huart->RxXferCount == 0U)
 8002e66:	5b63      	ldrh	r3, [r4, r5]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	4693      	mov	fp, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d134      	bne.n	8002eda <UART_RxISR_8BIT_FIFOEN+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e78:	6821      	ldr	r1, [r4, #0]
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <UART_RxISR_8BIT_FIFOEN+0x1b8>)
 8002e7c:	680b      	ldr	r3, [r1, #0]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
 8002e82:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e8e:	6821      	ldr	r1, [r4, #0]
 8002e90:	4a35      	ldr	r2, [pc, #212]	; (8002f68 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8002e92:	688b      	ldr	r3, [r1, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	2388      	movs	r3, #136	; 0x88
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	50e1      	str	r1, [r4, r3]
        huart->RxISR = NULL;
 8002ea2:	465b      	mov	r3, fp
 8002ea4:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d127      	bne.n	8002efc <UART_RxISR_8BIT_FIFOEN+0x150>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	465a      	mov	r2, fp
 8002eae:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	2210      	movs	r2, #16
 8002eba:	6821      	ldr	r1, [r4, #0]
 8002ebc:	680b      	ldr	r3, [r1, #0]
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
 8002ec2:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	69d9      	ldr	r1, [r3, #28]
 8002eca:	420a      	tst	r2, r1
 8002ecc:	d000      	beq.n	8002ed0 <UART_RxISR_8BIT_FIFOEN+0x124>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ece:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ed0:	235c      	movs	r3, #92	; 0x5c
 8002ed2:	0020      	movs	r0, r4
 8002ed4:	5ae1      	ldrh	r1, [r4, r3]
 8002ed6:	f7ff fd3f 	bl	8002958 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002eda:	06bb      	lsls	r3, r7, #26
 8002edc:	d513      	bpl.n	8002f06 <UART_RxISR_8BIT_FIFOEN+0x15a>
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	e78d      	b.n	8002dfe <UART_RxISR_8BIT_FIFOEN+0x52>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ee2:	077a      	lsls	r2, r7, #29
 8002ee4:	d5ba      	bpl.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0xb0>
 8002ee6:	4642      	mov	r2, r8
 8002ee8:	2a00      	cmp	r2, #0
 8002eea:	d0b7      	beq.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eec:	2204      	movs	r2, #4
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eee:	2102      	movs	r1, #2
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ef0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ef2:	3288      	adds	r2, #136	; 0x88
 8002ef4:	58a3      	ldr	r3, [r4, r2]
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	50a3      	str	r3, [r4, r2]
 8002efa:	e7af      	b.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0xb0>
          HAL_UART_RxCpltCallback(huart);
 8002efc:	0020      	movs	r0, r4
 8002efe:	f001 fc41 	bl	8004784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002f02:	06bb      	lsls	r3, r7, #26
 8002f04:	d4eb      	bmi.n	8002ede <UART_RxISR_8BIT_FIFOEN+0x132>
    rxdatacount = huart->RxXferCount;
 8002f06:	235e      	movs	r3, #94	; 0x5e
 8002f08:	5ae3      	ldrh	r3, [r4, r3]
 8002f0a:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d100      	bne.n	8002f12 <UART_RxISR_8BIT_FIFOEN+0x166>
 8002f10:	e760      	b.n	8002dd4 <UART_RxISR_8BIT_FIFOEN+0x28>
 8002f12:	2368      	movs	r3, #104	; 0x68
 8002f14:	5ae3      	ldrh	r3, [r4, r3]
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d800      	bhi.n	8002f1c <UART_RxISR_8BIT_FIFOEN+0x170>
 8002f1a:	e75b      	b.n	8002dd4 <UART_RxISR_8BIT_FIFOEN+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	2201      	movs	r2, #1
 8002f22:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f26:	6821      	ldr	r1, [r4, #0]
 8002f28:	4d10      	ldr	r5, [pc, #64]	; (8002f6c <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8002f2a:	688b      	ldr	r3, [r1, #8]
 8002f2c:	402b      	ands	r3, r5
 8002f2e:	608b      	str	r3, [r1, #8]
 8002f30:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8002f36:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002f40:	2020      	movs	r0, #32
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	4303      	orrs	r3, r0
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	f381 8810 	msr	PRIMASK, r1
}
 8002f4e:	e741      	b.n	8002dd4 <UART_RxISR_8BIT_FIFOEN+0x28>
          HAL_UART_ErrorCallback(huart);
 8002f50:	0020      	movs	r0, r4
 8002f52:	f7ff fc79 	bl	8002848 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	465a      	mov	r2, fp
 8002f5a:	50a3      	str	r3, [r4, r2]
 8002f5c:	e783      	b.n	8002e66 <UART_RxISR_8BIT_FIFOEN+0xba>
    rxdatacount = huart->RxXferCount;
 8002f5e:	235e      	movs	r3, #94	; 0x5e
 8002f60:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002f62:	e737      	b.n	8002dd4 <UART_RxISR_8BIT_FIFOEN+0x28>
 8002f64:	fffffeff 	.word	0xfffffeff
 8002f68:	effffffe 	.word	0xeffffffe
 8002f6c:	efffffff 	.word	0xefffffff
 8002f70:	08002d6d 	.word	0x08002d6d

08002f74 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f74:	6802      	ldr	r2, [r0, #0]
{
 8002f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f78:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f7a:	6813      	ldr	r3, [r2, #0]
{
 8002f7c:	464e      	mov	r6, r9
 8002f7e:	0004      	movs	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f80:	4699      	mov	r9, r3
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f82:	2388      	movs	r3, #136	; 0x88
{
 8002f84:	46de      	mov	lr, fp
 8002f86:	4657      	mov	r7, sl
 8002f88:	4645      	mov	r5, r8
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f8a:	6890      	ldr	r0, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f8c:	58e3      	ldr	r3, [r4, r3]
{
 8002f8e:	b5e0      	push	{r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f90:	2b22      	cmp	r3, #34	; 0x22
 8002f92:	d009      	beq.n	8002fa8 <UART_RxISR_16BIT_FIFOEN+0x34>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f94:	2108      	movs	r1, #8
 8002f96:	6993      	ldr	r3, [r2, #24]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6193      	str	r3, [r2, #24]
  }
}
 8002f9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002f9e:	46bb      	mov	fp, r7
 8002fa0:	46b2      	mov	sl, r6
 8002fa2:	46a9      	mov	r9, r5
 8002fa4:	46a0      	mov	r8, r4
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8002fa8:	3346      	adds	r3, #70	; 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002faa:	5ae3      	ldrh	r3, [r4, r3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d100      	bne.n	8002fb2 <UART_RxISR_16BIT_FIFOEN+0x3e>
 8002fb0:	e0b7      	b.n	8003122 <UART_RxISR_16BIT_FIFOEN+0x1ae>
 8002fb2:	068b      	lsls	r3, r1, #26
 8002fb4:	d400      	bmi.n	8002fb8 <UART_RxISR_16BIT_FIFOEN+0x44>
 8002fb6:	e088      	b.n	80030ca <UART_RxISR_16BIT_FIFOEN+0x156>
  uint16_t  uhMask = huart->Mask;
 8002fb8:	2360      	movs	r3, #96	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fba:	2601      	movs	r6, #1
  uint16_t  uhMask = huart->Mask;
 8002fbc:	5ae3      	ldrh	r3, [r4, r3]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fbe:	4030      	ands	r0, r6
  uint16_t  uhMask = huart->Mask;
 8002fc0:	469a      	mov	sl, r3
      huart->RxXferCount--;
 8002fc2:	255e      	movs	r5, #94	; 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc4:	4680      	mov	r8, r0
      *tmp = (uint16_t)(uhdata & uhMask);
 8002fc6:	4650      	mov	r0, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fc8:	6a51      	ldr	r1, [r2, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8002fcc:	4001      	ands	r1, r0
 8002fce:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002fd4:	5b63      	ldrh	r3, [r4, r5]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 8002fdc:	69d7      	ldr	r7, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002fde:	077b      	lsls	r3, r7, #29
 8002fe0:	d023      	beq.n	800302a <UART_RxISR_16BIT_FIFOEN+0xb6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fe2:	423e      	tst	r6, r7
 8002fe4:	d007      	beq.n	8002ff6 <UART_RxISR_16BIT_FIFOEN+0x82>
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	05db      	lsls	r3, r3, #23
 8002fea:	d504      	bpl.n	8002ff6 <UART_RxISR_16BIT_FIFOEN+0x82>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fec:	218c      	movs	r1, #140	; 0x8c
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fee:	6216      	str	r6, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff0:	5863      	ldr	r3, [r4, r1]
 8002ff2:	4333      	orrs	r3, r6
 8002ff4:	5063      	str	r3, [r4, r1]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	423b      	tst	r3, r7
 8002ffa:	d054      	beq.n	80030a6 <UART_RxISR_16BIT_FIFOEN+0x132>
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d00e      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xac>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003002:	208c      	movs	r0, #140	; 0x8c
 8003004:	2104      	movs	r1, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003006:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003008:	5823      	ldr	r3, [r4, r0]
 800300a:	430b      	orrs	r3, r1
 800300c:	5023      	str	r3, [r4, r0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800300e:	4239      	tst	r1, r7
 8003010:	d006      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003012:	2304      	movs	r3, #4
 8003014:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003016:	228c      	movs	r2, #140	; 0x8c
 8003018:	2102      	movs	r1, #2
 800301a:	58a3      	ldr	r3, [r4, r2]
 800301c:	430b      	orrs	r3, r1
 800301e:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003020:	238c      	movs	r3, #140	; 0x8c
 8003022:	469b      	mov	fp, r3
 8003024:	58e3      	ldr	r3, [r4, r3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d174      	bne.n	8003114 <UART_RxISR_16BIT_FIFOEN+0x1a0>
      if (huart->RxXferCount == 0U)
 800302a:	5b63      	ldrh	r3, [r4, r5]
 800302c:	b29a      	uxth	r2, r3
 800302e:	4693      	mov	fp, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d134      	bne.n	800309e <UART_RxISR_16BIT_FIFOEN+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003034:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800303c:	6821      	ldr	r1, [r4, #0]
 800303e:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <UART_RxISR_16BIT_FIFOEN+0x1b4>)
 8003040:	680b      	ldr	r3, [r1, #0]
 8003042:	4013      	ands	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	4a35      	ldr	r2, [pc, #212]	; (800312c <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8003056:	688b      	ldr	r3, [r1, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	2388      	movs	r3, #136	; 0x88
 8003062:	2120      	movs	r1, #32
 8003064:	50e1      	str	r1, [r4, r3]
        huart->RxISR = NULL;
 8003066:	465b      	mov	r3, fp
 8003068:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d127      	bne.n	80030c0 <UART_RxISR_16BIT_FIFOEN+0x14c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003070:	465a      	mov	r2, fp
 8003072:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	2210      	movs	r2, #16
 800307e:	6821      	ldr	r1, [r4, #0]
 8003080:	680b      	ldr	r3, [r1, #0]
 8003082:	4393      	bics	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
 8003086:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	69d9      	ldr	r1, [r3, #28]
 800308e:	420a      	tst	r2, r1
 8003090:	d000      	beq.n	8003094 <UART_RxISR_16BIT_FIFOEN+0x120>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003092:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003094:	235c      	movs	r3, #92	; 0x5c
 8003096:	0020      	movs	r0, r4
 8003098:	5ae1      	ldrh	r1, [r4, r3]
 800309a:	f7ff fc5d 	bl	8002958 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800309e:	06bb      	lsls	r3, r7, #26
 80030a0:	d513      	bpl.n	80030ca <UART_RxISR_16BIT_FIFOEN+0x156>
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	e78f      	b.n	8002fc6 <UART_RxISR_16BIT_FIFOEN+0x52>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a6:	077b      	lsls	r3, r7, #29
 80030a8:	d5ba      	bpl.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xac>
 80030aa:	4643      	mov	r3, r8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0b7      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b0:	2304      	movs	r3, #4
 80030b2:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b4:	228c      	movs	r2, #140	; 0x8c
 80030b6:	2102      	movs	r1, #2
 80030b8:	58a3      	ldr	r3, [r4, r2]
 80030ba:	430b      	orrs	r3, r1
 80030bc:	50a3      	str	r3, [r4, r2]
 80030be:	e7af      	b.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xac>
          HAL_UART_RxCpltCallback(huart);
 80030c0:	0020      	movs	r0, r4
 80030c2:	f001 fb5f 	bl	8004784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80030c6:	06bb      	lsls	r3, r7, #26
 80030c8:	d4eb      	bmi.n	80030a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
    rxdatacount = huart->RxXferCount;
 80030ca:	235e      	movs	r3, #94	; 0x5e
 80030cc:	5ae3      	ldrh	r3, [r4, r3]
 80030ce:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d100      	bne.n	80030d6 <UART_RxISR_16BIT_FIFOEN+0x162>
 80030d4:	e762      	b.n	8002f9c <UART_RxISR_16BIT_FIFOEN+0x28>
 80030d6:	2368      	movs	r3, #104	; 0x68
 80030d8:	5ae3      	ldrh	r3, [r4, r3]
 80030da:	4293      	cmp	r3, r2
 80030dc:	d800      	bhi.n	80030e0 <UART_RxISR_16BIT_FIFOEN+0x16c>
 80030de:	e75d      	b.n	8002f9c <UART_RxISR_16BIT_FIFOEN+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	2201      	movs	r2, #1
 80030e6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80030ea:	6821      	ldr	r1, [r4, #0]
 80030ec:	4d10      	ldr	r5, [pc, #64]	; (8003130 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 80030ee:	688b      	ldr	r3, [r1, #8]
 80030f0:	402b      	ands	r3, r5
 80030f2:	608b      	str	r3, [r1, #8]
 80030f4:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80030fa:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003104:	2020      	movs	r0, #32
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	4303      	orrs	r3, r0
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	f381 8810 	msr	PRIMASK, r1
}
 8003112:	e743      	b.n	8002f9c <UART_RxISR_16BIT_FIFOEN+0x28>
          HAL_UART_ErrorCallback(huart);
 8003114:	0020      	movs	r0, r4
 8003116:	f7ff fb97 	bl	8002848 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	465a      	mov	r2, fp
 800311e:	50a3      	str	r3, [r4, r2]
 8003120:	e783      	b.n	800302a <UART_RxISR_16BIT_FIFOEN+0xb6>
    rxdatacount = huart->RxXferCount;
 8003122:	235e      	movs	r3, #94	; 0x5e
 8003124:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003126:	e739      	b.n	8002f9c <UART_RxISR_16BIT_FIFOEN+0x28>
 8003128:	fffffeff 	.word	0xfffffeff
 800312c:	effffffe 	.word	0xeffffffe
 8003130:	efffffff 	.word	0xefffffff
 8003134:	08002d2d 	.word	0x08002d2d

08003138 <HAL_UART_GetState>:
  temp2 = huart->RxState;
 8003138:	2288      	movs	r2, #136	; 0x88
  temp1 = huart->gState;
 800313a:	2384      	movs	r3, #132	; 0x84
 800313c:	58c3      	ldr	r3, [r0, r3]
  temp2 = huart->RxState;
 800313e:	5880      	ldr	r0, [r0, r2]
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003140:	4318      	orrs	r0, r3
}
 8003142:	4770      	bx	lr

08003144 <UART_SetConfig>:
{
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003148:	6925      	ldr	r5, [r4, #16]
 800314a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800314c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800314e:	432a      	orrs	r2, r5
 8003150:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003152:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003154:	69c0      	ldr	r0, [r0, #28]
 8003156:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003158:	4d77      	ldr	r5, [pc, #476]	; (8003338 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800315a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800315c:	4029      	ands	r1, r5
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4975      	ldr	r1, [pc, #468]	; (800333c <UART_SetConfig+0x1f8>)
 8003166:	400a      	ands	r2, r1
 8003168:	68e1      	ldr	r1, [r4, #12]
 800316a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800316c:	4974      	ldr	r1, [pc, #464]	; (8003340 <UART_SetConfig+0x1fc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003170:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003172:	428b      	cmp	r3, r1
 8003174:	d04e      	beq.n	8003214 <UART_SetConfig+0xd0>
    tmpreg |= huart->Init.OneBitSampling;
 8003176:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003178:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800317a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800317c:	4d71      	ldr	r5, [pc, #452]	; (8003344 <UART_SetConfig+0x200>)
 800317e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800318a:	43aa      	bics	r2, r5
 800318c:	430a      	orrs	r2, r1
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003190:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <UART_SetConfig+0x204>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <UART_SetConfig+0x66>
 8003196:	4a6d      	ldr	r2, [pc, #436]	; (800334c <UART_SetConfig+0x208>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01c      	beq.n	80031d6 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 800319c:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <UART_SetConfig+0x20c>)
 80031a0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80031a6:	6763      	str	r3, [r4, #116]	; 0x74
}
 80031a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <UART_SetConfig+0x210>)
 80031ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ae:	2303      	movs	r3, #3
 80031b0:	4013      	ands	r3, r2
 80031b2:	3b01      	subs	r3, #1
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d80e      	bhi.n	80031d6 <UART_SetConfig+0x92>
 80031b8:	4a67      	ldr	r2, [pc, #412]	; (8003358 <UART_SetConfig+0x214>)
 80031ba:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	4298      	cmp	r0, r3
 80031c2:	d100      	bne.n	80031c6 <UART_SetConfig+0x82>
 80031c4:	e0a7      	b.n	8003316 <UART_SetConfig+0x1d2>
    switch (clocksource)
 80031c6:	2a04      	cmp	r2, #4
 80031c8:	d100      	bne.n	80031cc <UART_SetConfig+0x88>
 80031ca:	e07e      	b.n	80032ca <UART_SetConfig+0x186>
 80031cc:	d976      	bls.n	80032bc <UART_SetConfig+0x178>
 80031ce:	0018      	movs	r0, r3
 80031d0:	2a08      	cmp	r2, #8
 80031d2:	d009      	beq.n	80031e8 <UART_SetConfig+0xa4>
 80031d4:	e7e2      	b.n	800319c <UART_SetConfig+0x58>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	4298      	cmp	r0, r3
 80031dc:	d07a      	beq.n	80032d4 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7fe ff2f 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d014      	beq.n	8003210 <UART_SetConfig+0xcc>
 80031e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e8:	4b5c      	ldr	r3, [pc, #368]	; (800335c <UART_SetConfig+0x218>)
 80031ea:	0049      	lsls	r1, r1, #1
 80031ec:	5ac9      	ldrh	r1, [r1, r3]
 80031ee:	f7fc ff8b 	bl	8000108 <__udivsi3>
 80031f2:	6865      	ldr	r5, [r4, #4]
 80031f4:	086b      	lsrs	r3, r5, #1
 80031f6:	18c0      	adds	r0, r0, r3
 80031f8:	0029      	movs	r1, r5
 80031fa:	f7fc ff85 	bl	8000108 <__udivsi3>
 80031fe:	0400      	lsls	r0, r0, #16
 8003200:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003202:	0002      	movs	r2, r0
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <UART_SetConfig+0x21c>)
 8003206:	3a10      	subs	r2, #16
 8003208:	429a      	cmp	r2, r3
 800320a:	d8c7      	bhi.n	800319c <UART_SetConfig+0x58>
        huart->Instance->BRR = usartdiv;
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	60d8      	str	r0, [r3, #12]
 8003210:	2000      	movs	r0, #0
 8003212:	e7c4      	b.n	800319e <UART_SetConfig+0x5a>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003214:	6899      	ldr	r1, [r3, #8]
 8003216:	484b      	ldr	r0, [pc, #300]	; (8003344 <UART_SetConfig+0x200>)
 8003218:	4001      	ands	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800321a:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003224:	4382      	bics	r2, r0
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322a:	22c0      	movs	r2, #192	; 0xc0
 800322c:	2080      	movs	r0, #128	; 0x80
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <UART_SetConfig+0x210>)
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	0100      	lsls	r0, r0, #4
 8003236:	4013      	ands	r3, r2
 8003238:	4283      	cmp	r3, r0
 800323a:	d049      	beq.n	80032d0 <UART_SetConfig+0x18c>
 800323c:	d809      	bhi.n	8003252 <UART_SetConfig+0x10e>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d035      	beq.n	80032ae <UART_SetConfig+0x16a>
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	00d2      	lsls	r2, r2, #3
 8003246:	4293      	cmp	r3, r2
 8003248:	d1a8      	bne.n	800319c <UART_SetConfig+0x58>
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7fe fde9 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800324e:	0005      	movs	r5, r0
        break;
 8003250:	e030      	b.n	80032b4 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003252:	4293      	cmp	r3, r2
 8003254:	d1a2      	bne.n	800319c <UART_SetConfig+0x58>
        pclk = (uint32_t) LSE_VALUE;
 8003256:	2580      	movs	r5, #128	; 0x80
 8003258:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800325a:	4b40      	ldr	r3, [pc, #256]	; (800335c <UART_SetConfig+0x218>)
 800325c:	0049      	lsls	r1, r1, #1
 800325e:	5acf      	ldrh	r7, [r1, r3]
 8003260:	0028      	movs	r0, r5
 8003262:	0039      	movs	r1, r7
 8003264:	f7fc ff50 	bl	8000108 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003268:	6866      	ldr	r6, [r4, #4]
 800326a:	0073      	lsls	r3, r6, #1
 800326c:	199b      	adds	r3, r3, r6
 800326e:	4283      	cmp	r3, r0
 8003270:	d900      	bls.n	8003274 <UART_SetConfig+0x130>
 8003272:	e793      	b.n	800319c <UART_SetConfig+0x58>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003274:	0333      	lsls	r3, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003276:	4283      	cmp	r3, r0
 8003278:	d200      	bcs.n	800327c <UART_SetConfig+0x138>
 800327a:	e78f      	b.n	800319c <UART_SetConfig+0x58>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327c:	003a      	movs	r2, r7
 800327e:	2300      	movs	r3, #0
 8003280:	0028      	movs	r0, r5
 8003282:	2100      	movs	r1, #0
 8003284:	f7fd f8b6 	bl	80003f4 <__aeabi_uldivmod>
 8003288:	020b      	lsls	r3, r1, #8
 800328a:	2100      	movs	r1, #0
 800328c:	0e05      	lsrs	r5, r0, #24
 800328e:	0202      	lsls	r2, r0, #8
 8003290:	432b      	orrs	r3, r5
 8003292:	0870      	lsrs	r0, r6, #1
 8003294:	1880      	adds	r0, r0, r2
 8003296:	4159      	adcs	r1, r3
 8003298:	0032      	movs	r2, r6
 800329a:	2300      	movs	r3, #0
 800329c:	f7fd f8aa 	bl	80003f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <UART_SetConfig+0x220>)
 80032a2:	18c2      	adds	r2, r0, r3
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <UART_SetConfig+0x224>)
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d900      	bls.n	80032ac <UART_SetConfig+0x168>
 80032aa:	e777      	b.n	800319c <UART_SetConfig+0x58>
 80032ac:	e7ae      	b.n	800320c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ae:	f7fe fec7 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 80032b2:	0005      	movs	r5, r0
    if (pclk != 0U)
 80032b4:	2d00      	cmp	r5, #0
 80032b6:	d0ab      	beq.n	8003210 <UART_SetConfig+0xcc>
 80032b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032ba:	e7ce      	b.n	800325a <UART_SetConfig+0x116>
    switch (clocksource)
 80032bc:	2a00      	cmp	r2, #0
 80032be:	d08e      	beq.n	80031de <UART_SetConfig+0x9a>
 80032c0:	2a02      	cmp	r2, #2
 80032c2:	d000      	beq.n	80032c6 <UART_SetConfig+0x182>
 80032c4:	e76a      	b.n	800319c <UART_SetConfig+0x58>
        pclk = (uint32_t) HSI_VALUE;
 80032c6:	4829      	ldr	r0, [pc, #164]	; (800336c <UART_SetConfig+0x228>)
 80032c8:	e78e      	b.n	80031e8 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fda9 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
        break;
 80032ce:	e788      	b.n	80031e2 <UART_SetConfig+0x9e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d0:	4d26      	ldr	r5, [pc, #152]	; (800336c <UART_SetConfig+0x228>)
 80032d2:	e7c2      	b.n	800325a <UART_SetConfig+0x116>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe feb4 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80032d8:	2800      	cmp	r0, #0
 80032da:	d099      	beq.n	8003210 <UART_SetConfig+0xcc>
 80032dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <UART_SetConfig+0x218>)
 80032e0:	0049      	lsls	r1, r1, #1
 80032e2:	5ac9      	ldrh	r1, [r1, r3]
 80032e4:	f7fc ff10 	bl	8000108 <__udivsi3>
 80032e8:	6865      	ldr	r5, [r4, #4]
 80032ea:	0040      	lsls	r0, r0, #1
 80032ec:	086b      	lsrs	r3, r5, #1
 80032ee:	0029      	movs	r1, r5
 80032f0:	18c0      	adds	r0, r0, r3
 80032f2:	f7fc ff09 	bl	8000108 <__udivsi3>
 80032f6:	0403      	lsls	r3, r0, #16
 80032f8:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	4919      	ldr	r1, [pc, #100]	; (8003360 <UART_SetConfig+0x21c>)
 80032fc:	3a10      	subs	r2, #16
 80032fe:	428a      	cmp	r2, r1
 8003300:	d900      	bls.n	8003304 <UART_SetConfig+0x1c0>
 8003302:	e74b      	b.n	800319c <UART_SetConfig+0x58>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <UART_SetConfig+0x22c>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003306:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003308:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800330a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	4318      	orrs	r0, r3
 8003310:	60d0      	str	r0, [r2, #12]
 8003312:	2000      	movs	r0, #0
 8003314:	e743      	b.n	800319e <UART_SetConfig+0x5a>
    switch (clocksource)
 8003316:	2a04      	cmp	r2, #4
 8003318:	d007      	beq.n	800332a <UART_SetConfig+0x1e6>
 800331a:	d809      	bhi.n	8003330 <UART_SetConfig+0x1ec>
 800331c:	2a00      	cmp	r2, #0
 800331e:	d0d9      	beq.n	80032d4 <UART_SetConfig+0x190>
 8003320:	2a02      	cmp	r2, #2
 8003322:	d000      	beq.n	8003326 <UART_SetConfig+0x1e2>
 8003324:	e73a      	b.n	800319c <UART_SetConfig+0x58>
        pclk = (uint32_t) HSI_VALUE;
 8003326:	4811      	ldr	r0, [pc, #68]	; (800336c <UART_SetConfig+0x228>)
 8003328:	e7d9      	b.n	80032de <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe fd79 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
        break;
 800332e:	e7d3      	b.n	80032d8 <UART_SetConfig+0x194>
    switch (clocksource)
 8003330:	2a08      	cmp	r2, #8
 8003332:	d0d4      	beq.n	80032de <UART_SetConfig+0x19a>
 8003334:	e732      	b.n	800319c <UART_SetConfig+0x58>
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	cfff69f3 	.word	0xcfff69f3
 800333c:	ffffcfff 	.word	0xffffcfff
 8003340:	40008000 	.word	0x40008000
 8003344:	11fff4ff 	.word	0x11fff4ff
 8003348:	40013800 	.word	0x40013800
 800334c:	40004400 	.word	0x40004400
 8003350:	00010001 	.word	0x00010001
 8003354:	40021000 	.word	0x40021000
 8003358:	08006acc 	.word	0x08006acc
 800335c:	08006ad0 	.word	0x08006ad0
 8003360:	0000ffef 	.word	0x0000ffef
 8003364:	fffffd00 	.word	0xfffffd00
 8003368:	000ffcff 	.word	0x000ffcff
 800336c:	00f42400 	.word	0x00f42400
 8003370:	0000fff0 	.word	0x0000fff0

08003374 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003374:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8003376:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003378:	07da      	lsls	r2, r3, #31
 800337a:	d506      	bpl.n	800338a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800337c:	6801      	ldr	r1, [r0, #0]
 800337e:	4c28      	ldr	r4, [pc, #160]	; (8003420 <UART_AdvFeatureConfig+0xac>)
 8003380:	684a      	ldr	r2, [r1, #4]
 8003382:	4022      	ands	r2, r4
 8003384:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003386:	4322      	orrs	r2, r4
 8003388:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338a:	079a      	lsls	r2, r3, #30
 800338c:	d506      	bpl.n	800339c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338e:	6801      	ldr	r1, [r0, #0]
 8003390:	4c24      	ldr	r4, [pc, #144]	; (8003424 <UART_AdvFeatureConfig+0xb0>)
 8003392:	684a      	ldr	r2, [r1, #4]
 8003394:	4022      	ands	r2, r4
 8003396:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003398:	4322      	orrs	r2, r4
 800339a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800339c:	075a      	lsls	r2, r3, #29
 800339e:	d506      	bpl.n	80033ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a0:	6801      	ldr	r1, [r0, #0]
 80033a2:	4c21      	ldr	r4, [pc, #132]	; (8003428 <UART_AdvFeatureConfig+0xb4>)
 80033a4:	684a      	ldr	r2, [r1, #4]
 80033a6:	4022      	ands	r2, r4
 80033a8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80033aa:	4322      	orrs	r2, r4
 80033ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ae:	071a      	lsls	r2, r3, #28
 80033b0:	d506      	bpl.n	80033c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b2:	6801      	ldr	r1, [r0, #0]
 80033b4:	4c1d      	ldr	r4, [pc, #116]	; (800342c <UART_AdvFeatureConfig+0xb8>)
 80033b6:	684a      	ldr	r2, [r1, #4]
 80033b8:	4022      	ands	r2, r4
 80033ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80033bc:	4322      	orrs	r2, r4
 80033be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033c0:	06da      	lsls	r2, r3, #27
 80033c2:	d506      	bpl.n	80033d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	6801      	ldr	r1, [r0, #0]
 80033c6:	4c1a      	ldr	r4, [pc, #104]	; (8003430 <UART_AdvFeatureConfig+0xbc>)
 80033c8:	688a      	ldr	r2, [r1, #8]
 80033ca:	4022      	ands	r2, r4
 80033cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80033ce:	4322      	orrs	r2, r4
 80033d0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d2:	069a      	lsls	r2, r3, #26
 80033d4:	d506      	bpl.n	80033e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d6:	6801      	ldr	r1, [r0, #0]
 80033d8:	4c16      	ldr	r4, [pc, #88]	; (8003434 <UART_AdvFeatureConfig+0xc0>)
 80033da:	688a      	ldr	r2, [r1, #8]
 80033dc:	4022      	ands	r2, r4
 80033de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80033e0:	4322      	orrs	r2, r4
 80033e2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e4:	065a      	lsls	r2, r3, #25
 80033e6:	d50a      	bpl.n	80033fe <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e8:	6801      	ldr	r1, [r0, #0]
 80033ea:	4d13      	ldr	r5, [pc, #76]	; (8003438 <UART_AdvFeatureConfig+0xc4>)
 80033ec:	684a      	ldr	r2, [r1, #4]
 80033ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033f0:	402a      	ands	r2, r5
 80033f2:	4322      	orrs	r2, r4
 80033f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	0352      	lsls	r2, r2, #13
 80033fa:	4294      	cmp	r4, r2
 80033fc:	d009      	beq.n	8003412 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	d506      	bpl.n	8003410 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003402:	6802      	ldr	r2, [r0, #0]
 8003404:	490d      	ldr	r1, [pc, #52]	; (800343c <UART_AdvFeatureConfig+0xc8>)
 8003406:	6853      	ldr	r3, [r2, #4]
 8003408:	400b      	ands	r3, r1
 800340a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800340c:	430b      	orrs	r3, r1
 800340e:	6053      	str	r3, [r2, #4]
}
 8003410:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003412:	684a      	ldr	r2, [r1, #4]
 8003414:	4c0a      	ldr	r4, [pc, #40]	; (8003440 <UART_AdvFeatureConfig+0xcc>)
 8003416:	4022      	ands	r2, r4
 8003418:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800341a:	4322      	orrs	r2, r4
 800341c:	604a      	str	r2, [r1, #4]
 800341e:	e7ee      	b.n	80033fe <UART_AdvFeatureConfig+0x8a>
 8003420:	fffdffff 	.word	0xfffdffff
 8003424:	fffeffff 	.word	0xfffeffff
 8003428:	fffbffff 	.word	0xfffbffff
 800342c:	ffff7fff 	.word	0xffff7fff
 8003430:	ffffefff 	.word	0xffffefff
 8003434:	ffffdfff 	.word	0xffffdfff
 8003438:	ffefffff 	.word	0xffefffff
 800343c:	fff7ffff 	.word	0xfff7ffff
 8003440:	ff9fffff 	.word	0xff9fffff

08003444 <UART_WaitOnFlagUntilTimeout>:
{
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	4657      	mov	r7, sl
 8003448:	464e      	mov	r6, r9
 800344a:	4645      	mov	r5, r8
 800344c:	46de      	mov	lr, fp
 800344e:	b5e0      	push	{r5, r6, r7, lr}
 8003450:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003452:	2204      	movs	r2, #4
 8003454:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	0112      	lsls	r2, r2, #4
{
 800345a:	4699      	mov	r9, r3
 800345c:	4680      	mov	r8, r0
 800345e:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003460:	4693      	mov	fp, r2
{
 8003462:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003464:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	e001      	b.n	800346c <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8003468:	1c7a      	adds	r2, r7, #1
 800346a:	d10d      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346c:	69dc      	ldr	r4, [r3, #28]
 800346e:	402c      	ands	r4, r5
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	4262      	negs	r2, r4
 8003474:	4154      	adcs	r4, r2
 8003476:	42b4      	cmp	r4, r6
 8003478:	d0f6      	beq.n	8003468 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800347a:	2000      	movs	r0, #0
}
 800347c:	bcf0      	pop	{r4, r5, r6, r7}
 800347e:	46bb      	mov	fp, r7
 8003480:	46b2      	mov	sl, r6
 8003482:	46a9      	mov	r9, r5
 8003484:	46a0      	mov	r8, r4
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fd fc78 	bl	8000d7c <HAL_GetTick>
 800348c:	464b      	mov	r3, r9
 800348e:	1ac0      	subs	r0, r0, r3
 8003490:	42b8      	cmp	r0, r7
 8003492:	d831      	bhi.n	80034f8 <UART_WaitOnFlagUntilTimeout+0xb4>
 8003494:	2f00      	cmp	r7, #0
 8003496:	d02f      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003498:	4643      	mov	r3, r8
 800349a:	4651      	mov	r1, sl
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4211      	tst	r1, r2
 80034a2:	d0e3      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a4:	4659      	mov	r1, fp
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	420a      	tst	r2, r1
 80034aa:	d0df      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ac:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	2201      	movs	r2, #1
 80034b4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034b8:	4643      	mov	r3, r8
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	4c1c      	ldr	r4, [pc, #112]	; (8003530 <UART_WaitOnFlagUntilTimeout+0xec>)
 80034be:	680b      	ldr	r3, [r1, #0]
 80034c0:	4023      	ands	r3, r4
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d0:	4643      	mov	r3, r8
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	688b      	ldr	r3, [r1, #8]
 80034d6:	4393      	bics	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
 80034da:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80034de:	2320      	movs	r3, #32
 80034e0:	4641      	mov	r1, r8
 80034e2:	3283      	adds	r2, #131	; 0x83
 80034e4:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80034e6:	3204      	adds	r2, #4
 80034e8:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ea:	3204      	adds	r2, #4
 80034ec:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 80034ee:	2200      	movs	r2, #0
 80034f0:	3360      	adds	r3, #96	; 0x60
          return HAL_TIMEOUT;
 80034f2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80034f4:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80034f6:	e7c1      	b.n	800347c <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	2201      	movs	r2, #1
 80034fe:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003502:	4643      	mov	r3, r8
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	4c0a      	ldr	r4, [pc, #40]	; (8003530 <UART_WaitOnFlagUntilTimeout+0xec>)
 8003508:	680b      	ldr	r3, [r1, #0]
 800350a:	4023      	ands	r3, r4
 800350c:	600b      	str	r3, [r1, #0]
 800350e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003512:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003516:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	4643      	mov	r3, r8
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	688b      	ldr	r3, [r1, #8]
 8003520:	4393      	bics	r3, r2
 8003522:	608b      	str	r3, [r1, #8]
 8003524:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003528:	2320      	movs	r3, #32
 800352a:	4641      	mov	r1, r8
 800352c:	3283      	adds	r2, #131	; 0x83
 800352e:	e7db      	b.n	80034e8 <UART_WaitOnFlagUntilTimeout+0xa4>
 8003530:	fffffe5f 	.word	0xfffffe5f

08003534 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	238c      	movs	r3, #140	; 0x8c
 8003536:	2200      	movs	r2, #0
{
 8003538:	b530      	push	{r4, r5, lr}
 800353a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	50c2      	str	r2, [r0, r3]
{
 800353e:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8003540:	f7fd fc1c 	bl	8000d7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003544:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003546:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	0712      	lsls	r2, r2, #28
 800354c:	d40e      	bmi.n	800356c <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	075b      	lsls	r3, r3, #29
 8003552:	d41a      	bmi.n	800358a <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8003554:	2320      	movs	r3, #32
 8003556:	2284      	movs	r2, #132	; 0x84
 8003558:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800355a:	3204      	adds	r2, #4
 800355c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	2300      	movs	r3, #0
  return HAL_OK;
 8003560:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8003562:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003566:	54a3      	strb	r3, [r4, r2]
}
 8003568:	b003      	add	sp, #12
 800356a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <UART_CheckIdleState+0x70>)
 8003570:	2200      	movs	r2, #0
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	0389      	lsls	r1, r1, #14
 8003576:	0003      	movs	r3, r0
 8003578:	0020      	movs	r0, r4
 800357a:	f7ff ff63 	bl	8003444 <UART_WaitOnFlagUntilTimeout>
 800357e:	2800      	cmp	r0, #0
 8003580:	d10e      	bne.n	80035a0 <UART_CheckIdleState+0x6c>
 8003582:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	075b      	lsls	r3, r3, #29
 8003588:	d5e4      	bpl.n	8003554 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <UART_CheckIdleState+0x70>)
 800358e:	2200      	movs	r2, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0020      	movs	r0, r4
 8003594:	002b      	movs	r3, r5
 8003596:	03c9      	lsls	r1, r1, #15
 8003598:	f7ff ff54 	bl	8003444 <UART_WaitOnFlagUntilTimeout>
 800359c:	2800      	cmp	r0, #0
 800359e:	d0d9      	beq.n	8003554 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
 80035a2:	e7e1      	b.n	8003568 <UART_CheckIdleState+0x34>
 80035a4:	01ffffff 	.word	0x01ffffff

080035a8 <HAL_UART_Init>:
{
 80035a8:	b510      	push	{r4, lr}
 80035aa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80035ac:	d028      	beq.n	8003600 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	2384      	movs	r3, #132	; 0x84
 80035b0:	58c3      	ldr	r3, [r0, r3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d026      	beq.n	8003604 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80035b6:	2384      	movs	r3, #132	; 0x84
 80035b8:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035ba:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80035bc:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80035be:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	438b      	bics	r3, r1
 80035c6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c8:	f7ff fdbc 	bl	8003144 <UART_SetConfig>
 80035cc:	2801      	cmp	r0, #1
 80035ce:	d017      	beq.n	8003600 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d110      	bne.n	80035f8 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	490d      	ldr	r1, [pc, #52]	; (8003610 <HAL_UART_Init+0x68>)
 80035da:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80035dc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035de:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	3929      	subs	r1, #41	; 0x29
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80035f2:	f7ff ff9f 	bl	8003534 <UART_CheckIdleState>
}
 80035f6:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80035f8:	0020      	movs	r0, r4
 80035fa:	f7ff febb 	bl	8003374 <UART_AdvFeatureConfig>
 80035fe:	e7ea      	b.n	80035d6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
 8003602:	e7f8      	b.n	80035f6 <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8003608:	f7fd fad6 	bl	8000bb8 <HAL_UART_MspInit>
 800360c:	e7d3      	b.n	80035b6 <HAL_UART_Init+0xe>
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	ffffb7ff 	.word	0xffffb7ff

08003614 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003614:	235c      	movs	r3, #92	; 0x5c
{
 8003616:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 8003618:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 800361a:	2480      	movs	r4, #128	; 0x80
  huart->RxISR       = NULL;
 800361c:	2100      	movs	r1, #0
  huart->RxXferSize  = Size;
 800361e:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8003620:	3302      	adds	r3, #2
 8003622:	52c2      	strh	r2, [r0, r3]
  UART_MASK_COMPUTATION(huart);
 8003624:	6883      	ldr	r3, [r0, #8]
  huart->RxISR       = NULL;
 8003626:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8003628:	0164      	lsls	r4, r4, #5
 800362a:	42a3      	cmp	r3, r4
 800362c:	d047      	beq.n	80036be <UART_Start_Receive_IT+0xaa>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d035      	beq.n	800369e <UART_Start_Receive_IT+0x8a>
 8003632:	2480      	movs	r4, #128	; 0x80
 8003634:	0564      	lsls	r4, r4, #21
 8003636:	42a3      	cmp	r3, r4
 8003638:	d100      	bne.n	800363c <UART_Start_Receive_IT+0x28>
 800363a:	e073      	b.n	8003724 <UART_Start_Receive_IT+0x110>
 800363c:	2360      	movs	r3, #96	; 0x60
 800363e:	52c1      	strh	r1, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	238c      	movs	r3, #140	; 0x8c
 8003642:	2100      	movs	r1, #0
 8003644:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003646:	3b04      	subs	r3, #4
 8003648:	3122      	adds	r1, #34	; 0x22
 800364a:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003650:	2401      	movs	r4, #1
 8003652:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	6801      	ldr	r1, [r0, #0]
 8003658:	688b      	ldr	r3, [r1, #8]
 800365a:	4323      	orrs	r3, r4
 800365c:	608b      	str	r3, [r1, #8]
 800365e:	f385 8810 	msr	PRIMASK, r5
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003666:	059b      	lsls	r3, r3, #22
 8003668:	4299      	cmp	r1, r3
 800366a:	d02f      	beq.n	80036cc <UART_Start_Receive_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	6882      	ldr	r2, [r0, #8]
 8003670:	015b      	lsls	r3, r3, #5
 8003672:	429a      	cmp	r2, r3
 8003674:	d01a      	beq.n	80036ac <UART_Start_Receive_IT+0x98>
      huart->RxISR = UART_RxISR_8BIT;
 8003676:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <UART_Start_Receive_IT+0x120>)
 8003678:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800367a:	2200      	movs	r2, #0
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	3b7f      	subs	r3, #127	; 0x7f
 8003686:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800368a:	6802      	ldr	r2, [r0, #0]
 800368c:	3320      	adds	r3, #32
 800368e:	6810      	ldr	r0, [r2, #0]
 8003690:	33ff      	adds	r3, #255	; 0xff
 8003692:	4303      	orrs	r3, r0
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	f381 8810 	msr	PRIMASK, r1
}
 800369a:	2000      	movs	r0, #0
 800369c:	bd30      	pop	{r4, r5, pc}
  UART_MASK_COMPUTATION(huart);
 800369e:	6903      	ldr	r3, [r0, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <UART_Start_Receive_IT+0xa2>
 80036a4:	2360      	movs	r3, #96	; 0x60
 80036a6:	21ff      	movs	r1, #255	; 0xff
 80036a8:	52c1      	strh	r1, [r0, r3]
 80036aa:	e7c9      	b.n	8003640 <UART_Start_Receive_IT+0x2c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	6903      	ldr	r3, [r0, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e1      	bne.n	8003676 <UART_Start_Receive_IT+0x62>
      huart->RxISR = UART_RxISR_16BIT;
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <UART_Start_Receive_IT+0x124>)
 80036b4:	e7e0      	b.n	8003678 <UART_Start_Receive_IT+0x64>
  UART_MASK_COMPUTATION(huart);
 80036b6:	2360      	movs	r3, #96	; 0x60
 80036b8:	217f      	movs	r1, #127	; 0x7f
 80036ba:	52c1      	strh	r1, [r0, r3]
 80036bc:	e7c0      	b.n	8003640 <UART_Start_Receive_IT+0x2c>
 80036be:	6903      	ldr	r3, [r0, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <UART_Start_Receive_IT+0x90>
 80036c4:	491d      	ldr	r1, [pc, #116]	; (800373c <UART_Start_Receive_IT+0x128>)
 80036c6:	3360      	adds	r3, #96	; 0x60
 80036c8:	52c1      	strh	r1, [r0, r3]
 80036ca:	e7b9      	b.n	8003640 <UART_Start_Receive_IT+0x2c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80036cc:	2368      	movs	r3, #104	; 0x68
 80036ce:	5ac3      	ldrh	r3, [r0, r3]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d8cb      	bhi.n	800366c <UART_Start_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	6882      	ldr	r2, [r0, #8]
 80036d8:	015b      	lsls	r3, r3, #5
 80036da:	429a      	cmp	r2, r3
 80036dc:	d01d      	beq.n	800371a <UART_Start_Receive_IT+0x106>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <UART_Start_Receive_IT+0x12c>)
 80036e0:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	3201      	adds	r2, #1
 80036ee:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f2:	6801      	ldr	r1, [r0, #0]
 80036f4:	3380      	adds	r3, #128	; 0x80
 80036f6:	680d      	ldr	r5, [r1, #0]
 80036f8:	432b      	orrs	r3, r5
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	6802      	ldr	r2, [r0, #0]
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	6890      	ldr	r0, [r2, #8]
 8003710:	4303      	orrs	r3, r0
 8003712:	6093      	str	r3, [r2, #8]
 8003714:	f381 8810 	msr	PRIMASK, r1
}
 8003718:	e7bf      	b.n	800369a <UART_Start_Receive_IT+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371a:	6903      	ldr	r3, [r0, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1de      	bne.n	80036de <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <UART_Start_Receive_IT+0x130>)
 8003722:	e7dd      	b.n	80036e0 <UART_Start_Receive_IT+0xcc>
  UART_MASK_COMPUTATION(huart);
 8003724:	6903      	ldr	r3, [r0, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0c5      	beq.n	80036b6 <UART_Start_Receive_IT+0xa2>
 800372a:	2360      	movs	r3, #96	; 0x60
 800372c:	213f      	movs	r1, #63	; 0x3f
 800372e:	52c1      	strh	r1, [r0, r3]
 8003730:	e786      	b.n	8003640 <UART_Start_Receive_IT+0x2c>
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	08002d6d 	.word	0x08002d6d
 8003738:	08002d2d 	.word	0x08002d2d
 800373c:	000001ff 	.word	0x000001ff
 8003740:	08002dad 	.word	0x08002dad
 8003744:	08002f75 	.word	0x08002f75

08003748 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003748:	2388      	movs	r3, #136	; 0x88
 800374a:	58c3      	ldr	r3, [r0, r3]
{
 800374c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800374e:	2b20      	cmp	r3, #32
 8003750:	d12d      	bne.n	80037ae <HAL_UART_Receive_IT+0x66>
    if ((pData == NULL) || (Size == 0U))
 8003752:	2900      	cmp	r1, #0
 8003754:	d029      	beq.n	80037aa <HAL_UART_Receive_IT+0x62>
 8003756:	2a00      	cmp	r2, #0
 8003758:	d027      	beq.n	80037aa <HAL_UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	6884      	ldr	r4, [r0, #8]
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	429c      	cmp	r4, r3
 8003762:	d01d      	beq.n	80037a0 <HAL_UART_Receive_IT+0x58>
    __HAL_LOCK(huart);
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	5cc4      	ldrb	r4, [r0, r3]
 8003768:	2c01      	cmp	r4, #1
 800376a:	d020      	beq.n	80037ae <HAL_UART_Receive_IT+0x66>
 800376c:	2401      	movs	r4, #1
 800376e:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003772:	4d10      	ldr	r5, [pc, #64]	; (80037b4 <HAL_UART_Receive_IT+0x6c>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003776:	6803      	ldr	r3, [r0, #0]
 8003778:	42ab      	cmp	r3, r5
 800377a:	d00e      	beq.n	800379a <HAL_UART_Receive_IT+0x52>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	d50b      	bpl.n	800379a <HAL_UART_Receive_IT+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003782:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	f384 8810 	msr	PRIMASK, r4
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	6804      	ldr	r4, [r0, #0]
 800378e:	04db      	lsls	r3, r3, #19
 8003790:	6826      	ldr	r6, [r4, #0]
 8003792:	4333      	orrs	r3, r6
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 800379a:	f7ff ff3b 	bl	8003614 <UART_Start_Receive_IT>
 800379e:	e005      	b.n	80037ac <HAL_UART_Receive_IT+0x64>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a0:	6903      	ldr	r3, [r0, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1de      	bne.n	8003764 <HAL_UART_Receive_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80037a6:	07cb      	lsls	r3, r1, #31
 80037a8:	d5dc      	bpl.n	8003764 <HAL_UART_Receive_IT+0x1c>
      return HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
}
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80037ae:	2002      	movs	r0, #2
 80037b0:	e7fc      	b.n	80037ac <HAL_UART_Receive_IT+0x64>
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	40008000 	.word	0x40008000

080037b8 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037ba:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037bc:	4f0b      	ldr	r7, [pc, #44]	; (80037ec <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037be:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037c0:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80037c2:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037c4:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037c6:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80037c8:	4e09      	ldr	r6, [pc, #36]	; (80037f0 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ca:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037cc:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ce:	f7fc fd25 	bl	800021c <__divsi3>
 80037d2:	236a      	movs	r3, #106	; 0x6a
 80037d4:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037d6:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037d8:	0f5b      	lsrs	r3, r3, #29
 80037da:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80037dc:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037de:	00c0      	lsls	r0, r0, #3
 80037e0:	f7fc fd1c 	bl	800021c <__divsi3>
 80037e4:	2368      	movs	r3, #104	; 0x68
 80037e6:	52e8      	strh	r0, [r5, r3]
  }
}
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	08006af0 	.word	0x08006af0
 80037f0:	08006ae8 	.word	0x08006ae8

080037f4 <HAL_UARTEx_WakeupCallback>:
}
 80037f4:	4770      	bx	lr
 80037f6:	46c0      	nop			; (mov r8, r8)

080037f8 <HAL_UARTEx_RxFifoFullCallback>:
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			; (mov r8, r8)

080037fc <HAL_UARTEx_TxFifoEmptyCallback>:
 80037fc:	4770      	bx	lr
 80037fe:	46c0      	nop			; (mov r8, r8)

08003800 <HAL_UARTEx_DisableFifoMode>:
{
 8003800:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003802:	2480      	movs	r4, #128	; 0x80
 8003804:	5d03      	ldrb	r3, [r0, r4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d012      	beq.n	8003830 <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800380a:	2584      	movs	r5, #132	; 0x84
 800380c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800380e:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	43b1      	bics	r1, r6
 800381a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800381c:	4905      	ldr	r1, [pc, #20]	; (8003834 <HAL_UARTEx_DisableFifoMode+0x34>)
 800381e:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003820:	2100      	movs	r1, #0
 8003822:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003824:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003826:	2320      	movs	r3, #32
 8003828:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800382a:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 800382c:	2000      	movs	r0, #0
}
 800382e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003830:	2002      	movs	r0, #2
 8003832:	e7fc      	b.n	800382e <HAL_UARTEx_DisableFifoMode+0x2e>
 8003834:	dfffffff 	.word	0xdfffffff

08003838 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8003838:	2380      	movs	r3, #128	; 0x80
{
 800383a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800383c:	5cc2      	ldrb	r2, [r0, r3]
{
 800383e:	0004      	movs	r4, r0
 8003840:	000e      	movs	r6, r1
  __HAL_LOCK(huart);
 8003842:	2a01      	cmp	r2, #1
 8003844:	d021      	beq.n	800388a <HAL_UARTEx_SetTxFifoThreshold+0x52>
 8003846:	2001      	movs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800384a:	54e0      	strb	r0, [r4, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	3304      	adds	r3, #4
 800384e:	50e2      	str	r2, [r4, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4382      	bics	r2, r0
 8003858:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800385a:	6899      	ldr	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800385c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800385e:	00c9      	lsls	r1, r1, #3
 8003860:	08c9      	lsrs	r1, r1, #3
 8003862:	4331      	orrs	r1, r6
 8003864:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003866:	2a00      	cmp	r2, #0
 8003868:	d00c      	beq.n	8003884 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
 800386a:	0020      	movs	r0, r4
 800386c:	f7ff ffa4 	bl	80037b8 <UARTEx_SetNbDataToProcess.part.0>
 8003870:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003872:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003874:	2220      	movs	r2, #32
 8003876:	2384      	movs	r3, #132	; 0x84
 8003878:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800387a:	2200      	movs	r2, #0
  return HAL_OK;
 800387c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800387e:	3b04      	subs	r3, #4
 8003880:	54e2      	strb	r2, [r4, r3]
}
 8003882:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8003884:	4a02      	ldr	r2, [pc, #8]	; (8003890 <HAL_UARTEx_SetTxFifoThreshold+0x58>)
 8003886:	66a2      	str	r2, [r4, #104]	; 0x68
 8003888:	e7f3      	b.n	8003872 <HAL_UARTEx_SetTxFifoThreshold+0x3a>
  __HAL_LOCK(huart);
 800388a:	2002      	movs	r0, #2
 800388c:	e7f9      	b.n	8003882 <HAL_UARTEx_SetTxFifoThreshold+0x4a>
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	00010001 	.word	0x00010001

08003894 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8003894:	2380      	movs	r3, #128	; 0x80
{
 8003896:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003898:	5cc2      	ldrb	r2, [r0, r3]
{
 800389a:	0004      	movs	r4, r0
 800389c:	000e      	movs	r6, r1
  __HAL_LOCK(huart);
 800389e:	2a01      	cmp	r2, #1
 80038a0:	d021      	beq.n	80038e6 <HAL_UARTEx_SetRxFifoThreshold+0x52>
 80038a2:	2001      	movs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 80038a6:	54e0      	strb	r0, [r4, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	3304      	adds	r3, #4
 80038aa:	50e2      	str	r2, [r4, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4382      	bics	r2, r0
 80038b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038b6:	6899      	ldr	r1, [r3, #8]
 80038b8:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_UARTEx_SetRxFifoThreshold+0x58>)
 80038ba:	4011      	ands	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038be:	4331      	orrs	r1, r6
 80038c0:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
 80038c6:	0020      	movs	r0, r4
 80038c8:	f7ff ff76 	bl	80037b8 <UARTEx_SetNbDataToProcess.part.0>
 80038cc:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038ce:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	2220      	movs	r2, #32
 80038d2:	2384      	movs	r3, #132	; 0x84
 80038d4:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80038d6:	2200      	movs	r2, #0
  return HAL_OK;
 80038d8:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80038da:	3b04      	subs	r3, #4
 80038dc:	54e2      	strb	r2, [r4, r3]
}
 80038de:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_UARTEx_SetRxFifoThreshold+0x5c>)
 80038e2:	66a2      	str	r2, [r4, #104]	; 0x68
 80038e4:	e7f3      	b.n	80038ce <HAL_UARTEx_SetRxFifoThreshold+0x3a>
  __HAL_LOCK(huart);
 80038e6:	2002      	movs	r0, #2
 80038e8:	e7f9      	b.n	80038de <HAL_UARTEx_SetRxFifoThreshold+0x4a>
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	f1ffffff 	.word	0xf1ffffff
 80038f0:	00010001 	.word	0x00010001

080038f4 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80038f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f6:	464f      	mov	r7, r9
 80038f8:	4646      	mov	r6, r8
 80038fa:	46d6      	mov	lr, sl
 80038fc:	b5c0      	push	{r6, r7, lr}
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80038fe:	4f1d      	ldr	r7, [pc, #116]	; (8003974 <vTimerCallbackT35+0x80>)
{
 8003900:	0006      	movs	r6, r0
	for(i = 0; i < numberHandlers; i++)
 8003902:	783b      	ldrb	r3, [r7, #0]
{
 8003904:	b082      	sub	sp, #8
	for(i = 0; i < numberHandlers; i++)
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <vTimerCallbackT35+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800390a:	23b0      	movs	r3, #176	; 0xb0
 800390c:	4698      	mov	r8, r3
			if(mHandlers[i]->uModbusType == MB_MASTER)
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800390e:	3b04      	subs	r3, #4
 8003910:	4699      	mov	r9, r3
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003912:	3308      	adds	r3, #8
	for(i = 0; i < numberHandlers; i++)
 8003914:	2500      	movs	r5, #0
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003916:	469a      	mov	sl, r3
 8003918:	4c17      	ldr	r4, [pc, #92]	; (8003978 <vTimerCallbackT35+0x84>)
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800391a:	4642      	mov	r2, r8
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	589a      	ldr	r2, [r3, r2]
 8003920:	42b2      	cmp	r2, r6
 8003922:	d00a      	beq.n	800393a <vTimerCallbackT35+0x46>
	for(i = 0; i < numberHandlers; i++)
 8003924:	783b      	ldrb	r3, [r7, #0]
 8003926:	3501      	adds	r5, #1
 8003928:	3404      	adds	r4, #4
 800392a:	42ab      	cmp	r3, r5
 800392c:	dcf5      	bgt.n	800391a <vTimerCallbackT35+0x26>
		}

	}
}
 800392e:	b002      	add	sp, #8
 8003930:	bce0      	pop	{r5, r6, r7}
 8003932:	46ba      	mov	sl, r7
 8003934:	46b1      	mov	r9, r6
 8003936:	46a8      	mov	r8, r5
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	2a04      	cmp	r2, #4
 800393e:	d007      	beq.n	8003950 <vTimerCallbackT35+0x5c>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8003940:	464a      	mov	r2, r9
 8003942:	2100      	movs	r1, #0
 8003944:	5898      	ldr	r0, [r3, r2]
 8003946:	2300      	movs	r3, #0
 8003948:	2203      	movs	r2, #3
 800394a:	f002 fc57 	bl	80061fc <xTaskGenericNotify>
 800394e:	e7e9      	b.n	8003924 <vTimerCallbackT35+0x30>
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003950:	4652      	mov	r2, sl
 8003952:	5898      	ldr	r0, [r3, r2]
 8003954:	2300      	movs	r3, #0
 8003956:	2200      	movs	r2, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2103      	movs	r1, #3
 800395c:	f002 fde0 	bl	8006520 <xTimerGenericCommand>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8003960:	464a      	mov	r2, r9
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	2100      	movs	r1, #0
 8003966:	5898      	ldr	r0, [r3, r2]
 8003968:	2300      	movs	r3, #0
 800396a:	2203      	movs	r2, #3
 800396c:	f002 fc46 	bl	80061fc <xTaskGenericNotify>
 8003970:	e7d8      	b.n	8003924 <vTimerCallbackT35+0x30>
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	20000090 	.word	0x20000090
 8003978:	2000105c 	.word	0x2000105c

0800397c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	4647      	mov	r7, r8
 8003980:	46ce      	mov	lr, r9
 8003982:	b580      	push	{r7, lr}
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <vTimerCallbackTimeout+0x4c>)
{
 8003986:	0006      	movs	r6, r0
	for(i = 0; i < numberHandlers; i++)
 8003988:	4698      	mov	r8, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <vTimerCallbackTimeout+0x32>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8003990:	23ac      	movs	r3, #172	; 0xac
	for(i = 0; i < numberHandlers; i++)
 8003992:	2400      	movs	r4, #0
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8003994:	27b4      	movs	r7, #180	; 0xb4
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8003996:	4699      	mov	r9, r3
 8003998:	4d0c      	ldr	r5, [pc, #48]	; (80039cc <vTimerCallbackTimeout+0x50>)
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	59da      	ldr	r2, [r3, r7]
 800399e:	42b2      	cmp	r2, r6
 80039a0:	d009      	beq.n	80039b6 <vTimerCallbackTimeout+0x3a>
	for(i = 0; i < numberHandlers; i++)
 80039a2:	4643      	mov	r3, r8
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	3401      	adds	r4, #1
 80039a8:	3504      	adds	r5, #4
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	dcf5      	bgt.n	800399a <vTimerCallbackTimeout+0x1e>
		}

	}

}
 80039ae:	bcc0      	pop	{r6, r7}
 80039b0:	46b9      	mov	r9, r7
 80039b2:	46b0      	mov	r8, r6
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80039b6:	464a      	mov	r2, r9
 80039b8:	2108      	movs	r1, #8
 80039ba:	5898      	ldr	r0, [r3, r2]
 80039bc:	4249      	negs	r1, r1
 80039be:	2300      	movs	r3, #0
 80039c0:	2203      	movs	r2, #3
 80039c2:	f002 fc1b 	bl	80061fc <xTaskGenericNotify>
 80039c6:	e7ec      	b.n	80039a2 <vTimerCallbackTimeout+0x26>
 80039c8:	20000090 	.word	0x20000090
 80039cc:	2000105c 	.word	0x2000105c

080039d0 <sendTxBuffer>:
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80039d0:	2393      	movs	r3, #147	; 0x93
{
 80039d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80039d4:	0006      	movs	r6, r0
 80039d6:	5cc3      	ldrb	r3, [r0, r3]
{
 80039d8:	0005      	movs	r5, r0
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80039da:	469c      	mov	ip, r3
{
 80039dc:	b083      	sub	sp, #12
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80039de:	3613      	adds	r6, #19
    for (unsigned char i = 0; i < u8length; i++)
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05d      	beq.n	8003aa0 <sendTxBuffer+0xd0>
 80039e4:	2700      	movs	r7, #0
            flag = temp & 0x0001;
 80039e6:	2401      	movs	r4, #1
    temp = 0xFFFF;
 80039e8:	4a2f      	ldr	r2, [pc, #188]	; (8003aa8 <sendTxBuffer+0xd8>)
                temp ^= 0xA001;
 80039ea:	4830      	ldr	r0, [pc, #192]	; (8003aac <sendTxBuffer+0xdc>)
        temp = temp ^ Buffer[i];
 80039ec:	5df3      	ldrb	r3, [r6, r7]
 80039ee:	405a      	eors	r2, r3
 80039f0:	2308      	movs	r3, #8
            flag = temp & 0x0001;
 80039f2:	0021      	movs	r1, r4
 80039f4:	4011      	ands	r1, r2
            temp >>=1;
 80039f6:	0852      	lsrs	r2, r2, #1
            if (flag)
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d000      	beq.n	80039fe <sendTxBuffer+0x2e>
                temp ^= 0xA001;
 80039fc:	4042      	eors	r2, r0
        for (unsigned char j = 1; j <= 8; j++)
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f5      	bne.n	80039f2 <sendTxBuffer+0x22>
    for (unsigned char i = 0; i < u8length; i++)
 8003a06:	3701      	adds	r7, #1
 8003a08:	b2fb      	uxtb	r3, r7
 8003a0a:	459c      	cmp	ip, r3
 8003a0c:	d8ee      	bhi.n	80039ec <sendTxBuffer+0x1c>
 8003a0e:	0a13      	lsrs	r3, r2, #8
 8003a10:	0212      	lsls	r2, r2, #8
 8003a12:	431a      	orrs	r2, r3
 8003a14:	b293      	uxth	r3, r2
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b2d2      	uxtb	r2, r2
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8003a1a:	4661      	mov	r1, ip
 8003a1c:	1869      	adds	r1, r5, r1
 8003a1e:	74cb      	strb	r3, [r1, #19]
    modH->u8BufferSize++;
 8003a20:	4663      	mov	r3, ip
 8003a22:	3301      	adds	r3, #1
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	18eb      	adds	r3, r5, r3
 8003a28:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8003a2a:	4663      	mov	r3, ip
 8003a2c:	2493      	movs	r4, #147	; 0x93
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	552a      	strb	r2, [r5, r4]

#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif
    	if (modH->EN_Port != NULL)
 8003a34:	68e8      	ldr	r0, [r5, #12]
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d004      	beq.n	8003a44 <sendTxBuffer+0x74>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	8a29      	ldrh	r1, [r5, #16]
 8003a3e:	f7fd ff43 	bl	80018c8 <HAL_GPIO_WritePin>
 8003a42:	5d2a      	ldrb	r2, [r5, r4]
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8003a44:	b292      	uxth	r2, r2
 8003a46:	0031      	movs	r1, r6
 8003a48:	6868      	ldr	r0, [r5, #4]
 8003a4a:	f7fe fe8f 	bl	800276c <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8003a4e:	21fa      	movs	r1, #250	; 0xfa
 8003a50:	2001      	movs	r0, #1
 8003a52:	f002 fba1 	bl	8006198 <ulTaskNotifyTake>


#if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	686b      	ldr	r3, [r5, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	69cb      	ldr	r3, [r1, #28]
 8003a5e:	421a      	tst	r2, r3
 8003a60:	d0fc      	beq.n	8003a5c <sendTxBuffer+0x8c>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8003a62:	68e8      	ldr	r0, [r5, #12]
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d003      	beq.n	8003a70 <sendTxBuffer+0xa0>
         {
             // must wait transmission end before changing pin state
             //return RS485 transceiver to receive mode

        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	8a29      	ldrh	r1, [r5, #16]
 8003a6c:	f7fd ff2c 	bl	80018c8 <HAL_GPIO_WritePin>
         }


         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8003a70:	782b      	ldrb	r3, [r5, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d008      	beq.n	8003a88 <sendTxBuffer+0xb8>

#endif

#endif

     modH->u8BufferSize = 0;
 8003a76:	2393      	movs	r3, #147	; 0x93
 8003a78:	2200      	movs	r2, #0
 8003a7a:	54ea      	strb	r2, [r5, r3]
     // increase message counter
     modH->u16OutCnt++;
 8003a7c:	329e      	adds	r2, #158	; 0x9e
 8003a7e:	5aab      	ldrh	r3, [r5, r2]
 8003a80:	3301      	adds	r3, #1
 8003a82:	52ab      	strh	r3, [r5, r2]

}
 8003a84:	b003      	add	sp, #12
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 	    	xTimerReset(modH->xTimerTimeout,0);
 8003a88:	33b0      	adds	r3, #176	; 0xb0
 8003a8a:	58ec      	ldr	r4, [r5, r3]
 8003a8c:	f002 f9d2 	bl	8005e34 <xTaskGetTickCount>
 8003a90:	2300      	movs	r3, #0
 8003a92:	0002      	movs	r2, r0
 8003a94:	2102      	movs	r1, #2
 8003a96:	0020      	movs	r0, r4
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f002 fd41 	bl	8006520 <xTimerGenericCommand>
 8003a9e:	e7ea      	b.n	8003a76 <sendTxBuffer+0xa6>
    for (unsigned char i = 0; i < u8length; i++)
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	23ff      	movs	r3, #255	; 0xff
 8003aa4:	e7b9      	b.n	8003a1a <sendTxBuffer+0x4a>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	0000ffff 	.word	0x0000ffff
 8003aac:	0000a001 	.word	0x0000a001

08003ab0 <RingGetNBytes.part.0>:
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab2:	46c6      	mov	lr, r8
 8003ab4:	0004      	movs	r4, r0
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	2500      	movs	r5, #0
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
 8003aba:	b500      	push	{lr}
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003abc:	2a00      	cmp	r2, #0
 8003abe:	d024      	beq.n	8003b0a <RingGetNBytes.part.0+0x5a>
 8003ac0:	2382      	movs	r3, #130	; 0x82
 8003ac2:	469c      	mov	ip, r3
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003ac4:	3b03      	subs	r3, #3
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003ac6:	2780      	movs	r7, #128	; 0x80
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003ac8:	4698      	mov	r8, r3
 8003aca:	e00d      	b.n	8003ae8 <RingGetNBytes.part.0+0x38>
 8003acc:	4640      	mov	r0, r8
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003ace:	5de3      	ldrb	r3, [r4, r7]
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	5ce3      	ldrb	r3, [r4, r3]
 8003ad4:	558b      	strb	r3, [r1, r6]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003ad6:	5de3      	ldrb	r3, [r4, r7]
 8003ad8:	3601      	adds	r6, #1
 8003ada:	3301      	adds	r3, #1
 8003adc:	4003      	ands	r3, r0
 8003ade:	b2e8      	uxtb	r0, r5
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003ae0:	b2f5      	uxtb	r5, r6
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003ae2:	55e3      	strb	r3, [r4, r7]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003ae4:	42aa      	cmp	r2, r5
 8003ae6:	d904      	bls.n	8003af2 <RingGetNBytes.part.0+0x42>
 8003ae8:	4663      	mov	r3, ip
 8003aea:	5ce3      	ldrb	r3, [r4, r3]
 8003aec:	0028      	movs	r0, r5
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	d8ec      	bhi.n	8003acc <RingGetNBytes.part.0+0x1c>
	xRingBuffer->overflow = false;
 8003af2:	2300      	movs	r3, #0
 8003af4:	2283      	movs	r2, #131	; 0x83
 8003af6:	54a3      	strb	r3, [r4, r2]
xRingBuffer->u8start = 0;
 8003af8:	3a03      	subs	r2, #3
 8003afa:	54a3      	strb	r3, [r4, r2]
xRingBuffer->u8end = 0;
 8003afc:	3201      	adds	r2, #1
 8003afe:	54a3      	strb	r3, [r4, r2]
xRingBuffer->u8available = 0;
 8003b00:	3201      	adds	r2, #1
 8003b02:	54a3      	strb	r3, [r4, r2]
}
 8003b04:	bc80      	pop	{r7}
 8003b06:	46b8      	mov	r8, r7
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	e7f1      	b.n	8003af2 <RingGetNBytes.part.0+0x42>
 8003b0e:	46c0      	nop			; (mov r8, r8)

08003b10 <getRxBuffer>:
    if(modH->xTypeHW == USART_HW)
 8003b10:	23a0      	movs	r3, #160	; 0xa0
{
 8003b12:	b570      	push	{r4, r5, r6, lr}
    if(modH->xTypeHW == USART_HW)
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	5cc3      	ldrb	r3, [r0, r3]
{
 8003b18:	0004      	movs	r4, r0
    if(modH->xTypeHW == USART_HW)
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d022      	beq.n	8003b64 <getRxBuffer+0x54>
	if (modH->xBufferRX.overflow)
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	33ff      	adds	r3, #255	; 0xff
 8003b22:	5ce3      	ldrb	r3, [r4, r3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d128      	bne.n	8003b7a <getRxBuffer+0x6a>
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8003b28:	0023      	movs	r3, r4
 8003b2a:	0020      	movs	r0, r4
 8003b2c:	333f      	adds	r3, #63	; 0x3f
 8003b2e:	33ff      	adds	r3, #255	; 0xff
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	30bc      	adds	r0, #188	; 0xbc
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003b34:	1e53      	subs	r3, r2, #1
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	d411      	bmi.n	8003b5e <getRxBuffer+0x4e>
	if(uNumber > MAX_BUFFER) return 0;
 8003b3a:	0021      	movs	r1, r4
 8003b3c:	3113      	adds	r1, #19
 8003b3e:	f7ff ffb7 	bl	8003ab0 <RingGetNBytes.part.0>
 8003b42:	b205      	sxth	r5, r0
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8003b44:	2393      	movs	r3, #147	; 0x93
		modH->u16InCnt++;
 8003b46:	229c      	movs	r2, #156	; 0x9c
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8003b48:	54e0      	strb	r0, [r4, r3]
		modH->u16InCnt++;
 8003b4a:	5aa3      	ldrh	r3, [r4, r2]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	52a3      	strh	r3, [r4, r2]
	if(modH->xTypeHW == USART_HW)
 8003b50:	23a0      	movs	r3, #160	; 0xa0
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	5ce3      	ldrb	r3, [r4, r3]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d008      	beq.n	8003b6c <getRxBuffer+0x5c>
}
 8003b5a:	0028      	movs	r0, r5
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
 8003b5e:	2500      	movs	r5, #0
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003b60:	2000      	movs	r0, #0
 8003b62:	e7ef      	b.n	8003b44 <getRxBuffer+0x34>
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8003b64:	6840      	ldr	r0, [r0, #4]
 8003b66:	f7fe fe7d 	bl	8002864 <HAL_UART_AbortReceive_IT>
 8003b6a:	e7d8      	b.n	8003b1e <getRxBuffer+0xe>
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8003b6c:	0021      	movs	r1, r4
 8003b6e:	2201      	movs	r2, #1
 8003b70:	6860      	ldr	r0, [r4, #4]
 8003b72:	31a6      	adds	r1, #166	; 0xa6
 8003b74:	f7ff fde8 	bl	8003748 <HAL_UART_Receive_IT>
 8003b78:	e7ef      	b.n	8003b5a <getRxBuffer+0x4a>
xRingBuffer->u8start = 0;
 8003b7a:	0022      	movs	r2, r4
 8003b7c:	2300      	movs	r3, #0
       	i16result =  ERR_BUFF_OVERFLOW;
 8003b7e:	2503      	movs	r5, #3
xRingBuffer->u8start = 0;
 8003b80:	323d      	adds	r2, #61	; 0x3d
 8003b82:	32ff      	adds	r2, #255	; 0xff
 8003b84:	7013      	strb	r3, [r2, #0]
xRingBuffer->u8end = 0;
 8003b86:	7053      	strb	r3, [r2, #1]
xRingBuffer->u8available = 0;
 8003b88:	7093      	strb	r3, [r2, #2]
xRingBuffer->overflow = false;
 8003b8a:	70d3      	strb	r3, [r2, #3]
       	i16result =  ERR_BUFF_OVERFLOW;
 8003b8c:	426d      	negs	r5, r5
 8003b8e:	e7df      	b.n	8003b50 <getRxBuffer+0x40>

08003b90 <StartTaskModbusSlave>:
  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8003b90:	2313      	movs	r3, #19
{
 8003b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b94:	464e      	mov	r6, r9
 8003b96:	4699      	mov	r9, r3
 8003b98:	3307      	adds	r3, #7
 8003b9a:	469c      	mov	ip, r3
 8003b9c:	46de      	mov	lr, fp
 8003b9e:	4657      	mov	r7, sl
 8003ba0:	4645      	mov	r5, r8
 8003ba2:	4484      	add	ip, r0
 8003ba4:	4663      	mov	r3, ip
 8003ba6:	b5e0      	push	{r5, r6, r7, lr}
 8003ba8:	b099      	sub	sp, #100	; 0x64
 8003baa:	9317      	str	r3, [sp, #92]	; 0x5c
 8003bac:	4bda      	ldr	r3, [pc, #872]	; (8003f18 <StartTaskModbusSlave+0x388>)
 8003bae:	0007      	movs	r7, r0
 8003bb0:	469b      	mov	fp, r3
                temp ^= 0xA001;
 8003bb2:	4bda      	ldr	r3, [pc, #872]	; (8003f1c <StartTaskModbusSlave+0x38c>)
 8003bb4:	4481      	add	r9, r0
 8003bb6:	4698      	mov	r8, r3
	modH->i8lastError = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	74bb      	strb	r3, [r7, #18]
   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8003bbc:	3341      	adds	r3, #65	; 0x41
 8003bbe:	33ff      	adds	r3, #255	; 0xff
 8003bc0:	5cfb      	ldrb	r3, [r7, r3]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d02a      	beq.n	8003c1c <StartTaskModbusSlave+0x8c>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d028      	beq.n	8003c1c <StartTaskModbusSlave+0x8c>
   if (modH->u8BufferSize < 7)
 8003bca:	2393      	movs	r3, #147	; 0x93
 8003bcc:	5cfb      	ldrb	r3, [r7, r3]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d92e      	bls.n	8003c30 <StartTaskModbusSlave+0xa0>
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8003bd2:	7cfa      	ldrb	r2, [r7, #19]
 8003bd4:	7a38      	ldrb	r0, [r7, #8]
 8003bd6:	4282      	cmp	r2, r0
 8003bd8:	d1ee      	bne.n	8003bb8 <StartTaskModbusSlave+0x28>
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8003bda:	18fd      	adds	r5, r7, r3
 8003bdc:	7c69      	ldrb	r1, [r5, #17]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8003bde:	7cac      	ldrb	r4, [r5, #18]
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8003be0:	0209      	lsls	r1, r1, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8003be2:	430c      	orrs	r4, r1
 8003be4:	b221      	sxth	r1, r4
 8003be6:	468c      	mov	ip, r1
            flag = temp & 0x0001;
 8003be8:	464c      	mov	r4, r9
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003bea:	2100      	movs	r1, #0
            flag = temp & 0x0001;
 8003bec:	2601      	movs	r6, #1
 8003bee:	4681      	mov	r9, r0
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003bf0:	3b02      	subs	r3, #2
 8003bf2:	b2dd      	uxtb	r5, r3
    temp = 0xFFFF;
 8003bf4:	4bca      	ldr	r3, [pc, #808]	; (8003f20 <StartTaskModbusSlave+0x390>)
        temp = temp ^ Buffer[i];
 8003bf6:	4053      	eors	r3, r2
 8003bf8:	2208      	movs	r2, #8
            flag = temp & 0x0001;
 8003bfa:	0030      	movs	r0, r6
 8003bfc:	4018      	ands	r0, r3
            temp >>=1;
 8003bfe:	085b      	lsrs	r3, r3, #1
            if (flag)
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d001      	beq.n	8003c08 <StartTaskModbusSlave+0x78>
                temp ^= 0xA001;
 8003c04:	4640      	mov	r0, r8
 8003c06:	4043      	eors	r3, r0
        for (unsigned char j = 1; j <= 8; j++)
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	2a00      	cmp	r2, #0
 8003c0e:	d1f4      	bne.n	8003bfa <StartTaskModbusSlave+0x6a>
    for (unsigned char i = 0; i < u8length; i++)
 8003c10:	3101      	adds	r1, #1
 8003c12:	b2ca      	uxtb	r2, r1
 8003c14:	4295      	cmp	r5, r2
 8003c16:	d910      	bls.n	8003c3a <StartTaskModbusSlave+0xaa>
 8003c18:	5c62      	ldrb	r2, [r4, r1]
 8003c1a:	e7ec      	b.n	8003bf6 <StartTaskModbusSlave+0x66>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block 2 seconds until a Modbus Frame arrives */
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	2001      	movs	r0, #1
 8003c20:	4249      	negs	r1, r1
 8003c22:	f002 fab9 	bl	8006198 <ulTaskNotifyTake>
	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8003c26:	0038      	movs	r0, r7
 8003c28:	f7ff ff72 	bl	8003b10 <getRxBuffer>
 8003c2c:	1cc3      	adds	r3, r0, #3
 8003c2e:	d1cc      	bne.n	8003bca <StartTaskModbusSlave+0x3a>
      modH->u16errCnt++;
 8003c30:	22a0      	movs	r2, #160	; 0xa0
 8003c32:	5abb      	ldrh	r3, [r7, r2]
 8003c34:	3301      	adds	r3, #1
 8003c36:	52bb      	strh	r3, [r7, r2]
	  continue;
 8003c38:	e7be      	b.n	8003bb8 <StartTaskModbusSlave+0x28>
    temp2 = temp >> 8;
 8003c3a:	0a1a      	lsrs	r2, r3, #8
    temp = (temp << 8) | temp2;
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	4313      	orrs	r3, r2
	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	4648      	mov	r0, r9
 8003c44:	46a1      	mov	r9, r4
 8003c46:	459c      	cmp	ip, r3
 8003c48:	d000      	beq.n	8003c4c <StartTaskModbusSlave+0xbc>
 8003c4a:	e255      	b.n	80040f8 <StartTaskModbusSlave+0x568>
 8003c4c:	4ab5      	ldr	r2, [pc, #724]	; (8003f24 <StartTaskModbusSlave+0x394>)
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8003c4e:	2101      	movs	r1, #1
 8003c50:	0014      	movs	r4, r2
 8003c52:	7d3b      	ldrb	r3, [r7, #20]
 8003c54:	3408      	adds	r4, #8
 8003c56:	e000      	b.n	8003c5a <StartTaskModbusSlave+0xca>
 8003c58:	7811      	ldrb	r1, [r2, #0]
 8003c5a:	428b      	cmp	r3, r1
 8003c5c:	d012      	beq.n	8003c84 <StartTaskModbusSlave+0xf4>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8003c5e:	3201      	adds	r2, #1
 8003c60:	4294      	cmp	r4, r2
 8003c62:	d1f9      	bne.n	8003c58 <StartTaskModbusSlave+0xc8>
	    	modH->u16errCnt ++;
 8003c64:	21a0      	movs	r1, #160	; 0xa0
 8003c66:	5a7a      	ldrh	r2, [r7, r1]
 8003c68:	3201      	adds	r2, #1
 8003c6a:	527a      	strh	r2, [r7, r1]
	        return EXC_FUNC_CODE;
 8003c6c:	2201      	movs	r2, #1
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8003c6e:	3b80      	subs	r3, #128	; 0x80
 8003c70:	753b      	strb	r3, [r7, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8003c72:	757a      	strb	r2, [r7, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003c74:	2393      	movs	r3, #147	; 0x93
 8003c76:	2203      	movs	r2, #3
    modH->u8Buffer[ ID ]      = modH->u8id;
 8003c78:	74f8      	strb	r0, [r7, #19]
			sendTxBuffer(modH);
 8003c7a:	0038      	movs	r0, r7
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003c7c:	54fa      	strb	r2, [r7, r3]
			sendTxBuffer(modH);
 8003c7e:	f7ff fea7 	bl	80039d0 <sendTxBuffer>
		continue;
 8003c82:	e799      	b.n	8003bb8 <StartTaskModbusSlave+0x28>
	    switch ( modH->u8Buffer[ FUNC ] )
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d84f      	bhi.n	8003d28 <StartTaskModbusSlave+0x198>
 8003c88:	4659      	mov	r1, fp
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	588a      	ldr	r2, [r1, r2]
 8003c8e:	4697      	mov	pc, r2
	W.u8[0] = L;
 8003c90:	24ff      	movs	r4, #255	; 0xff
 8003c92:	46a4      	mov	ip, r4
 8003c94:	4665      	mov	r5, ip
 8003c96:	9c08      	ldr	r4, [sp, #32]
 8003c98:	7dba      	ldrb	r2, [r7, #22]
 8003c9a:	43ac      	bics	r4, r5
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003c9c:	7d79      	ldrb	r1, [r7, #21]
	W.u8[0] = L;
 8003c9e:	4314      	orrs	r4, r2
	W.u8[1] = H;
 8003ca0:	4aa1      	ldr	r2, [pc, #644]	; (8003f28 <StartTaskModbusSlave+0x398>)
 8003ca2:	0209      	lsls	r1, r1, #8
 8003ca4:	4014      	ands	r4, r2
 8003ca6:	430c      	orrs	r4, r1
	return W.u16[0];
 8003ca8:	b2a6      	uxth	r6, r4
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003caa:	0931      	lsrs	r1, r6, #4
	W.u8[0] = L;
 8003cac:	4666      	mov	r6, ip
	W.u8[1] = H;
 8003cae:	9408      	str	r4, [sp, #32]
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003cb0:	9100      	str	r1, [sp, #0]
	W.u8[0] = L;
 8003cb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8003cb4:	7e3d      	ldrb	r5, [r7, #24]
 8003cb6:	7df9      	ldrb	r1, [r7, #23]
	W.u8[0] = L;
 8003cb8:	43b4      	bics	r4, r6
 8003cba:	432c      	orrs	r4, r5
	W.u8[1] = H;
 8003cbc:	0209      	lsls	r1, r1, #8
 8003cbe:	4014      	ands	r4, r2
 8003cc0:	430c      	orrs	r4, r1
 8003cc2:	9409      	str	r4, [sp, #36]	; 0x24
	return W.u16[0];
 8003cc4:	b2a4      	uxth	r4, r4
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8003cc6:	0924      	lsrs	r4, r4, #4
 8003cc8:	46a2      	mov	sl, r4
	W.u8[0] = L;
 8003cca:	4664      	mov	r4, ip
 8003ccc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003cce:	43a6      	bics	r6, r4
 8003cd0:	432e      	orrs	r6, r5
	W.u8[1] = H;
 8003cd2:	4032      	ands	r2, r6
 8003cd4:	0016      	movs	r6, r2
 8003cd6:	430e      	orrs	r6, r1
 8003cd8:	960a      	str	r6, [sp, #40]	; 0x28
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8003cda:	0712      	lsls	r2, r2, #28
 8003cdc:	d002      	beq.n	8003ce4 <StartTaskModbusSlave+0x154>
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4694      	mov	ip, r2
 8003ce2:	44e2      	add	sl, ip
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003ce4:	9a00      	ldr	r2, [sp, #0]
 8003ce6:	4452      	add	r2, sl
 8003ce8:	0014      	movs	r4, r2
 8003cea:	22a4      	movs	r2, #164	; 0xa4
 8003cec:	5aba      	ldrh	r2, [r7, r2]
 8003cee:	4294      	cmp	r4, r2
 8003cf0:	dc3b      	bgt.n	8003d6a <StartTaskModbusSlave+0x1da>
	W.u8[0] = L;
 8003cf2:	26ff      	movs	r6, #255	; 0xff
	W.u8[1] = H;
 8003cf4:	4c8c      	ldr	r4, [pc, #560]	; (8003f28 <StartTaskModbusSlave+0x398>)
	W.u8[0] = L;
 8003cf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
	W.u8[1] = H;
 8003cf8:	46a4      	mov	ip, r4
	W.u8[0] = L;
 8003cfa:	43b2      	bics	r2, r6
 8003cfc:	432a      	orrs	r2, r5
	W.u8[1] = H;
 8003cfe:	4022      	ands	r2, r4
	W.u8[0] = L;
 8003d00:	9c15      	ldr	r4, [sp, #84]	; 0x54
	W.u8[1] = H;
 8003d02:	430a      	orrs	r2, r1
	W.u8[0] = L;
 8003d04:	43b4      	bics	r4, r6
 8003d06:	0026      	movs	r6, r4
	W.u8[1] = H;
 8003d08:	4664      	mov	r4, ip
	W.u8[0] = L;
 8003d0a:	432e      	orrs	r6, r5
	W.u8[1] = H;
 8003d0c:	4034      	ands	r4, r6
 8003d0e:	9214      	str	r2, [sp, #80]	; 0x50
 8003d10:	4321      	orrs	r1, r4
	return W.u16[0];
 8003d12:	b292      	uxth	r2, r2
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8003d14:	08d2      	lsrs	r2, r2, #3
	W.u8[1] = H;
 8003d16:	9115      	str	r1, [sp, #84]	; 0x54
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8003d18:	0761      	lsls	r1, r4, #29
 8003d1a:	d000      	beq.n	8003d1e <StartTaskModbusSlave+0x18e>
 8003d1c:	3201      	adds	r2, #1
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	3205      	adds	r2, #5
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d847      	bhi.n	8003db8 <StartTaskModbusSlave+0x228>
	 modH->i8lastError = 0;
 8003d28:	2300      	movs	r3, #0
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003d2a:	2101      	movs	r1, #1
	 modH->i8lastError = 0;
 8003d2c:	74bb      	strb	r3, [r7, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003d2e:	33b8      	adds	r3, #184	; 0xb8
 8003d30:	58f8      	ldr	r0, [r7, r3]
 8003d32:	4249      	negs	r1, r1
 8003d34:	f001 fba8 	bl	8005488 <xQueueSemaphoreTake>
	 switch(modH->u8Buffer[ FUNC ] )
 8003d38:	7d3b      	ldrb	r3, [r7, #20]
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d900      	bls.n	8003d40 <StartTaskModbusSlave+0x1b0>
 8003d3e:	e081      	b.n	8003e44 <StartTaskModbusSlave+0x2b4>
 8003d40:	4a7a      	ldr	r2, [pc, #488]	; (8003f2c <StartTaskModbusSlave+0x39c>)
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	58d3      	ldr	r3, [r2, r3]
 8003d46:	469f      	mov	pc, r3
	W.u8[0] = L;
 8003d48:	24ff      	movs	r4, #255	; 0xff
 8003d4a:	9d05      	ldr	r5, [sp, #20]
 8003d4c:	7db9      	ldrb	r1, [r7, #22]
 8003d4e:	43a5      	bics	r5, r4
 8003d50:	002c      	movs	r4, r5
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8003d52:	7d7a      	ldrb	r2, [r7, #21]
	W.u8[0] = L;
 8003d54:	430c      	orrs	r4, r1
	W.u8[1] = H;
 8003d56:	4974      	ldr	r1, [pc, #464]	; (8003f28 <StartTaskModbusSlave+0x398>)
 8003d58:	0212      	lsls	r2, r2, #8
 8003d5a:	4021      	ands	r1, r4
 8003d5c:	4311      	orrs	r1, r2
 8003d5e:	9105      	str	r1, [sp, #20]
	return W.u16[0];
 8003d60:	b28a      	uxth	r2, r1
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003d62:	21a4      	movs	r1, #164	; 0xa4
 8003d64:	5a79      	ldrh	r1, [r7, r1]
 8003d66:	4291      	cmp	r1, r2
 8003d68:	d2de      	bcs.n	8003d28 <StartTaskModbusSlave+0x198>
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	e77f      	b.n	8003c6e <StartTaskModbusSlave+0xde>
	W.u8[0] = L;
 8003d6e:	25ff      	movs	r5, #255	; 0xff
 8003d70:	9c03      	ldr	r4, [sp, #12]
 8003d72:	7dba      	ldrb	r2, [r7, #22]
 8003d74:	43ac      	bics	r4, r5
 8003d76:	4314      	orrs	r4, r2
	W.u8[1] = H;
 8003d78:	4a6b      	ldr	r2, [pc, #428]	; (8003f28 <StartTaskModbusSlave+0x398>)
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8003d7a:	7d79      	ldrb	r1, [r7, #21]
	W.u8[1] = H;
 8003d7c:	4694      	mov	ip, r2
 8003d7e:	4014      	ands	r4, r2
	W.u8[0] = L;
 8003d80:	9a04      	ldr	r2, [sp, #16]
	W.u8[1] = H;
 8003d82:	0209      	lsls	r1, r1, #8
	W.u8[0] = L;
 8003d84:	43aa      	bics	r2, r5
	W.u8[1] = H;
 8003d86:	4665      	mov	r5, ip
 8003d88:	430c      	orrs	r4, r1
 8003d8a:	9403      	str	r4, [sp, #12]
	W.u8[0] = L;
 8003d8c:	7e3e      	ldrb	r6, [r7, #24]
	return W.u16[0];
 8003d8e:	b2a1      	uxth	r1, r4
	W.u8[0] = L;
 8003d90:	4332      	orrs	r2, r6
	W.u8[1] = H;
 8003d92:	4015      	ands	r5, r2
 8003d94:	002a      	movs	r2, r5
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8003d96:	7dfc      	ldrb	r4, [r7, #23]
	W.u8[1] = H;
 8003d98:	0224      	lsls	r4, r4, #8
 8003d9a:	4322      	orrs	r2, r4
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003d9c:	24a4      	movs	r4, #164	; 0xa4
	W.u8[1] = H;
 8003d9e:	9204      	str	r2, [sp, #16]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003da0:	5b3c      	ldrh	r4, [r7, r4]
	return W.u16[0];
 8003da2:	b292      	uxth	r2, r2
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8003da4:	1889      	adds	r1, r1, r2
 8003da6:	42a1      	cmp	r1, r4
 8003da8:	dcdf      	bgt.n	8003d6a <StartTaskModbusSlave+0x1da>
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8003daa:	2180      	movs	r1, #128	; 0x80
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8003dac:	0052      	lsls	r2, r2, #1
 8003dae:	3205      	adds	r2, #5
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8003db0:	b292      	uxth	r2, r2
 8003db2:	0049      	lsls	r1, r1, #1
 8003db4:	428a      	cmp	r2, r1
 8003db6:	d9b7      	bls.n	8003d28 <StartTaskModbusSlave+0x198>
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8003db8:	2203      	movs	r2, #3
 8003dba:	e758      	b.n	8003c6e <StartTaskModbusSlave+0xde>
	W.u8[0] = L;
 8003dbc:	26ff      	movs	r6, #255	; 0xff
 8003dbe:	9a06      	ldr	r2, [sp, #24]
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003dc0:	7dbd      	ldrb	r5, [r7, #22]
	W.u8[0] = L;
 8003dc2:	43b2      	bics	r2, r6
 8003dc4:	432a      	orrs	r2, r5
 8003dc6:	0014      	movs	r4, r2
	W.u8[1] = H;
 8003dc8:	4a57      	ldr	r2, [pc, #348]	; (8003f28 <StartTaskModbusSlave+0x398>)
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003dca:	7d79      	ldrb	r1, [r7, #21]
	W.u8[1] = H;
 8003dcc:	4694      	mov	ip, r2
 8003dce:	4014      	ands	r4, r2
	W.u8[0] = L;
 8003dd0:	9a07      	ldr	r2, [sp, #28]
	W.u8[1] = H;
 8003dd2:	0209      	lsls	r1, r1, #8
	W.u8[0] = L;
 8003dd4:	43b2      	bics	r2, r6
 8003dd6:	0016      	movs	r6, r2
	W.u8[1] = H;
 8003dd8:	4662      	mov	r2, ip
	W.u8[0] = L;
 8003dda:	432e      	orrs	r6, r5
	W.u8[1] = H;
 8003ddc:	430c      	orrs	r4, r1
 8003dde:	4032      	ands	r2, r6
 8003de0:	9406      	str	r4, [sp, #24]
 8003de2:	4311      	orrs	r1, r2
	return W.u16[0];
 8003de4:	b2a4      	uxth	r4, r4
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8003de6:	0924      	lsrs	r4, r4, #4
	W.u8[1] = H;
 8003de8:	9107      	str	r1, [sp, #28]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8003dea:	0712      	lsls	r2, r2, #28
 8003dec:	d000      	beq.n	8003df0 <StartTaskModbusSlave+0x260>
 8003dee:	3401      	adds	r4, #1
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003df0:	22a4      	movs	r2, #164	; 0xa4
 8003df2:	5aba      	ldrh	r2, [r7, r2]
 8003df4:	42a2      	cmp	r2, r4
 8003df6:	d297      	bcs.n	8003d28 <StartTaskModbusSlave+0x198>
 8003df8:	e7b7      	b.n	8003d6a <StartTaskModbusSlave+0x1da>
	W.u8[0] = L;
 8003dfa:	21ff      	movs	r1, #255	; 0xff
 8003dfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dfe:	7dba      	ldrb	r2, [r7, #22]
 8003e00:	4388      	bics	r0, r1
 8003e02:	0001      	movs	r1, r0
 8003e04:	4311      	orrs	r1, r2
	W.u8[1] = H;
 8003e06:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <StartTaskModbusSlave+0x398>)
int8_t process_FC5( modbusHandler_t *modH )
{
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003e08:	7d7b      	ldrb	r3, [r7, #21]
	W.u8[1] = H;
 8003e0a:	400a      	ands	r2, r1

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
    u8currentBit = (uint8_t) (u16coil % 16);
 8003e0c:	210f      	movs	r1, #15
	W.u8[1] = H;
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	431a      	orrs	r2, r3
 8003e12:	920f      	str	r2, [sp, #60]	; 0x3c
	return W.u16[0];
 8003e14:	b292      	uxth	r2, r2
    u16currentRegister = (u16coil / 16);
 8003e16:	0913      	lsrs	r3, r2, #4
    u8currentBit = (uint8_t) (u16coil % 16);
 8003e18:	400a      	ands	r2, r1

    // write to coil
    bitWrite(
 8003e1a:	7df9      	ldrb	r1, [r7, #23]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	29ff      	cmp	r1, #255	; 0xff
 8003e20:	d100      	bne.n	8003e24 <StartTaskModbusSlave+0x294>
 8003e22:	e188      	b.n	8004136 <StartTaskModbusSlave+0x5a6>
 8003e24:	2198      	movs	r1, #152	; 0x98
 8003e26:	5878      	ldr	r0, [r7, r1]
 8003e28:	3997      	subs	r1, #151	; 0x97
 8003e2a:	4091      	lsls	r1, r2
 8003e2c:	5ac2      	ldrh	r2, [r0, r3]
 8003e2e:	438a      	bics	r2, r1
 8003e30:	52c2      	strh	r2, [r0, r3]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8003e32:	2393      	movs	r3, #147	; 0x93
 8003e34:	2206      	movs	r2, #6
    u8CopyBufferSize =  modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8003e36:	0038      	movs	r0, r7
    modH->u8BufferSize = 6;
 8003e38:	54fa      	strb	r2, [r7, r3]
    sendTxBuffer(modH);
 8003e3a:	f7ff fdc9 	bl	80039d0 <sendTxBuffer>
				modH->i8state = process_FC5(modH);
 8003e3e:	23a7      	movs	r3, #167	; 0xa7
 8003e40:	2208      	movs	r2, #8
 8003e42:	54fa      	strb	r2, [r7, r3]
	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003e44:	23b8      	movs	r3, #184	; 0xb8
 8003e46:	2200      	movs	r2, #0
 8003e48:	58f8      	ldr	r0, [r7, r3]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f001 f991 	bl	8005174 <xQueueGenericSend>
	 continue;
 8003e52:	e6b1      	b.n	8003bb8 <StartTaskModbusSlave+0x28>
	W.u8[0] = L;
 8003e54:	20ff      	movs	r0, #255	; 0xff
 8003e56:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003e58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003e5a:	4385      	bics	r5, r0
 8003e5c:	4381      	bics	r1, r0
 8003e5e:	0028      	movs	r0, r5
 8003e60:	7dbb      	ldrb	r3, [r7, #22]
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003e62:	7d7a      	ldrb	r2, [r7, #21]
	W.u8[0] = L;
 8003e64:	4319      	orrs	r1, r3
	W.u8[1] = H;
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <StartTaskModbusSlave+0x398>)
 8003e68:	0212      	lsls	r2, r2, #8
 8003e6a:	4019      	ands	r1, r3
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	9112      	str	r1, [sp, #72]	; 0x48
	W.u8[0] = L;
 8003e70:	7e3c      	ldrb	r4, [r7, #24]
	return W.u16[0];
 8003e72:	b28a      	uxth	r2, r1
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003e74:	7df9      	ldrb	r1, [r7, #23]
	W.u8[0] = L;
 8003e76:	4320      	orrs	r0, r4
	W.u8[1] = H;
 8003e78:	0209      	lsls	r1, r1, #8
 8003e7a:	4003      	ands	r3, r0
 8003e7c:	430b      	orrs	r3, r1
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003e7e:	2107      	movs	r1, #7
 8003e80:	0008      	movs	r0, r1
	return W.u16[0];
 8003e82:	b29e      	uxth	r6, r3
	W.u8[1] = H;
 8003e84:	9313      	str	r3, [sp, #76]	; 0x4c
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003e86:	4030      	ands	r0, r6
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003e88:	08f3      	lsrs	r3, r6, #3
 8003e8a:	b2db      	uxtb	r3, r3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003e8c:	9002      	str	r0, [sp, #8]
 8003e8e:	4231      	tst	r1, r6
 8003e90:	d100      	bne.n	8003e94 <StartTaskModbusSlave+0x304>
 8003e92:	e141      	b.n	8004118 <StartTaskModbusSlave+0x588>
    modH->u8BufferSize         = ADD_LO;
 8003e94:	2003      	movs	r0, #3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2db      	uxtb	r3, r3
    modH->u8BufferSize         = ADD_LO;
 8003e9a:	318c      	adds	r1, #140	; 0x8c
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8003e9c:	757b      	strb	r3, [r7, #21]
    modH->u8BufferSize         = ADD_LO;
 8003e9e:	5478      	strb	r0, [r7, r1]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	7559      	strb	r1, [r3, #21]
        bitWrite(
 8003ea6:	2398      	movs	r3, #152	; 0x98
 8003ea8:	58fb      	ldr	r3, [r7, r3]
 8003eaa:	2003      	movs	r0, #3
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	2300      	movs	r3, #0
            modH->u8BufferSize++;
 8003eb2:	9601      	str	r6, [sp, #4]
 8003eb4:	e01a      	b.n	8003eec <StartTaskModbusSlave+0x35c>
        bitWrite(
 8003eb6:	183c      	adds	r4, r7, r0
 8003eb8:	7ce5      	ldrb	r5, [r4, #19]
 8003eba:	46ac      	mov	ip, r5
 8003ebc:	2501      	movs	r5, #1
 8003ebe:	409d      	lsls	r5, r3
 8003ec0:	46aa      	mov	sl, r5
 8003ec2:	4665      	mov	r5, ip
 8003ec4:	4656      	mov	r6, sl
 8003ec6:	4335      	orrs	r5, r6
 8003ec8:	74e5      	strb	r5, [r4, #19]
        u8bitsno ++;
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
        if (u8bitsno > 7)
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	d904      	bls.n	8003edc <StartTaskModbusSlave+0x34c>
            modH->u8BufferSize++;
 8003ed2:	2393      	movs	r3, #147	; 0x93
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	b2c0      	uxtb	r0, r0
 8003ed8:	54f8      	strb	r0, [r7, r3]
            u8bitsno = 0;
 8003eda:	2300      	movs	r3, #0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003edc:	3101      	adds	r1, #1
 8003ede:	9c01      	ldr	r4, [sp, #4]
 8003ee0:	3201      	adds	r2, #1
 8003ee2:	b289      	uxth	r1, r1
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	428c      	cmp	r4, r1
 8003ee8:	d800      	bhi.n	8003eec <StartTaskModbusSlave+0x35c>
 8003eea:	e10c      	b.n	8004106 <StartTaskModbusSlave+0x576>
        bitWrite(
 8003eec:	9d00      	ldr	r5, [sp, #0]
 8003eee:	0914      	lsrs	r4, r2, #4
 8003ef0:	0064      	lsls	r4, r4, #1
 8003ef2:	5b64      	ldrh	r4, [r4, r5]
 8003ef4:	250f      	movs	r5, #15
 8003ef6:	4015      	ands	r5, r2
 8003ef8:	412c      	asrs	r4, r5
 8003efa:	2501      	movs	r5, #1
 8003efc:	4225      	tst	r5, r4
 8003efe:	d1da      	bne.n	8003eb6 <StartTaskModbusSlave+0x326>
 8003f00:	183c      	adds	r4, r7, r0
 8003f02:	7ce5      	ldrb	r5, [r4, #19]
 8003f04:	46ac      	mov	ip, r5
 8003f06:	2501      	movs	r5, #1
 8003f08:	409d      	lsls	r5, r3
 8003f0a:	46aa      	mov	sl, r5
 8003f0c:	4665      	mov	r5, ip
 8003f0e:	4656      	mov	r6, sl
 8003f10:	43b5      	bics	r5, r6
 8003f12:	74e5      	strb	r5, [r4, #19]
 8003f14:	e7d9      	b.n	8003eca <StartTaskModbusSlave+0x33a>
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	08006af8 	.word	0x08006af8
 8003f1c:	0000a001 	.word	0x0000a001
 8003f20:	0000ffff 	.word	0x0000ffff
 8003f24:	08006c4c 	.word	0x08006c4c
 8003f28:	ffff00ff 	.word	0xffff00ff
 8003f2c:	08006b3c 	.word	0x08006b3c
	W.u8[0] = L;
 8003f30:	22ff      	movs	r2, #255	; 0xff
 8003f32:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003f34:	7db9      	ldrb	r1, [r7, #22]
 8003f36:	4390      	bics	r0, r2
 8003f38:	4308      	orrs	r0, r1
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	9d11      	ldr	r5, [sp, #68]	; 0x44
    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003f3e:	7d7b      	ldrb	r3, [r7, #21]
	W.u8[0] = L;
 8003f40:	4395      	bics	r5, r2
 8003f42:	002a      	movs	r2, r5
	W.u8[1] = H;
 8003f44:	4c81      	ldr	r4, [pc, #516]	; (800414c <StartTaskModbusSlave+0x5bc>)
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	4021      	ands	r1, r4
 8003f4a:	4319      	orrs	r1, r3
 8003f4c:	9110      	str	r1, [sp, #64]	; 0x40
	W.u8[0] = L;
 8003f4e:	7e38      	ldrb	r0, [r7, #24]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
	W.u8[0] = L;
 8003f52:	4302      	orrs	r2, r0
	W.u8[1] = H;
 8003f54:	4014      	ands	r4, r2
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	4323      	orrs	r3, r4
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003f5a:	b2e4      	uxtb	r4, r4
	W.u8[1] = H;
 8003f5c:	9311      	str	r3, [sp, #68]	; 0x44
    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8003f5e:	0063      	lsls	r3, r4, #1
 8003f60:	757b      	strb	r3, [r7, #21]
    modH->u8BufferSize         = 3;
 8003f62:	2203      	movs	r2, #3
 8003f64:	2393      	movs	r3, #147	; 0x93
	return W.u16[0];
 8003f66:	b289      	uxth	r1, r1
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003f68:	1864      	adds	r4, r4, r1
    modH->u8BufferSize         = 3;
 8003f6a:	54fa      	strb	r2, [r7, r3]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003f6c:	428c      	cmp	r4, r1
 8003f6e:	dc00      	bgt.n	8003f72 <StartTaskModbusSlave+0x3e2>
 8003f70:	e0dc      	b.n	800412c <StartTaskModbusSlave+0x59c>
    	modH->u8BufferSize++;
 8003f72:	2593      	movs	r5, #147	; 0x93
 8003f74:	46a2      	mov	sl, r4
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003f76:	3305      	adds	r3, #5
 8003f78:	58fe      	ldr	r6, [r7, r3]
 8003f7a:	3b95      	subs	r3, #149	; 0x95
 8003f7c:	18fa      	adds	r2, r7, r3
 8003f7e:	4694      	mov	ip, r2
 8003f80:	4664      	mov	r4, ip
 8003f82:	0048      	lsls	r0, r1, #1
 8003f84:	5a32      	ldrh	r2, [r6, r0]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003f86:	3101      	adds	r1, #1
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003f88:	0a12      	lsrs	r2, r2, #8
 8003f8a:	74e2      	strb	r2, [r4, #19]
    	modH->u8BufferSize++;
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	557a      	strb	r2, [r7, r5]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003f92:	5a30      	ldrh	r0, [r6, r0]
 8003f94:	18ba      	adds	r2, r7, r2
 8003f96:	74d0      	strb	r0, [r2, #19]
    	modH->u8BufferSize++;
 8003f98:	001a      	movs	r2, r3
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	b2db      	uxtb	r3, r3
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003f9e:	b289      	uxth	r1, r1
    	modH->u8BufferSize++;
 8003fa0:	557b      	strb	r3, [r7, r5]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003fa2:	458a      	cmp	sl, r1
 8003fa4:	dcea      	bgt.n	8003f7c <StartTaskModbusSlave+0x3ec>
 8003fa6:	3204      	adds	r2, #4
 8003fa8:	b254      	sxtb	r4, r2
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        modH->u16regs[ u16StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8003faa:	0038      	movs	r0, r7
 8003fac:	f7ff fd10 	bl	80039d0 <sendTxBuffer>
				modH->i8state = process_FC16(modH);
 8003fb0:	23a7      	movs	r3, #167	; 0xa7
 8003fb2:	54fc      	strb	r4, [r7, r3]
	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003fb4:	23b8      	movs	r3, #184	; 0xb8
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	58f8      	ldr	r0, [r7, r3]
 8003fba:	2100      	movs	r1, #0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f001 f8d9 	bl	8005174 <xQueueGenericSend>
	 continue;
 8003fc2:	e5f9      	b.n	8003bb8 <StartTaskModbusSlave+0x28>
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8003fc4:	7d78      	ldrb	r0, [r7, #21]
 8003fc6:	7dbb      	ldrb	r3, [r7, #22]
 8003fc8:	0200      	lsls	r0, r0, #8
 8003fca:	4318      	orrs	r0, r3
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	7e3c      	ldrb	r4, [r7, #24]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	431c      	orrs	r4, r3
    modH->u8Buffer[ NB_HI ]   = 0;
 8003fd4:	2300      	movs	r3, #0
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003fd6:	2206      	movs	r2, #6
    modH->u8Buffer[ NB_HI ]   = 0;
 8003fd8:	75fb      	strb	r3, [r7, #23]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003fda:	3393      	adds	r3, #147	; 0x93
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8003fdc:	763c      	strb	r4, [r7, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003fde:	54fa      	strb	r2, [r7, r3]
    for (i = 0; i < u16regsno; i++)
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d100      	bne.n	8003fe6 <StartTaskModbusSlave+0x456>
 8003fe4:	e0af      	b.n	8004146 <StartTaskModbusSlave+0x5b6>
 8003fe6:	3305      	adds	r3, #5
 8003fe8:	58fb      	ldr	r3, [r7, r3]
 8003fea:	0040      	lsls	r0, r0, #1
 8003fec:	1818      	adds	r0, r3, r0
	W.u8[1] = H;
 8003fee:	46bc      	mov	ip, r7
    for (i = 0; i < u16regsno; i++)
 8003ff0:	2300      	movs	r3, #0
	W.u8[1] = H;
 8003ff2:	0027      	movs	r7, r4
	W.u8[0] = L;
 8003ff4:	26ff      	movs	r6, #255	; 0xff
	W.u8[1] = H;
 8003ff6:	0004      	movs	r4, r0
 8003ff8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003ffa:	9a16      	ldr	r2, [sp, #88]	; 0x58
	W.u8[0] = L;
 8003ffc:	784d      	ldrb	r5, [r1, #1]
 8003ffe:	43b2      	bics	r2, r6
        temp = word(
 8004000:	7808      	ldrb	r0, [r1, #0]
	W.u8[0] = L;
 8004002:	432a      	orrs	r2, r5
	W.u8[1] = H;
 8004004:	4d51      	ldr	r5, [pc, #324]	; (800414c <StartTaskModbusSlave+0x5bc>)
 8004006:	0200      	lsls	r0, r0, #8
 8004008:	402a      	ands	r2, r5
    for (i = 0; i < u16regsno; i++)
 800400a:	3301      	adds	r3, #1
	W.u8[1] = H;
 800400c:	4302      	orrs	r2, r0
    for (i = 0; i < u16regsno; i++)
 800400e:	b29b      	uxth	r3, r3
        modH->u16regs[ u16StartAdd + i ] = temp;
 8004010:	8022      	strh	r2, [r4, #0]
    for (i = 0; i < u16regsno; i++)
 8004012:	3102      	adds	r1, #2
 8004014:	3402      	adds	r4, #2
 8004016:	429f      	cmp	r7, r3
 8004018:	d1f0      	bne.n	8003ffc <StartTaskModbusSlave+0x46c>
 800401a:	4667      	mov	r7, ip
 800401c:	2393      	movs	r3, #147	; 0x93
 800401e:	9216      	str	r2, [sp, #88]	; 0x58
 8004020:	5cfc      	ldrb	r4, [r7, r3]
 8004022:	3402      	adds	r4, #2
 8004024:	b264      	sxtb	r4, r4
 8004026:	e7c0      	b.n	8003faa <StartTaskModbusSlave+0x41a>
	W.u8[0] = L;
 8004028:	20ff      	movs	r0, #255	; 0xff
 800402a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800402c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800402e:	4385      	bics	r5, r0
 8004030:	4381      	bics	r1, r0
 8004032:	0028      	movs	r0, r5
 8004034:	7dba      	ldrb	r2, [r7, #22]
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8004036:	7d7b      	ldrb	r3, [r7, #21]
	W.u8[0] = L;
 8004038:	4311      	orrs	r1, r2
	W.u8[1] = H;
 800403a:	4a44      	ldr	r2, [pc, #272]	; (800414c <StartTaskModbusSlave+0x5bc>)
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	4011      	ands	r1, r2
 8004040:	4319      	orrs	r1, r3
 8004042:	910b      	str	r1, [sp, #44]	; 0x2c
	W.u8[0] = L;
 8004044:	7e3c      	ldrb	r4, [r7, #24]
	return W.u16[0];
 8004046:	b28b      	uxth	r3, r1
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8004048:	7df9      	ldrb	r1, [r7, #23]
	W.u8[0] = L;
 800404a:	4320      	orrs	r0, r4
	W.u8[1] = H;
 800404c:	0209      	lsls	r1, r1, #8
 800404e:	4002      	ands	r2, r0
 8004050:	430a      	orrs	r2, r1
 8004052:	920c      	str	r2, [sp, #48]	; 0x30
	return W.u16[0];
 8004054:	b292      	uxth	r2, r2
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004056:	2a00      	cmp	r2, #0
 8004058:	d100      	bne.n	800405c <StartTaskModbusSlave+0x4cc>
 800405a:	e6ea      	b.n	8003e32 <StartTaskModbusSlave+0x2a2>
        bitWrite(
 800405c:	2198      	movs	r1, #152	; 0x98
 800405e:	189a      	adds	r2, r3, r2
 8004060:	b292      	uxth	r2, r2
 8004062:	4692      	mov	sl, r2
    u8frameByte = 7;
 8004064:	2007      	movs	r0, #7
    u8bitsno = 0;
 8004066:	2200      	movs	r2, #0
        bTemp = bitRead(
 8004068:	2401      	movs	r4, #1
        bitWrite(
 800406a:	468c      	mov	ip, r1
 800406c:	e015      	b.n	800409a <StartTaskModbusSlave+0x50a>
 800406e:	0026      	movs	r6, r4
 8004070:	40ae      	lsls	r6, r5
 8004072:	4665      	mov	r5, ip
 8004074:	597d      	ldr	r5, [r7, r5]
 8004076:	5a6d      	ldrh	r5, [r5, r1]
 8004078:	4335      	orrs	r5, r6
 800407a:	4666      	mov	r6, ip
 800407c:	59be      	ldr	r6, [r7, r6]
 800407e:	5275      	strh	r5, [r6, r1]
        u8bitsno ++;
 8004080:	3201      	adds	r2, #1
 8004082:	b2d2      	uxtb	r2, r2
        if (u8bitsno > 7)
 8004084:	2a07      	cmp	r2, #7
 8004086:	d902      	bls.n	800408e <StartTaskModbusSlave+0x4fe>
            u8bitsno = 0;
 8004088:	2200      	movs	r2, #0
            u8frameByte++;
 800408a:	3001      	adds	r0, #1
 800408c:	b2c0      	uxtb	r0, r0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800408e:	4651      	mov	r1, sl
 8004090:	3301      	adds	r3, #1
 8004092:	b29b      	uxth	r3, r3
 8004094:	4299      	cmp	r1, r3
 8004096:	d100      	bne.n	800409a <StartTaskModbusSlave+0x50a>
 8004098:	e6cb      	b.n	8003e32 <StartTaskModbusSlave+0x2a2>
        bTemp = bitRead(
 800409a:	183e      	adds	r6, r7, r0
 800409c:	7cf6      	ldrb	r6, [r6, #19]
        u8currentBit = (uint8_t) (u16coil % 16);
 800409e:	250f      	movs	r5, #15
        bTemp = bitRead(
 80040a0:	4116      	asrs	r6, r2
        u16currentRegister = (u16coil / 16);
 80040a2:	0919      	lsrs	r1, r3, #4
        u8currentBit = (uint8_t) (u16coil % 16);
 80040a4:	401d      	ands	r5, r3
        bitWrite(
 80040a6:	0049      	lsls	r1, r1, #1
 80040a8:	4234      	tst	r4, r6
 80040aa:	d1e0      	bne.n	800406e <StartTaskModbusSlave+0x4de>
 80040ac:	0026      	movs	r6, r4
 80040ae:	40ae      	lsls	r6, r5
 80040b0:	4665      	mov	r5, ip
 80040b2:	597d      	ldr	r5, [r7, r5]
 80040b4:	5a6d      	ldrh	r5, [r5, r1]
 80040b6:	43b5      	bics	r5, r6
 80040b8:	4666      	mov	r6, ip
 80040ba:	59be      	ldr	r6, [r7, r6]
 80040bc:	5275      	strh	r5, [r6, r1]
 80040be:	e7df      	b.n	8004080 <StartTaskModbusSlave+0x4f0>
	W.u8[0] = L;
 80040c0:	20ff      	movs	r0, #255	; 0xff
 80040c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80040c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040c6:	4385      	bics	r5, r0
 80040c8:	4381      	bics	r1, r0
 80040ca:	0028      	movs	r0, r5
 80040cc:	7dbb      	ldrb	r3, [r7, #22]
    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80040ce:	7d7a      	ldrb	r2, [r7, #21]
	W.u8[0] = L;
 80040d0:	4319      	orrs	r1, r3
	W.u8[1] = H;
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <StartTaskModbusSlave+0x5bc>)
 80040d4:	0212      	lsls	r2, r2, #8
 80040d6:	4019      	ands	r1, r3
 80040d8:	4311      	orrs	r1, r2
 80040da:	910d      	str	r1, [sp, #52]	; 0x34
	W.u8[0] = L;
 80040dc:	7e3c      	ldrb	r4, [r7, #24]
	return W.u16[0];
 80040de:	b28a      	uxth	r2, r1
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80040e0:	7df9      	ldrb	r1, [r7, #23]
	W.u8[0] = L;
 80040e2:	4320      	orrs	r0, r4
	W.u8[1] = H;
 80040e4:	0209      	lsls	r1, r1, #8
 80040e6:	4003      	ands	r3, r0
 80040e8:	430b      	orrs	r3, r1
 80040ea:	0018      	movs	r0, r3
 80040ec:	930e      	str	r3, [sp, #56]	; 0x38
    modH->u16regs[ u16add ] = u16val;
 80040ee:	2398      	movs	r3, #152	; 0x98
 80040f0:	58f9      	ldr	r1, [r7, r3]
 80040f2:	0052      	lsls	r2, r2, #1
 80040f4:	5288      	strh	r0, [r1, r2]
    modH->u8BufferSize = RESPONSE_SIZE;
 80040f6:	e69c      	b.n	8003e32 <StartTaskModbusSlave+0x2a2>
	       		modH->u16errCnt ++;
 80040f8:	22a0      	movs	r2, #160	; 0xa0
 80040fa:	5abb      	ldrh	r3, [r7, r2]
 80040fc:	3301      	adds	r3, #1
 80040fe:	52bb      	strh	r3, [r7, r2]
	if (u8exception > 0)
 8004100:	7d3b      	ldrb	r3, [r7, #20]
	       		return ERR_BAD_CRC;
 8004102:	325c      	adds	r2, #92	; 0x5c
 8004104:	e5b3      	b.n	8003c6e <StartTaskModbusSlave+0xde>
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8004106:	9b02      	ldr	r3, [sp, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <StartTaskModbusSlave+0x5a0>
 800410c:	2393      	movs	r3, #147	; 0x93
 800410e:	1c42      	adds	r2, r0, #1
 8004110:	3003      	adds	r0, #3
 8004112:	54fa      	strb	r2, [r7, r3]
 8004114:	b244      	sxtb	r4, r0
 8004116:	e748      	b.n	8003faa <StartTaskModbusSlave+0x41a>
    modH->u8BufferSize         = ADD_LO;
 8004118:	2193      	movs	r1, #147	; 0x93
 800411a:	2003      	movs	r0, #3
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800411c:	757b      	strb	r3, [r7, #21]
    modH->u8BufferSize         = ADD_LO;
 800411e:	5478      	strb	r0, [r7, r1]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8004120:	9902      	ldr	r1, [sp, #8]
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	7559      	strb	r1, [r3, #21]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004126:	2e00      	cmp	r6, #0
 8004128:	d000      	beq.n	800412c <StartTaskModbusSlave+0x59c>
 800412a:	e6bc      	b.n	8003ea6 <StartTaskModbusSlave+0x316>
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800412c:	2405      	movs	r4, #5
    sendTxBuffer(modH);
 800412e:	e73c      	b.n	8003faa <StartTaskModbusSlave+0x41a>
 8004130:	3002      	adds	r0, #2
 8004132:	b244      	sxtb	r4, r0
 8004134:	e739      	b.n	8003faa <StartTaskModbusSlave+0x41a>
    bitWrite(
 8004136:	3967      	subs	r1, #103	; 0x67
 8004138:	5878      	ldr	r0, [r7, r1]
 800413a:	3997      	subs	r1, #151	; 0x97
 800413c:	4091      	lsls	r1, r2
 800413e:	5ac2      	ldrh	r2, [r0, r3]
 8004140:	430a      	orrs	r2, r1
 8004142:	52c2      	strh	r2, [r0, r3]
 8004144:	e675      	b.n	8003e32 <StartTaskModbusSlave+0x2a2>
    for (i = 0; i < u16regsno; i++)
 8004146:	2408      	movs	r4, #8
 8004148:	e72f      	b.n	8003faa <StartTaskModbusSlave+0x41a>
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	ffff00ff 	.word	0xffff00ff

08004150 <StartTaskModbusMaster>:
{
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	4657      	mov	r7, sl
 8004154:	46de      	mov	lr, fp
 8004156:	464e      	mov	r6, r9
 8004158:	4645      	mov	r5, r8
 800415a:	b5e0      	push	{r5, r6, r7, lr}
 800415c:	b08d      	sub	sp, #52	; 0x34
 800415e:	ab08      	add	r3, sp, #32
 8004160:	9303      	str	r3, [sp, #12]
 8004162:	2313      	movs	r3, #19
 8004164:	469c      	mov	ip, r3
 8004166:	4484      	add	ip, r0
 8004168:	4663      	mov	r3, ip
 800416a:	0004      	movs	r4, r0
 800416c:	464f      	mov	r7, r9
 800416e:	9304      	str	r3, [sp, #16]
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8004170:	23a8      	movs	r3, #168	; 0xa8
 8004172:	2201      	movs	r2, #1
 8004174:	9d03      	ldr	r5, [sp, #12]
 8004176:	58e0      	ldr	r0, [r4, r3]
 8004178:	0029      	movs	r1, r5
 800417a:	4252      	negs	r2, r2
 800417c:	f001 f8ea 	bl	8005354 <xQueueReceive>
     SendQuery(modH, telegram);
 8004180:	786b      	ldrb	r3, [r5, #1]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004182:	2101      	movs	r1, #1
     SendQuery(modH, telegram);
 8004184:	469a      	mov	sl, r3
 8004186:	886b      	ldrh	r3, [r5, #2]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004188:	4249      	negs	r1, r1
     SendQuery(modH, telegram);
 800418a:	469b      	mov	fp, r3
 800418c:	88ab      	ldrh	r3, [r5, #4]
 800418e:	782e      	ldrb	r6, [r5, #0]
 8004190:	4699      	mov	r9, r3
 8004192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004194:	4698      	mov	r8, r3
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004196:	23b8      	movs	r3, #184	; 0xb8
 8004198:	58e0      	ldr	r0, [r4, r3]
 800419a:	f001 f975 	bl	8005488 <xQueueSemaphoreTake>
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800419e:	7a23      	ldrb	r3, [r4, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d000      	beq.n	80041a6 <StartTaskModbusMaster+0x56>
 80041a4:	e0ba      	b.n	800431c <StartTaskModbusMaster+0x1cc>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80041a6:	33a7      	adds	r3, #167	; 0xa7
 80041a8:	56e3      	ldrsb	r3, [r4, r3]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d000      	beq.n	80041b0 <StartTaskModbusMaster+0x60>
 80041ae:	e0ca      	b.n	8004346 <StartTaskModbusMaster+0x1f6>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80041b0:	1e73      	subs	r3, r6, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2bf6      	cmp	r3, #246	; 0xf6
 80041b6:	d900      	bls.n	80041ba <StartTaskModbusMaster+0x6a>
 80041b8:	e18a      	b.n	80044d0 <StartTaskModbusMaster+0x380>
	modH->u16regs = telegram.u16reg;
 80041ba:	2398      	movs	r3, #152	; 0x98
 80041bc:	4642      	mov	r2, r8
 80041be:	50e2      	str	r2, [r4, r3]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80041c0:	4653      	mov	r3, sl
 80041c2:	7523      	strb	r3, [r4, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80041c4:	465b      	mov	r3, fp
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	7563      	strb	r3, [r4, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80041ca:	465b      	mov	r3, fp
 80041cc:	75a3      	strb	r3, [r4, #22]
 80041ce:	4653      	mov	r3, sl
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80041d0:	74e6      	strb	r6, [r4, #19]
	switch( telegram.u8fct )
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d82c      	bhi.n	8004230 <StartTaskModbusMaster+0xe0>
 80041d6:	4ac7      	ldr	r2, [pc, #796]	; (80044f4 <StartTaskModbusMaster+0x3a4>)
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	469f      	mov	pc, r3
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80041de:	464b      	mov	r3, r9
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80041e4:	464b      	mov	r3, r9
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	7623      	strb	r3, [r4, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 80041ee:	2207      	movs	r2, #7
 80041f0:	2393      	movs	r3, #147	; 0x93
 80041f2:	54e2      	strb	r2, [r4, r3]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80041f4:	464b      	mov	r3, r9
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01a      	beq.n	8004230 <StartTaskModbusMaster+0xe0>
	        modH->u8BufferSize++;
 80041fa:	46bc      	mov	ip, r7
 80041fc:	4640      	mov	r0, r8
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80041fe:	2307      	movs	r3, #7
 8004200:	2100      	movs	r1, #0
	        modH->u8BufferSize++;
 8004202:	2693      	movs	r6, #147	; 0x93
 8004204:	464f      	mov	r7, r9
	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8004206:	18e2      	adds	r2, r4, r3
 8004208:	4690      	mov	r8, r2
 800420a:	4645      	mov	r5, r8
 800420c:	8802      	ldrh	r2, [r0, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800420e:	3101      	adds	r1, #1
	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8004210:	0a12      	lsrs	r2, r2, #8
 8004212:	74ea      	strb	r2, [r5, #19]
	        modH->u8BufferSize++;
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	55a2      	strb	r2, [r4, r6]
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800421a:	8805      	ldrh	r5, [r0, #0]
	        modH->u8BufferSize++;
 800421c:	3302      	adds	r3, #2
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800421e:	18a2      	adds	r2, r4, r2
	        modH->u8BufferSize++;
 8004220:	b2db      	uxtb	r3, r3
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004222:	b289      	uxth	r1, r1
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8004224:	74d5      	strb	r5, [r2, #19]
	        modH->u8BufferSize++;
 8004226:	3002      	adds	r0, #2
 8004228:	55a3      	strb	r3, [r4, r6]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800422a:	428f      	cmp	r7, r1
 800422c:	d1eb      	bne.n	8004206 <StartTaskModbusMaster+0xb6>
 800422e:	4667      	mov	r7, ip
	xSemaphoreGive(modH->ModBusSphrHandle);
 8004230:	23b8      	movs	r3, #184	; 0xb8
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	58e0      	ldr	r0, [r4, r3]
 8004238:	2300      	movs	r3, #0
 800423a:	f000 ff9b 	bl	8005174 <xQueueGenericSend>
	sendTxBuffer(modH);
 800423e:	0020      	movs	r0, r4
 8004240:	f7ff fbc6 	bl	80039d0 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8004244:	23a7      	movs	r3, #167	; 0xa7
 8004246:	2201      	movs	r2, #1
 8004248:	54e2      	strb	r2, [r4, r3]
	modH->i8lastError = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	74a3      	strb	r3, [r4, #18]
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800424e:	2101      	movs	r1, #1
 8004250:	2001      	movs	r0, #1
 8004252:	4249      	negs	r1, r1
 8004254:	f001 ffa0 	bl	8006198 <ulTaskNotifyTake>
      modH->i8lastError = 0;
 8004258:	2300      	movs	r3, #0
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800425a:	1e06      	subs	r6, r0, #0
      modH->i8lastError = 0;
 800425c:	74a3      	strb	r3, [r4, #18]
      if(ulNotificationValue)
 800425e:	d100      	bne.n	8004262 <StartTaskModbusMaster+0x112>
 8004260:	e07a      	b.n	8004358 <StartTaskModbusMaster+0x208>
    	  modH->i8state = COM_IDLE;
 8004262:	22a7      	movs	r2, #167	; 0xa7
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004264:	2108      	movs	r1, #8
    	  modH->i8state = COM_IDLE;
 8004266:	54a3      	strb	r3, [r4, r2]
    	  modH->i8lastError = ERR_TIME_OUT;
 8004268:	33f8      	adds	r3, #248	; 0xf8
 800426a:	74a3      	strb	r3, [r4, #18]
    	  modH->u16errCnt++;
 800426c:	3a07      	subs	r2, #7
 800426e:	5aa3      	ldrh	r3, [r4, r2]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004270:	9803      	ldr	r0, [sp, #12]
    	  modH->u16errCnt++;
 8004272:	3301      	adds	r3, #1
 8004274:	52a3      	strh	r3, [r4, r2]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004276:	4249      	negs	r1, r1
 8004278:	2300      	movs	r3, #0
 800427a:	3a9d      	subs	r2, #157	; 0x9d
 800427c:	68c0      	ldr	r0, [r0, #12]
 800427e:	f001 ffbd 	bl	80061fc <xTaskGenericNotify>
    	  continue;
 8004282:	e775      	b.n	8004170 <StartTaskModbusMaster+0x20>
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004284:	464b      	mov	r3, r9
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800428a:	464b      	mov	r3, r9
	    modH->u8BufferSize = 6;
 800428c:	2206      	movs	r2, #6
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800428e:	7623      	strb	r3, [r4, #24]
	    modH->u8BufferSize = 6;
 8004290:	2393      	movs	r3, #147	; 0x93
 8004292:	54e2      	strb	r2, [r4, r3]
	    break;
 8004294:	e7cc      	b.n	8004230 <StartTaskModbusMaster+0xe0>
	    u8regsno = telegram.u16CoilsNo / 16;
 8004296:	464b      	mov	r3, r9
 8004298:	0919      	lsrs	r1, r3, #4
	    u8bytesno = u8regsno * 2;
 800429a:	0049      	lsls	r1, r1, #1
 800429c:	b2c9      	uxtb	r1, r1
	    if ((telegram.u16CoilsNo % 16) != 0)
 800429e:	071b      	lsls	r3, r3, #28
 80042a0:	d001      	beq.n	80042a6 <StartTaskModbusMaster+0x156>
	        u8bytesno++;
 80042a2:	3101      	adds	r1, #1
 80042a4:	b2c9      	uxtb	r1, r1
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80042a6:	464b      	mov	r3, r9
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80042ac:	464b      	mov	r3, r9
	    modH->u8BufferSize = 7;
 80042ae:	2207      	movs	r2, #7
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80042b0:	7623      	strb	r3, [r4, #24]
	    modH->u8BufferSize = 7;
 80042b2:	2393      	movs	r3, #147	; 0x93
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80042b4:	7661      	strb	r1, [r4, #25]
	    modH->u8BufferSize = 7;
 80042b6:	54e2      	strb	r2, [r4, r3]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042b8:	b28b      	uxth	r3, r1
 80042ba:	469c      	mov	ip, r3
	        if(i%2)
 80042bc:	2601      	movs	r6, #1
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042be:	2300      	movs	r3, #0
	        modH->u8BufferSize++;
 80042c0:	2093      	movs	r0, #147	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d0b4      	beq.n	8004230 <StartTaskModbusMaster+0xe0>
 80042c6:	0039      	movs	r1, r7
 80042c8:	4647      	mov	r7, r8
 80042ca:	4688      	mov	r8, r1
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80042cc:	085d      	lsrs	r5, r3, #1
 80042ce:	006d      	lsls	r5, r5, #1
 80042d0:	5bed      	ldrh	r5, [r5, r7]
 80042d2:	18a1      	adds	r1, r4, r2
	        if(i%2)
 80042d4:	421e      	tst	r6, r3
 80042d6:	d100      	bne.n	80042da <StartTaskModbusMaster+0x18a>
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80042d8:	0a2d      	lsrs	r5, r5, #8
	        modH->u8BufferSize++;
 80042da:	3201      	adds	r2, #1
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042dc:	3301      	adds	r3, #1
	        modH->u8BufferSize++;
 80042de:	b2d2      	uxtb	r2, r2
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042e0:	b29b      	uxth	r3, r3
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80042e2:	74cd      	strb	r5, [r1, #19]
	        modH->u8BufferSize++;
 80042e4:	5422      	strb	r2, [r4, r0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80042e6:	4563      	cmp	r3, ip
 80042e8:	d3f0      	bcc.n	80042cc <StartTaskModbusMaster+0x17c>
 80042ea:	4647      	mov	r7, r8
 80042ec:	e7a0      	b.n	8004230 <StartTaskModbusMaster+0xe0>
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80042ee:	4643      	mov	r3, r8
 80042f0:	881b      	ldrh	r3, [r3, #0]
	    modH->u8BufferSize = 6;
 80042f2:	2206      	movs	r2, #6
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80042f8:	4643      	mov	r3, r8
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	7623      	strb	r3, [r4, #24]
	    modH->u8BufferSize = 6;
 80042fe:	2393      	movs	r3, #147	; 0x93
 8004300:	54e2      	strb	r2, [r4, r3]
	    break;
 8004302:	e795      	b.n	8004230 <StartTaskModbusMaster+0xe0>
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8004304:	4643      	mov	r3, r8
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	1e5a      	subs	r2, r3, #1
 800430a:	4193      	sbcs	r3, r2
 800430c:	425b      	negs	r3, r3
 800430e:	75e3      	strb	r3, [r4, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8004310:	2300      	movs	r3, #0
	    modH->u8BufferSize = 6;
 8004312:	2206      	movs	r2, #6
	    modH->u8Buffer[ NB_LO ]      = 0;
 8004314:	7623      	strb	r3, [r4, #24]
	    modH->u8BufferSize = 6;
 8004316:	3393      	adds	r3, #147	; 0x93
 8004318:	54e2      	strb	r2, [r4, r3]
	    break;
 800431a:	e789      	b.n	8004230 <StartTaskModbusMaster+0xe0>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800431c:	23a7      	movs	r3, #167	; 0xa7
 800431e:	56e3      	ldrsb	r3, [r4, r3]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d110      	bne.n	8004346 <StartTaskModbusMaster+0x1f6>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004324:	3e01      	subs	r6, #1
 8004326:	b2f6      	uxtb	r6, r6
 8004328:	33f6      	adds	r3, #246	; 0xf6
 800432a:	42b3      	cmp	r3, r6
 800432c:	419b      	sbcs	r3, r3
 800432e:	2207      	movs	r2, #7
 8004330:	4393      	bics	r3, r2
 8004332:	3b01      	subs	r3, #1
		 modH->i8lastError = error;
 8004334:	74a3      	strb	r3, [r4, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8004336:	23b8      	movs	r3, #184	; 0xb8
 8004338:	2200      	movs	r2, #0
 800433a:	58e0      	ldr	r0, [r4, r3]
 800433c:	2100      	movs	r1, #0
 800433e:	2300      	movs	r3, #0
 8004340:	f000 ff18 	bl	8005174 <xQueueGenericSend>
		 return error;
 8004344:	e783      	b.n	800424e <StartTaskModbusMaster+0xfe>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004346:	23f6      	movs	r3, #246	; 0xf6
 8004348:	3e01      	subs	r6, #1
 800434a:	b2f6      	uxtb	r6, r6
 800434c:	42b3      	cmp	r3, r6
 800434e:	419b      	sbcs	r3, r3
 8004350:	2206      	movs	r2, #6
 8004352:	4393      	bics	r3, r2
 8004354:	3b02      	subs	r3, #2
 8004356:	e7ed      	b.n	8004334 <StartTaskModbusMaster+0x1e4>
      getRxBuffer(modH);
 8004358:	0020      	movs	r0, r4
 800435a:	f7ff fbd9 	bl	8003b10 <getRxBuffer>
	  if ( modH->u8BufferSize < 6){
 800435e:	2393      	movs	r3, #147	; 0x93
 8004360:	4698      	mov	r8, r3
 8004362:	5ce3      	ldrb	r3, [r4, r3]
 8004364:	2b05      	cmp	r3, #5
 8004366:	d800      	bhi.n	800436a <StartTaskModbusMaster+0x21a>
 8004368:	e099      	b.n	800449e <StartTaskModbusMaster+0x34e>
	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800436a:	23b4      	movs	r3, #180	; 0xb4
 800436c:	2200      	movs	r2, #0
 800436e:	58e0      	ldr	r0, [r4, r3]
 8004370:	2103      	movs	r1, #3
 8004372:	2300      	movs	r3, #0
 8004374:	9600      	str	r6, [sp, #0]
 8004376:	f002 f8d3 	bl	8006520 <xTimerGenericCommand>
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800437a:	4643      	mov	r3, r8
 800437c:	5ce1      	ldrb	r1, [r4, r3]
 800437e:	1862      	adds	r2, r4, r1
 8004380:	7c53      	ldrb	r3, [r2, #17]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004382:	7c90      	ldrb	r0, [r2, #18]
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8004384:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004386:	4318      	orrs	r0, r3
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8004388:	3902      	subs	r1, #2
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800438a:	b203      	sxth	r3, r0
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800438c:	b2c9      	uxtb	r1, r1
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800438e:	469c      	mov	ip, r3
    for (unsigned char i = 0; i < u8length; i++)
 8004390:	2900      	cmp	r1, #0
 8004392:	d100      	bne.n	8004396 <StartTaskModbusMaster+0x246>
 8004394:	e0ec      	b.n	8004570 <StartTaskModbusMaster+0x420>
            flag = temp & 0x0001;
 8004396:	2201      	movs	r2, #1
                temp ^= 0xA001;
 8004398:	46a1      	mov	r9, r4
            flag = temp & 0x0001;
 800439a:	4690      	mov	r8, r2
                temp ^= 0xA001;
 800439c:	000c      	movs	r4, r1
    temp = 0xFFFF;
 800439e:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <StartTaskModbusMaster+0x3a8>)
                temp ^= 0xA001;
 80043a0:	4856      	ldr	r0, [pc, #344]	; (80044fc <StartTaskModbusMaster+0x3ac>)
        temp = temp ^ Buffer[i];
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	5d92      	ldrb	r2, [r2, r6]
 80043a6:	4053      	eors	r3, r2
 80043a8:	2208      	movs	r2, #8
            flag = temp & 0x0001;
 80043aa:	4641      	mov	r1, r8
 80043ac:	4019      	ands	r1, r3
            temp >>=1;
 80043ae:	085b      	lsrs	r3, r3, #1
            if (flag)
 80043b0:	2900      	cmp	r1, #0
 80043b2:	d000      	beq.n	80043b6 <StartTaskModbusMaster+0x266>
                temp ^= 0xA001;
 80043b4:	4043      	eors	r3, r0
        for (unsigned char j = 1; j <= 8; j++)
 80043b6:	3a01      	subs	r2, #1
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d1f5      	bne.n	80043aa <StartTaskModbusMaster+0x25a>
    for (unsigned char i = 0; i < u8length; i++)
 80043be:	3601      	adds	r6, #1
 80043c0:	b2f2      	uxtb	r2, r6
 80043c2:	4294      	cmp	r4, r2
 80043c4:	d8ed      	bhi.n	80043a2 <StartTaskModbusMaster+0x252>
 80043c6:	464c      	mov	r4, r9
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b21b      	sxth	r3, r3
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80043d0:	4563      	cmp	r3, ip
 80043d2:	d175      	bne.n	80044c0 <StartTaskModbusMaster+0x370>
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80043d4:	2314      	movs	r3, #20
 80043d6:	56e3      	ldrsb	r3, [r4, r3]
 80043d8:	7d21      	ldrb	r1, [r4, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da00      	bge.n	80043e0 <StartTaskModbusMaster+0x290>
 80043de:	e0ca      	b.n	8004576 <StartTaskModbusMaster+0x426>
 80043e0:	4b47      	ldr	r3, [pc, #284]	; (8004500 <StartTaskModbusMaster+0x3b0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	0018      	movs	r0, r3
 80043e6:	3008      	adds	r0, #8
 80043e8:	e000      	b.n	80043ec <StartTaskModbusMaster+0x29c>
 80043ea:	781a      	ldrb	r2, [r3, #0]
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d013      	beq.n	8004418 <StartTaskModbusMaster+0x2c8>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80043f0:	3301      	adds	r3, #1
 80043f2:	4298      	cmp	r0, r3
 80043f4:	d1f9      	bne.n	80043ea <StartTaskModbusMaster+0x29a>
    	modH->u16errCnt ++;
 80043f6:	22a0      	movs	r2, #160	; 0xa0
 80043f8:	5aa3      	ldrh	r3, [r4, r2]
        return EXC_FUNC_CODE;
 80043fa:	2101      	movs	r1, #1
    	modH->u16errCnt ++;
 80043fc:	3301      	adds	r3, #1
 80043fe:	52a3      	strh	r3, [r4, r2]
        return EXC_FUNC_CODE;
 8004400:	2301      	movs	r3, #1
		 modH->i8state = COM_IDLE;
 8004402:	22a7      	movs	r2, #167	; 0xa7
 8004404:	2000      	movs	r0, #0
 8004406:	54a0      	strb	r0, [r4, r2]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004408:	9803      	ldr	r0, [sp, #12]
         modH->i8lastError = u8exception;
 800440a:	74a3      	strb	r3, [r4, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800440c:	3aa4      	subs	r2, #164	; 0xa4
 800440e:	2300      	movs	r3, #0
 8004410:	68c0      	ldr	r0, [r0, #12]
 8004412:	f001 fef3 	bl	80061fc <xTaskGenericNotify>
	     continue;
 8004416:	e6ab      	b.n	8004170 <StartTaskModbusMaster+0x20>
	  modH->i8lastError = u8exception;
 8004418:	2300      	movs	r3, #0
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800441a:	2101      	movs	r1, #1
	  modH->i8lastError = u8exception;
 800441c:	74a3      	strb	r3, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800441e:	33b8      	adds	r3, #184	; 0xb8
 8004420:	58e0      	ldr	r0, [r4, r3]
 8004422:	4249      	negs	r1, r1
 8004424:	f001 f830 	bl	8005488 <xQueueSemaphoreTake>
	  switch( modH->u8Buffer[ FUNC ] )
 8004428:	7d23      	ldrb	r3, [r4, #20]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d813      	bhi.n	8004456 <StartTaskModbusMaster+0x306>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d151      	bne.n	80044d6 <StartTaskModbusMaster+0x386>
	  modH->i8state = COM_IDLE;
 8004432:	2200      	movs	r2, #0
 8004434:	23a7      	movs	r3, #167	; 0xa7
 8004436:	54e2      	strb	r2, [r4, r3]
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8004438:	3311      	adds	r3, #17
 800443a:	58e0      	ldr	r0, [r4, r3]
 800443c:	2100      	movs	r1, #0
 800443e:	2300      	movs	r3, #0
 8004440:	f000 fe98 	bl	8005174 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004444:	2112      	movs	r1, #18
 8004446:	9803      	ldr	r0, [sp, #12]
 8004448:	2300      	movs	r3, #0
 800444a:	2203      	movs	r2, #3
 800444c:	5661      	ldrsb	r1, [r4, r1]
 800444e:	68c0      	ldr	r0, [r0, #12]
 8004450:	f001 fed4 	bl	80061fc <xTaskGenericNotify>
	  continue;
 8004454:	e68c      	b.n	8004170 <StartTaskModbusMaster+0x20>
	  switch( modH->u8Buffer[ FUNC ] )
 8004456:	3b03      	subs	r3, #3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d8ea      	bhi.n	8004432 <StartTaskModbusMaster+0x2e2>
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800445c:	7d63      	ldrb	r3, [r4, #21]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	d0e7      	beq.n	8004432 <StartTaskModbusMaster+0x2e2>
 8004462:	2398      	movs	r3, #152	; 0x98
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8004464:	2003      	movs	r0, #3
 8004466:	58e1      	ldr	r1, [r4, r3]
	W.u8[0] = L;
 8004468:	3367      	adds	r3, #103	; 0x67
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800446a:	2200      	movs	r2, #0
	W.u8[0] = L;
 800446c:	469c      	mov	ip, r3
	W.u8[1] = H;
 800446e:	4e25      	ldr	r6, [pc, #148]	; (8004504 <StartTaskModbusMaster+0x3b4>)
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8004470:	1a40      	subs	r0, r0, r1
 8004472:	1843      	adds	r3, r0, r1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	7cdd      	ldrb	r5, [r3, #19]
	W.u8[0] = L;
 800447a:	7d1b      	ldrb	r3, [r3, #20]
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800447c:	46a8      	mov	r8, r5
	W.u8[0] = L;
 800447e:	4665      	mov	r5, ip
 8004480:	43af      	bics	r7, r5
 8004482:	431f      	orrs	r7, r3
	W.u8[1] = H;
 8004484:	4643      	mov	r3, r8
 8004486:	4037      	ands	r7, r6
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	431f      	orrs	r7, r3
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800448c:	800f      	strh	r7, [r1, #0]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800448e:	7d63      	ldrb	r3, [r4, #21]
 8004490:	3201      	adds	r2, #1
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	3102      	adds	r1, #2
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	429a      	cmp	r2, r3
 800449a:	d3ea      	bcc.n	8004472 <StartTaskModbusMaster+0x322>
 800449c:	e7c9      	b.n	8004432 <StartTaskModbusMaster+0x2e2>
		  modH->i8state = COM_IDLE;
 800449e:	23a7      	movs	r3, #167	; 0xa7
		  modH->u16errCnt++;
 80044a0:	22a0      	movs	r2, #160	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80044a2:	2106      	movs	r1, #6
		  modH->i8state = COM_IDLE;
 80044a4:	54e6      	strb	r6, [r4, r3]
		  modH->i8lastError = ERR_BAD_SIZE;
 80044a6:	3353      	adds	r3, #83	; 0x53
 80044a8:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 80044aa:	5aa3      	ldrh	r3, [r4, r2]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80044ac:	9803      	ldr	r0, [sp, #12]
		  modH->u16errCnt++;
 80044ae:	3301      	adds	r3, #1
 80044b0:	52a3      	strh	r3, [r4, r2]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80044b2:	4249      	negs	r1, r1
 80044b4:	2300      	movs	r3, #0
 80044b6:	3a9d      	subs	r2, #157	; 0x9d
 80044b8:	68c0      	ldr	r0, [r0, #12]
 80044ba:	f001 fe9f 	bl	80061fc <xTaskGenericNotify>
		  continue;
 80044be:	e657      	b.n	8004170 <StartTaskModbusMaster+0x20>
    	modH->u16errCnt ++;
 80044c0:	22a0      	movs	r2, #160	; 0xa0
 80044c2:	5aa3      	ldrh	r3, [r4, r2]
 80044c4:	3301      	adds	r3, #1
 80044c6:	52a3      	strh	r3, [r4, r2]
        return ERR_BAD_CRC;
 80044c8:	2304      	movs	r3, #4
 80044ca:	425b      	negs	r3, r3
 80044cc:	0019      	movs	r1, r3
 80044ce:	e798      	b.n	8004402 <StartTaskModbusMaster+0x2b2>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80044d0:	2309      	movs	r3, #9
 80044d2:	425b      	negs	r3, r3
 80044d4:	e72e      	b.n	8004334 <StartTaskModbusMaster+0x1e4>
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80044d6:	7d62      	ldrb	r2, [r4, #21]
 80044d8:	2300      	movs	r3, #0
 80044da:	2a00      	cmp	r2, #0
 80044dc:	d0a9      	beq.n	8004432 <StartTaskModbusMaster+0x2e2>
        if(i%2)
 80044de:	2201      	movs	r2, #1
 80044e0:	4690      	mov	r8, r2
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80044e2:	3297      	adds	r2, #151	; 0x97
 80044e4:	4694      	mov	ip, r2
	W.u8[0] = L;
 80044e6:	26ff      	movs	r6, #255	; 0xff
	W.u8[1] = H;
 80044e8:	4806      	ldr	r0, [pc, #24]	; (8004504 <StartTaskModbusMaster+0x3b4>)
 80044ea:	9a05      	ldr	r2, [sp, #20]
 80044ec:	9906      	ldr	r1, [sp, #24]
 80044ee:	9707      	str	r7, [sp, #28]
 80044f0:	e020      	b.n	8004534 <StartTaskModbusMaster+0x3e4>
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	08006b80 	.word	0x08006b80
 80044f8:	0000ffff 	.word	0x0000ffff
 80044fc:	0000a001 	.word	0x0000a001
 8004500:	08006c4c 	.word	0x08006c4c
 8004504:	ffff00ff 	.word	0xffff00ff
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8004508:	18e7      	adds	r7, r4, r3
 800450a:	7dbd      	ldrb	r5, [r7, #22]
 800450c:	085f      	lsrs	r7, r3, #1
 800450e:	46aa      	mov	sl, r5
	W.u8[0] = L;
 8004510:	4665      	mov	r5, ip
 8004512:	5965      	ldr	r5, [r4, r5]
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8004514:	007f      	lsls	r7, r7, #1
	W.u8[0] = L;
 8004516:	5ded      	ldrb	r5, [r5, r7]
 8004518:	43b1      	bics	r1, r6
 800451a:	4329      	orrs	r1, r5
	W.u8[1] = H;
 800451c:	4655      	mov	r5, sl
 800451e:	4001      	ands	r1, r0
 8004520:	022d      	lsls	r5, r5, #8
 8004522:	4329      	orrs	r1, r5
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8004524:	4665      	mov	r5, ip
 8004526:	5965      	ldr	r5, [r4, r5]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8004528:	3301      	adds	r3, #1
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800452a:	53e9      	strh	r1, [r5, r7]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800452c:	7d67      	ldrb	r7, [r4, #21]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	429f      	cmp	r7, r3
 8004532:	d919      	bls.n	8004568 <StartTaskModbusMaster+0x418>
        if(i%2)
 8004534:	4645      	mov	r5, r8
 8004536:	421d      	tst	r5, r3
 8004538:	d1e6      	bne.n	8004508 <StartTaskModbusMaster+0x3b8>
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800453a:	4665      	mov	r5, ip
 800453c:	085f      	lsrs	r7, r3, #1
 800453e:	5965      	ldr	r5, [r4, r5]
 8004540:	007f      	lsls	r7, r7, #1
 8004542:	5bed      	ldrh	r5, [r5, r7]
	W.u8[0] = L;
 8004544:	43b2      	bics	r2, r6
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8004546:	0a2d      	lsrs	r5, r5, #8
 8004548:	46a9      	mov	r9, r5
 800454a:	18e5      	adds	r5, r4, r3
	W.u8[0] = L;
 800454c:	7dad      	ldrb	r5, [r5, #22]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800454e:	3301      	adds	r3, #1
	W.u8[0] = L;
 8004550:	432a      	orrs	r2, r5
	W.u8[1] = H;
 8004552:	464d      	mov	r5, r9
 8004554:	4002      	ands	r2, r0
 8004556:	022d      	lsls	r5, r5, #8
 8004558:	432a      	orrs	r2, r5
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800455a:	4665      	mov	r5, ip
 800455c:	5965      	ldr	r5, [r4, r5]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800455e:	b2db      	uxtb	r3, r3
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8004560:	53ea      	strh	r2, [r5, r7]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8004562:	7d67      	ldrb	r7, [r4, #21]
 8004564:	429f      	cmp	r7, r3
 8004566:	d8e5      	bhi.n	8004534 <StartTaskModbusMaster+0x3e4>
 8004568:	9f07      	ldr	r7, [sp, #28]
 800456a:	9205      	str	r2, [sp, #20]
 800456c:	9106      	str	r1, [sp, #24]
 800456e:	e760      	b.n	8004432 <StartTaskModbusMaster+0x2e2>
    for (unsigned char i = 0; i < u8length; i++)
 8004570:	2301      	movs	r3, #1
 8004572:	425b      	negs	r3, r3
 8004574:	e72c      	b.n	80043d0 <StartTaskModbusMaster+0x280>
    	modH->u16errCnt ++;
 8004576:	22a0      	movs	r2, #160	; 0xa0
 8004578:	5aa3      	ldrh	r3, [r4, r2]
 800457a:	3301      	adds	r3, #1
 800457c:	52a3      	strh	r3, [r4, r2]
        return ERR_EXCEPTION;
 800457e:	2305      	movs	r3, #5
 8004580:	425b      	negs	r3, r3
 8004582:	0019      	movs	r1, r3
 8004584:	e73d      	b.n	8004402 <StartTaskModbusMaster+0x2b2>
 8004586:	46c0      	nop			; (mov r8, r8)

08004588 <RingAdd>:
{
 8004588:	b510      	push	{r4, lr}
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800458a:	2481      	movs	r4, #129	; 0x81
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800458c:	227f      	movs	r2, #127	; 0x7f
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800458e:	5d03      	ldrb	r3, [r0, r4]
 8004590:	54c1      	strb	r1, [r0, r3]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8004592:	2182      	movs	r1, #130	; 0x82
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8004594:	3301      	adds	r3, #1
 8004596:	4013      	ands	r3, r2
 8004598:	5503      	strb	r3, [r0, r4]
	if (xRingBuffer->u8available == MAX_BUFFER)
 800459a:	5c43      	ldrb	r3, [r0, r1]
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d005      	beq.n	80045ac <RingAdd+0x24>
		xRingBuffer->overflow = false;
 80045a0:	2283      	movs	r2, #131	; 0x83
 80045a2:	2400      	movs	r4, #0
		xRingBuffer->u8available++;
 80045a4:	3301      	adds	r3, #1
		xRingBuffer->overflow = false;
 80045a6:	5484      	strb	r4, [r0, r2]
		xRingBuffer->u8available++;
 80045a8:	5443      	strb	r3, [r0, r1]
}
 80045aa:	bd10      	pop	{r4, pc}
		xRingBuffer->overflow = true;
 80045ac:	3101      	adds	r1, #1
 80045ae:	3c80      	subs	r4, #128	; 0x80
 80045b0:	5444      	strb	r4, [r0, r1]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80045b2:	5cc1      	ldrb	r1, [r0, r3]
 80045b4:	3101      	adds	r1, #1
 80045b6:	400a      	ands	r2, r1
 80045b8:	54c2      	strb	r2, [r0, r3]
 80045ba:	e7f6      	b.n	80045aa <RingAdd+0x22>

080045bc <ModbusInit>:
{
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (numberHandlers < MAX_M_HANDLERS)
 80045be:	4d2f      	ldr	r5, [pc, #188]	; (800467c <ModbusInit+0xc0>)
{
 80045c0:	0004      	movs	r4, r0
  if (numberHandlers < MAX_M_HANDLERS)
 80045c2:	782b      	ldrb	r3, [r5, #0]
{
 80045c4:	b083      	sub	sp, #12
  if (numberHandlers < MAX_M_HANDLERS)
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d900      	bls.n	80045cc <ModbusInit+0x10>
	  while(1); //error no more Modbus handlers supported
 80045ca:	e7fe      	b.n	80045ca <ModbusInit+0xe>
xRingBuffer->u8start = 0;
 80045cc:	0002      	movs	r2, r0
 80045ce:	2300      	movs	r3, #0
 80045d0:	323d      	adds	r2, #61	; 0x3d
 80045d2:	32ff      	adds	r2, #255	; 0xff
 80045d4:	7013      	strb	r3, [r2, #0]
xRingBuffer->u8end = 0;
 80045d6:	7053      	strb	r3, [r2, #1]
xRingBuffer->u8available = 0;
 80045d8:	7093      	strb	r3, [r2, #2]
xRingBuffer->overflow = false;
 80045da:	70d3      	strb	r3, [r2, #3]
	  if(modH->uModbusType == MB_SLAVE)
 80045dc:	7803      	ldrb	r3, [r0, #0]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d002      	beq.n	80045e8 <ModbusInit+0x2c>
	  else if (modH->uModbusType == MB_MASTER)
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d028      	beq.n	8004638 <ModbusInit+0x7c>
		  while(1); //Error Modbus type not supported choose a valid Type
 80045e6:	e7fe      	b.n	80045e6 <ModbusInit+0x2a>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80045e8:	0001      	movs	r1, r0
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <ModbusInit+0xc4>)
 80045ec:	4825      	ldr	r0, [pc, #148]	; (8004684 <ModbusInit+0xc8>)
 80045ee:	f000 f94d 	bl	800488c <osThreadNew>
 80045f2:	23ac      	movs	r3, #172	; 0xac
 80045f4:	50e0      	str	r0, [r4, r3]
	  if  (modH->myTaskModbusAHandle == NULL)
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d01c      	beq.n	8004634 <ModbusInit+0x78>
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80045fa:	26b0      	movs	r6, #176	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <ModbusInit+0xcc>)
 80045fe:	2200      	movs	r2, #0
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2105      	movs	r1, #5
 8004604:	59a3      	ldr	r3, [r4, r6]
 8004606:	4821      	ldr	r0, [pc, #132]	; (800468c <ModbusInit+0xd0>)
 8004608:	f001 ff5e 	bl	80064c8 <xTimerCreate>
 800460c:	51a0      	str	r0, [r4, r6]
	  if (modH->xTimerT35 == NULL)
 800460e:	2800      	cmp	r0, #0
 8004610:	d011      	beq.n	8004636 <ModbusInit+0x7a>
	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8004612:	2101      	movs	r1, #1
 8004614:	2001      	movs	r0, #1
 8004616:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <ModbusInit+0xd4>)
 8004618:	f000 f99a 	bl	8004950 <osSemaphoreNew>
 800461c:	23b8      	movs	r3, #184	; 0xb8
 800461e:	50e0      	str	r0, [r4, r3]
	  if(modH->ModBusSphrHandle == NULL)
 8004620:	2800      	cmp	r0, #0
 8004622:	d029      	beq.n	8004678 <ModbusInit+0xbc>
	  mHandlers[numberHandlers] = modH;
 8004624:	782b      	ldrb	r3, [r5, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <ModbusInit+0xd8>)
 8004628:	0099      	lsls	r1, r3, #2
	  numberHandlers++;
 800462a:	3301      	adds	r3, #1
	  mHandlers[numberHandlers] = modH;
 800462c:	508c      	str	r4, [r1, r2]
	  numberHandlers++;
 800462e:	702b      	strb	r3, [r5, #0]
}
 8004630:	b003      	add	sp, #12
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  while(1); //Error creating Modbus task, check heap and stack size
 8004634:	e7fe      	b.n	8004634 <ModbusInit+0x78>
		  while(1); //Error creating the timer, check heap and stack size
 8004636:	e7fe      	b.n	8004636 <ModbusInit+0x7a>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8004638:	0001      	movs	r1, r0
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <ModbusInit+0xdc>)
 800463c:	4817      	ldr	r0, [pc, #92]	; (800469c <ModbusInit+0xe0>)
 800463e:	f000 f925 	bl	800488c <osThreadNew>
 8004642:	26ac      	movs	r6, #172	; 0xac
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8004644:	23a2      	movs	r3, #162	; 0xa2
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8004646:	27b4      	movs	r7, #180	; 0xb4
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8004648:	51a0      	str	r0, [r4, r6]
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800464a:	5ae1      	ldrh	r1, [r4, r3]
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <ModbusInit+0xe4>)
 800464e:	2200      	movs	r2, #0
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4814      	ldr	r0, [pc, #80]	; (80046a4 <ModbusInit+0xe8>)
 8004654:	59e3      	ldr	r3, [r4, r7]
 8004656:	f001 ff37 	bl	80064c8 <xTimerCreate>
 800465a:	51e0      	str	r0, [r4, r7]
		  if(modH->xTimerTimeout == NULL)
 800465c:	2800      	cmp	r0, #0
 800465e:	d00a      	beq.n	8004676 <ModbusInit+0xba>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8004660:	2110      	movs	r1, #16
 8004662:	2002      	movs	r0, #2
 8004664:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <ModbusInit+0xec>)
 8004666:	f000 f9c9 	bl	80049fc <osMessageQueueNew>
 800466a:	23a8      	movs	r3, #168	; 0xa8
 800466c:	50e0      	str	r0, [r4, r3]
		  if(modH->QueueTelegramHandle == NULL)
 800466e:	2800      	cmp	r0, #0
 8004670:	d003      	beq.n	800467a <ModbusInit+0xbe>
 8004672:	59a0      	ldr	r0, [r4, r6]
 8004674:	e7bf      	b.n	80045f6 <ModbusInit+0x3a>
			  while(1); //error creating timer, check heap and stack size
 8004676:	e7fe      	b.n	8004676 <ModbusInit+0xba>
		  while(1); //Error creating the semaphore, check heap and stack size
 8004678:	e7fe      	b.n	8004678 <ModbusInit+0xbc>
			  while(1); //error creating queue for telegrams, check heap and stack size
 800467a:	e7fe      	b.n	800467a <ModbusInit+0xbe>
 800467c:	20000090 	.word	0x20000090
 8004680:	08006c54 	.word	0x08006c54
 8004684:	08003b91 	.word	0x08003b91
 8004688:	080038f5 	.word	0x080038f5
 800468c:	08006bd4 	.word	0x08006bd4
 8004690:	08006c24 	.word	0x08006c24
 8004694:	2000105c 	.word	0x2000105c
 8004698:	08006c78 	.word	0x08006c78
 800469c:	08004151 	.word	0x08004151
 80046a0:	0800397d 	.word	0x0800397d
 80046a4:	08006bc4 	.word	0x08006bc4
 80046a8:	08006c34 	.word	0x08006c34

080046ac <ModbusStart>:
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80046ac:	23a0      	movs	r3, #160	; 0xa0
{
 80046ae:	b510      	push	{r4, lr}
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	5cc3      	ldrb	r3, [r0, r3]
{
 80046b4:	0004      	movs	r4, r0
	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d005      	beq.n	80046c6 <ModbusStart+0x1a>
 80046ba:	1e9a      	subs	r2, r3, #2
 80046bc:	2a01      	cmp	r2, #1
 80046be:	d91f      	bls.n	8004700 <ModbusStart+0x54>
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d000      	beq.n	80046c6 <ModbusStart+0x1a>
		while(1); //ERROR select the type of hardware
 80046c4:	e7fe      	b.n	80046c4 <ModbusStart+0x18>
	      if (modH->EN_Port != NULL )
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d003      	beq.n	80046d4 <ModbusStart+0x28>
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80046cc:	2200      	movs	r2, #0
 80046ce:	8a21      	ldrh	r1, [r4, #16]
 80046d0:	f7fd f8fa 	bl	80018c8 <HAL_GPIO_WritePin>
          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 80046d4:	7823      	ldrb	r3, [r4, #0]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d022      	beq.n	8004720 <ModbusStart+0x74>
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 80046da:	6860      	ldr	r0, [r4, #4]
 80046dc:	f7fe fd2c 	bl	8003138 <HAL_UART_GetState>
 80046e0:	2820      	cmp	r0, #32
 80046e2:	d1fa      	bne.n	80046da <ModbusStart+0x2e>
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80046e4:	0021      	movs	r1, r4
 80046e6:	2201      	movs	r2, #1
 80046e8:	6860      	ldr	r0, [r4, #4]
 80046ea:	31a6      	adds	r1, #166	; 0xa6
 80046ec:	f7ff f82c 	bl	8003748 <HAL_UART_Receive_IT>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d10f      	bne.n	8004714 <ModbusStart+0x68>
          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80046f4:	7a23      	ldrb	r3, [r4, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00e      	beq.n	8004718 <ModbusStart+0x6c>
 80046fa:	7823      	ldrb	r3, [r4, #0]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00a      	beq.n	8004716 <ModbusStart+0x6a>
    modH->u8lastRec = modH->u8BufferSize = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	2293      	movs	r2, #147	; 0x93
 8004704:	54a3      	strb	r3, [r4, r2]
 8004706:	3201      	adds	r2, #1
 8004708:	54a3      	strb	r3, [r4, r2]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800470a:	3208      	adds	r2, #8
 800470c:	50a3      	str	r3, [r4, r2]
 800470e:	3204      	adds	r2, #4
 8004710:	52a3      	strh	r3, [r4, r2]
}
 8004712:	bd10      	pop	{r4, pc}
                while(1)
 8004714:	e7fe      	b.n	8004714 <ModbusStart+0x68>
        	  while(1)
 8004716:	e7fe      	b.n	8004716 <ModbusStart+0x6a>
          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8004718:	7823      	ldrb	r3, [r4, #0]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d1f0      	bne.n	8004700 <ModbusStart+0x54>
             	  while(1)
 800471e:	e7fe      	b.n	800471e <ModbusStart+0x72>
          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8004720:	3395      	adds	r3, #149	; 0x95
 8004722:	58e3      	ldr	r3, [r4, r3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1d8      	bne.n	80046da <ModbusStart+0x2e>
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8004728:	e7fe      	b.n	8004728 <ModbusStart+0x7c>
 800472a:	46c0      	nop			; (mov r8, r8)

0800472c <HAL_UART_TxCpltCallback>:
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800472c:	2300      	movs	r3, #0
{
 800472e:	b510      	push	{r4, lr}
 8004730:	b084      	sub	sp, #16
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004732:	9303      	str	r3, [sp, #12]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_UART_TxCpltCallback+0x4c>)
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	2a00      	cmp	r2, #0
 800473a:	d00a      	beq.n	8004752 <HAL_UART_TxCpltCallback+0x26>
	{
	   	if (mHandlers[i]->port == huart )
 800473c:	490f      	ldr	r1, [pc, #60]	; (800477c <HAL_UART_TxCpltCallback+0x50>)
 800473e:	680b      	ldr	r3, [r1, #0]
 8004740:	685c      	ldr	r4, [r3, #4]
 8004742:	4284      	cmp	r4, r0
 8004744:	d007      	beq.n	8004756 <HAL_UART_TxCpltCallback+0x2a>
	for (i = 0; i < numberHandlers; i++ )
 8004746:	2a01      	cmp	r2, #1
 8004748:	d003      	beq.n	8004752 <HAL_UART_TxCpltCallback+0x26>
	   	if (mHandlers[i]->port == huart )
 800474a:	684b      	ldr	r3, [r1, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4282      	cmp	r2, r0
 8004750:	d001      	beq.n	8004756 <HAL_UART_TxCpltCallback+0x2a>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8004752:	b004      	add	sp, #16
 8004754:	bd10      	pop	{r4, pc}
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8004756:	22ac      	movs	r2, #172	; 0xac
 8004758:	5898      	ldr	r0, [r3, r2]
 800475a:	ab03      	add	r3, sp, #12
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	2100      	movs	r1, #0
 8004764:	f001 fdaa 	bl	80062bc <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f1      	beq.n	8004752 <HAL_UART_TxCpltCallback+0x26>
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_UART_TxCpltCallback+0x54>)
 8004772:	0552      	lsls	r2, r2, #21
 8004774:	601a      	str	r2, [r3, #0]
}
 8004776:	e7ec      	b.n	8004752 <HAL_UART_TxCpltCallback+0x26>
 8004778:	20000090 	.word	0x20000090
 800477c:	2000105c 	.word	0x2000105c
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <HAL_UART_RxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004784:	2300      	movs	r3, #0
{
 8004786:	b530      	push	{r4, r5, lr}
 8004788:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800478a:	9303      	str	r3, [sp, #12]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_UART_RxCpltCallback+0x80>)
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	2a00      	cmp	r2, #0
 8004792:	d00b      	beq.n	80047ac <HAL_UART_RxCpltCallback+0x28>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8004794:	4c1c      	ldr	r4, [pc, #112]	; (8004808 <HAL_UART_RxCpltCallback+0x84>)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	4288      	cmp	r0, r1
 800479c:	d008      	beq.n	80047b0 <HAL_UART_RxCpltCallback+0x2c>
    for (i = 0; i < numberHandlers; i++ )
 800479e:	2a01      	cmp	r2, #1
 80047a0:	d004      	beq.n	80047ac <HAL_UART_RxCpltCallback+0x28>
    	if (mHandlers[i]->port == UartHandle  )
 80047a2:	6863      	ldr	r3, [r4, #4]
    for (i = 0; i < numberHandlers; i++ )
 80047a4:	2501      	movs	r5, #1
    	if (mHandlers[i]->port == UartHandle  )
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4282      	cmp	r2, r0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_RxCpltCallback+0x2e>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80047ac:	b005      	add	sp, #20
 80047ae:	bd30      	pop	{r4, r5, pc}
    for (i = 0; i < numberHandlers; i++ )
 80047b0:	2500      	movs	r5, #0
    		if(mHandlers[i]->xTypeHW == USART_HW)
 80047b2:	22a0      	movs	r2, #160	; 0xa0
 80047b4:	0052      	lsls	r2, r2, #1
 80047b6:	5c9a      	ldrb	r2, [r3, r2]
 80047b8:	2a01      	cmp	r2, #1
 80047ba:	d1f7      	bne.n	80047ac <HAL_UART_RxCpltCallback+0x28>
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80047bc:	32a5      	adds	r2, #165	; 0xa5
 80047be:	5c99      	ldrb	r1, [r3, r2]
 80047c0:	33bc      	adds	r3, #188	; 0xbc
 80047c2:	0018      	movs	r0, r3
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80047c4:	00ad      	lsls	r5, r5, #2
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80047c6:	f7ff fedf 	bl	8004588 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80047ca:	5963      	ldr	r3, [r4, r5]
 80047cc:	2201      	movs	r2, #1
 80047ce:	0019      	movs	r1, r3
 80047d0:	6858      	ldr	r0, [r3, #4]
 80047d2:	31a6      	adds	r1, #166	; 0xa6
 80047d4:	f7fe ffb8 	bl	8003748 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80047d8:	23b0      	movs	r3, #176	; 0xb0
 80047da:	5962      	ldr	r2, [r4, r5]
 80047dc:	58d4      	ldr	r4, [r2, r3]
 80047de:	f001 fb2f 	bl	8005e40 <xTaskGetTickCountFromISR>
 80047e2:	2300      	movs	r3, #0
 80047e4:	0002      	movs	r2, r0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2107      	movs	r1, #7
 80047ea:	ab03      	add	r3, sp, #12
 80047ec:	0020      	movs	r0, r4
 80047ee:	f001 fe97 	bl	8006520 <xTimerGenericCommand>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80047f2:	9b03      	ldr	r3, [sp, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0d9      	beq.n	80047ac <HAL_UART_RxCpltCallback+0x28>
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <HAL_UART_RxCpltCallback+0x88>)
 80047fc:	0552      	lsls	r2, r2, #21
 80047fe:	601a      	str	r2, [r3, #0]
}
 8004800:	e7d4      	b.n	80047ac <HAL_UART_RxCpltCallback+0x28>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20000090 	.word	0x20000090
 8004808:	2000105c 	.word	0x2000105c
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 8004812:	b510      	push	{r4, lr}
  SysTick->CTRL;
 8004814:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004816:	f001 fbed 	bl	8005ff4 <xTaskGetSchedulerState>
 800481a:	2801      	cmp	r0, #1
 800481c:	d001      	beq.n	8004822 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800481e:	f000 fb01 	bl	8004e24 <xPortSysTickHandler>
  }
}
 8004822:	bd10      	pop	{r4, pc}
 8004824:	e000e010 	.word	0xe000e010

08004828 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004828:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <osKernelInitialize+0x24>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	2800      	cmp	r0, #0
 8004836:	d105      	bne.n	8004844 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800483c:	4770      	bx	lr
    stat = osErrorISR;
 800483e:	2006      	movs	r0, #6
 8004840:	4240      	negs	r0, r0
 8004842:	e7fb      	b.n	800483c <osKernelInitialize+0x14>
      stat = osError;
 8004844:	2001      	movs	r0, #1
 8004846:	4240      	negs	r0, r0
  return (stat);
 8004848:	e7f8      	b.n	800483c <osKernelInitialize+0x14>
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	20000350 	.word	0x20000350

08004850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004850:	b510      	push	{r4, lr}
 8004852:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004856:	2b00      	cmp	r3, #0
 8004858:	d111      	bne.n	800487e <osKernelStart+0x2e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <osKernelStart+0x34>)
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10a      	bne.n	8004878 <osKernelStart+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004862:	4909      	ldr	r1, [pc, #36]	; (8004888 <osKernelStart+0x38>)
 8004864:	69cb      	ldr	r3, [r1, #28]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800486c:	2302      	movs	r3, #2
 800486e:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004870:	f001 fa74 	bl	8005d5c <vTaskStartScheduler>
      stat = osOK;
 8004874:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8004876:	bd10      	pop	{r4, pc}
      stat = osError;
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
  return (stat);
 800487c:	e7fb      	b.n	8004876 <osKernelStart+0x26>
    stat = osErrorISR;
 800487e:	2006      	movs	r0, #6
 8004880:	4240      	negs	r0, r0
 8004882:	e7f8      	b.n	8004876 <osKernelStart+0x26>
 8004884:	20000350 	.word	0x20000350
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004890:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004892:	b087      	sub	sp, #28
 8004894:	0005      	movs	r5, r0
  hTask = NULL;
 8004896:	9205      	str	r2, [sp, #20]
 8004898:	f3ef 8205 	mrs	r2, IPSR
  return(result);
 800489c:	2000      	movs	r0, #0

  if (!IS_IRQ() && (func != NULL)) {
 800489e:	2a00      	cmp	r2, #0
 80048a0:	d124      	bne.n	80048ec <osThreadNew+0x60>
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	d022      	beq.n	80048ec <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d028      	beq.n	80048fc <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80048aa:	69a3      	ldr	r3, [r4, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11f      	bne.n	80048f0 <osThreadNew+0x64>
 80048b0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	07d2      	lsls	r2, r2, #31
 80048b6:	d41f      	bmi.n	80048f8 <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80048b8:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 80048ba:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 80048bc:	2e00      	cmp	r6, #0
 80048be:	d000      	beq.n	80048c2 <osThreadNew+0x36>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048c0:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	4684      	mov	ip, r0
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048c6:	68a0      	ldr	r0, [r4, #8]
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d027      	beq.n	800491c <osThreadNew+0x90>
 80048cc:	68e7      	ldr	r7, [r4, #12]
 80048ce:	2fbb      	cmp	r7, #187	; 0xbb
 80048d0:	d912      	bls.n	80048f8 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048d2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	d00f      	beq.n	80048f8 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048d8:	2e00      	cmp	r6, #0
 80048da:	d00d      	beq.n	80048f8 <osThreadNew+0x6c>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048dc:	9002      	str	r0, [sp, #8]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	0028      	movs	r0, r5
 80048e2:	000b      	movs	r3, r1
 80048e4:	9401      	str	r4, [sp, #4]
 80048e6:	4661      	mov	r1, ip
 80048e8:	f001 f9c0 	bl	8005c6c <xTaskCreateStatic>
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80048ec:	b007      	add	sp, #28
 80048ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048f0:	1e5a      	subs	r2, r3, #1
 80048f2:	2a37      	cmp	r2, #55	; 0x37
 80048f4:	d9dd      	bls.n	80048b2 <osThreadNew+0x26>
 80048f6:	e7f9      	b.n	80048ec <osThreadNew+0x60>
        return (NULL);
 80048f8:	2000      	movs	r0, #0
 80048fa:	e7f7      	b.n	80048ec <osThreadNew+0x60>
 80048fc:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 80048fe:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004900:	a805      	add	r0, sp, #20
 8004902:	9001      	str	r0, [sp, #4]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	0028      	movs	r0, r5
 8004908:	000b      	movs	r3, r1
 800490a:	0021      	movs	r1, r4
 800490c:	f001 f9d4 	bl	8005cb8 <xTaskCreate>
 8004910:	0003      	movs	r3, r0
 8004912:	2000      	movs	r0, #0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d1e9      	bne.n	80048ec <osThreadNew+0x60>
 8004918:	9805      	ldr	r0, [sp, #20]
 800491a:	e7e7      	b.n	80048ec <osThreadNew+0x60>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800491c:	68e6      	ldr	r6, [r4, #12]
 800491e:	2e00      	cmp	r6, #0
 8004920:	d1e4      	bne.n	80048ec <osThreadNew+0x60>
 8004922:	6924      	ldr	r4, [r4, #16]
 8004924:	2c00      	cmp	r4, #0
 8004926:	d1e1      	bne.n	80048ec <osThreadNew+0x60>
 8004928:	4664      	mov	r4, ip
 800492a:	b292      	uxth	r2, r2
 800492c:	e7e8      	b.n	8004900 <osThreadNew+0x74>
 800492e:	46c0      	nop			; (mov r8, r8)

08004930 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004930:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800493a:	2400      	movs	r4, #0

    if (ticks != 0U) {
 800493c:	2800      	cmp	r0, #0
 800493e:	d101      	bne.n	8004944 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004940:	0020      	movs	r0, r4
 8004942:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8004944:	f001 f9ec 	bl	8005d20 <vTaskDelay>
 8004948:	e7fa      	b.n	8004940 <osDelay+0x10>
    stat = osErrorISR;
 800494a:	2406      	movs	r4, #6
 800494c:	4264      	negs	r4, r4
 800494e:	e7f7      	b.n	8004940 <osDelay+0x10>

08004950 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	000e      	movs	r6, r1
 8004954:	0014      	movs	r4, r2
 8004956:	b082      	sub	sp, #8
 8004958:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800495c:	2b00      	cmp	r3, #0
 800495e:	d130      	bne.n	80049c2 <osSemaphoreNew+0x72>
 8004960:	2800      	cmp	r0, #0
 8004962:	d02e      	beq.n	80049c2 <osSemaphoreNew+0x72>
 8004964:	4288      	cmp	r0, r1
 8004966:	d32c      	bcc.n	80049c2 <osSemaphoreNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8004968:	2a00      	cmp	r2, #0
 800496a:	d031      	beq.n	80049d0 <osSemaphoreNew+0x80>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800496c:	6892      	ldr	r2, [r2, #8]
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	2a00      	cmp	r2, #0
 8004972:	d00d      	beq.n	8004990 <osSemaphoreNew+0x40>
 8004974:	2b4f      	cmp	r3, #79	; 0x4f
 8004976:	d924      	bls.n	80049c2 <osSemaphoreNew+0x72>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8004978:	2801      	cmp	r0, #1
 800497a:	d035      	beq.n	80049e8 <osSemaphoreNew+0x98>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800497c:	f000 fbd0 	bl	8005120 <xQueueCreateCountingSemaphoreStatic>
 8004980:	1e05      	subs	r5, r0, #0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004982:	d01e      	beq.n	80049c2 <osSemaphoreNew+0x72>
        if (attr != NULL) {
          name = attr->name;
 8004984:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004986:	0021      	movs	r1, r4
 8004988:	0028      	movs	r0, r5
 800498a:	f000 fe5d 	bl	8005648 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800498e:	e019      	b.n	80049c4 <osSemaphoreNew+0x74>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004990:	2b00      	cmp	r3, #0
 8004992:	d116      	bne.n	80049c2 <osSemaphoreNew+0x72>
      if (max_count == 1U) {
 8004994:	2801      	cmp	r0, #1
 8004996:	d122      	bne.n	80049de <osSemaphoreNew+0x8e>
            hSemaphore = xSemaphoreCreateBinary();
 8004998:	2203      	movs	r2, #3
 800499a:	2100      	movs	r1, #0
 800499c:	2001      	movs	r0, #1
 800499e:	f000 fbb7 	bl	8005110 <xQueueGenericCreate>
 80049a2:	0005      	movs	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	d00c      	beq.n	80049c2 <osSemaphoreNew+0x72>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d00e      	beq.n	80049ca <osSemaphoreNew+0x7a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049ac:	2300      	movs	r3, #0
 80049ae:	2200      	movs	r2, #0
 80049b0:	2100      	movs	r1, #0
 80049b2:	0028      	movs	r0, r5
 80049b4:	f000 fbde 	bl	8005174 <xQueueGenericSend>
 80049b8:	2801      	cmp	r0, #1
 80049ba:	d006      	beq.n	80049ca <osSemaphoreNew+0x7a>
            vSemaphoreDelete (hSemaphore);
 80049bc:	0028      	movs	r0, r5
 80049be:	f000 fe1f 	bl	8005600 <vQueueDelete>
            hSemaphore = NULL;
 80049c2:	2500      	movs	r5, #0
}
 80049c4:	0028      	movs	r0, r5
 80049c6:	b002      	add	sp, #8
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
        if (attr != NULL) {
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	d1da      	bne.n	8004984 <osSemaphoreNew+0x34>
 80049ce:	e7da      	b.n	8004986 <osSemaphoreNew+0x36>
      if (max_count == 1U) {
 80049d0:	2801      	cmp	r0, #1
 80049d2:	d0e1      	beq.n	8004998 <osSemaphoreNew+0x48>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80049d4:	f000 fbbc 	bl	8005150 <xQueueCreateCountingSemaphore>
 80049d8:	1e05      	subs	r5, r0, #0
      if (hSemaphore != NULL) {
 80049da:	d1d4      	bne.n	8004986 <osSemaphoreNew+0x36>
 80049dc:	e7f1      	b.n	80049c2 <osSemaphoreNew+0x72>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80049de:	f000 fbb7 	bl	8005150 <xQueueCreateCountingSemaphore>
 80049e2:	1e05      	subs	r5, r0, #0
      if (hSemaphore != NULL) {
 80049e4:	d1ce      	bne.n	8004984 <osSemaphoreNew+0x34>
 80049e6:	e7ec      	b.n	80049c2 <osSemaphoreNew+0x72>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049e8:	2303      	movs	r3, #3
 80049ea:	2100      	movs	r1, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2001      	movs	r0, #1
 80049f0:	0013      	movs	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	f000 fb52 	bl	800509c <xQueueGenericCreateStatic>
 80049f8:	0005      	movs	r5, r0
 80049fa:	e7d3      	b.n	80049a4 <osSemaphoreNew+0x54>

080049fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	0014      	movs	r4, r2
 8004a00:	b083      	sub	sp, #12
 8004a02:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	d113      	bne.n	8004a32 <osMessageQueueNew+0x36>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d011      	beq.n	8004a32 <osMessageQueueNew+0x36>
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	d00f      	beq.n	8004a32 <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	d025      	beq.n	8004a62 <osMessageQueueNew+0x66>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a16:	6893      	ldr	r3, [r2, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <osMessageQueueNew+0x3e>
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	2a4f      	cmp	r2, #79	; 0x4f
 8004a20:	d907      	bls.n	8004a32 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a22:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	d004      	beq.n	8004a32 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a28:	000e      	movs	r6, r1
 8004a2a:	4346      	muls	r6, r0
 8004a2c:	6967      	ldr	r7, [r4, #20]
 8004a2e:	42b7      	cmp	r7, r6
 8004a30:	d21d      	bcs.n	8004a6e <osMessageQueueNew+0x72>
  hQueue = NULL;
 8004a32:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004a34:	0028      	movs	r0, r5
 8004a36:	b003      	add	sp, #12
 8004a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a3a:	68d3      	ldr	r3, [r2, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f8      	bne.n	8004a32 <osMessageQueueNew+0x36>
 8004a40:	6913      	ldr	r3, [r2, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f5      	bne.n	8004a32 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a46:	6953      	ldr	r3, [r2, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f2      	bne.n	8004a32 <osMessageQueueNew+0x36>
          hQueue = xQueueCreate (msg_count, msg_size);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f000 fb5f 	bl	8005110 <xQueueGenericCreate>
 8004a52:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8004a54:	d0ed      	beq.n	8004a32 <osMessageQueueNew+0x36>
        name = attr->name;
 8004a56:	6824      	ldr	r4, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8004a58:	0021      	movs	r1, r4
 8004a5a:	0028      	movs	r0, r5
 8004a5c:	f000 fdf4 	bl	8005648 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8004a60:	e7e8      	b.n	8004a34 <osMessageQueueNew+0x38>
          hQueue = xQueueCreate (msg_count, msg_size);
 8004a62:	2200      	movs	r2, #0
 8004a64:	f000 fb54 	bl	8005110 <xQueueGenericCreate>
 8004a68:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8004a6a:	d0e2      	beq.n	8004a32 <osMessageQueueNew+0x36>
 8004a6c:	e7f4      	b.n	8004a58 <osMessageQueueNew+0x5c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a6e:	9500      	str	r5, [sp, #0]
 8004a70:	f000 fb14 	bl	800509c <xQueueGenericCreateStatic>
 8004a74:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8004a76:	d0dc      	beq.n	8004a32 <osMessageQueueNew+0x36>
        name = attr->name;
 8004a78:	6824      	ldr	r4, [r4, #0]
 8004a7a:	e7ed      	b.n	8004a58 <osMessageQueueNew+0x5c>

08004a7c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <vApplicationGetIdleTaskMemory+0x10>)
 8004a7e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <vApplicationGetIdleTaskMemory+0x14>)
 8004a82:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	4770      	bx	lr
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	20000294 	.word	0x20000294
 8004a90:	20000094 	.word	0x20000094

08004a94 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <vApplicationGetTimerTaskMemory+0x10>)
 8004a96:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <vApplicationGetTimerTaskMemory+0x14>)
 8004a9a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	4770      	bx	lr
 8004aa4:	20000754 	.word	0x20000754
 8004aa8:	20000354 	.word	0x20000354

08004aac <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004aac:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <prvInsertBlockIntoFreeList+0x48>)
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4283      	cmp	r3, r0
 8004ab6:	d3fb      	bcc.n	8004ab0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ab8:	6851      	ldr	r1, [r2, #4]
 8004aba:	1854      	adds	r4, r2, r1
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d013      	beq.n	8004ae8 <prvInsertBlockIntoFreeList+0x3c>
 8004ac0:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ac2:	1844      	adds	r4, r0, r1
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d004      	beq.n	8004ad2 <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ac8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004aca:	4290      	cmp	r0, r2
 8004acc:	d000      	beq.n	8004ad0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ace:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad0:	bd10      	pop	{r4, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ad2:	4c09      	ldr	r4, [pc, #36]	; (8004af8 <prvInsertBlockIntoFreeList+0x4c>)
 8004ad4:	6824      	ldr	r4, [r4, #0]
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	d0f6      	beq.n	8004ac8 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ada:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004adc:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ade:	46a4      	mov	ip, r4
 8004ae0:	4461      	add	r1, ip
 8004ae2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ae4:	6003      	str	r3, [r0, #0]
 8004ae6:	e7f0      	b.n	8004aca <prvInsertBlockIntoFreeList+0x1e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ae8:	6840      	ldr	r0, [r0, #4]
 8004aea:	1809      	adds	r1, r1, r0
 8004aec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8004aee:	0010      	movs	r0, r2
 8004af0:	e7e7      	b.n	8004ac2 <prvInsertBlockIntoFreeList+0x16>
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	20000a28 	.word	0x20000a28
 8004af8:	20000810 	.word	0x20000810

08004afc <pvPortMalloc>:
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	46c6      	mov	lr, r8
 8004b00:	b500      	push	{lr}
 8004b02:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8004b04:	f001 f982 	bl	8005e0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004b08:	493c      	ldr	r1, [pc, #240]	; (8004bfc <pvPortMalloc+0x100>)
 8004b0a:	680b      	ldr	r3, [r1, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d034      	beq.n	8004b7a <pvPortMalloc+0x7e>
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <pvPortMalloc+0x104>)
 8004b12:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b14:	4225      	tst	r5, r4
 8004b16:	d129      	bne.n	8004b6c <pvPortMalloc+0x70>
			if( xWantedSize > 0 )
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	d027      	beq.n	8004b6c <pvPortMalloc+0x70>
				xWantedSize += xHeapStructSize;
 8004b1c:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b1e:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 8004b20:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b22:	421a      	tst	r2, r3
 8004b24:	d001      	beq.n	8004b2a <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b26:	4393      	bics	r3, r2
 8004b28:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01e      	beq.n	8004b6c <pvPortMalloc+0x70>
 8004b2e:	4f35      	ldr	r7, [pc, #212]	; (8004c04 <pvPortMalloc+0x108>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	4690      	mov	r8, r2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d319      	bcc.n	8004b6c <pvPortMalloc+0x70>
				pxBlock = xStart.pxNextFreeBlock;
 8004b38:	4833      	ldr	r0, [pc, #204]	; (8004c08 <pvPortMalloc+0x10c>)
 8004b3a:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b3c:	e004      	b.n	8004b48 <pvPortMalloc+0x4c>
 8004b3e:	6826      	ldr	r6, [r4, #0]
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	d004      	beq.n	8004b4e <pvPortMalloc+0x52>
 8004b44:	0020      	movs	r0, r4
 8004b46:	0034      	movs	r4, r6
 8004b48:	6862      	ldr	r2, [r4, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3f7      	bcc.n	8004b3e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8004b4e:	6809      	ldr	r1, [r1, #0]
 8004b50:	42a1      	cmp	r1, r4
 8004b52:	d00b      	beq.n	8004b6c <pvPortMalloc+0x70>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b54:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b56:	6821      	ldr	r1, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b58:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b5a:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b5c:	1ad1      	subs	r1, r2, r3
 8004b5e:	2910      	cmp	r1, #16
 8004b60:	d92f      	bls.n	8004bc2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b62:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b64:	0742      	lsls	r2, r0, #29
 8004b66:	d027      	beq.n	8004bb8 <pvPortMalloc+0xbc>
 8004b68:	b672      	cpsid	i
 8004b6a:	e7fe      	b.n	8004b6a <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8004b6c:	f001 f956 	bl	8005e1c <xTaskResumeAll>
 8004b70:	2600      	movs	r6, #0
}
 8004b72:	0030      	movs	r0, r6
 8004b74:	bc80      	pop	{r7}
 8004b76:	46b8      	mov	r8, r7
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b7a:	2207      	movs	r2, #7
	uxAddress = ( size_t ) ucHeap;
 8004b7c:	4823      	ldr	r0, [pc, #140]	; (8004c0c <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b7e:	4202      	tst	r2, r0
 8004b80:	d036      	beq.n	8004bf0 <pvPortMalloc+0xf4>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b82:	1dc3      	adds	r3, r0, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b84:	4393      	bics	r3, r2
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	0092      	lsls	r2, r2, #2
 8004b8a:	1882      	adds	r2, r0, r2
 8004b8c:	0018      	movs	r0, r3
	xStart.xBlockSize = ( size_t ) 0;
 8004b8e:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b90:	4e1d      	ldr	r6, [pc, #116]	; (8004c08 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8004b92:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 8004b94:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b96:	6030      	str	r0, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b98:	2607      	movs	r6, #7
 8004b9a:	43b2      	bics	r2, r6
	pxEnd->pxNextFreeBlock = NULL;
 8004b9c:	6015      	str	r5, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b9e:	6055      	str	r5, [r2, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ba0:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ba2:	1ad3      	subs	r3, r2, r3
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ba4:	c00c      	stmia	r0!, {r2, r3}
	pxEnd = ( void * ) uxAddress;
 8004ba6:	600a      	str	r2, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004baa:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bac:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <pvPortMalloc+0x108>)
 8004bb0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <pvPortMalloc+0x104>)
 8004bb4:	601d      	str	r5, [r3, #0]
}
 8004bb6:	e7ad      	b.n	8004b14 <pvPortMalloc+0x18>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bb8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bba:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bbc:	f7ff ff76 	bl	8004aac <prvInsertBlockIntoFreeList>
 8004bc0:	6862      	ldr	r2, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc2:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bc4:	4912      	ldr	r1, [pc, #72]	; (8004c10 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc6:	1a9b      	subs	r3, r3, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bc8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bca:	603b      	str	r3, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d30d      	bcc.n	8004bec <pvPortMalloc+0xf0>
					pxBlock->pxNextFreeBlock = NULL;
 8004bd0:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bd2:	432a      	orrs	r2, r5
 8004bd4:	6062      	str	r2, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 8004bd6:	4a0f      	ldr	r2, [pc, #60]	; (8004c14 <pvPortMalloc+0x118>)
					pxBlock->pxNextFreeBlock = NULL;
 8004bd8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8004be0:	f001 f91c 	bl	8005e1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be4:	0773      	lsls	r3, r6, #29
 8004be6:	d0c4      	beq.n	8004b72 <pvPortMalloc+0x76>
 8004be8:	b672      	cpsid	i
 8004bea:	e7fe      	b.n	8004bea <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bec:	600b      	str	r3, [r1, #0]
 8004bee:	e7ef      	b.n	8004bd0 <pvPortMalloc+0xd4>
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	18c2      	adds	r2, r0, r3
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	e7c9      	b.n	8004b8e <pvPortMalloc+0x92>
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	20000810 	.word	0x20000810
 8004c00:	20000a14 	.word	0x20000a14
 8004c04:	20000a18 	.word	0x20000a18
 8004c08:	20000a28 	.word	0x20000a28
 8004c0c:	20000814 	.word	0x20000814
 8004c10:	20000a1c 	.word	0x20000a1c
 8004c14:	20000a20 	.word	0x20000a20

08004c18 <vPortFree>:
{
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	1e04      	subs	r4, r0, #0
	if( pv != NULL )
 8004c1c:	d01f      	beq.n	8004c5e <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c1e:	4a10      	ldr	r2, [pc, #64]	; (8004c60 <vPortFree+0x48>)
 8004c20:	3c08      	subs	r4, #8
 8004c22:	6863      	ldr	r3, [r4, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	421a      	tst	r2, r3
 8004c28:	d004      	beq.n	8004c34 <vPortFree+0x1c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c2a:	6821      	ldr	r1, [r4, #0]
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d003      	beq.n	8004c38 <vPortFree+0x20>
 8004c30:	b672      	cpsid	i
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x1a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c34:	b672      	cpsid	i
 8004c36:	e7fe      	b.n	8004c36 <vPortFree+0x1e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c38:	4393      	bics	r3, r2
 8004c3a:	6063      	str	r3, [r4, #4]
				vTaskSuspendAll();
 8004c3c:	f001 f8e6 	bl	8005e0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <vPortFree+0x4c>)
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c46:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c48:	468c      	mov	ip, r1
 8004c4a:	4463      	add	r3, ip
 8004c4c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c4e:	f7ff ff2d 	bl	8004aac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c52:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <vPortFree+0x50>)
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8004c5a:	f001 f8df 	bl	8005e1c <xTaskResumeAll>
}
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	20000a14 	.word	0x20000a14
 8004c64:	20000a18 	.word	0x20000a18
 8004c68:	20000a24 	.word	0x20000a24

08004c6c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c6c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c6e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c70:	3308      	adds	r3, #8
 8004c72:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c74:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c76:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c78:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c7e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c80:	4770      	bx	lr
 8004c82:	46c0      	nop			; (mov r8, r8)

08004c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c88:	4770      	bx	lr
 8004c8a:	46c0      	nop			; (mov r8, r8)

08004c8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c8c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c8e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004c90:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c98:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004c9a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004c9c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	6003      	str	r3, [r0, #0]
}
 8004ca2:	4770      	bx	lr

08004ca4 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ca4:	0003      	movs	r3, r0
{
 8004ca6:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca8:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004caa:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004cac:	1c62      	adds	r2, r4, #1
 8004cae:	d00d      	beq.n	8004ccc <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	42a5      	cmp	r5, r4
 8004cb8:	d9fa      	bls.n	8004cb0 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cbc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004cbe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 8004cc0:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 8004cc2:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 8004cc4:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8004cc6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004cc8:	6003      	str	r3, [r0, #0]
}
 8004cca:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ccc:	6902      	ldr	r2, [r0, #16]
 8004cce:	6853      	ldr	r3, [r2, #4]
 8004cd0:	e7f3      	b.n	8004cba <vListInsert+0x16>
 8004cd2:	46c0      	nop			; (mov r8, r8)

08004cd4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cd4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cd6:	6841      	ldr	r1, [r0, #4]
 8004cd8:	6882      	ldr	r2, [r0, #8]
 8004cda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cdc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	4281      	cmp	r1, r0
 8004ce2:	d006      	beq.n	8004cf2 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	3a01      	subs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cee:	6818      	ldr	r0, [r3, #0]
}
 8004cf0:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	e7f6      	b.n	8004ce4 <uxListRemove+0x10>
 8004cf6:	46c0      	nop			; (mov r8, r8)

08004cf8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8004cf8:	2300      	movs	r3, #0
{
 8004cfa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8004cfc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <prvTaskExitError+0x20>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	d001      	beq.n	8004d0a <prvTaskExitError+0x12>
 8004d06:	b672      	cpsid	i
 8004d08:	e7fe      	b.n	8004d08 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8004d0a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0fc      	beq.n	8004d0c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d12:	b002      	add	sp, #8
 8004d14:	4770      	bx	lr
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	2000000c 	.word	0x2000000c
 8004d1c:	00000000 	.word	0x00000000

08004d20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004d20:	4a0b      	ldr	r2, [pc, #44]	; (8004d50 <pxCurrentTCBConst2>)
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	3020      	adds	r0, #32
 8004d28:	f380 8809 	msr	PSP, r0
 8004d2c:	2002      	movs	r0, #2
 8004d2e:	f380 8814 	msr	CONTROL, r0
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004d38:	46ae      	mov	lr, r5
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	bc04      	pop	{r2}
 8004d3e:	b662      	cpsie	i
 8004d40:	4718      	bx	r3
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46c0      	nop			; (mov r8, r8)
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46c0      	nop			; (mov r8, r8)

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000a30 	.word	0x20000a30

08004d54 <pxPortInitialiseStack>:
{
 8004d54:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d56:	2480      	movs	r4, #128	; 0x80
 8004d58:	1f03      	subs	r3, r0, #4
 8004d5a:	0464      	lsls	r4, r4, #17
 8004d5c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d62:	4903      	ldr	r1, [pc, #12]	; (8004d70 <pxPortInitialiseStack+0x1c>)
 8004d64:	3b04      	subs	r3, #4
 8004d66:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d68:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8004d6a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bd10      	pop	{r4, pc}
 8004d70:	08004cf9 	.word	0x08004cf9

08004d74 <SVC_Handler>:
}
 8004d74:	4770      	bx	lr
 8004d76:	46c0      	nop			; (mov r8, r8)

08004d78 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d78:	2280      	movs	r2, #128	; 0x80
 8004d7a:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <vPortYield+0x14>)
 8004d7c:	0552      	lsls	r2, r2, #21
 8004d7e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004d80:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004d84:	f3bf 8f6f 	isb	sy
}
 8004d88:	4770      	bx	lr
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 8004d90:	b672      	cpsid	i
	uxCriticalNesting++;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <vPortEnterCritical+0x14>)
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004d9a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004d9e:	f3bf 8f6f 	isb	sy
}
 8004da2:	4770      	bx	lr
 8004da4:	2000000c 	.word	0x2000000c

08004da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004da8:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <vPortExitCritical+0x18>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <vPortExitCritical+0xc>
 8004db0:	b672      	cpsid	i
 8004db2:	e7fe      	b.n	8004db2 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 8004db4:	3b01      	subs	r3, #1
 8004db6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d100      	bne.n	8004dbe <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 8004dbc:	b662      	cpsie	i
	}
}
 8004dbe:	4770      	bx	lr
 8004dc0:	2000000c 	.word	0x2000000c

08004dc4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004dc4:	f3ef 8010 	mrs	r0, PRIMASK
 8004dc8:	b672      	cpsid	i
 8004dca:	4770      	bx	lr

08004dcc <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004dcc:	f380 8810 	msr	PRIMASK, r0
 8004dd0:	4770      	bx	lr
 8004dd2:	46c0      	nop			; (mov r8, r8)
	...

08004de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004de0:	f3ef 8009 	mrs	r0, PSP
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <pxCurrentTCBConst>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	3820      	subs	r0, #32
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004dee:	4644      	mov	r4, r8
 8004df0:	464d      	mov	r5, r9
 8004df2:	4656      	mov	r6, sl
 8004df4:	465f      	mov	r7, fp
 8004df6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004df8:	b508      	push	{r3, lr}
 8004dfa:	b672      	cpsid	i
 8004dfc:	f001 f838 	bl	8005e70 <vTaskSwitchContext>
 8004e00:	b662      	cpsie	i
 8004e02:	bc0c      	pop	{r2, r3}
 8004e04:	6811      	ldr	r1, [r2, #0]
 8004e06:	6808      	ldr	r0, [r1, #0]
 8004e08:	3010      	adds	r0, #16
 8004e0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e0c:	46a0      	mov	r8, r4
 8004e0e:	46a9      	mov	r9, r5
 8004e10:	46b2      	mov	sl, r6
 8004e12:	46bb      	mov	fp, r7
 8004e14:	f380 8809 	msr	PSP, r0
 8004e18:	3820      	subs	r0, #32
 8004e1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e1c:	4718      	bx	r3
 8004e1e:	46c0      	nop			; (mov r8, r8)

08004e20 <pxCurrentTCBConst>:
 8004e20:	20000a30 	.word	0x20000a30

08004e24 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e24:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e26:	f7ff ffcd 	bl	8004dc4 <ulSetInterruptMaskFromISR>
 8004e2a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e2c:	f001 f80e 	bl	8005e4c <xTaskIncrementTick>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d003      	beq.n	8004e3c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <xPortSysTickHandler+0x20>)
 8004e38:	0552      	lsls	r2, r2, #21
 8004e3a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004e3c:	0020      	movs	r0, r4
 8004e3e:	f7ff ffc5 	bl	8004dcc <vClearInterruptMaskFromISR>
}
 8004e42:	bd10      	pop	{r4, pc}
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e48:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e4a:	21fa      	movs	r1, #250	; 0xfa
{
 8004e4c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e50:	4c07      	ldr	r4, [pc, #28]	; (8004e70 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e52:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e54:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <vPortSetupTimerInterrupt+0x2c>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	f7fb f954 	bl	8000108 <__udivsi3>
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <vPortSetupTimerInterrupt+0x30>)
 8004e62:	3801      	subs	r0, #1
 8004e64:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004e66:	2307      	movs	r3, #7
 8004e68:	6023      	str	r3, [r4, #0]
}
 8004e6a:	bd10      	pop	{r4, pc}
 8004e6c:	e000e018 	.word	0xe000e018
 8004e70:	e000e010 	.word	0xe000e010
 8004e74:	20000000 	.word	0x20000000
 8004e78:	e000e014 	.word	0xe000e014

08004e7c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <xPortStartScheduler+0x48>)
 8004e80:	0412      	lsls	r2, r2, #16
 8004e82:	6819      	ldr	r1, [r3, #0]
{
 8004e84:	b530      	push	{r4, r5, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e8a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 8004e8c:	2500      	movs	r5, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	0612      	lsls	r2, r2, #24
 8004e92:	430a      	orrs	r2, r1
{
 8004e94:	b083      	sub	sp, #12
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e96:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004e98:	f7ff ffd6 	bl	8004e48 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004e9c:	4c0a      	ldr	r4, [pc, #40]	; (8004ec8 <xPortStartScheduler+0x4c>)
 8004e9e:	6025      	str	r5, [r4, #0]
	vPortStartFirstTask();
 8004ea0:	f7ff ff3e 	bl	8004d20 <vPortStartFirstTask>
	vTaskSwitchContext();
 8004ea4:	f000 ffe4 	bl	8005e70 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8004ea8:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0UL;
 8004eaa:	9501      	str	r5, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004eac:	3301      	adds	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <xPortStartScheduler+0x38>
 8004eb0:	b672      	cpsid	i
 8004eb2:	e7fe      	b.n	8004eb2 <xPortStartScheduler+0x36>
	portDISABLE_INTERRUPTS();
 8004eb4:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0fc      	beq.n	8004eb6 <xPortStartScheduler+0x3a>
}
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	b003      	add	sp, #12
 8004ec0:	bd30      	pop	{r4, r5, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	e000ed20 	.word	0xe000ed20
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004ed2:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	d106      	bne.n	8004ee8 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eda:	6806      	ldr	r6, [r0, #0]
 8004edc:	2e00      	cmp	r6, #0
 8004ede:	d02a      	beq.n	8004f36 <prvCopyDataToQueue+0x6a>
 8004ee0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8004ee2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ee4:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004ee8:	2e00      	cmp	r6, #0
 8004eea:	d10f      	bne.n	8004f0c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eec:	6840      	ldr	r0, [r0, #4]
 8004eee:	f001 fcb9 	bl	8006864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ef2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef8:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004efa:	4463      	add	r3, ip
 8004efc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d3ee      	bcc.n	8004ee0 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f02:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 8004f04:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f06:	6063      	str	r3, [r4, #4]
 8004f08:	3501      	adds	r5, #1
 8004f0a:	e7eb      	b.n	8004ee4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f0c:	68c0      	ldr	r0, [r0, #12]
 8004f0e:	f001 fca9 	bl	8006864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f12:	68e1      	ldr	r1, [r4, #12]
 8004f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f16:	425a      	negs	r2, r3
 8004f18:	1acb      	subs	r3, r1, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f1c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1e:	428b      	cmp	r3, r1
 8004f20:	d203      	bcs.n	8004f2a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	469c      	mov	ip, r3
 8004f26:	4462      	add	r2, ip
 8004f28:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004f2a:	2e02      	cmp	r6, #2
 8004f2c:	d1d8      	bne.n	8004ee0 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	d1d7      	bne.n	8004ee2 <prvCopyDataToQueue+0x16>
 8004f32:	3501      	adds	r5, #1
 8004f34:	e7d5      	b.n	8004ee2 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f36:	6880      	ldr	r0, [r0, #8]
 8004f38:	f001 f8ae 	bl	8006098 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	60a6      	str	r6, [r4, #8]
 8004f40:	e7d0      	b.n	8004ee4 <prvCopyDataToQueue+0x18>
 8004f42:	46c0      	nop			; (mov r8, r8)

08004f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f44:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004f48:	0008      	movs	r0, r1
 8004f4a:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d007      	beq.n	8004f60 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f50:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f52:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f54:	1889      	adds	r1, r1, r2
 8004f56:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f58:	42a1      	cmp	r1, r4
 8004f5a:	d202      	bcs.n	8004f62 <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f5c:	f001 fc82 	bl	8006864 <memcpy>
	}
}
 8004f60:	bd10      	pop	{r4, pc}
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	60d9      	str	r1, [r3, #12]
 8004f66:	e7f9      	b.n	8004f5c <prvCopyDataFromQueue+0x18>

08004f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	0005      	movs	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f6c:	f7ff ff10 	bl	8004d90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f70:	2345      	movs	r3, #69	; 0x45
 8004f72:	5cec      	ldrb	r4, [r5, r3]
 8004f74:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	dd16      	ble.n	8004fa8 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7a:	002e      	movs	r6, r5
 8004f7c:	3624      	adds	r6, #36	; 0x24
 8004f7e:	e004      	b.n	8004f8a <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f80:	3c01      	subs	r4, #1
 8004f82:	b2e2      	uxtb	r2, r4
 8004f84:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	d00e      	beq.n	8004fa8 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f90:	0030      	movs	r0, r6
 8004f92:	f000 ffa7 	bl	8005ee4 <xTaskRemoveFromEventList>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0f2      	beq.n	8004f80 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8004f9a:	3c01      	subs	r4, #1
 8004f9c:	f001 f824 	bl	8005fe8 <vTaskMissedYield>
			--cTxLock;
 8004fa0:	b2e2      	uxtb	r2, r4
 8004fa2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d1f0      	bne.n	8004f8a <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fa8:	2345      	movs	r3, #69	; 0x45
 8004faa:	22ff      	movs	r2, #255	; 0xff
 8004fac:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 8004fae:	f7ff fefb 	bl	8004da8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb2:	f7ff feed 	bl	8004d90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fb6:	2344      	movs	r3, #68	; 0x44
 8004fb8:	5cec      	ldrb	r4, [r5, r3]
 8004fba:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	dd16      	ble.n	8004fee <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc0:	002e      	movs	r6, r5
 8004fc2:	3610      	adds	r6, #16
 8004fc4:	e004      	b.n	8004fd0 <prvUnlockQueue+0x68>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fc6:	3c01      	subs	r4, #1
 8004fc8:	b2e2      	uxtb	r2, r4
 8004fca:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d00e      	beq.n	8004fee <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd0:	692b      	ldr	r3, [r5, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd6:	0030      	movs	r0, r6
 8004fd8:	f000 ff84 	bl	8005ee4 <xTaskRemoveFromEventList>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0f2      	beq.n	8004fc6 <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 8004fe0:	3c01      	subs	r4, #1
 8004fe2:	f001 f801 	bl	8005fe8 <vTaskMissedYield>
				--cRxLock;
 8004fe6:	b2e2      	uxtb	r2, r4
 8004fe8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fea:	2a00      	cmp	r2, #0
 8004fec:	d1f0      	bne.n	8004fd0 <prvUnlockQueue+0x68>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fee:	2344      	movs	r3, #68	; 0x44
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 8004ff4:	f7ff fed8 	bl	8004da8 <vPortExitCritical>
}
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)

08004ffc <xQueueGenericReset.part.0>:
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	0004      	movs	r4, r0
 8005000:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 8005002:	f7ff fec5 	bl	8004d90 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	434b      	muls	r3, r1
 800500e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005010:	1a5b      	subs	r3, r3, r1
 8005012:	18d3      	adds	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005014:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005016:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005018:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800501a:	2244      	movs	r2, #68	; 0x44
 800501c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800501e:	2000      	movs	r0, #0
 8005020:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005022:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005024:	3201      	adds	r2, #1
 8005026:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 8005028:	2d00      	cmp	r5, #0
 800502a:	d10f      	bne.n	800504c <xQueueGenericReset.part.0+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <xQueueGenericReset.part.0+0x3e>
	taskEXIT_CRITICAL();
 8005032:	f7ff feb9 	bl	8004da8 <vPortExitCritical>
}
 8005036:	2001      	movs	r0, #1
 8005038:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503a:	0020      	movs	r0, r4
 800503c:	3010      	adds	r0, #16
 800503e:	f000 ff51 	bl	8005ee4 <xTaskRemoveFromEventList>
 8005042:	2800      	cmp	r0, #0
 8005044:	d0f5      	beq.n	8005032 <xQueueGenericReset.part.0+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005046:	f7ff fe97 	bl	8004d78 <vPortYield>
 800504a:	e7f2      	b.n	8005032 <xQueueGenericReset.part.0+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800504c:	0020      	movs	r0, r4
 800504e:	3010      	adds	r0, #16
 8005050:	f7ff fe0c 	bl	8004c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005054:	0020      	movs	r0, r4
 8005056:	3024      	adds	r0, #36	; 0x24
 8005058:	f7ff fe08 	bl	8004c6c <vListInitialise>
 800505c:	e7e9      	b.n	8005032 <xQueueGenericReset.part.0+0x36>
 800505e:	46c0      	nop			; (mov r8, r8)

08005060 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	0006      	movs	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005064:	0008      	movs	r0, r1
 8005066:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005068:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800506a:	000d      	movs	r5, r1
 800506c:	0017      	movs	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800506e:	f7ff fd45 	bl	8004afc <pvPortMalloc>
 8005072:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8005074:	d00e      	beq.n	8005094 <xQueueGenericCreate.part.0+0x34>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005076:	2346      	movs	r3, #70	; 0x46
 8005078:	2200      	movs	r2, #0
 800507a:	54c2      	strb	r2, [r0, r3]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800507c:	0003      	movs	r3, r0
 800507e:	2d00      	cmp	r5, #0
 8005080:	d10a      	bne.n	8005098 <xQueueGenericCreate.part.0+0x38>
 8005082:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005084:	2101      	movs	r1, #1
 8005086:	0020      	movs	r0, r4
 8005088:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800508a:	6425      	str	r5, [r4, #64]	; 0x40
	configASSERT( pxQueue );
 800508c:	f7ff ffb6 	bl	8004ffc <xQueueGenericReset.part.0>
		pxNewQueue->ucQueueType = ucQueueType;
 8005090:	234c      	movs	r3, #76	; 0x4c
 8005092:	54e7      	strb	r7, [r4, r3]
	}
 8005094:	0020      	movs	r0, r4
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005098:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800509a:	e7f2      	b.n	8005082 <xQueueGenericCreate.part.0+0x22>

0800509c <xQueueGenericCreateStatic>:
	{
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	001c      	movs	r4, r3
 80050a2:	ab06      	add	r3, sp, #24
 80050a4:	781d      	ldrb	r5, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d101      	bne.n	80050ae <xQueueGenericCreateStatic+0x12>
 80050aa:	b672      	cpsid	i
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	d017      	beq.n	80050e2 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d008      	beq.n	80050c8 <xQueueGenericCreateStatic+0x2c>
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d015      	beq.n	80050e6 <xQueueGenericCreateStatic+0x4a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050ba:	2350      	movs	r3, #80	; 0x50
 80050bc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d012      	beq.n	80050ea <xQueueGenericCreateStatic+0x4e>
 80050c4:	b672      	cpsid	i
 80050c6:	e7fe      	b.n	80050c6 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050c8:	2900      	cmp	r1, #0
 80050ca:	d11e      	bne.n	800510a <xQueueGenericCreateStatic+0x6e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050cc:	2350      	movs	r3, #80	; 0x50
 80050ce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	2b50      	cmp	r3, #80	; 0x50
 80050d4:	d1f6      	bne.n	80050c4 <xQueueGenericCreateStatic+0x28>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050d6:	2201      	movs	r2, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050d8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050da:	2346      	movs	r3, #70	; 0x46
 80050dc:	54e2      	strb	r2, [r4, r3]
 80050de:	0022      	movs	r2, r4
 80050e0:	e007      	b.n	80050f2 <xQueueGenericCreateStatic+0x56>
		configASSERT( pxStaticQueue != NULL );
 80050e2:	b672      	cpsid	i
 80050e4:	e7fe      	b.n	80050e4 <xQueueGenericCreateStatic+0x48>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050e6:	b672      	cpsid	i
 80050e8:	e7fe      	b.n	80050e8 <xQueueGenericCreateStatic+0x4c>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050ea:	2601      	movs	r6, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050ec:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050ee:	2346      	movs	r3, #70	; 0x46
 80050f0:	54e6      	strb	r6, [r4, r3]
	pxNewQueue->uxLength = uxQueueLength;
 80050f2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050f4:	6421      	str	r1, [r4, #64]	; 0x40
 80050f6:	0020      	movs	r0, r4
 80050f8:	2101      	movs	r1, #1
 80050fa:	6022      	str	r2, [r4, #0]
	configASSERT( pxQueue );
 80050fc:	f7ff ff7e 	bl	8004ffc <xQueueGenericReset.part.0>
		pxNewQueue->ucQueueType = ucQueueType;
 8005100:	234c      	movs	r3, #76	; 0x4c
	}
 8005102:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005104:	54e5      	strb	r5, [r4, r3]
	}
 8005106:	b002      	add	sp, #8
 8005108:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800510a:	b672      	cpsid	i
 800510c:	e7fe      	b.n	800510c <xQueueGenericCreateStatic+0x70>
 800510e:	46c0      	nop			; (mov r8, r8)

08005110 <xQueueGenericCreate>:
	{
 8005110:	b510      	push	{r4, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005112:	2800      	cmp	r0, #0
 8005114:	d101      	bne.n	800511a <xQueueGenericCreate+0xa>
 8005116:	b672      	cpsid	i
 8005118:	e7fe      	b.n	8005118 <xQueueGenericCreate+0x8>
 800511a:	f7ff ffa1 	bl	8005060 <xQueueGenericCreate.part.0>
	}
 800511e:	bd10      	pop	{r4, pc}

08005120 <xQueueCreateCountingSemaphoreStatic>:
	{
 8005120:	b510      	push	{r4, lr}
 8005122:	0013      	movs	r3, r2
 8005124:	000c      	movs	r4, r1
 8005126:	b082      	sub	sp, #8
		configASSERT( uxMaxCount != 0 );
 8005128:	2800      	cmp	r0, #0
 800512a:	d101      	bne.n	8005130 <xQueueCreateCountingSemaphoreStatic+0x10>
 800512c:	b672      	cpsid	i
 800512e:	e7fe      	b.n	800512e <xQueueCreateCountingSemaphoreStatic+0xe>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005130:	4288      	cmp	r0, r1
 8005132:	d201      	bcs.n	8005138 <xQueueCreateCountingSemaphoreStatic+0x18>
 8005134:	b672      	cpsid	i
 8005136:	e7fe      	b.n	8005136 <xQueueCreateCountingSemaphoreStatic+0x16>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005138:	2202      	movs	r2, #2
 800513a:	2100      	movs	r1, #0
 800513c:	9200      	str	r2, [sp, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	f7ff ffac 	bl	800509c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005144:	2800      	cmp	r0, #0
 8005146:	d000      	beq.n	800514a <xQueueCreateCountingSemaphoreStatic+0x2a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005148:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800514a:	b002      	add	sp, #8
 800514c:	bd10      	pop	{r4, pc}
 800514e:	46c0      	nop			; (mov r8, r8)

08005150 <xQueueCreateCountingSemaphore>:
	{
 8005150:	b510      	push	{r4, lr}
 8005152:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8005154:	2800      	cmp	r0, #0
 8005156:	d101      	bne.n	800515c <xQueueCreateCountingSemaphore+0xc>
 8005158:	b672      	cpsid	i
 800515a:	e7fe      	b.n	800515a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800515c:	4288      	cmp	r0, r1
 800515e:	d201      	bcs.n	8005164 <xQueueCreateCountingSemaphore+0x14>
 8005160:	b672      	cpsid	i
 8005162:	e7fe      	b.n	8005162 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005164:	2202      	movs	r2, #2
 8005166:	2100      	movs	r1, #0
 8005168:	f7ff ff7a 	bl	8005060 <xQueueGenericCreate.part.0>
		if( xHandle != NULL )
 800516c:	2800      	cmp	r0, #0
 800516e:	d000      	beq.n	8005172 <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005170:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005172:	bd10      	pop	{r4, pc}

08005174 <xQueueGenericSend>:
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	4647      	mov	r7, r8
 8005178:	46ce      	mov	lr, r9
 800517a:	b580      	push	{r7, lr}
 800517c:	b085      	sub	sp, #20
 800517e:	0004      	movs	r4, r0
 8005180:	000f      	movs	r7, r1
 8005182:	001e      	movs	r6, r3
 8005184:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005186:	2800      	cmp	r0, #0
 8005188:	d050      	beq.n	800522c <xQueueGenericSend+0xb8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800518a:	2900      	cmp	r1, #0
 800518c:	d049      	beq.n	8005222 <xQueueGenericSend+0xae>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800518e:	2e02      	cmp	r6, #2
 8005190:	d104      	bne.n	800519c <xQueueGenericSend+0x28>
 8005192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d001      	beq.n	800519c <xQueueGenericSend+0x28>
 8005198:	b672      	cpsid	i
 800519a:	e7fe      	b.n	800519a <xQueueGenericSend+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800519c:	f000 ff2a 	bl	8005ff4 <xTaskGetSchedulerState>
 80051a0:	1e05      	subs	r5, r0, #0
 80051a2:	d045      	beq.n	8005230 <xQueueGenericSend+0xbc>
 80051a4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80051a6:	2344      	movs	r3, #68	; 0x44
 80051a8:	4699      	mov	r9, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 80051ae:	f7ff fdef 	bl	8004d90 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d355      	bcc.n	8005266 <xQueueGenericSend+0xf2>
 80051ba:	2e02      	cmp	r6, #2
 80051bc:	d053      	beq.n	8005266 <xQueueGenericSend+0xf2>
				if( xTicksToWait == ( TickType_t ) 0 )
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d100      	bne.n	80051c6 <xQueueGenericSend+0x52>
 80051c4:	e070      	b.n	80052a8 <xQueueGenericSend+0x134>
				else if( xEntryTimeSet == pdFALSE )
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	d049      	beq.n	800525e <xQueueGenericSend+0xea>
		taskEXIT_CRITICAL();
 80051ca:	f7ff fded 	bl	8004da8 <vPortExitCritical>
		vTaskSuspendAll();
 80051ce:	f000 fe1d 	bl	8005e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d2:	f7ff fddd 	bl	8004d90 <vPortEnterCritical>
 80051d6:	464b      	mov	r3, r9
 80051d8:	5ce3      	ldrb	r3, [r4, r3]
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	d102      	bne.n	80051e6 <xQueueGenericSend+0x72>
 80051e0:	464b      	mov	r3, r9
 80051e2:	4642      	mov	r2, r8
 80051e4:	54e2      	strb	r2, [r4, r3]
 80051e6:	2245      	movs	r2, #69	; 0x45
 80051e8:	5ca3      	ldrb	r3, [r4, r2]
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	d101      	bne.n	80051f4 <xQueueGenericSend+0x80>
 80051f0:	4643      	mov	r3, r8
 80051f2:	54a3      	strb	r3, [r4, r2]
 80051f4:	f7ff fdd8 	bl	8004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051f8:	a901      	add	r1, sp, #4
 80051fa:	a802      	add	r0, sp, #8
 80051fc:	f000 febe 	bl	8005f7c <xTaskCheckForTimeOut>
 8005200:	2800      	cmp	r0, #0
 8005202:	d14a      	bne.n	800529a <xQueueGenericSend+0x126>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005204:	f7ff fdc4 	bl	8004d90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800520a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800520c:	4293      	cmp	r3, r2
 800520e:	d014      	beq.n	800523a <xQueueGenericSend+0xc6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005210:	f7ff fdca 	bl	8004da8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005214:	0020      	movs	r0, r4
 8005216:	f7ff fea7 	bl	8004f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800521a:	f000 fdff 	bl	8005e1c <xTaskResumeAll>
 800521e:	2501      	movs	r5, #1
 8005220:	e7c5      	b.n	80051ae <xQueueGenericSend+0x3a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005222:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0b2      	beq.n	800518e <xQueueGenericSend+0x1a>
 8005228:	b672      	cpsid	i
 800522a:	e7fe      	b.n	800522a <xQueueGenericSend+0xb6>
	configASSERT( pxQueue );
 800522c:	b672      	cpsid	i
 800522e:	e7fe      	b.n	800522e <xQueueGenericSend+0xba>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005230:	9b01      	ldr	r3, [sp, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0b7      	beq.n	80051a6 <xQueueGenericSend+0x32>
 8005236:	b672      	cpsid	i
 8005238:	e7fe      	b.n	8005238 <xQueueGenericSend+0xc4>
	taskEXIT_CRITICAL();
 800523a:	f7ff fdb5 	bl	8004da8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800523e:	0020      	movs	r0, r4
 8005240:	9901      	ldr	r1, [sp, #4]
 8005242:	3010      	adds	r0, #16
 8005244:	f000 fe24 	bl	8005e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005248:	0020      	movs	r0, r4
 800524a:	f7ff fe8d 	bl	8004f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800524e:	f000 fde5 	bl	8005e1c <xTaskResumeAll>
 8005252:	2800      	cmp	r0, #0
 8005254:	d1e3      	bne.n	800521e <xQueueGenericSend+0xaa>
					portYIELD_WITHIN_API();
 8005256:	f7ff fd8f 	bl	8004d78 <vPortYield>
 800525a:	2501      	movs	r5, #1
 800525c:	e7a7      	b.n	80051ae <xQueueGenericSend+0x3a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800525e:	a802      	add	r0, sp, #8
 8005260:	f000 fe80 	bl	8005f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005264:	e7b1      	b.n	80051ca <xQueueGenericSend+0x56>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005266:	0032      	movs	r2, r6
 8005268:	0039      	movs	r1, r7
 800526a:	0020      	movs	r0, r4
 800526c:	f7ff fe2e 	bl	8004ecc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <xQueueGenericSend+0x11c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005276:	2800      	cmp	r0, #0
 8005278:	d107      	bne.n	800528a <xQueueGenericSend+0x116>
				taskEXIT_CRITICAL();
 800527a:	f7ff fd95 	bl	8004da8 <vPortExitCritical>
				return pdPASS;
 800527e:	2001      	movs	r0, #1
}
 8005280:	b005      	add	sp, #20
 8005282:	bcc0      	pop	{r6, r7}
 8005284:	46b9      	mov	r9, r7
 8005286:	46b0      	mov	r8, r6
 8005288:	bdf0      	pop	{r4, r5, r6, r7, pc}
							queueYIELD_IF_USING_PREEMPTION();
 800528a:	f7ff fd75 	bl	8004d78 <vPortYield>
 800528e:	e7f4      	b.n	800527a <xQueueGenericSend+0x106>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005290:	0020      	movs	r0, r4
 8005292:	3024      	adds	r0, #36	; 0x24
 8005294:	f000 fe26 	bl	8005ee4 <xTaskRemoveFromEventList>
 8005298:	e7ed      	b.n	8005276 <xQueueGenericSend+0x102>
			prvUnlockQueue( pxQueue );
 800529a:	0020      	movs	r0, r4
 800529c:	f7ff fe64 	bl	8004f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052a0:	f000 fdbc 	bl	8005e1c <xTaskResumeAll>
			return errQUEUE_FULL;
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7eb      	b.n	8005280 <xQueueGenericSend+0x10c>
					taskEXIT_CRITICAL();
 80052a8:	f7ff fd7e 	bl	8004da8 <vPortExitCritical>
					return errQUEUE_FULL;
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7e7      	b.n	8005280 <xQueueGenericSend+0x10c>

080052b0 <xQueueGenericSendFromISR>:
{
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	464f      	mov	r7, r9
 80052b4:	46d6      	mov	lr, sl
 80052b6:	4646      	mov	r6, r8
 80052b8:	0004      	movs	r4, r0
 80052ba:	b5c0      	push	{r6, r7, lr}
 80052bc:	4691      	mov	r9, r2
 80052be:	000f      	movs	r7, r1
 80052c0:	469a      	mov	sl, r3
	configASSERT( pxQueue );
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d01f      	beq.n	8005306 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	2900      	cmp	r1, #0
 80052c8:	d018      	beq.n	80052fc <xQueueGenericSendFromISR+0x4c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ca:	4653      	mov	r3, sl
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d104      	bne.n	80052da <xQueueGenericSendFromISR+0x2a>
 80052d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d019      	beq.n	800530a <xQueueGenericSendFromISR+0x5a>
 80052d6:	b672      	cpsid	i
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericSendFromISR+0x28>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052da:	f7ff fd73 	bl	8004dc4 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052e2:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d314      	bcc.n	8005312 <xQueueGenericSendFromISR+0x62>
			xReturn = errQUEUE_FULL;
 80052e8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80052ea:	0030      	movs	r0, r6
 80052ec:	f7ff fd6e 	bl	8004dcc <vClearInterruptMaskFromISR>
}
 80052f0:	0028      	movs	r0, r5
 80052f2:	bce0      	pop	{r5, r6, r7}
 80052f4:	46ba      	mov	sl, r7
 80052f6:	46b1      	mov	r9, r6
 80052f8:	46a8      	mov	r8, r5
 80052fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0e3      	beq.n	80052ca <xQueueGenericSendFromISR+0x1a>
 8005302:	b672      	cpsid	i
 8005304:	e7fe      	b.n	8005304 <xQueueGenericSendFromISR+0x54>
	configASSERT( pxQueue );
 8005306:	b672      	cpsid	i
 8005308:	e7fe      	b.n	8005308 <xQueueGenericSendFromISR+0x58>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800530a:	f7ff fd5b 	bl	8004dc4 <ulSetInterruptMaskFromISR>
 800530e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8005312:	2345      	movs	r3, #69	; 0x45
 8005314:	5ce5      	ldrb	r5, [r4, r3]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005316:	4652      	mov	r2, sl
			const int8_t cTxLock = pxQueue->cTxLock;
 8005318:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800531a:	0039      	movs	r1, r7
 800531c:	0020      	movs	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800531e:	4698      	mov	r8, r3
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005322:	f7ff fdd3 	bl	8004ecc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005326:	1c6b      	adds	r3, r5, #1
 8005328:	d005      	beq.n	8005336 <xQueueGenericSendFromISR+0x86>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800532a:	4643      	mov	r3, r8
 800532c:	3501      	adds	r5, #1
 800532e:	b26d      	sxtb	r5, r5
 8005330:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
 8005332:	2501      	movs	r5, #1
 8005334:	e7d9      	b.n	80052ea <xQueueGenericSendFromISR+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005336:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 8005338:	3502      	adds	r5, #2
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0d5      	beq.n	80052ea <xQueueGenericSendFromISR+0x3a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800533e:	0020      	movs	r0, r4
 8005340:	3024      	adds	r0, #36	; 0x24
 8005342:	f000 fdcf 	bl	8005ee4 <xTaskRemoveFromEventList>
 8005346:	2800      	cmp	r0, #0
 8005348:	d0cf      	beq.n	80052ea <xQueueGenericSendFromISR+0x3a>
							if( pxHigherPriorityTaskWoken != NULL )
 800534a:	464b      	mov	r3, r9
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0cc      	beq.n	80052ea <xQueueGenericSendFromISR+0x3a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005350:	601d      	str	r5, [r3, #0]
 8005352:	e7ca      	b.n	80052ea <xQueueGenericSendFromISR+0x3a>

08005354 <xQueueReceive>:
{
 8005354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005356:	46ce      	mov	lr, r9
 8005358:	4647      	mov	r7, r8
 800535a:	b580      	push	{r7, lr}
 800535c:	b085      	sub	sp, #20
 800535e:	0004      	movs	r4, r0
 8005360:	000e      	movs	r6, r1
 8005362:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005364:	2800      	cmp	r0, #0
 8005366:	d100      	bne.n	800536a <xQueueReceive+0x16>
 8005368:	e076      	b.n	8005458 <xQueueReceive+0x104>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536a:	2900      	cmp	r1, #0
 800536c:	d051      	beq.n	8005412 <xQueueReceive+0xbe>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536e:	f000 fe41 	bl	8005ff4 <xTaskGetSchedulerState>
 8005372:	2800      	cmp	r0, #0
 8005374:	d048      	beq.n	8005408 <xQueueReceive+0xb4>
		taskENTER_CRITICAL();
 8005376:	f7ff fd0b 	bl	8004d90 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800537c:	2d00      	cmp	r5, #0
 800537e:	d000      	beq.n	8005382 <xQueueReceive+0x2e>
 8005380:	e06c      	b.n	800545c <xQueueReceive+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005382:	9b01      	ldr	r3, [sp, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d037      	beq.n	80053f8 <xQueueReceive+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005388:	a802      	add	r0, sp, #8
 800538a:	f000 fdeb 	bl	8005f64 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800538e:	2344      	movs	r3, #68	; 0x44
 8005390:	4699      	mov	r9, r3
 8005392:	2300      	movs	r3, #0
 8005394:	2745      	movs	r7, #69	; 0x45
 8005396:	4698      	mov	r8, r3
		taskEXIT_CRITICAL();
 8005398:	f7ff fd06 	bl	8004da8 <vPortExitCritical>
		vTaskSuspendAll();
 800539c:	f000 fd36 	bl	8005e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053a0:	f7ff fcf6 	bl	8004d90 <vPortEnterCritical>
 80053a4:	464b      	mov	r3, r9
 80053a6:	5ce3      	ldrb	r3, [r4, r3]
 80053a8:	b25b      	sxtb	r3, r3
 80053aa:	3301      	adds	r3, #1
 80053ac:	d102      	bne.n	80053b4 <xQueueReceive+0x60>
 80053ae:	464b      	mov	r3, r9
 80053b0:	4642      	mov	r2, r8
 80053b2:	54e2      	strb	r2, [r4, r3]
 80053b4:	5de3      	ldrb	r3, [r4, r7]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	3301      	adds	r3, #1
 80053ba:	d101      	bne.n	80053c0 <xQueueReceive+0x6c>
 80053bc:	4643      	mov	r3, r8
 80053be:	55e3      	strb	r3, [r4, r7]
 80053c0:	f7ff fcf2 	bl	8004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053c4:	a901      	add	r1, sp, #4
 80053c6:	a802      	add	r0, sp, #8
 80053c8:	f000 fdd8 	bl	8005f7c <xTaskCheckForTimeOut>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d125      	bne.n	800541c <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 80053d0:	f7ff fcde 	bl	8004d90 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02d      	beq.n	8005436 <xQueueReceive+0xe2>
	taskEXIT_CRITICAL();
 80053da:	f7ff fce5 	bl	8004da8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80053de:	0020      	movs	r0, r4
 80053e0:	f7ff fdc2 	bl	8004f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053e4:	f000 fd1a 	bl	8005e1c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80053e8:	f7ff fcd2 	bl	8004d90 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ee:	2d00      	cmp	r5, #0
 80053f0:	d134      	bne.n	800545c <xQueueReceive+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f2:	9b01      	ldr	r3, [sp, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1cf      	bne.n	8005398 <xQueueReceive+0x44>
					taskEXIT_CRITICAL();
 80053f8:	f7ff fcd6 	bl	8004da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80053fc:	2000      	movs	r0, #0
}
 80053fe:	b005      	add	sp, #20
 8005400:	bcc0      	pop	{r6, r7}
 8005402:	46b9      	mov	r9, r7
 8005404:	46b0      	mov	r8, r6
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0b3      	beq.n	8005376 <xQueueReceive+0x22>
 800540e:	b672      	cpsid	i
 8005410:	e7fe      	b.n	8005410 <xQueueReceive+0xbc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005412:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0aa      	beq.n	800536e <xQueueReceive+0x1a>
 8005418:	b672      	cpsid	i
 800541a:	e7fe      	b.n	800541a <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 800541c:	0020      	movs	r0, r4
 800541e:	f7ff fda3 	bl	8004f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005422:	f000 fcfb 	bl	8005e1c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005426:	f7ff fcb3 	bl	8004d90 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800542a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0e3      	beq.n	80053f8 <xQueueReceive+0xa4>
	taskEXIT_CRITICAL();
 8005430:	f7ff fcba 	bl	8004da8 <vPortExitCritical>
 8005434:	e7d8      	b.n	80053e8 <xQueueReceive+0x94>
 8005436:	f7ff fcb7 	bl	8004da8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800543a:	0020      	movs	r0, r4
 800543c:	9901      	ldr	r1, [sp, #4]
 800543e:	3024      	adds	r0, #36	; 0x24
 8005440:	f000 fd26 	bl	8005e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005444:	0020      	movs	r0, r4
 8005446:	f7ff fd8f 	bl	8004f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800544a:	f000 fce7 	bl	8005e1c <xTaskResumeAll>
 800544e:	2800      	cmp	r0, #0
 8005450:	d1ca      	bne.n	80053e8 <xQueueReceive+0x94>
					portYIELD_WITHIN_API();
 8005452:	f7ff fc91 	bl	8004d78 <vPortYield>
		taskENTER_CRITICAL();
 8005456:	e7c7      	b.n	80053e8 <xQueueReceive+0x94>
	configASSERT( ( pxQueue ) );
 8005458:	b672      	cpsid	i
 800545a:	e7fe      	b.n	800545a <xQueueReceive+0x106>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800545c:	0031      	movs	r1, r6
 800545e:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005460:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005462:	f7ff fd6f 	bl	8004f44 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005466:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <xQueueReceive+0x122>
				taskEXIT_CRITICAL();
 800546e:	f7ff fc9b 	bl	8004da8 <vPortExitCritical>
				return pdPASS;
 8005472:	2001      	movs	r0, #1
 8005474:	e7c3      	b.n	80053fe <xQueueReceive+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005476:	0020      	movs	r0, r4
 8005478:	3010      	adds	r0, #16
 800547a:	f000 fd33 	bl	8005ee4 <xTaskRemoveFromEventList>
 800547e:	2800      	cmp	r0, #0
 8005480:	d0f5      	beq.n	800546e <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 8005482:	f7ff fc79 	bl	8004d78 <vPortYield>
 8005486:	e7f2      	b.n	800546e <xQueueReceive+0x11a>

08005488 <xQueueSemaphoreTake>:
{
 8005488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548a:	46c6      	mov	lr, r8
 800548c:	b500      	push	{lr}
 800548e:	b084      	sub	sp, #16
 8005490:	1e04      	subs	r4, r0, #0
 8005492:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005494:	d004      	beq.n	80054a0 <xQueueSemaphoreTake+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005496:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <xQueueSemaphoreTake+0x1c>
 800549c:	b672      	cpsid	i
 800549e:	e7fe      	b.n	800549e <xQueueSemaphoreTake+0x16>
	configASSERT( ( pxQueue ) );
 80054a0:	b672      	cpsid	i
 80054a2:	e7fe      	b.n	80054a2 <xQueueSemaphoreTake+0x1a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054a4:	f000 fda6 	bl	8005ff4 <xTaskGetSchedulerState>
 80054a8:	1e06      	subs	r6, r0, #0
 80054aa:	d04a      	beq.n	8005542 <xQueueSemaphoreTake+0xba>
 80054ac:	2500      	movs	r5, #0
 80054ae:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80054b0:	2344      	movs	r3, #68	; 0x44
 80054b2:	2700      	movs	r7, #0
 80054b4:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 80054b6:	f7ff fc6b 	bl	8004d90 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d165      	bne.n	800558c <xQueueSemaphoreTake+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d100      	bne.n	80054c8 <xQueueSemaphoreTake+0x40>
 80054c6:	e086      	b.n	80055d6 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	d036      	beq.n	800553a <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 80054cc:	f7ff fc6c 	bl	8004da8 <vPortExitCritical>
		vTaskSuspendAll();
 80054d0:	f000 fc9c 	bl	8005e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d4:	f7ff fc5c 	bl	8004d90 <vPortEnterCritical>
 80054d8:	4643      	mov	r3, r8
 80054da:	5ce3      	ldrb	r3, [r4, r3]
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	d101      	bne.n	80054e6 <xQueueSemaphoreTake+0x5e>
 80054e2:	4643      	mov	r3, r8
 80054e4:	54e7      	strb	r7, [r4, r3]
 80054e6:	2245      	movs	r2, #69	; 0x45
 80054e8:	5ca3      	ldrb	r3, [r4, r2]
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	3301      	adds	r3, #1
 80054ee:	d100      	bne.n	80054f2 <xQueueSemaphoreTake+0x6a>
 80054f0:	54a7      	strb	r7, [r4, r2]
 80054f2:	f7ff fc59 	bl	8004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	a901      	add	r1, sp, #4
 80054f8:	a802      	add	r0, sp, #8
 80054fa:	f000 fd3f 	bl	8005f7c <xTaskCheckForTimeOut>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d10d      	bne.n	800551e <xQueueSemaphoreTake+0x96>
	taskENTER_CRITICAL();
 8005502:	f7ff fc45 	bl	8004d90 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d021      	beq.n	8005550 <xQueueSemaphoreTake+0xc8>
	taskEXIT_CRITICAL();
 800550c:	f7ff fc4c 	bl	8004da8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005510:	0020      	movs	r0, r4
 8005512:	f7ff fd29 	bl	8004f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005516:	f000 fc81 	bl	8005e1c <xTaskResumeAll>
 800551a:	2601      	movs	r6, #1
 800551c:	e7cb      	b.n	80054b6 <xQueueSemaphoreTake+0x2e>
			prvUnlockQueue( pxQueue );
 800551e:	0020      	movs	r0, r4
 8005520:	f7ff fd22 	bl	8004f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005524:	f000 fc7a 	bl	8005e1c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005528:	f7ff fc32 	bl	8004d90 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800552c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d023      	beq.n	800557a <xQueueSemaphoreTake+0xf2>
	taskEXIT_CRITICAL();
 8005532:	f7ff fc39 	bl	8004da8 <vPortExitCritical>
	return xReturn;
 8005536:	2601      	movs	r6, #1
 8005538:	e7bd      	b.n	80054b6 <xQueueSemaphoreTake+0x2e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800553a:	a802      	add	r0, sp, #8
 800553c:	f000 fd12 	bl	8005f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005540:	e7c4      	b.n	80054cc <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005542:	9b01      	ldr	r3, [sp, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <xQueueSemaphoreTake+0xc4>
 8005548:	b672      	cpsid	i
 800554a:	e7fe      	b.n	800554a <xQueueSemaphoreTake+0xc2>
 800554c:	2500      	movs	r5, #0
 800554e:	e7af      	b.n	80054b0 <xQueueSemaphoreTake+0x28>
	taskEXIT_CRITICAL();
 8005550:	f7ff fc2a 	bl	8004da8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d034      	beq.n	80055c4 <xQueueSemaphoreTake+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800555a:	0020      	movs	r0, r4
 800555c:	9901      	ldr	r1, [sp, #4]
 800555e:	3024      	adds	r0, #36	; 0x24
 8005560:	f000 fc96 	bl	8005e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005564:	0020      	movs	r0, r4
 8005566:	f7ff fcff 	bl	8004f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800556a:	f000 fc57 	bl	8005e1c <xTaskResumeAll>
 800556e:	2800      	cmp	r0, #0
 8005570:	d1d3      	bne.n	800551a <xQueueSemaphoreTake+0x92>
					portYIELD_WITHIN_API();
 8005572:	f7ff fc01 	bl	8004d78 <vPortYield>
 8005576:	2601      	movs	r6, #1
 8005578:	e79d      	b.n	80054b6 <xQueueSemaphoreTake+0x2e>
	taskEXIT_CRITICAL();
 800557a:	f7ff fc15 	bl	8004da8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800557e:	2d00      	cmp	r5, #0
 8005580:	d110      	bne.n	80055a4 <xQueueSemaphoreTake+0x11c>
}
 8005582:	0028      	movs	r0, r5
 8005584:	b004      	add	sp, #16
 8005586:	bc80      	pop	{r7}
 8005588:	46b8      	mov	r8, r7
 800558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800558c:	3b01      	subs	r3, #1
 800558e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02f      	beq.n	80055f6 <xQueueSemaphoreTake+0x16e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d123      	bne.n	80055e4 <xQueueSemaphoreTake+0x15c>
				taskEXIT_CRITICAL();
 800559c:	f7ff fc04 	bl	8004da8 <vPortExitCritical>
				return pdPASS;
 80055a0:	2501      	movs	r5, #1
 80055a2:	e7ee      	b.n	8005582 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 80055a4:	f7ff fbf4 	bl	8004d90 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80055a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055aa:	2900      	cmp	r1, #0
 80055ac:	d003      	beq.n	80055b6 <xQueueSemaphoreTake+0x12e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80055ae:	2138      	movs	r1, #56	; 0x38
 80055b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055b6:	68a0      	ldr	r0, [r4, #8]
 80055b8:	f000 fda4 	bl	8006104 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80055bc:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80055be:	f7ff fbf3 	bl	8004da8 <vPortExitCritical>
 80055c2:	e7de      	b.n	8005582 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 80055c4:	f7ff fbe4 	bl	8004d90 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055c8:	68a0      	ldr	r0, [r4, #8]
 80055ca:	f000 fd23 	bl	8006014 <xTaskPriorityInherit>
 80055ce:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
 80055d0:	f7ff fbea 	bl	8004da8 <vPortExitCritical>
 80055d4:	e7c1      	b.n	800555a <xQueueSemaphoreTake+0xd2>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	d001      	beq.n	80055de <xQueueSemaphoreTake+0x156>
 80055da:	b672      	cpsid	i
 80055dc:	e7fe      	b.n	80055dc <xQueueSemaphoreTake+0x154>
					taskEXIT_CRITICAL();
 80055de:	f7ff fbe3 	bl	8004da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80055e2:	e7ce      	b.n	8005582 <xQueueSemaphoreTake+0xfa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e4:	0020      	movs	r0, r4
 80055e6:	3010      	adds	r0, #16
 80055e8:	f000 fc7c 	bl	8005ee4 <xTaskRemoveFromEventList>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d0d5      	beq.n	800559c <xQueueSemaphoreTake+0x114>
						queueYIELD_IF_USING_PREEMPTION();
 80055f0:	f7ff fbc2 	bl	8004d78 <vPortYield>
 80055f4:	e7d2      	b.n	800559c <xQueueSemaphoreTake+0x114>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055f6:	f000 fdc3 	bl	8006180 <pvTaskIncrementMutexHeldCount>
 80055fa:	60a0      	str	r0, [r4, #8]
 80055fc:	e7cb      	b.n	8005596 <xQueueSemaphoreTake+0x10e>
 80055fe:	46c0      	nop			; (mov r8, r8)

08005600 <vQueueDelete>:
{
 8005600:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8005602:	2800      	cmp	r0, #0
 8005604:	d01b      	beq.n	800563e <vQueueDelete+0x3e>
 8005606:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <vQueueDelete+0x44>)
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005608:	2300      	movs	r3, #0
 800560a:	0011      	movs	r1, r2
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800560c:	684c      	ldr	r4, [r1, #4]
 800560e:	42a0      	cmp	r0, r4
 8005610:	d00b      	beq.n	800562a <vQueueDelete+0x2a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005612:	3301      	adds	r3, #1
 8005614:	3108      	adds	r1, #8
 8005616:	2b08      	cmp	r3, #8
 8005618:	d1f8      	bne.n	800560c <vQueueDelete+0xc>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800561a:	2346      	movs	r3, #70	; 0x46
 800561c:	5cc3      	ldrb	r3, [r0, r3]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d000      	beq.n	8005624 <vQueueDelete+0x24>
}
 8005622:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 8005624:	f7ff faf8 	bl	8004c18 <vPortFree>
}
 8005628:	e7fb      	b.n	8005622 <vQueueDelete+0x22>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800562a:	2100      	movs	r1, #0
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	6059      	str	r1, [r3, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005634:	2346      	movs	r3, #70	; 0x46
 8005636:	5cc3      	ldrb	r3, [r0, r3]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f2      	bne.n	8005622 <vQueueDelete+0x22>
 800563c:	e7f2      	b.n	8005624 <vQueueDelete+0x24>
	configASSERT( pxQueue );
 800563e:	b672      	cpsid	i
 8005640:	e7fe      	b.n	8005640 <vQueueDelete+0x40>
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	200016a4 	.word	0x200016a4

08005648 <vQueueAddToRegistry>:
	{
 8005648:	b530      	push	{r4, r5, lr}
 800564a:	4c08      	ldr	r4, [pc, #32]	; (800566c <vQueueAddToRegistry+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800564c:	2300      	movs	r3, #0
 800564e:	0022      	movs	r2, r4
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005650:	6815      	ldr	r5, [r2, #0]
 8005652:	2d00      	cmp	r5, #0
 8005654:	d004      	beq.n	8005660 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005656:	3301      	adds	r3, #1
 8005658:	3208      	adds	r2, #8
 800565a:	2b08      	cmp	r3, #8
 800565c:	d1f8      	bne.n	8005650 <vQueueAddToRegistry+0x8>
	}
 800565e:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	50e1      	str	r1, [r4, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005664:	18e3      	adds	r3, r4, r3
 8005666:	6058      	str	r0, [r3, #4]
				break;
 8005668:	e7f9      	b.n	800565e <vQueueAddToRegistry+0x16>
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	200016a4 	.word	0x200016a4

08005670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	0004      	movs	r4, r0
 8005674:	0016      	movs	r6, r2
 8005676:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005678:	f7ff fb8a 	bl	8004d90 <vPortEnterCritical>
 800567c:	2244      	movs	r2, #68	; 0x44
 800567e:	5ca3      	ldrb	r3, [r4, r2]
 8005680:	b25b      	sxtb	r3, r3
 8005682:	3301      	adds	r3, #1
 8005684:	d101      	bne.n	800568a <vQueueWaitForMessageRestricted+0x1a>
 8005686:	2300      	movs	r3, #0
 8005688:	54a3      	strb	r3, [r4, r2]
 800568a:	2245      	movs	r2, #69	; 0x45
 800568c:	5ca3      	ldrb	r3, [r4, r2]
 800568e:	b25b      	sxtb	r3, r3
 8005690:	3301      	adds	r3, #1
 8005692:	d101      	bne.n	8005698 <vQueueWaitForMessageRestricted+0x28>
 8005694:	2300      	movs	r3, #0
 8005696:	54a3      	strb	r3, [r4, r2]
 8005698:	f7ff fb86 	bl	8004da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800569c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056a2:	0020      	movs	r0, r4
 80056a4:	f7ff fc60 	bl	8004f68 <prvUnlockQueue>
	}
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056aa:	0020      	movs	r0, r4
 80056ac:	0032      	movs	r2, r6
 80056ae:	0029      	movs	r1, r5
 80056b0:	3024      	adds	r0, #36	; 0x24
 80056b2:	f000 fbff 	bl	8005eb4 <vTaskPlaceOnEventListRestricted>
 80056b6:	e7f4      	b.n	80056a2 <vQueueWaitForMessageRestricted+0x32>

080056b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	46c6      	mov	lr, r8
 80056bc:	b500      	push	{lr}
 80056be:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056c0:	f7ff fb66 	bl	8004d90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056c4:	4a32      	ldr	r2, [pc, #200]	; (8005790 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 80056c6:	4e33      	ldr	r6, [pc, #204]	; (8005794 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056ce:	6833      	ldr	r3, [r6, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02b      	beq.n	800572c <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056d4:	4f30      	ldr	r7, [pc, #192]	; (8005798 <prvAddNewTaskToReadyList+0xe0>)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01f      	beq.n	800571c <prvAddNewTaskToReadyList+0x64>
 80056dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056de:	4d2f      	ldr	r5, [pc, #188]	; (800579c <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056e0:	492f      	ldr	r1, [pc, #188]	; (80057a0 <prvAddNewTaskToReadyList+0xe8>)
 80056e2:	680b      	ldr	r3, [r1, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	600b      	str	r3, [r1, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056e8:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056ea:	4b2e      	ldr	r3, [pc, #184]	; (80057a4 <prvAddNewTaskToReadyList+0xec>)
 80056ec:	6819      	ldr	r1, [r3, #0]
 80056ee:	4291      	cmp	r1, r2
 80056f0:	d200      	bcs.n	80056f4 <prvAddNewTaskToReadyList+0x3c>
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	0090      	lsls	r0, r2, #2
 80056f6:	1880      	adds	r0, r0, r2
 80056f8:	0080      	lsls	r0, r0, #2
 80056fa:	1d21      	adds	r1, r4, #4
 80056fc:	1828      	adds	r0, r5, r0
 80056fe:	f7ff fac5 	bl	8004c8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005702:	f7ff fb51 	bl	8004da8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <prvAddNewTaskToReadyList+0x5e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d312      	bcc.n	800573c <prvAddNewTaskToReadyList+0x84>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005716:	bc80      	pop	{r7}
 8005718:	46b8      	mov	r8, r7
 800571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4293      	cmp	r3, r2
 8005724:	d800      	bhi.n	8005728 <prvAddNewTaskToReadyList+0x70>
					pxCurrentTCB = pxNewTCB;
 8005726:	6034      	str	r4, [r6, #0]
 8005728:	4d1c      	ldr	r5, [pc, #112]	; (800579c <prvAddNewTaskToReadyList+0xe4>)
 800572a:	e7d9      	b.n	80056e0 <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 800572c:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d006      	beq.n	8005742 <prvAddNewTaskToReadyList+0x8a>
 8005734:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005736:	4d19      	ldr	r5, [pc, #100]	; (800579c <prvAddNewTaskToReadyList+0xe4>)
 8005738:	4f17      	ldr	r7, [pc, #92]	; (8005798 <prvAddNewTaskToReadyList+0xe0>)
 800573a:	e7d1      	b.n	80056e0 <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 800573c:	f7ff fb1c 	bl	8004d78 <vPortYield>
}
 8005740:	e7e9      	b.n	8005716 <prvAddNewTaskToReadyList+0x5e>
 8005742:	238c      	movs	r3, #140	; 0x8c
 8005744:	4d15      	ldr	r5, [pc, #84]	; (800579c <prvAddNewTaskToReadyList+0xe4>)
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4698      	mov	r8, r3
 800574a:	002f      	movs	r7, r5
 800574c:	44a8      	add	r8, r5
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800574e:	0038      	movs	r0, r7
 8005750:	3714      	adds	r7, #20
 8005752:	f7ff fa8b 	bl	8004c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005756:	45b8      	cmp	r8, r7
 8005758:	d1f9      	bne.n	800574e <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <prvAddNewTaskToReadyList+0xf0>)
 800575c:	4698      	mov	r8, r3
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff fa84 	bl	8004c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005764:	4f11      	ldr	r7, [pc, #68]	; (80057ac <prvAddNewTaskToReadyList+0xf4>)
 8005766:	0038      	movs	r0, r7
 8005768:	f7ff fa80 	bl	8004c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800576c:	4810      	ldr	r0, [pc, #64]	; (80057b0 <prvAddNewTaskToReadyList+0xf8>)
 800576e:	f7ff fa7d 	bl	8004c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005772:	4810      	ldr	r0, [pc, #64]	; (80057b4 <prvAddNewTaskToReadyList+0xfc>)
 8005774:	f7ff fa7a 	bl	8004c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005778:	480f      	ldr	r0, [pc, #60]	; (80057b8 <prvAddNewTaskToReadyList+0x100>)
 800577a:	f7ff fa77 	bl	8004c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800577e:	4642      	mov	r2, r8
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <prvAddNewTaskToReadyList+0x104>)
 8005782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005784:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <prvAddNewTaskToReadyList+0x108>)
 8005786:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005788:	601f      	str	r7, [r3, #0]
 800578a:	4f03      	ldr	r7, [pc, #12]	; (8005798 <prvAddNewTaskToReadyList+0xe0>)
}
 800578c:	e7a8      	b.n	80056e0 <prvAddNewTaskToReadyList+0x28>
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	20000e9c 	.word	0x20000e9c
 8005794:	20000a30 	.word	0x20000a30
 8005798:	20000ef8 	.word	0x20000ef8
 800579c:	20000a3c 	.word	0x20000a3c
 80057a0:	20000ea8 	.word	0x20000ea8
 80057a4:	20000eac 	.word	0x20000eac
 80057a8:	20000eb0 	.word	0x20000eb0
 80057ac:	20000ec4 	.word	0x20000ec4
 80057b0:	20000ee4 	.word	0x20000ee4
 80057b4:	20000f10 	.word	0x20000f10
 80057b8:	20000efc 	.word	0x20000efc
 80057bc:	20000a34 	.word	0x20000a34
 80057c0:	20000a38 	.word	0x20000a38

080057c4 <prvResetNextTaskUnblockTime.part.0>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <prvResetNextTaskUnblockTime.part.0+0x10>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <prvResetNextTaskUnblockTime.part.0+0x14>)
 80057d0:	601a      	str	r2, [r3, #0]
	}
}
 80057d2:	4770      	bx	lr
 80057d4:	20000a34 	.word	0x20000a34
 80057d8:	20000ed8 	.word	0x20000ed8

080057dc <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	464f      	mov	r7, r9
 80057e0:	46d6      	mov	lr, sl
 80057e2:	b580      	push	{r7, lr}
 80057e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057e6:	0097      	lsls	r7, r2, #2
 80057e8:	003a      	movs	r2, r7
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80057ea:	0006      	movs	r6, r0
 80057ec:	000d      	movs	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057f0:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80057f2:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f4:	f001 f83f 	bl	8006876 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057fa:	3f04      	subs	r7, #4
 80057fc:	469c      	mov	ip, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057fe:	2307      	movs	r3, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005800:	4467      	add	r7, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005802:	439f      	bics	r7, r3
	if( pcName != NULL )
 8005804:	2d00      	cmp	r5, #0
 8005806:	d041      	beq.n	800588c <prvInitialiseNewTask.isra.0+0xb0>
 8005808:	0020      	movs	r0, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800580a:	2200      	movs	r2, #0
 800580c:	3034      	adds	r0, #52	; 0x34
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800580e:	5cab      	ldrb	r3, [r5, r2]
 8005810:	5483      	strb	r3, [r0, r2]
			if( pcName[ x ] == ( char ) 0x00 )
 8005812:	5ca9      	ldrb	r1, [r5, r2]
 8005814:	2900      	cmp	r1, #0
 8005816:	d002      	beq.n	800581e <prvInitialiseNewTask.isra.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005818:	3201      	adds	r2, #1
 800581a:	2a10      	cmp	r2, #16
 800581c:	d1f7      	bne.n	800580e <prvInitialiseNewTask.isra.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800581e:	2343      	movs	r3, #67	; 0x43
 8005820:	2200      	movs	r2, #0
 8005822:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005824:	9d08      	ldr	r5, [sp, #32]
 8005826:	2d37      	cmp	r5, #55	; 0x37
 8005828:	d900      	bls.n	800582c <prvInitialiseNewTask.isra.0+0x50>
 800582a:	2537      	movs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800582c:	2300      	movs	r3, #0
	pxNewTCB->uxPriority = uxPriority;
 800582e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8005830:	6523      	str	r3, [r4, #80]	; 0x50
		pxNewTCB->uxBasePriority = uxPriority;
 8005832:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005834:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8005836:	469a      	mov	sl, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005838:	f7ff fa24 	bl	8004c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800583c:	0020      	movs	r0, r4
 800583e:	3018      	adds	r0, #24
 8005840:	f7ff fa20 	bl	8004c84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005844:	2338      	movs	r3, #56	; 0x38
		pxNewTCB->ulNotifiedValue = 0;
 8005846:	4652      	mov	r2, sl
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005848:	0020      	movs	r0, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584a:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 800584c:	337c      	adds	r3, #124	; 0x7c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005850:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005852:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005854:	50e2      	str	r2, [r4, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005856:	3304      	adds	r3, #4
 8005858:	54e2      	strb	r2, [r4, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800585a:	2100      	movs	r1, #0
 800585c:	3260      	adds	r2, #96	; 0x60
 800585e:	3054      	adds	r0, #84	; 0x54
 8005860:	f001 f809 	bl	8006876 <memset>
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <prvInitialiseNewTask.isra.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005866:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005868:	65a3      	str	r3, [r4, #88]	; 0x58
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <prvInitialiseNewTask.isra.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800586c:	0031      	movs	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800586e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <prvInitialiseNewTask.isra.0+0xc0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005872:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005874:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005876:	f7ff fa6d 	bl	8004d54 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800587c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800587e:	2b00      	cmp	r3, #0
 8005880:	d000      	beq.n	8005884 <prvInitialiseNewTask.isra.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005882:	601c      	str	r4, [r3, #0]
}
 8005884:	bcc0      	pop	{r6, r7}
 8005886:	46ba      	mov	sl, r7
 8005888:	46b1      	mov	r9, r6
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800588c:	2334      	movs	r3, #52	; 0x34
 800588e:	54e5      	strb	r5, [r4, r3]
 8005890:	e7c8      	b.n	8005824 <prvInitialiseNewTask.isra.0+0x48>
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	08006d24 	.word	0x08006d24
 8005898:	08006d44 	.word	0x08006d44
 800589c:	08006d04 	.word	0x08006d04

080058a0 <prvDeleteTCB>:
	{
 80058a0:	b510      	push	{r4, lr}
 80058a2:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058a4:	3054      	adds	r0, #84	; 0x54
 80058a6:	f000 fffb 	bl	80068a0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058aa:	23b9      	movs	r3, #185	; 0xb9
 80058ac:	5ce3      	ldrb	r3, [r4, r3]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <prvDeleteTCB+0x1e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d00a      	beq.n	80058cc <prvDeleteTCB+0x2c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d007      	beq.n	80058ca <prvDeleteTCB+0x2a>
 80058ba:	b672      	cpsid	i
 80058bc:	e7fe      	b.n	80058bc <prvDeleteTCB+0x1c>
				vPortFree( pxTCB->pxStack );
 80058be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058c0:	f7ff f9aa 	bl	8004c18 <vPortFree>
				vPortFree( pxTCB );
 80058c4:	0020      	movs	r0, r4
 80058c6:	f7ff f9a7 	bl	8004c18 <vPortFree>
	}
 80058ca:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80058cc:	0020      	movs	r0, r4
 80058ce:	f7ff f9a3 	bl	8004c18 <vPortFree>
 80058d2:	e7fa      	b.n	80058ca <prvDeleteTCB+0x2a>

080058d4 <prvIdleTask>:
{
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d6:	46c6      	mov	lr, r8
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <prvIdleTask+0x4c>)
 80058da:	b500      	push	{lr}
 80058dc:	4698      	mov	r8, r3
 80058de:	4c11      	ldr	r4, [pc, #68]	; (8005924 <prvIdleTask+0x50>)
 80058e0:	4e11      	ldr	r6, [pc, #68]	; (8005928 <prvIdleTask+0x54>)
 80058e2:	4f12      	ldr	r7, [pc, #72]	; (800592c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e4:	e012      	b.n	800590c <prvIdleTask+0x38>
			taskENTER_CRITICAL();
 80058e6:	f7ff fa53 	bl	8004d90 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ea:	4643      	mov	r3, r8
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f0:	1d28      	adds	r0, r5, #4
 80058f2:	f7ff f9ef 	bl	8004cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058f6:	6833      	ldr	r3, [r6, #0]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	3b01      	subs	r3, #1
 8005900:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005902:	f7ff fa51 	bl	8004da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005906:	0028      	movs	r0, r5
 8005908:	f7ff ffca 	bl	80058a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e9      	bne.n	80058e6 <prvIdleTask+0x12>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d9f9      	bls.n	800590c <prvIdleTask+0x38>
				taskYIELD();
 8005918:	f7ff fa2e 	bl	8004d78 <vPortYield>
 800591c:	e7f6      	b.n	800590c <prvIdleTask+0x38>
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	20000f10 	.word	0x20000f10
 8005924:	20000ea0 	.word	0x20000ea0
 8005928:	20000e9c 	.word	0x20000e9c
 800592c:	20000a3c 	.word	0x20000a3c

08005930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005936:	4d15      	ldr	r5, [pc, #84]	; (800598c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8005938:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593a:	6828      	ldr	r0, [r5, #0]
{
 800593c:	000e      	movs	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593e:	3004      	adds	r0, #4
 8005940:	f7ff f9c8 	bl	8004cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005944:	1c63      	adds	r3, r4, #1
 8005946:	d017      	beq.n	8005978 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005948:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800594a:	193c      	adds	r4, r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800594c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800594e:	42a7      	cmp	r7, r4
 8005950:	d80b      	bhi.n	800596a <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <prvAddCurrentTaskToDelayedList+0x60>)
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	6829      	ldr	r1, [r5, #0]
 8005958:	3104      	adds	r1, #4
 800595a:	f7ff f9a3 	bl	8004ca4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <prvAddCurrentTaskToDelayedList+0x64>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	42a2      	cmp	r2, r4
 8005964:	d900      	bls.n	8005968 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005966:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <prvAddCurrentTaskToDelayedList+0x68>)
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	6829      	ldr	r1, [r5, #0]
 8005970:	3104      	adds	r1, #4
 8005972:	f7ff f997 	bl	8004ca4 <vListInsert>
 8005976:	e7f7      	b.n	8005968 <prvAddCurrentTaskToDelayedList+0x38>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005978:	2e00      	cmp	r6, #0
 800597a:	d0e5      	beq.n	8005948 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597c:	6829      	ldr	r1, [r5, #0]
 800597e:	4807      	ldr	r0, [pc, #28]	; (800599c <prvAddCurrentTaskToDelayedList+0x6c>)
 8005980:	3104      	adds	r1, #4
 8005982:	f7ff f983 	bl	8004c8c <vListInsertEnd>
}
 8005986:	e7ef      	b.n	8005968 <prvAddCurrentTaskToDelayedList+0x38>
 8005988:	20000f24 	.word	0x20000f24
 800598c:	20000a30 	.word	0x20000a30
 8005990:	20000a34 	.word	0x20000a34
 8005994:	20000ed8 	.word	0x20000ed8
 8005998:	20000a38 	.word	0x20000a38
 800599c:	20000efc 	.word	0x20000efc

080059a0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	464e      	mov	r6, r9
 80059a4:	46de      	mov	lr, fp
 80059a6:	4657      	mov	r7, sl
 80059a8:	4645      	mov	r5, r8
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059aa:	4b44      	ldr	r3, [pc, #272]	; (8005abc <xTaskIncrementTick.part.0+0x11c>)
BaseType_t xTaskIncrementTick( void )
 80059ac:	b5e0      	push	{r5, r6, r7, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059ae:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 80059b0:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80059b4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	d115      	bne.n	80059e6 <xTaskIncrementTick.part.0+0x46>
			taskSWITCH_DELAYED_LISTS();
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <xTaskIncrementTick.part.0+0x120>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	d001      	beq.n	80059c8 <xTaskIncrementTick.part.0+0x28>
 80059c4:	b672      	cpsid	i
 80059c6:	e7fe      	b.n	80059c6 <xTaskIncrementTick.part.0+0x26>
 80059c8:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <xTaskIncrementTick.part.0+0x124>)
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	6810      	ldr	r0, [r2, #0]
 80059ce:	6018      	str	r0, [r3, #0]
 80059d0:	6011      	str	r1, [r2, #0]
 80059d2:	493d      	ldr	r1, [pc, #244]	; (8005ac8 <xTaskIncrementTick.part.0+0x128>)
 80059d4:	680a      	ldr	r2, [r1, #0]
 80059d6:	3201      	adds	r2, #1
 80059d8:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d05f      	beq.n	8005aa2 <xTaskIncrementTick.part.0+0x102>
 80059e2:	f7ff feef 	bl	80057c4 <prvResetNextTaskUnblockTime.part.0>
 80059e6:	4d39      	ldr	r5, [pc, #228]	; (8005acc <xTaskIncrementTick.part.0+0x12c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	429e      	cmp	r6, r3
 80059ec:	d33c      	bcc.n	8005a68 <xTaskIncrementTick.part.0+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ee:	4b34      	ldr	r3, [pc, #208]	; (8005ac0 <xTaskIncrementTick.part.0+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80059f0:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f2:	469a      	mov	sl, r3
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d056      	beq.n	8005aaa <xTaskIncrementTick.part.0+0x10a>
 80059fc:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <xTaskIncrementTick.part.0+0x130>)
 80059fe:	4698      	mov	r8, r3
 8005a00:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <xTaskIncrementTick.part.0+0x134>)
 8005a02:	4699      	mov	r9, r3
					prvAddTaskToReadyList( pxTCB );
 8005a04:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <xTaskIncrementTick.part.0+0x138>)
 8005a06:	469b      	mov	fp, r3
 8005a08:	e025      	b.n	8005a56 <xTaskIncrementTick.part.0+0xb6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	f7ff f960 	bl	8004cd4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <xTaskIncrementTick.part.0+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a1a:	0038      	movs	r0, r7
 8005a1c:	3018      	adds	r0, #24
 8005a1e:	f7ff f959 	bl	8004cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a22:	465a      	mov	r2, fp
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <xTaskIncrementTick.part.0+0x90>
 8005a2c:	465a      	mov	r2, fp
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	0098      	lsls	r0, r3, #2
 8005a32:	18c0      	adds	r0, r0, r3
 8005a34:	0080      	lsls	r0, r0, #2
 8005a36:	9901      	ldr	r1, [sp, #4]
 8005a38:	4440      	add	r0, r8
 8005a3a:	f7ff f927 	bl	8004c8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a3e:	464b      	mov	r3, r9
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d300      	bcc.n	8005a4c <xTaskIncrementTick.part.0+0xac>
							xSwitchRequired = pdTRUE;
 8005a4a:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4c:	4653      	mov	r3, sl
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02d      	beq.n	8005ab2 <xTaskIncrementTick.part.0+0x112>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a56:	4653      	mov	r3, sl
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
					if( xConstTickCount < xItemValue )
 8005a60:	429e      	cmp	r6, r3
 8005a62:	d2d2      	bcs.n	8005a0a <xTaskIncrementTick.part.0+0x6a>
						xNextTaskUnblockTime = xItemValue;
 8005a64:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a66:	e004      	b.n	8005a72 <xTaskIncrementTick.part.0+0xd2>
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <xTaskIncrementTick.part.0+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 8005a6a:	2400      	movs	r4, #0
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <xTaskIncrementTick.part.0+0x134>)
 8005a70:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a72:	464b      	mov	r3, r9
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	0093      	lsls	r3, r2, #2
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	58d3      	ldr	r3, [r2, r3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d900      	bls.n	8005a88 <xTaskIncrementTick.part.0+0xe8>
				xSwitchRequired = pdTRUE;
 8005a86:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <xTaskIncrementTick.part.0+0x13c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d000      	beq.n	8005a92 <xTaskIncrementTick.part.0+0xf2>
				xSwitchRequired = pdTRUE;
 8005a90:	2401      	movs	r4, #1
}
 8005a92:	0020      	movs	r0, r4
 8005a94:	b003      	add	sp, #12
 8005a96:	bcf0      	pop	{r4, r5, r6, r7}
 8005a98:	46bb      	mov	fp, r7
 8005a9a:	46b2      	mov	sl, r6
 8005a9c:	46a9      	mov	r9, r5
 8005a9e:	46a0      	mov	r8, r4
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aa2:	4d0a      	ldr	r5, [pc, #40]	; (8005acc <xTaskIncrementTick.part.0+0x12c>)
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	e79e      	b.n	80059e8 <xTaskIncrementTick.part.0+0x48>
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <xTaskIncrementTick.part.0+0x130>)
 8005aac:	4698      	mov	r8, r3
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <xTaskIncrementTick.part.0+0x134>)
 8005ab0:	4699      	mov	r9, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	602b      	str	r3, [r5, #0]
					break;
 8005ab8:	e7db      	b.n	8005a72 <xTaskIncrementTick.part.0+0xd2>
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	20000f24 	.word	0x20000f24
 8005ac0:	20000a34 	.word	0x20000a34
 8005ac4:	20000a38 	.word	0x20000a38
 8005ac8:	20000edc 	.word	0x20000edc
 8005acc:	20000ed8 	.word	0x20000ed8
 8005ad0:	20000a3c 	.word	0x20000a3c
 8005ad4:	20000a30 	.word	0x20000a30
 8005ad8:	20000eac 	.word	0x20000eac
 8005adc:	20000f28 	.word	0x20000f28

08005ae0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	46de      	mov	lr, fp
 8005ae4:	464e      	mov	r6, r9
 8005ae6:	4657      	mov	r7, sl
 8005ae8:	4645      	mov	r5, r8
 8005aea:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 8005aec:	f7ff f950 	bl	8004d90 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005af0:	4e3a      	ldr	r6, [pc, #232]	; (8005bdc <xTaskResumeAll.part.0+0xfc>)
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	6033      	str	r3, [r6, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af8:	6833      	ldr	r3, [r6, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d15b      	bne.n	8005bb6 <xTaskResumeAll.part.0+0xd6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <xTaskResumeAll.part.0+0x100>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d057      	beq.n	8005bb6 <xTaskResumeAll.part.0+0xd6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b06:	4f37      	ldr	r7, [pc, #220]	; (8005be4 <xTaskResumeAll.part.0+0x104>)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d062      	beq.n	8005bd4 <xTaskResumeAll.part.0+0xf4>
 8005b0e:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <xTaskResumeAll.part.0+0x108>)
 8005b10:	4698      	mov	r8, r3
 8005b12:	4b36      	ldr	r3, [pc, #216]	; (8005bec <xTaskResumeAll.part.0+0x10c>)
 8005b14:	469a      	mov	sl, r3
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <xTaskResumeAll.part.0+0x110>)
 8005b18:	4699      	mov	r9, r3
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <xTaskResumeAll.part.0+0x114>)
 8005b1c:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b22:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b24:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b26:	3018      	adds	r0, #24
 8005b28:	f7ff f8d4 	bl	8004cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f7ff f8d1 	bl	8004cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b32:	4642      	mov	r2, r8
 8005b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <xTaskResumeAll.part.0+0x60>
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	0098      	lsls	r0, r3, #2
 8005b42:	18c0      	adds	r0, r0, r3
 8005b44:	0080      	lsls	r0, r0, #2
 8005b46:	0029      	movs	r1, r5
 8005b48:	4450      	add	r0, sl
 8005b4a:	f7ff f89f 	bl	8004c8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b4e:	464b      	mov	r3, r9
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <xTaskResumeAll.part.0+0x80>
						xYieldPending = pdTRUE;
 8005b5a:	465b      	mov	r3, fp
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1db      	bne.n	8005b1e <xTaskResumeAll.part.0+0x3e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <xTaskResumeAll.part.0+0x118>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02c      	beq.n	8005bca <xTaskResumeAll.part.0+0xea>
 8005b70:	f7ff fe28 	bl	80057c4 <prvResetNextTaskUnblockTime.part.0>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b74:	4d21      	ldr	r5, [pc, #132]	; (8005bfc <xTaskResumeAll.part.0+0x11c>)
 8005b76:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	d014      	beq.n	8005ba6 <xTaskResumeAll.part.0+0xc6>
								xYieldPending = pdTRUE;
 8005b7c:	2701      	movs	r7, #1
 8005b7e:	e008      	b.n	8005b92 <xTaskResumeAll.part.0+0xb2>
 8005b80:	f7ff ff0e 	bl	80059a0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d001      	beq.n	8005b8c <xTaskResumeAll.part.0+0xac>
								xYieldPending = pdTRUE;
 8005b88:	465b      	mov	r3, fp
 8005b8a:	601f      	str	r7, [r3, #0]
							--xPendedCounts;
 8005b8c:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b8e:	2c00      	cmp	r4, #0
 8005b90:	d008      	beq.n	8005ba4 <xTaskResumeAll.part.0+0xc4>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b92:	6833      	ldr	r3, [r6, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f3      	beq.n	8005b80 <xTaskResumeAll.part.0+0xa0>
		++xPendedTicks;
 8005b98:	682b      	ldr	r3, [r5, #0]
							--xPendedCounts;
 8005b9a:	3c01      	subs	r4, #1
		++xPendedTicks;
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	602b      	str	r3, [r5, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f6      	bne.n	8005b92 <xTaskResumeAll.part.0+0xb2>
						xPendedTicks = 0;
 8005ba4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <xTaskResumeAll.part.0+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8005bae:	f7ff f8e3 	bl	8004d78 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8005bb2:	2401      	movs	r4, #1
 8005bb4:	e000      	b.n	8005bb8 <xTaskResumeAll.part.0+0xd8>
BaseType_t xAlreadyYielded = pdFALSE;
 8005bb6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005bb8:	f7ff f8f6 	bl	8004da8 <vPortExitCritical>
}
 8005bbc:	0020      	movs	r0, r4
 8005bbe:	bcf0      	pop	{r4, r5, r6, r7}
 8005bc0:	46bb      	mov	fp, r7
 8005bc2:	46b2      	mov	sl, r6
 8005bc4:	46a9      	mov	r9, r5
 8005bc6:	46a0      	mov	r8, r4
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <xTaskResumeAll.part.0+0x120>)
 8005bce:	4252      	negs	r2, r2
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e7cf      	b.n	8005b74 <xTaskResumeAll.part.0+0x94>
 8005bd4:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <xTaskResumeAll.part.0+0x114>)
 8005bd6:	469b      	mov	fp, r3
 8005bd8:	e7cc      	b.n	8005b74 <xTaskResumeAll.part.0+0x94>
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	20000ea4 	.word	0x20000ea4
 8005be0:	20000e9c 	.word	0x20000e9c
 8005be4:	20000ee4 	.word	0x20000ee4
 8005be8:	20000eac 	.word	0x20000eac
 8005bec:	20000a3c 	.word	0x20000a3c
 8005bf0:	20000a30 	.word	0x20000a30
 8005bf4:	20000f28 	.word	0x20000f28
 8005bf8:	20000a34 	.word	0x20000a34
 8005bfc:	20000ee0 	.word	0x20000ee0
 8005c00:	20000ed8 	.word	0x20000ed8

08005c04 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8005c04:	2200      	movs	r2, #0
 8005c06:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <vTaskSwitchContext.part.0+0x54>)
void vTaskSwitchContext( void )
 8005c08:	b530      	push	{r4, r5, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0a:	4d14      	ldr	r5, [pc, #80]	; (8005c5c <vTaskSwitchContext.part.0+0x58>)
		xYieldPending = pdFALSE;
 8005c0c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0e:	682a      	ldr	r2, [r5, #0]
 8005c10:	4813      	ldr	r0, [pc, #76]	; (8005c60 <vTaskSwitchContext.part.0+0x5c>)
 8005c12:	e002      	b.n	8005c1a <vTaskSwitchContext.part.0+0x16>
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	d019      	beq.n	8005c4c <vTaskSwitchContext.part.0+0x48>
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	0093      	lsls	r3, r2, #2
 8005c1c:	1899      	adds	r1, r3, r2
 8005c1e:	0089      	lsls	r1, r1, #2
 8005c20:	5841      	ldr	r1, [r0, r1]
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d0f6      	beq.n	8005c14 <vTaskSwitchContext.part.0+0x10>
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18c4      	adds	r4, r0, r3
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	18c3      	adds	r3, r0, r3
 8005c34:	6061      	str	r1, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	d00a      	beq.n	8005c50 <vTaskSwitchContext.part.0+0x4c>
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <vTaskSwitchContext.part.0+0x60>)
 8005c3c:	68c9      	ldr	r1, [r1, #12]
 8005c3e:	6019      	str	r1, [r3, #0]
 8005c40:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <vTaskSwitchContext.part.0+0x64>)
 8005c46:	3354      	adds	r3, #84	; 0x54
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4c:	b672      	cpsid	i
 8005c4e:	e7fe      	b.n	8005c4e <vTaskSwitchContext.part.0+0x4a>
 8005c50:	6849      	ldr	r1, [r1, #4]
 8005c52:	6061      	str	r1, [r4, #4]
 8005c54:	e7f1      	b.n	8005c3a <vTaskSwitchContext.part.0+0x36>
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000f28 	.word	0x20000f28
 8005c5c:	20000eac 	.word	0x20000eac
 8005c60:	20000a3c 	.word	0x20000a3c
 8005c64:	20000a30 	.word	0x20000a30
 8005c68:	20000010 	.word	0x20000010

08005c6c <xTaskCreateStatic>:
	{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	d00a      	beq.n	8005c8e <xTaskCreateStatic+0x22>
		configASSERT( pxTaskBuffer != NULL );
 8005c78:	2c00      	cmp	r4, #0
 8005c7a:	d006      	beq.n	8005c8a <xTaskCreateStatic+0x1e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c7c:	25bc      	movs	r5, #188	; 0xbc
 8005c7e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c80:	9d05      	ldr	r5, [sp, #20]
 8005c82:	2dbc      	cmp	r5, #188	; 0xbc
 8005c84:	d005      	beq.n	8005c92 <xTaskCreateStatic+0x26>
 8005c86:	b672      	cpsid	i
 8005c88:	e7fe      	b.n	8005c88 <xTaskCreateStatic+0x1c>
		configASSERT( pxTaskBuffer != NULL );
 8005c8a:	b672      	cpsid	i
 8005c8c:	e7fe      	b.n	8005c8c <xTaskCreateStatic+0x20>
		configASSERT( puxStackBuffer != NULL );
 8005c8e:	b672      	cpsid	i
 8005c90:	e7fe      	b.n	8005c90 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c92:	6326      	str	r6, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c94:	9d05      	ldr	r5, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c96:	2602      	movs	r6, #2
 8005c98:	25b9      	movs	r5, #185	; 0xb9
 8005c9a:	5566      	strb	r6, [r4, r5]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c9c:	ad04      	add	r5, sp, #16
 8005c9e:	9501      	str	r5, [sp, #4]
 8005ca0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ca2:	9402      	str	r4, [sp, #8]
 8005ca4:	9500      	str	r5, [sp, #0]
 8005ca6:	f7ff fd99 	bl	80057dc <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005caa:	0020      	movs	r0, r4
 8005cac:	f7ff fd04 	bl	80056b8 <prvAddNewTaskToReadyList>
	}
 8005cb0:	9804      	ldr	r0, [sp, #16]
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)

08005cb8 <xTaskCreate>:
	{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	46ce      	mov	lr, r9
 8005cbc:	4647      	mov	r7, r8
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	0007      	movs	r7, r0
 8005cc2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cc4:	0090      	lsls	r0, r2, #2
	{
 8005cc6:	4688      	mov	r8, r1
 8005cc8:	0015      	movs	r5, r2
 8005cca:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ccc:	f7fe ff16 	bl	8004afc <pvPortMalloc>
 8005cd0:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 8005cd2:	d01c      	beq.n	8005d0e <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cd4:	20bc      	movs	r0, #188	; 0xbc
 8005cd6:	f7fe ff11 	bl	8004afc <pvPortMalloc>
 8005cda:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 8005cdc:	d01a      	beq.n	8005d14 <xTaskCreate+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cde:	23b9      	movs	r3, #185	; 0xb9
 8005ce0:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 8005ce2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce4:	54c2      	strb	r2, [r0, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce8:	002a      	movs	r2, r5
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cee:	4641      	mov	r1, r8
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	0038      	movs	r0, r7
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	f7ff fd70 	bl	80057dc <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cfc:	0030      	movs	r0, r6
 8005cfe:	f7ff fcdb 	bl	80056b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d02:	2001      	movs	r0, #1
	}
 8005d04:	b005      	add	sp, #20
 8005d06:	bcc0      	pop	{r6, r7}
 8005d08:	46b9      	mov	r9, r7
 8005d0a:	46b0      	mov	r8, r6
 8005d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d0e:	2001      	movs	r0, #1
 8005d10:	4240      	negs	r0, r0
		return xReturn;
 8005d12:	e7f7      	b.n	8005d04 <xTaskCreate+0x4c>
					vPortFree( pxStack );
 8005d14:	0020      	movs	r0, r4
 8005d16:	f7fe ff7f 	bl	8004c18 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	4240      	negs	r0, r0
 8005d1e:	e7f1      	b.n	8005d04 <xTaskCreate+0x4c>

08005d20 <vTaskDelay>:
	{
 8005d20:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d012      	beq.n	8005d4c <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8005d26:	4c0c      	ldr	r4, [pc, #48]	; (8005d58 <vTaskDelay+0x38>)
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <vTaskDelay+0x12>
 8005d2e:	b672      	cpsid	i
 8005d30:	e7fe      	b.n	8005d30 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f7ff fdf9 	bl	8005930 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <vTaskDelay+0x32>
 8005d44:	f7ff fecc 	bl	8005ae0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d101      	bne.n	8005d50 <vTaskDelay+0x30>
			portYIELD_WITHIN_API();
 8005d4c:	f7ff f814 	bl	8004d78 <vPortYield>
	}
 8005d50:	bd10      	pop	{r4, pc}
	configASSERT( uxSchedulerSuspended );
 8005d52:	b672      	cpsid	i
 8005d54:	e7fe      	b.n	8005d54 <vTaskDelay+0x34>
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	20000ea4 	.word	0x20000ea4

08005d5c <vTaskStartScheduler>:
{
 8005d5c:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d5e:	2500      	movs	r5, #0
{
 8005d60:	b08b      	sub	sp, #44	; 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d62:	aa07      	add	r2, sp, #28
 8005d64:	a906      	add	r1, sp, #24
 8005d66:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d68:	9505      	str	r5, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d6a:	9506      	str	r5, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d6c:	f7fe fe86 	bl	8004a7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d70:	9b06      	ldr	r3, [sp, #24]
		configASSERT( puxStackBuffer != NULL );
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <vTaskStartScheduler+0x34>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d76:	9c05      	ldr	r4, [sp, #20]
		configASSERT( pxTaskBuffer != NULL );
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d007      	beq.n	8005d8c <vTaskStartScheduler+0x30>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d7c:	21bc      	movs	r1, #188	; 0xbc
 8005d7e:	9109      	str	r1, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d80:	9909      	ldr	r1, [sp, #36]	; 0x24
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d82:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d84:	29bc      	cmp	r1, #188	; 0xbc
 8005d86:	d005      	beq.n	8005d94 <vTaskStartScheduler+0x38>
 8005d88:	b672      	cpsid	i
 8005d8a:	e7fe      	b.n	8005d8a <vTaskStartScheduler+0x2e>
		configASSERT( pxTaskBuffer != NULL );
 8005d8c:	b672      	cpsid	i
 8005d8e:	e7fe      	b.n	8005d8e <vTaskStartScheduler+0x32>
		configASSERT( puxStackBuffer != NULL );
 8005d90:	b672      	cpsid	i
 8005d92:	e7fe      	b.n	8005d92 <vTaskStartScheduler+0x36>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d94:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d96:	9909      	ldr	r1, [sp, #36]	; 0x24
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d98:	23b9      	movs	r3, #185	; 0xb9
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	54e1      	strb	r1, [r4, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d9e:	ab08      	add	r3, sp, #32
 8005da0:	4913      	ldr	r1, [pc, #76]	; (8005df0 <vTaskStartScheduler+0x94>)
 8005da2:	4814      	ldr	r0, [pc, #80]	; (8005df4 <vTaskStartScheduler+0x98>)
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	9402      	str	r4, [sp, #8]
 8005da8:	2300      	movs	r3, #0
 8005daa:	9500      	str	r5, [sp, #0]
 8005dac:	f7ff fd16 	bl	80057dc <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db0:	0020      	movs	r0, r4
 8005db2:	f7ff fc81 	bl	80056b8 <prvAddNewTaskToReadyList>
		if( xIdleTaskHandle != NULL )
 8005db6:	9b08      	ldr	r3, [sp, #32]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <vTaskStartScheduler+0x88>
			xReturn = xTimerCreateTimerTask();
 8005dbc:	f000 fb56 	bl	800646c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005dc0:	2801      	cmp	r0, #1
 8005dc2:	d111      	bne.n	8005de8 <vTaskStartScheduler+0x8c>
		portDISABLE_INTERRUPTS();
 8005dc4:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <vTaskStartScheduler+0x9c>)
 8005dc8:	4a0c      	ldr	r2, [pc, #48]	; (8005dfc <vTaskStartScheduler+0xa0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3354      	adds	r3, #84	; 0x54
 8005dce:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vTaskStartScheduler+0xa4>)
 8005dd4:	4252      	negs	r2, r2
 8005dd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <vTaskStartScheduler+0xa8>)
 8005dda:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vTaskStartScheduler+0xac>)
 8005dde:	601d      	str	r5, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005de0:	f7ff f84c 	bl	8004e7c <xPortStartScheduler>
}
 8005de4:	b00b      	add	sp, #44	; 0x2c
 8005de6:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d1fb      	bne.n	8005de4 <vTaskStartScheduler+0x88>
 8005dec:	b672      	cpsid	i
 8005dee:	e7fe      	b.n	8005dee <vTaskStartScheduler+0x92>
 8005df0:	08006c9c 	.word	0x08006c9c
 8005df4:	080058d5 	.word	0x080058d5
 8005df8:	20000a30 	.word	0x20000a30
 8005dfc:	20000010 	.word	0x20000010
 8005e00:	20000ed8 	.word	0x20000ed8
 8005e04:	20000ef8 	.word	0x20000ef8
 8005e08:	20000f24 	.word	0x20000f24

08005e0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005e0c:	4a02      	ldr	r2, [pc, #8]	; (8005e18 <vTaskSuspendAll+0xc>)
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	4770      	bx	lr
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000ea4 	.word	0x20000ea4

08005e1c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <xTaskResumeAll+0x14>)
{
 8005e1e:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <xTaskResumeAll+0xe>
 8005e26:	b672      	cpsid	i
 8005e28:	e7fe      	b.n	8005e28 <xTaskResumeAll+0xc>
 8005e2a:	f7ff fe59 	bl	8005ae0 <xTaskResumeAll.part.0>
}
 8005e2e:	bd10      	pop	{r4, pc}
 8005e30:	20000ea4 	.word	0x20000ea4

08005e34 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005e34:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <xTaskGetTickCount+0x8>)
 8005e36:	6818      	ldr	r0, [r3, #0]
}
 8005e38:	4770      	bx	lr
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	20000f24 	.word	0x20000f24

08005e40 <xTaskGetTickCountFromISR>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <xTaskGetTickCountFromISR+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	20000f24 	.word	0x20000f24

08005e4c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <xTaskIncrementTick+0x1c>)
{
 8005e4e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <xTaskIncrementTick+0x10>
 8005e56:	f7ff fda3 	bl	80059a0 <xTaskIncrementTick.part.0>
}
 8005e5a:	bd10      	pop	{r4, pc}
		++xPendedTicks;
 8005e5c:	4a03      	ldr	r2, [pc, #12]	; (8005e6c <xTaskIncrementTick+0x20>)
BaseType_t xSwitchRequired = pdFALSE;
 8005e5e:	2000      	movs	r0, #0
		++xPendedTicks;
 8005e60:	6813      	ldr	r3, [r2, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8005e66:	e7f8      	b.n	8005e5a <xTaskIncrementTick+0xe>
 8005e68:	20000ea4 	.word	0x20000ea4
 8005e6c:	20000ee0 	.word	0x20000ee0

08005e70 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <vTaskSwitchContext+0x18>)
{
 8005e72:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <vTaskSwitchContext+0x1c>)
 8005e7e:	601a      	str	r2, [r3, #0]
}
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	f7ff febf 	bl	8005c04 <vTaskSwitchContext.part.0>
 8005e86:	e7fb      	b.n	8005e80 <vTaskSwitchContext+0x10>
 8005e88:	20000ea4 	.word	0x20000ea4
 8005e8c:	20000f28 	.word	0x20000f28

08005e90 <vTaskPlaceOnEventList>:
{
 8005e90:	b510      	push	{r4, lr}
 8005e92:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d009      	beq.n	8005eac <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <vTaskPlaceOnEventList+0x20>)
 8005e9a:	6819      	ldr	r1, [r3, #0]
 8005e9c:	3118      	adds	r1, #24
 8005e9e:	f7fe ff01 	bl	8004ca4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	0020      	movs	r0, r4
 8005ea6:	f7ff fd43 	bl	8005930 <prvAddCurrentTaskToDelayedList>
}
 8005eaa:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 8005eac:	b672      	cpsid	i
 8005eae:	e7fe      	b.n	8005eae <vTaskPlaceOnEventList+0x1e>
 8005eb0:	20000a30 	.word	0x20000a30

08005eb4 <vTaskPlaceOnEventListRestricted>:
	{
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	000c      	movs	r4, r1
 8005eb8:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d00d      	beq.n	8005eda <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <vTaskPlaceOnEventListRestricted+0x2c>)
 8005ec0:	6819      	ldr	r1, [r3, #0]
 8005ec2:	3118      	adds	r1, #24
 8005ec4:	f7fe fee2 	bl	8004c8c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	d001      	beq.n	8005ed0 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 8005ecc:	2401      	movs	r4, #1
 8005ece:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ed0:	0029      	movs	r1, r5
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f7ff fd2c 	bl	8005930 <prvAddCurrentTaskToDelayedList>
	}
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 8005eda:	b672      	cpsid	i
 8005edc:	e7fe      	b.n	8005edc <vTaskPlaceOnEventListRestricted+0x28>
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	20000a30 	.word	0x20000a30

08005ee4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee4:	68c3      	ldr	r3, [r0, #12]
{
 8005ee6:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	d02b      	beq.n	8005f46 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eee:	0025      	movs	r5, r4
 8005ef0:	3518      	adds	r5, #24
 8005ef2:	0028      	movs	r0, r5
 8005ef4:	f7fe feee 	bl	8004cd4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef8:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <xTaskRemoveFromEventList+0x68>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00f      	beq.n	8005f20 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f00:	0029      	movs	r1, r5
 8005f02:	4813      	ldr	r0, [pc, #76]	; (8005f50 <xTaskRemoveFromEventList+0x6c>)
 8005f04:	f7fe fec2 	bl	8004c8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <xTaskRemoveFromEventList+0x70>)
 8005f0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f0c:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8005f0e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d903      	bls.n	8005f1e <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 8005f16:	2201      	movs	r2, #1
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 8005f1a:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f20:	1d25      	adds	r5, r4, #4
 8005f22:	0028      	movs	r0, r5
 8005f24:	f7fe fed6 	bl	8004cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f28:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <xTaskRemoveFromEventList+0x78>)
 8005f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f2c:	6811      	ldr	r1, [r2, #0]
 8005f2e:	428b      	cmp	r3, r1
 8005f30:	d900      	bls.n	8005f34 <xTaskRemoveFromEventList+0x50>
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	0098      	lsls	r0, r3, #2
 8005f36:	18c0      	adds	r0, r0, r3
 8005f38:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <xTaskRemoveFromEventList+0x7c>)
 8005f3a:	0080      	lsls	r0, r0, #2
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	18c0      	adds	r0, r0, r3
 8005f40:	f7fe fea4 	bl	8004c8c <vListInsertEnd>
 8005f44:	e7e0      	b.n	8005f08 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 8005f46:	b672      	cpsid	i
 8005f48:	e7fe      	b.n	8005f48 <xTaskRemoveFromEventList+0x64>
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	20000ea4 	.word	0x20000ea4
 8005f50:	20000ee4 	.word	0x20000ee4
 8005f54:	20000a30 	.word	0x20000a30
 8005f58:	20000f28 	.word	0x20000f28
 8005f5c:	20000eac 	.word	0x20000eac
 8005f60:	20000a3c 	.word	0x20000a3c

08005f64 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <vTaskInternalSetTimeOutState+0x10>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f6a:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <vTaskInternalSetTimeOutState+0x14>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6043      	str	r3, [r0, #4]
}
 8005f70:	4770      	bx	lr
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	20000edc 	.word	0x20000edc
 8005f78:	20000f24 	.word	0x20000f24

08005f7c <xTaskCheckForTimeOut>:
{
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	0004      	movs	r4, r0
 8005f80:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d024      	beq.n	8005fd0 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTicksToWait );
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d020      	beq.n	8005fcc <xTaskCheckForTimeOut+0x50>
	taskENTER_CRITICAL();
 8005f8a:	f7fe ff01 	bl	8004d90 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <xTaskCheckForTimeOut+0x64>)
 8005f90:	469c      	mov	ip, r3
 8005f92:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	d01c      	beq.n	8005fd4 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f9a:	4f12      	ldr	r7, [pc, #72]	; (8005fe4 <xTaskCheckForTimeOut+0x68>)
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	683e      	ldr	r6, [r7, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fa0:	6862      	ldr	r2, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fa2:	42b0      	cmp	r0, r6
 8005fa4:	d002      	beq.n	8005fac <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 8005fa6:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fa8:	428a      	cmp	r2, r1
 8005faa:	d90b      	bls.n	8005fc4 <xTaskCheckForTimeOut+0x48>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fac:	1a8e      	subs	r6, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fae:	42b3      	cmp	r3, r6
 8005fb0:	d912      	bls.n	8005fd8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8005fb2:	1a5b      	subs	r3, r3, r1
 8005fb4:	189b      	adds	r3, r3, r2
 8005fb6:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fb8:	683b      	ldr	r3, [r7, #0]
			xReturn = pdFALSE;
 8005fba:	2600      	movs	r6, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fbc:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fbe:	4663      	mov	r3, ip
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 8005fc4:	f7fe fef0 	bl	8004da8 <vPortExitCritical>
}
 8005fc8:	0030      	movs	r0, r6
 8005fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 8005fcc:	b672      	cpsid	i
 8005fce:	e7fe      	b.n	8005fce <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 8005fd0:	b672      	cpsid	i
 8005fd2:	e7fe      	b.n	8005fd2 <xTaskCheckForTimeOut+0x56>
				xReturn = pdFALSE;
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	e7f5      	b.n	8005fc4 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait = 0;
 8005fd8:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005fda:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8005fdc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005fde:	e7f1      	b.n	8005fc4 <xTaskCheckForTimeOut+0x48>
 8005fe0:	20000f24 	.word	0x20000f24
 8005fe4:	20000edc 	.word	0x20000edc

08005fe8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <vTaskMissedYield+0x8>)
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	4770      	bx	lr
 8005ff0:	20000f28 	.word	0x20000f28

08005ff4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ff6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffe:	4b04      	ldr	r3, [pc, #16]	; (8006010 <xTaskGetSchedulerState+0x1c>)
 8006000:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006002:	4243      	negs	r3, r0
 8006004:	4158      	adcs	r0, r3
 8006006:	0040      	lsls	r0, r0, #1
	}
 8006008:	4770      	bx	lr
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000ef8 	.word	0x20000ef8
 8006010:	20000ea4 	.word	0x20000ea4

08006014 <xTaskPriorityInherit>:
	{
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8006018:	d021      	beq.n	800605e <xTaskPriorityInherit+0x4a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800601a:	4d1c      	ldr	r5, [pc, #112]	; (800608c <xTaskPriorityInherit+0x78>)
 800601c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	429a      	cmp	r2, r3
 8006024:	d214      	bcs.n	8006050 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006026:	6983      	ldr	r3, [r0, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	db04      	blt.n	8006036 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006030:	2338      	movs	r3, #56	; 0x38
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006036:	0093      	lsls	r3, r2, #2
 8006038:	189b      	adds	r3, r3, r2
 800603a:	4e15      	ldr	r6, [pc, #84]	; (8006090 <xTaskPriorityInherit+0x7c>)
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	6962      	ldr	r2, [r4, #20]
 8006040:	18f3      	adds	r3, r6, r3
 8006042:	429a      	cmp	r2, r3
 8006044:	d00d      	beq.n	8006062 <xTaskPriorityInherit+0x4e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006046:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8006048:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800604e:	e005      	b.n	800605c <xTaskPriorityInherit+0x48>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4298      	cmp	r0, r3
 8006058:	4180      	sbcs	r0, r0
 800605a:	4240      	negs	r0, r0
	}
 800605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 800605e:	2000      	movs	r0, #0
		return xReturn;
 8006060:	e7fc      	b.n	800605c <xTaskPriorityInherit+0x48>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006062:	1d27      	adds	r7, r4, #4
 8006064:	0038      	movs	r0, r7
 8006066:	f7fe fe35 	bl	8004cd4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800606a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800606c:	4a09      	ldr	r2, [pc, #36]	; (8006094 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006070:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006072:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006074:	428b      	cmp	r3, r1
 8006076:	d900      	bls.n	800607a <xTaskPriorityInherit+0x66>
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	0098      	lsls	r0, r3, #2
 800607c:	18c0      	adds	r0, r0, r3
 800607e:	0080      	lsls	r0, r0, #2
 8006080:	1830      	adds	r0, r6, r0
 8006082:	0039      	movs	r1, r7
 8006084:	f7fe fe02 	bl	8004c8c <vListInsertEnd>
				xReturn = pdTRUE;
 8006088:	2001      	movs	r0, #1
 800608a:	e7e7      	b.n	800605c <xTaskPriorityInherit+0x48>
 800608c:	20000a30 	.word	0x20000a30
 8006090:	20000a3c 	.word	0x20000a3c
 8006094:	20000eac 	.word	0x20000eac

08006098 <xTaskPriorityDisinherit>:
	{
 8006098:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800609a:	2800      	cmp	r0, #0
 800609c:	d010      	beq.n	80060c0 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <xTaskPriorityDisinherit+0x60>)
 80060a0:	681c      	ldr	r4, [r3, #0]
 80060a2:	4284      	cmp	r4, r0
 80060a4:	d001      	beq.n	80060aa <xTaskPriorityDisinherit+0x12>
 80060a6:	b672      	cpsid	i
 80060a8:	e7fe      	b.n	80060a8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80060aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80060b4:	3b01      	subs	r3, #1
 80060b6:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b8:	428a      	cmp	r2, r1
 80060ba:	d001      	beq.n	80060c0 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80060c0:	2000      	movs	r0, #0
	}
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 80060c4:	b672      	cpsid	i
 80060c6:	e7fe      	b.n	80060c6 <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c8:	1d25      	adds	r5, r4, #4
 80060ca:	0028      	movs	r0, r5
 80060cc:	f7fe fe02 	bl	8004cd4 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	1ad2      	subs	r2, r2, r3
 80060d6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80060d8:	4a08      	ldr	r2, [pc, #32]	; (80060fc <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060da:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80060dc:	6811      	ldr	r1, [r2, #0]
 80060de:	428b      	cmp	r3, r1
 80060e0:	d900      	bls.n	80060e4 <xTaskPriorityDisinherit+0x4c>
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	0098      	lsls	r0, r3, #2
 80060e6:	18c0      	adds	r0, r0, r3
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <xTaskPriorityDisinherit+0x68>)
 80060ea:	0080      	lsls	r0, r0, #2
 80060ec:	18c0      	adds	r0, r0, r3
 80060ee:	0029      	movs	r1, r5
 80060f0:	f7fe fdcc 	bl	8004c8c <vListInsertEnd>
					xReturn = pdTRUE;
 80060f4:	2001      	movs	r0, #1
		return xReturn;
 80060f6:	e7e4      	b.n	80060c2 <xTaskPriorityDisinherit+0x2a>
 80060f8:	20000a30 	.word	0x20000a30
 80060fc:	20000eac 	.word	0x20000eac
 8006100:	20000a3c 	.word	0x20000a3c

08006104 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8006108:	d031      	beq.n	800616e <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
 800610a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <vTaskPriorityDisinheritAfterTimeout+0x10>
 8006110:	b672      	cpsid	i
 8006112:	e7fe      	b.n	8006112 <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006116:	428a      	cmp	r2, r1
 8006118:	d200      	bcs.n	800611c <vTaskPriorityDisinheritAfterTimeout+0x18>
 800611a:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800611c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800611e:	4291      	cmp	r1, r2
 8006120:	d025      	beq.n	800616e <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006122:	2b01      	cmp	r3, #1
 8006124:	d123      	bne.n	800616e <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <vTaskPriorityDisinheritAfterTimeout+0x70>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	42a3      	cmp	r3, r4
 800612c:	d020      	beq.n	8006170 <vTaskPriorityDisinheritAfterTimeout+0x6c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800612e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8006130:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006132:	2b00      	cmp	r3, #0
 8006134:	db02      	blt.n	800613c <vTaskPriorityDisinheritAfterTimeout+0x38>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006136:	2338      	movs	r3, #56	; 0x38
 8006138:	1a9a      	subs	r2, r3, r2
 800613a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800613c:	008b      	lsls	r3, r1, #2
 800613e:	4d0e      	ldr	r5, [pc, #56]	; (8006178 <vTaskPriorityDisinheritAfterTimeout+0x74>)
 8006140:	185b      	adds	r3, r3, r1
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	6962      	ldr	r2, [r4, #20]
 8006146:	18eb      	adds	r3, r5, r3
 8006148:	429a      	cmp	r2, r3
 800614a:	d110      	bne.n	800616e <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800614c:	1d26      	adds	r6, r4, #4
 800614e:	0030      	movs	r0, r6
 8006150:	f7fe fdc0 	bl	8004cd4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <vTaskPriorityDisinheritAfterTimeout+0x78>)
 8006156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	428b      	cmp	r3, r1
 800615c:	d900      	bls.n	8006160 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	0098      	lsls	r0, r3, #2
 8006162:	18c0      	adds	r0, r0, r3
 8006164:	0080      	lsls	r0, r0, #2
 8006166:	0031      	movs	r1, r6
 8006168:	1828      	adds	r0, r5, r0
 800616a:	f7fe fd8f 	bl	8004c8c <vListInsertEnd>
	}
 800616e:	bd70      	pop	{r4, r5, r6, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006170:	b672      	cpsid	i
 8006172:	e7fe      	b.n	8006172 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8006174:	20000a30 	.word	0x20000a30
 8006178:	20000a3c 	.word	0x20000a3c
 800617c:	20000eac 	.word	0x20000eac

08006180 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006180:	4b04      	ldr	r3, [pc, #16]	; (8006194 <pvTaskIncrementMutexHeldCount+0x14>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	2a00      	cmp	r2, #0
 8006186:	d003      	beq.n	8006190 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800618c:	3201      	adds	r2, #1
 800618e:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8006190:	6818      	ldr	r0, [r3, #0]
	}
 8006192:	4770      	bx	lr
 8006194:	20000a30 	.word	0x20000a30

08006198 <ulTaskNotifyTake>:
	{
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	0005      	movs	r5, r0
 800619c:	000e      	movs	r6, r1
		taskENTER_CRITICAL();
 800619e:	f7fe fdf7 	bl	8004d90 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80061a2:	23b4      	movs	r3, #180	; 0xb4
 80061a4:	4c14      	ldr	r4, [pc, #80]	; (80061f8 <ulTaskNotifyTake+0x60>)
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	58d3      	ldr	r3, [r2, r3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d105      	bne.n	80061ba <ulTaskNotifyTake+0x22>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80061ae:	2101      	movs	r1, #1
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	33b8      	adds	r3, #184	; 0xb8
 80061b4:	54d1      	strb	r1, [r2, r3]
				if( xTicksToWait > ( TickType_t ) 0 )
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d118      	bne.n	80061ec <ulTaskNotifyTake+0x54>
		taskEXIT_CRITICAL();
 80061ba:	f7fe fdf5 	bl	8004da8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80061be:	f7fe fde7 	bl	8004d90 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80061c2:	23b4      	movs	r3, #180	; 0xb4
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	58d6      	ldr	r6, [r2, r3]
			if( ulReturn != 0UL )
 80061c8:	2e00      	cmp	r6, #0
 80061ca:	d004      	beq.n	80061d6 <ulTaskNotifyTake+0x3e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80061cc:	6822      	ldr	r2, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	d009      	beq.n	80061e6 <ulTaskNotifyTake+0x4e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80061d2:	2100      	movs	r1, #0
 80061d4:	50d1      	str	r1, [r2, r3]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061d6:	23b8      	movs	r3, #184	; 0xb8
 80061d8:	2100      	movs	r1, #0
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	54d1      	strb	r1, [r2, r3]
		taskEXIT_CRITICAL();
 80061de:	f7fe fde3 	bl	8004da8 <vPortExitCritical>
	}
 80061e2:	0030      	movs	r0, r6
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80061e6:	1e71      	subs	r1, r6, #1
 80061e8:	50d1      	str	r1, [r2, r3]
 80061ea:	e7f4      	b.n	80061d6 <ulTaskNotifyTake+0x3e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061ec:	0030      	movs	r0, r6
 80061ee:	f7ff fb9f 	bl	8005930 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80061f2:	f7fe fdc1 	bl	8004d78 <vPortYield>
 80061f6:	e7e0      	b.n	80061ba <ulTaskNotifyTake+0x22>
 80061f8:	20000a30 	.word	0x20000a30

080061fc <xTaskGenericNotify>:
	{
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	0004      	movs	r4, r0
 8006200:	000e      	movs	r6, r1
 8006202:	0015      	movs	r5, r2
 8006204:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 8006206:	2800      	cmp	r0, #0
 8006208:	d011      	beq.n	800622e <xTaskGenericNotify+0x32>
		taskENTER_CRITICAL();
 800620a:	f7fe fdc1 	bl	8004d90 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800620e:	2f00      	cmp	r7, #0
 8006210:	d002      	beq.n	8006218 <xTaskGenericNotify+0x1c>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006212:	23b4      	movs	r3, #180	; 0xb4
 8006214:	58e3      	ldr	r3, [r4, r3]
 8006216:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006218:	22b8      	movs	r2, #184	; 0xb8
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800621a:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800621c:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800621e:	54a1      	strb	r1, [r4, r2]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006220:	b2db      	uxtb	r3, r3
			switch( eAction )
 8006222:	2d04      	cmp	r5, #4
 8006224:	d827      	bhi.n	8006276 <xTaskGenericNotify+0x7a>
 8006226:	4a21      	ldr	r2, [pc, #132]	; (80062ac <xTaskGenericNotify+0xb0>)
 8006228:	00ad      	lsls	r5, r5, #2
 800622a:	5952      	ldr	r2, [r2, r5]
 800622c:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 800622e:	b672      	cpsid	i
 8006230:	e7fe      	b.n	8006230 <xTaskGenericNotify+0x34>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006232:	2b02      	cmp	r3, #2
 8006234:	d038      	beq.n	80062a8 <xTaskGenericNotify+0xac>
						pxTCB->ulNotifiedValue = ulValue;
 8006236:	22b4      	movs	r2, #180	; 0xb4
 8006238:	50a6      	str	r6, [r4, r2]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800623a:	2b01      	cmp	r3, #1
 800623c:	d004      	beq.n	8006248 <xTaskGenericNotify+0x4c>
 800623e:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8006240:	f7fe fdb2 	bl	8004da8 <vPortExitCritical>
	}
 8006244:	0020      	movs	r0, r4
 8006246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006248:	1d25      	adds	r5, r4, #4
 800624a:	0028      	movs	r0, r5
 800624c:	f7fe fd42 	bl	8004cd4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006250:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <xTaskGenericNotify+0xb4>)
 8006252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006254:	6811      	ldr	r1, [r2, #0]
 8006256:	428b      	cmp	r3, r1
 8006258:	d900      	bls.n	800625c <xTaskGenericNotify+0x60>
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	0098      	lsls	r0, r3, #2
 800625e:	18c0      	adds	r0, r0, r3
 8006260:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <xTaskGenericNotify+0xb8>)
 8006262:	0080      	lsls	r0, r0, #2
 8006264:	18c0      	adds	r0, r0, r3
 8006266:	0029      	movs	r1, r5
 8006268:	f7fe fd10 	bl	8004c8c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800626c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d011      	beq.n	8006296 <xTaskGenericNotify+0x9a>
 8006272:	b672      	cpsid	i
 8006274:	e7fe      	b.n	8006274 <xTaskGenericNotify+0x78>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006276:	22b4      	movs	r2, #180	; 0xb4
 8006278:	58a2      	ldr	r2, [r4, r2]
 800627a:	3201      	adds	r2, #1
 800627c:	d0dd      	beq.n	800623a <xTaskGenericNotify+0x3e>
 800627e:	b672      	cpsid	i
 8006280:	e7fe      	b.n	8006280 <xTaskGenericNotify+0x84>
					( pxTCB->ulNotifiedValue )++;
 8006282:	21b4      	movs	r1, #180	; 0xb4
 8006284:	5862      	ldr	r2, [r4, r1]
 8006286:	3201      	adds	r2, #1
 8006288:	5062      	str	r2, [r4, r1]
					break;
 800628a:	e7d6      	b.n	800623a <xTaskGenericNotify+0x3e>
					pxTCB->ulNotifiedValue |= ulValue;
 800628c:	21b4      	movs	r1, #180	; 0xb4
 800628e:	5862      	ldr	r2, [r4, r1]
 8006290:	4316      	orrs	r6, r2
 8006292:	5066      	str	r6, [r4, r1]
					break;
 8006294:	e7d1      	b.n	800623a <xTaskGenericNotify+0x3e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006296:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <xTaskGenericNotify+0xbc>)
 8006298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d9cd      	bls.n	800623e <xTaskGenericNotify+0x42>
					taskYIELD_IF_USING_PREEMPTION();
 80062a2:	f7fe fd69 	bl	8004d78 <vPortYield>
 80062a6:	e7ca      	b.n	800623e <xTaskGenericNotify+0x42>
						xReturn = pdFAIL;
 80062a8:	2400      	movs	r4, #0
 80062aa:	e7c9      	b.n	8006240 <xTaskGenericNotify+0x44>
 80062ac:	08006ca4 	.word	0x08006ca4
 80062b0:	20000eac 	.word	0x20000eac
 80062b4:	20000a3c 	.word	0x20000a3c
 80062b8:	20000a30 	.word	0x20000a30

080062bc <xTaskGenericNotifyFromISR>:
	{
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	46ce      	mov	lr, r9
 80062c0:	0004      	movs	r4, r0
 80062c2:	000d      	movs	r5, r1
 80062c4:	0016      	movs	r6, r2
 80062c6:	4699      	mov	r9, r3
 80062c8:	b500      	push	{lr}
		configASSERT( xTaskToNotify );
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d014      	beq.n	80062f8 <xTaskGenericNotifyFromISR+0x3c>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062ce:	f7fe fd79 	bl	8004dc4 <ulSetInterruptMaskFromISR>
			if( pulPreviousNotificationValue != NULL )
 80062d2:	464b      	mov	r3, r9
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062d4:	0007      	movs	r7, r0
			if( pulPreviousNotificationValue != NULL )
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <xTaskGenericNotifyFromISR+0x26>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80062da:	23b4      	movs	r3, #180	; 0xb4
 80062dc:	464a      	mov	r2, r9
 80062de:	58e3      	ldr	r3, [r4, r3]
 80062e0:	6013      	str	r3, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80062e2:	22b8      	movs	r2, #184	; 0xb8
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80062e4:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80062e6:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80062e8:	54a1      	strb	r1, [r4, r2]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80062ea:	b2db      	uxtb	r3, r3
			switch( eAction )
 80062ec:	2e04      	cmp	r6, #4
 80062ee:	d830      	bhi.n	8006352 <xTaskGenericNotifyFromISR+0x96>
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <xTaskGenericNotifyFromISR+0xe0>)
 80062f2:	00b6      	lsls	r6, r6, #2
 80062f4:	5992      	ldr	r2, [r2, r6]
 80062f6:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 80062f8:	b672      	cpsid	i
 80062fa:	e7fe      	b.n	80062fa <xTaskGenericNotifyFromISR+0x3e>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d038      	beq.n	8006372 <xTaskGenericNotifyFromISR+0xb6>
						pxTCB->ulNotifiedValue = ulValue;
 8006300:	22b4      	movs	r2, #180	; 0xb4
 8006302:	50a5      	str	r5, [r4, r2]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006304:	2b01      	cmp	r3, #1
 8006306:	d11c      	bne.n	8006342 <xTaskGenericNotifyFromISR+0x86>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <xTaskGenericNotifyFromISR+0x56>
 800630e:	b672      	cpsid	i
 8006310:	e7fe      	b.n	8006310 <xTaskGenericNotifyFromISR+0x54>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006312:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <xTaskGenericNotifyFromISR+0xe4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d02d      	beq.n	8006376 <xTaskGenericNotifyFromISR+0xba>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800631a:	0021      	movs	r1, r4
 800631c:	4821      	ldr	r0, [pc, #132]	; (80063a4 <xTaskGenericNotifyFromISR+0xe8>)
 800631e:	3118      	adds	r1, #24
 8006320:	f7fe fcb4 	bl	8004c8c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006324:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <xTaskGenericNotifyFromISR+0xec>)
 8006326:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	429a      	cmp	r2, r3
 800632e:	d908      	bls.n	8006342 <xTaskGenericNotifyFromISR+0x86>
					if( pxHigherPriorityTaskWoken != NULL )
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <xTaskGenericNotifyFromISR+0x80>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	9a06      	ldr	r2, [sp, #24]
 800633a:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800633c:	2201      	movs	r2, #1
 800633e:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <xTaskGenericNotifyFromISR+0xf0>)
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	2401      	movs	r4, #1
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006344:	0038      	movs	r0, r7
 8006346:	f7fe fd41 	bl	8004dcc <vClearInterruptMaskFromISR>
	}
 800634a:	0020      	movs	r0, r4
 800634c:	bc80      	pop	{r7}
 800634e:	46b9      	mov	r9, r7
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006352:	22b4      	movs	r2, #180	; 0xb4
 8006354:	58a2      	ldr	r2, [r4, r2]
 8006356:	3201      	adds	r2, #1
 8006358:	d0d4      	beq.n	8006304 <xTaskGenericNotifyFromISR+0x48>
 800635a:	b672      	cpsid	i
 800635c:	e7fe      	b.n	800635c <xTaskGenericNotifyFromISR+0xa0>
					( pxTCB->ulNotifiedValue )++;
 800635e:	21b4      	movs	r1, #180	; 0xb4
 8006360:	5862      	ldr	r2, [r4, r1]
 8006362:	3201      	adds	r2, #1
 8006364:	5062      	str	r2, [r4, r1]
					break;
 8006366:	e7cd      	b.n	8006304 <xTaskGenericNotifyFromISR+0x48>
					pxTCB->ulNotifiedValue |= ulValue;
 8006368:	22b4      	movs	r2, #180	; 0xb4
 800636a:	58a1      	ldr	r1, [r4, r2]
 800636c:	4329      	orrs	r1, r5
 800636e:	50a1      	str	r1, [r4, r2]
					break;
 8006370:	e7c8      	b.n	8006304 <xTaskGenericNotifyFromISR+0x48>
						xReturn = pdFAIL;
 8006372:	2400      	movs	r4, #0
 8006374:	e7e6      	b.n	8006344 <xTaskGenericNotifyFromISR+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006376:	1d26      	adds	r6, r4, #4
 8006378:	0030      	movs	r0, r6
 800637a:	f7fe fcab 	bl	8004cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <xTaskGenericNotifyFromISR+0xf4>)
 8006380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006382:	6811      	ldr	r1, [r2, #0]
 8006384:	428b      	cmp	r3, r1
 8006386:	d900      	bls.n	800638a <xTaskGenericNotifyFromISR+0xce>
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	0098      	lsls	r0, r3, #2
 800638c:	18c0      	adds	r0, r0, r3
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <xTaskGenericNotifyFromISR+0xf8>)
 8006390:	0080      	lsls	r0, r0, #2
 8006392:	0031      	movs	r1, r6
 8006394:	18c0      	adds	r0, r0, r3
 8006396:	f7fe fc79 	bl	8004c8c <vListInsertEnd>
 800639a:	e7c3      	b.n	8006324 <xTaskGenericNotifyFromISR+0x68>
 800639c:	08006cb8 	.word	0x08006cb8
 80063a0:	20000ea4 	.word	0x20000ea4
 80063a4:	20000ee4 	.word	0x20000ee4
 80063a8:	20000a30 	.word	0x20000a30
 80063ac:	20000f28 	.word	0x20000f28
 80063b0:	20000eac 	.word	0x20000eac
 80063b4:	20000a3c 	.word	0x20000a3c

080063b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ba:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063bc:	f7fe fce8 	bl	8004d90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063c0:	4c10      	ldr	r4, [pc, #64]	; (8006404 <prvCheckForValidListAndQueue+0x4c>)
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	2d00      	cmp	r5, #0
 80063c6:	d003      	beq.n	80063d0 <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c8:	f7fe fcee 	bl	8004da8 <vPortExitCritical>
}
 80063cc:	b003      	add	sp, #12
 80063ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 80063d0:	4f0d      	ldr	r7, [pc, #52]	; (8006408 <prvCheckForValidListAndQueue+0x50>)
 80063d2:	0038      	movs	r0, r7
 80063d4:	f7fe fc4a 	bl	8004c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063d8:	4e0c      	ldr	r6, [pc, #48]	; (800640c <prvCheckForValidListAndQueue+0x54>)
 80063da:	0030      	movs	r0, r6
 80063dc:	f7fe fc46 	bl	8004c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063e2:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80063e4:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063e8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80063ea:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063ec:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <prvCheckForValidListAndQueue+0x60>)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvCheckForValidListAndQueue+0x64>)
 80063f0:	9500      	str	r5, [sp, #0]
 80063f2:	f7fe fe53 	bl	800509c <xQueueGenericCreateStatic>
 80063f6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0e5      	beq.n	80063c8 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063fc:	4908      	ldr	r1, [pc, #32]	; (8006420 <prvCheckForValidListAndQueue+0x68>)
 80063fe:	f7ff f923 	bl	8005648 <vQueueAddToRegistry>
 8006402:	e7e1      	b.n	80063c8 <prvCheckForValidListAndQueue+0x10>
 8006404:	20001050 	.word	0x20001050
 8006408:	20000fd4 	.word	0x20000fd4
 800640c:	20000fe8 	.word	0x20000fe8
 8006410:	20000f2c 	.word	0x20000f2c
 8006414:	20000f30 	.word	0x20000f30
 8006418:	20000f34 	.word	0x20000f34
 800641c:	20001000 	.word	0x20001000
 8006420:	08006ccc 	.word	0x08006ccc

08006424 <prvInsertTimerInActiveList>:
{
 8006424:	b510      	push	{r4, lr}
 8006426:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006428:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800642a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800642c:	4291      	cmp	r1, r2
 800642e:	d805      	bhi.n	800643c <prvInsertTimerInActiveList+0x18>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	69a3      	ldr	r3, [r4, #24]
			xProcessTimerNow = pdTRUE;
 8006434:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006436:	429a      	cmp	r2, r3
 8006438:	d30c      	bcc.n	8006454 <prvInsertTimerInActiveList+0x30>
}
 800643a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800643c:	429a      	cmp	r2, r3
 800643e:	d202      	bcs.n	8006446 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 8006440:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006442:	4299      	cmp	r1, r3
 8006444:	d2f9      	bcs.n	800643a <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <prvInsertTimerInActiveList+0x40>)
 8006448:	1d21      	adds	r1, r4, #4
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f7fe fc2a 	bl	8004ca4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006450:	2000      	movs	r0, #0
 8006452:	e7f2      	b.n	800643a <prvInsertTimerInActiveList+0x16>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <prvInsertTimerInActiveList+0x44>)
 8006456:	1d21      	adds	r1, r4, #4
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f7fe fc23 	bl	8004ca4 <vListInsert>
 800645e:	2000      	movs	r0, #0
 8006460:	e7eb      	b.n	800643a <prvInsertTimerInActiveList+0x16>
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	20000f2c 	.word	0x20000f2c
 8006468:	20000f30 	.word	0x20000f30

0800646c <xTimerCreateTimerTask>:
{
 800646c:	b500      	push	{lr}
 800646e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8006470:	f7ff ffa2 	bl	80063b8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <xTimerCreateTimerTask+0x4c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01a      	beq.n	80064b2 <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800647c:	2300      	movs	r3, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800647e:	aa07      	add	r2, sp, #28
 8006480:	a906      	add	r1, sp, #24
 8006482:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006484:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006486:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006488:	f7fe fb04 	bl	8004a94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800648c:	9b05      	ldr	r3, [sp, #20]
 800648e:	9a07      	ldr	r2, [sp, #28]
 8006490:	9302      	str	r3, [sp, #8]
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	4909      	ldr	r1, [pc, #36]	; (80064bc <xTimerCreateTimerTask+0x50>)
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	2302      	movs	r3, #2
 800649a:	4809      	ldr	r0, [pc, #36]	; (80064c0 <xTimerCreateTimerTask+0x54>)
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	f7ff fbe4 	bl	8005c6c <xTaskCreateStatic>
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <xTimerCreateTimerTask+0x58>)
 80064a6:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d002      	beq.n	80064b2 <xTimerCreateTimerTask+0x46>
}
 80064ac:	2001      	movs	r0, #1
 80064ae:	b009      	add	sp, #36	; 0x24
 80064b0:	bd00      	pop	{pc}
	configASSERT( xReturn );
 80064b2:	b672      	cpsid	i
 80064b4:	e7fe      	b.n	80064b4 <xTimerCreateTimerTask+0x48>
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	20001050 	.word	0x20001050
 80064bc:	08006cd4 	.word	0x08006cd4
 80064c0:	080065fd 	.word	0x080065fd
 80064c4:	20001054 	.word	0x20001054

080064c8 <xTimerCreate>:
	{
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	46ce      	mov	lr, r9
 80064cc:	4647      	mov	r7, r8
 80064ce:	4681      	mov	r9, r0
 80064d0:	b580      	push	{r7, lr}
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064d2:	202c      	movs	r0, #44	; 0x2c
	{
 80064d4:	000d      	movs	r5, r1
 80064d6:	0017      	movs	r7, r2
 80064d8:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064da:	f7fe fb0f 	bl	8004afc <pvPortMalloc>
 80064de:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80064e0:	d018      	beq.n	8006514 <xTimerCreate+0x4c>
			pxNewTimer->ucStatus = 0x00;
 80064e2:	2628      	movs	r6, #40	; 0x28
 80064e4:	2300      	movs	r3, #0
 80064e6:	5583      	strb	r3, [r0, r6]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	d101      	bne.n	80064f0 <xTimerCreate+0x28>
 80064ec:	b672      	cpsid	i
 80064ee:	e7fe      	b.n	80064ee <xTimerCreate+0x26>
		prvCheckForValidListAndQueue();
 80064f0:	f7ff ff62 	bl	80063b8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 80064f4:	464b      	mov	r3, r9
 80064f6:	6023      	str	r3, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 80064f8:	4643      	mov	r3, r8
 80064fa:	61e3      	str	r3, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80064fc:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80064fe:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006500:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006502:	1d20      	adds	r0, r4, #4
 8006504:	f7fe fbbe 	bl	8004c84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006508:	2f00      	cmp	r7, #0
 800650a:	d003      	beq.n	8006514 <xTimerCreate+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800650c:	2204      	movs	r2, #4
 800650e:	5da3      	ldrb	r3, [r4, r6]
 8006510:	4313      	orrs	r3, r2
 8006512:	55a3      	strb	r3, [r4, r6]
	}
 8006514:	0020      	movs	r0, r4
 8006516:	bcc0      	pop	{r6, r7}
 8006518:	46b9      	mov	r9, r7
 800651a:	46b0      	mov	r8, r6
 800651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)

08006520 <xTimerGenericCommand>:
{
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	0016      	movs	r6, r2
 8006524:	0004      	movs	r4, r0
 8006526:	001a      	movs	r2, r3
 8006528:	b084      	sub	sp, #16
	configASSERT( xTimer );
 800652a:	2800      	cmp	r0, #0
 800652c:	d016      	beq.n	800655c <xTimerGenericCommand+0x3c>
	if( xTimerQueue != NULL )
 800652e:	4d12      	ldr	r5, [pc, #72]	; (8006578 <xTimerGenericCommand+0x58>)
 8006530:	6828      	ldr	r0, [r5, #0]
 8006532:	2800      	cmp	r0, #0
 8006534:	d00f      	beq.n	8006556 <xTimerGenericCommand+0x36>
		xMessage.xMessageID = xCommandID;
 8006536:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006538:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800653a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800653c:	2905      	cmp	r1, #5
 800653e:	dc0f      	bgt.n	8006560 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006540:	f7ff fd58 	bl	8005ff4 <xTaskGetSchedulerState>
 8006544:	2802      	cmp	r0, #2
 8006546:	d010      	beq.n	800656a <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006548:	2300      	movs	r3, #0
 800654a:	2200      	movs	r2, #0
 800654c:	4669      	mov	r1, sp
 800654e:	6828      	ldr	r0, [r5, #0]
 8006550:	f7fe fe10 	bl	8005174 <xQueueGenericSend>
 8006554:	e000      	b.n	8006558 <xTimerGenericCommand+0x38>
BaseType_t xReturn = pdFAIL;
 8006556:	2000      	movs	r0, #0
}
 8006558:	b004      	add	sp, #16
 800655a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xTimer );
 800655c:	b672      	cpsid	i
 800655e:	e7fe      	b.n	800655e <xTimerGenericCommand+0x3e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006560:	2300      	movs	r3, #0
 8006562:	4669      	mov	r1, sp
 8006564:	f7fe fea4 	bl	80052b0 <xQueueGenericSendFromISR>
 8006568:	e7f6      	b.n	8006558 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800656a:	2300      	movs	r3, #0
 800656c:	4669      	mov	r1, sp
 800656e:	6828      	ldr	r0, [r5, #0]
 8006570:	9a08      	ldr	r2, [sp, #32]
 8006572:	f7fe fdff 	bl	8005174 <xQueueGenericSend>
 8006576:	e7ef      	b.n	8006558 <xTimerGenericCommand+0x38>
 8006578:	20001050 	.word	0x20001050

0800657c <prvSwitchTimerLists>:
{
 800657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657e:	4647      	mov	r7, r8
 8006580:	46ce      	mov	lr, r9
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006582:	2328      	movs	r3, #40	; 0x28
{
 8006584:	b580      	push	{r7, lr}
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006586:	4698      	mov	r8, r3
 8006588:	2704      	movs	r7, #4
 800658a:	4e1a      	ldr	r6, [pc, #104]	; (80065f4 <prvSwitchTimerLists+0x78>)
{
 800658c:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800658e:	e00e      	b.n	80065ae <prvSwitchTimerLists+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006590:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006592:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006594:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006596:	1d25      	adds	r5, r4, #4
 8006598:	0028      	movs	r0, r5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800659a:	4691      	mov	r9, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800659c:	f7fe fb9a 	bl	8004cd4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065a0:	6a23      	ldr	r3, [r4, #32]
 80065a2:	0020      	movs	r0, r4
 80065a4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065a6:	4643      	mov	r3, r8
 80065a8:	5ce3      	ldrb	r3, [r4, r3]
 80065aa:	421f      	tst	r7, r3
 80065ac:	d10c      	bne.n	80065c8 <prvSwitchTimerLists+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ae:	6833      	ldr	r3, [r6, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	d1ec      	bne.n	8006590 <prvSwitchTimerLists+0x14>
	pxCurrentTimerList = pxOverflowTimerList;
 80065b6:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <prvSwitchTimerLists+0x7c>)
 80065b8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ba:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80065bc:	6031      	str	r1, [r6, #0]
}
 80065be:	b003      	add	sp, #12
 80065c0:	bcc0      	pop	{r6, r7}
 80065c2:	46b9      	mov	r9, r7
 80065c4:	46b0      	mov	r8, r6
 80065c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065c8:	69a3      	ldr	r3, [r4, #24]
 80065ca:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80065cc:	4599      	cmp	r9, r3
 80065ce:	d206      	bcs.n	80065de <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065d0:	0029      	movs	r1, r5
 80065d2:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065d4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065d6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065d8:	f7fe fb64 	bl	8004ca4 <vListInsert>
 80065dc:	e7e7      	b.n	80065ae <prvSwitchTimerLists+0x32>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065de:	2300      	movs	r3, #0
 80065e0:	464a      	mov	r2, r9
 80065e2:	2100      	movs	r1, #0
 80065e4:	0020      	movs	r0, r4
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	f7ff ff9a 	bl	8006520 <xTimerGenericCommand>
				configASSERT( xResult );
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1de      	bne.n	80065ae <prvSwitchTimerLists+0x32>
 80065f0:	b672      	cpsid	i
 80065f2:	e7fe      	b.n	80065f2 <prvSwitchTimerLists+0x76>
 80065f4:	20000f2c 	.word	0x20000f2c
 80065f8:	20000f30 	.word	0x20000f30

080065fc <prvTimerTask>:
{
 80065fc:	4b81      	ldr	r3, [pc, #516]	; (8006804 <prvTimerTask+0x208>)
 80065fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006600:	464e      	mov	r6, r9
 8006602:	4699      	mov	r9, r3
 8006604:	4b80      	ldr	r3, [pc, #512]	; (8006808 <prvTimerTask+0x20c>)
 8006606:	46de      	mov	lr, fp
 8006608:	469b      	mov	fp, r3
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800660a:	2328      	movs	r3, #40	; 0x28
{
 800660c:	4645      	mov	r5, r8
 800660e:	4657      	mov	r7, sl
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006610:	4698      	mov	r8, r3
{
 8006612:	b5e0      	push	{r5, r6, r7, lr}
 8006614:	4f7d      	ldr	r7, [pc, #500]	; (800680c <prvTimerTask+0x210>)
 8006616:	4d7e      	ldr	r5, [pc, #504]	; (8006810 <prvTimerTask+0x214>)
 8006618:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800661a:	464b      	mov	r3, r9
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681e      	ldr	r6, [r3, #0]
 8006620:	2e00      	cmp	r6, #0
 8006622:	d100      	bne.n	8006626 <prvTimerTask+0x2a>
 8006624:	e096      	b.n	8006754 <prvTimerTask+0x158>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800662a:	f7ff fbef 	bl	8005e0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800662e:	f7ff fc01 	bl	8005e34 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006632:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8006634:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8006636:	4283      	cmp	r3, r0
 8006638:	d900      	bls.n	800663c <prvTimerTask+0x40>
 800663a:	e0a5      	b.n	8006788 <prvTimerTask+0x18c>
	xLastTime = xTimeNow;
 800663c:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800663e:	4286      	cmp	r6, r0
 8006640:	d800      	bhi.n	8006644 <prvTimerTask+0x48>
 8006642:	e0aa      	b.n	800679a <prvTimerTask+0x19e>
 8006644:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006646:	6828      	ldr	r0, [r5, #0]
 8006648:	1b31      	subs	r1, r6, r4
 800664a:	f7ff f811 	bl	8005670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800664e:	f7ff fbe5 	bl	8005e1c <xTaskResumeAll>
 8006652:	2800      	cmp	r0, #0
 8006654:	d100      	bne.n	8006658 <prvTimerTask+0x5c>
 8006656:	e094      	b.n	8006782 <prvTimerTask+0x186>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006658:	2301      	movs	r3, #1
 800665a:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665c:	2200      	movs	r2, #0
 800665e:	6828      	ldr	r0, [r5, #0]
 8006660:	a906      	add	r1, sp, #24
 8006662:	f7fe fe77 	bl	8005354 <xQueueReceive>
 8006666:	2800      	cmp	r0, #0
 8006668:	d0d7      	beq.n	800661a <prvTimerTask+0x1e>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	db62      	blt.n	8006738 <prvTimerTask+0x13c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006672:	9c08      	ldr	r4, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006674:	6963      	ldr	r3, [r4, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800667a:	1d20      	adds	r0, r4, #4
 800667c:	f7fe fb2a 	bl	8004cd4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006680:	f7ff fbd8 	bl	8005e34 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006684:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8006686:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8006688:	4298      	cmp	r0, r3
 800668a:	d200      	bcs.n	800668e <prvTimerTask+0x92>
 800668c:	e082      	b.n	8006794 <prvTimerTask+0x198>
	xLastTime = xTimeNow;
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 8006692:	2b09      	cmp	r3, #9
 8006694:	d8e2      	bhi.n	800665c <prvTimerTask+0x60>
 8006696:	4a5f      	ldr	r2, [pc, #380]	; (8006814 <prvTimerTask+0x218>)
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	58d3      	ldr	r3, [r2, r3]
 800669c:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800669e:	4643      	mov	r3, r8
 80066a0:	2201      	movs	r2, #1
 80066a2:	5ce3      	ldrb	r3, [r4, r3]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066a4:	0020      	movs	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066a6:	4313      	orrs	r3, r2
 80066a8:	4642      	mov	r2, r8
 80066aa:	54a3      	strb	r3, [r4, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	9a03      	ldr	r2, [sp, #12]
 80066b2:	69a3      	ldr	r3, [r4, #24]
 80066b4:	4694      	mov	ip, r2
 80066b6:	4463      	add	r3, ip
 80066b8:	0019      	movs	r1, r3
 80066ba:	0013      	movs	r3, r2
 80066bc:	0032      	movs	r2, r6
 80066be:	f7ff feb1 	bl	8006424 <prvInsertTimerInActiveList>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0ca      	beq.n	800665c <prvTimerTask+0x60>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066c6:	6a23      	ldr	r3, [r4, #32]
 80066c8:	0020      	movs	r0, r4
 80066ca:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066cc:	4643      	mov	r3, r8
 80066ce:	5ce3      	ldrb	r3, [r4, r3]
 80066d0:	075b      	lsls	r3, r3, #29
 80066d2:	d5c3      	bpl.n	800665c <prvTimerTask+0x60>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066d4:	69a1      	ldr	r1, [r4, #24]
 80066d6:	9b07      	ldr	r3, [sp, #28]
 80066d8:	468c      	mov	ip, r1
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	4463      	add	r3, ip
 80066de:	001a      	movs	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	0020      	movs	r0, r4
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	f7ff ff1a 	bl	8006520 <xTimerGenericCommand>
							configASSERT( xResult );
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d1b5      	bne.n	800665c <prvTimerTask+0x60>
 80066f0:	b672      	cpsid	i
 80066f2:	e7fe      	b.n	80066f2 <prvTimerTask+0xf6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f4:	4643      	mov	r3, r8
 80066f6:	2201      	movs	r2, #1
 80066f8:	5ce3      	ldrb	r3, [r4, r3]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066fa:	9907      	ldr	r1, [sp, #28]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066fc:	4313      	orrs	r3, r2
 80066fe:	4642      	mov	r2, r8
 8006700:	54a3      	strb	r3, [r4, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006702:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006704:	2900      	cmp	r1, #0
 8006706:	d07a      	beq.n	80067fe <prvTimerTask+0x202>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006708:	0033      	movs	r3, r6
 800670a:	0032      	movs	r2, r6
 800670c:	0020      	movs	r0, r4
 800670e:	1989      	adds	r1, r1, r6
 8006710:	f7ff fe88 	bl	8006424 <prvInsertTimerInActiveList>
					break;
 8006714:	e7a2      	b.n	800665c <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006716:	4643      	mov	r3, r8
 8006718:	4652      	mov	r2, sl
 800671a:	5ce3      	ldrb	r3, [r4, r3]
 800671c:	4393      	bics	r3, r2
 800671e:	4642      	mov	r2, r8
 8006720:	54a3      	strb	r3, [r4, r2]
					break;
 8006722:	e79b      	b.n	800665c <prvTimerTask+0x60>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006724:	4643      	mov	r3, r8
 8006726:	2202      	movs	r2, #2
 8006728:	5ce3      	ldrb	r3, [r4, r3]
 800672a:	421a      	tst	r2, r3
 800672c:	d04e      	beq.n	80067cc <prvTimerTask+0x1d0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800672e:	4652      	mov	r2, sl
 8006730:	4393      	bics	r3, r2
 8006732:	4642      	mov	r2, r8
 8006734:	54a3      	strb	r3, [r4, r2]
 8006736:	e791      	b.n	800665c <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	9903      	ldr	r1, [sp, #12]
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	9804      	ldr	r0, [sp, #16]
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800674a:	9b06      	ldr	r3, [sp, #24]
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	db84      	blt.n	800665c <prvTimerTask+0x60>
 8006752:	e78e      	b.n	8006672 <prvTimerTask+0x76>
	vTaskSuspendAll();
 8006754:	f7ff fb5a 	bl	8005e0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006758:	f7ff fb6c 	bl	8005e34 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800675c:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800675e:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8006760:	4298      	cmp	r0, r3
 8006762:	d311      	bcc.n	8006788 <prvTimerTask+0x18c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006764:	465b      	mov	r3, fp
 8006766:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006768:	6828      	ldr	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800676a:	681a      	ldr	r2, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800676c:	1b31      	subs	r1, r6, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800676e:	4253      	negs	r3, r2
 8006770:	415a      	adcs	r2, r3
	xLastTime = xTimeNow;
 8006772:	603c      	str	r4, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006774:	f7fe ff7c 	bl	8005670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006778:	f7ff fb50 	bl	8005e1c <xTaskResumeAll>
 800677c:	2800      	cmp	r0, #0
 800677e:	d000      	beq.n	8006782 <prvTimerTask+0x186>
 8006780:	e76a      	b.n	8006658 <prvTimerTask+0x5c>
					portYIELD_WITHIN_API();
 8006782:	f7fe faf9 	bl	8004d78 <vPortYield>
 8006786:	e767      	b.n	8006658 <prvTimerTask+0x5c>
		prvSwitchTimerLists();
 8006788:	f7ff fef8 	bl	800657c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800678c:	603c      	str	r4, [r7, #0]
			( void ) xTaskResumeAll();
 800678e:	f7ff fb45 	bl	8005e1c <xTaskResumeAll>
 8006792:	e761      	b.n	8006658 <prvTimerTask+0x5c>
		prvSwitchTimerLists();
 8006794:	f7ff fef2 	bl	800657c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006798:	e779      	b.n	800668e <prvTimerTask+0x92>
				( void ) xTaskResumeAll();
 800679a:	f7ff fb3f 	bl	8005e1c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679e:	464b      	mov	r3, r9
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a8:	1d18      	adds	r0, r3, #4
 80067aa:	f7fe fa93 	bl	8004cd4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ae:	4653      	mov	r3, sl
 80067b0:	4642      	mov	r2, r8
 80067b2:	5c9b      	ldrb	r3, [r3, r2]
 80067b4:	075a      	lsls	r2, r3, #29
 80067b6:	d40d      	bmi.n	80067d4 <prvTimerTask+0x1d8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067b8:	2201      	movs	r2, #1
 80067ba:	4641      	mov	r1, r8
 80067bc:	4393      	bics	r3, r2
 80067be:	4652      	mov	r2, sl
 80067c0:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c2:	4653      	mov	r3, sl
 80067c4:	4650      	mov	r0, sl
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	4798      	blx	r3
}
 80067ca:	e745      	b.n	8006658 <prvTimerTask+0x5c>
							vPortFree( pxTimer );
 80067cc:	0020      	movs	r0, r4
 80067ce:	f7fe fa23 	bl	8004c18 <vPortFree>
 80067d2:	e743      	b.n	800665c <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067d4:	4653      	mov	r3, sl
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	0022      	movs	r2, r4
 80067da:	18f1      	adds	r1, r6, r3
 80067dc:	4650      	mov	r0, sl
 80067de:	0033      	movs	r3, r6
 80067e0:	f7ff fe20 	bl	8006424 <prvInsertTimerInActiveList>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0ec      	beq.n	80067c2 <prvTimerTask+0x1c6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e8:	2300      	movs	r3, #0
 80067ea:	0032      	movs	r2, r6
 80067ec:	2100      	movs	r1, #0
 80067ee:	4650      	mov	r0, sl
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	f7ff fe95 	bl	8006520 <xTimerGenericCommand>
			configASSERT( xResult );
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d1e3      	bne.n	80067c2 <prvTimerTask+0x1c6>
 80067fa:	b672      	cpsid	i
 80067fc:	e7fe      	b.n	80067fc <prvTimerTask+0x200>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067fe:	b672      	cpsid	i
 8006800:	e7fe      	b.n	8006800 <prvTimerTask+0x204>
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	20000f2c 	.word	0x20000f2c
 8006808:	20000f30 	.word	0x20000f30
 800680c:	20000ffc 	.word	0x20000ffc
 8006810:	20001050 	.word	0x20001050
 8006814:	08006cdc 	.word	0x08006cdc

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	2600      	movs	r6, #0
 800681c:	4d0c      	ldr	r5, [pc, #48]	; (8006850 <__libc_init_array+0x38>)
 800681e:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	2600      	movs	r6, #0
 800682a:	f000 f8f9 	bl	8006a20 <_init>
 800682e:	4d0a      	ldr	r5, [pc, #40]	; (8006858 <__libc_init_array+0x40>)
 8006830:	4c0a      	ldr	r4, [pc, #40]	; (800685c <__libc_init_array+0x44>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	00b3      	lsls	r3, r6, #2
 800683e:	58eb      	ldr	r3, [r5, r3]
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	00b3      	lsls	r3, r6, #2
 8006848:	58eb      	ldr	r3, [r5, r3]
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	08006d6c 	.word	0x08006d6c
 8006854:	08006d6c 	.word	0x08006d6c
 8006858:	08006d6c 	.word	0x08006d6c
 800685c:	08006d70 	.word	0x08006d70

08006860 <__retarget_lock_acquire_recursive>:
 8006860:	4770      	bx	lr

08006862 <__retarget_lock_release_recursive>:
 8006862:	4770      	bx	lr

08006864 <memcpy>:
 8006864:	2300      	movs	r3, #0
 8006866:	b510      	push	{r4, lr}
 8006868:	429a      	cmp	r2, r3
 800686a:	d100      	bne.n	800686e <memcpy+0xa>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	5ccc      	ldrb	r4, [r1, r3]
 8006870:	54c4      	strb	r4, [r0, r3]
 8006872:	3301      	adds	r3, #1
 8006874:	e7f8      	b.n	8006868 <memcpy+0x4>

08006876 <memset>:
 8006876:	0003      	movs	r3, r0
 8006878:	1882      	adds	r2, r0, r2
 800687a:	4293      	cmp	r3, r2
 800687c:	d100      	bne.n	8006880 <memset+0xa>
 800687e:	4770      	bx	lr
 8006880:	7019      	strb	r1, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	e7f9      	b.n	800687a <memset+0x4>

08006886 <cleanup_glue>:
 8006886:	b570      	push	{r4, r5, r6, lr}
 8006888:	000d      	movs	r5, r1
 800688a:	6809      	ldr	r1, [r1, #0]
 800688c:	0004      	movs	r4, r0
 800688e:	2900      	cmp	r1, #0
 8006890:	d001      	beq.n	8006896 <cleanup_glue+0x10>
 8006892:	f7ff fff8 	bl	8006886 <cleanup_glue>
 8006896:	0029      	movs	r1, r5
 8006898:	0020      	movs	r0, r4
 800689a:	f000 f877 	bl	800698c <_free_r>
 800689e:	bd70      	pop	{r4, r5, r6, pc}

080068a0 <_reclaim_reent>:
 80068a0:	4b31      	ldr	r3, [pc, #196]	; (8006968 <_reclaim_reent+0xc8>)
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	0004      	movs	r4, r0
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d049      	beq.n	8006940 <_reclaim_reent+0xa0>
 80068ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <_reclaim_reent+0x28>
 80068b2:	2500      	movs	r5, #0
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	42ab      	cmp	r3, r5
 80068b8:	d147      	bne.n	800694a <_reclaim_reent+0xaa>
 80068ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068bc:	6819      	ldr	r1, [r3, #0]
 80068be:	2900      	cmp	r1, #0
 80068c0:	d002      	beq.n	80068c8 <_reclaim_reent+0x28>
 80068c2:	0020      	movs	r0, r4
 80068c4:	f000 f862 	bl	800698c <_free_r>
 80068c8:	6961      	ldr	r1, [r4, #20]
 80068ca:	2900      	cmp	r1, #0
 80068cc:	d002      	beq.n	80068d4 <_reclaim_reent+0x34>
 80068ce:	0020      	movs	r0, r4
 80068d0:	f000 f85c 	bl	800698c <_free_r>
 80068d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d002      	beq.n	80068e0 <_reclaim_reent+0x40>
 80068da:	0020      	movs	r0, r4
 80068dc:	f000 f856 	bl	800698c <_free_r>
 80068e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068e2:	2900      	cmp	r1, #0
 80068e4:	d002      	beq.n	80068ec <_reclaim_reent+0x4c>
 80068e6:	0020      	movs	r0, r4
 80068e8:	f000 f850 	bl	800698c <_free_r>
 80068ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068ee:	2900      	cmp	r1, #0
 80068f0:	d002      	beq.n	80068f8 <_reclaim_reent+0x58>
 80068f2:	0020      	movs	r0, r4
 80068f4:	f000 f84a 	bl	800698c <_free_r>
 80068f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d002      	beq.n	8006904 <_reclaim_reent+0x64>
 80068fe:	0020      	movs	r0, r4
 8006900:	f000 f844 	bl	800698c <_free_r>
 8006904:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006906:	2900      	cmp	r1, #0
 8006908:	d002      	beq.n	8006910 <_reclaim_reent+0x70>
 800690a:	0020      	movs	r0, r4
 800690c:	f000 f83e 	bl	800698c <_free_r>
 8006910:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006912:	2900      	cmp	r1, #0
 8006914:	d002      	beq.n	800691c <_reclaim_reent+0x7c>
 8006916:	0020      	movs	r0, r4
 8006918:	f000 f838 	bl	800698c <_free_r>
 800691c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691e:	2900      	cmp	r1, #0
 8006920:	d002      	beq.n	8006928 <_reclaim_reent+0x88>
 8006922:	0020      	movs	r0, r4
 8006924:	f000 f832 	bl	800698c <_free_r>
 8006928:	69a3      	ldr	r3, [r4, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <_reclaim_reent+0xa0>
 800692e:	0020      	movs	r0, r4
 8006930:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006932:	4798      	blx	r3
 8006934:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006936:	2900      	cmp	r1, #0
 8006938:	d002      	beq.n	8006940 <_reclaim_reent+0xa0>
 800693a:	0020      	movs	r0, r4
 800693c:	f7ff ffa3 	bl	8006886 <cleanup_glue>
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	5949      	ldr	r1, [r1, r5]
 8006944:	2900      	cmp	r1, #0
 8006946:	d108      	bne.n	800695a <_reclaim_reent+0xba>
 8006948:	3504      	adds	r5, #4
 800694a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694c:	68d9      	ldr	r1, [r3, #12]
 800694e:	2d80      	cmp	r5, #128	; 0x80
 8006950:	d1f7      	bne.n	8006942 <_reclaim_reent+0xa2>
 8006952:	0020      	movs	r0, r4
 8006954:	f000 f81a 	bl	800698c <_free_r>
 8006958:	e7af      	b.n	80068ba <_reclaim_reent+0x1a>
 800695a:	680e      	ldr	r6, [r1, #0]
 800695c:	0020      	movs	r0, r4
 800695e:	f000 f815 	bl	800698c <_free_r>
 8006962:	0031      	movs	r1, r6
 8006964:	e7ee      	b.n	8006944 <_reclaim_reent+0xa4>
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	20000010 	.word	0x20000010

0800696c <__malloc_lock>:
 800696c:	b510      	push	{r4, lr}
 800696e:	4802      	ldr	r0, [pc, #8]	; (8006978 <__malloc_lock+0xc>)
 8006970:	f7ff ff76 	bl	8006860 <__retarget_lock_acquire_recursive>
 8006974:	bd10      	pop	{r4, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	200016e8 	.word	0x200016e8

0800697c <__malloc_unlock>:
 800697c:	b510      	push	{r4, lr}
 800697e:	4802      	ldr	r0, [pc, #8]	; (8006988 <__malloc_unlock+0xc>)
 8006980:	f7ff ff6f 	bl	8006862 <__retarget_lock_release_recursive>
 8006984:	bd10      	pop	{r4, pc}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	200016e8 	.word	0x200016e8

0800698c <_free_r>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	0005      	movs	r5, r0
 8006990:	2900      	cmp	r1, #0
 8006992:	d010      	beq.n	80069b6 <_free_r+0x2a>
 8006994:	1f0c      	subs	r4, r1, #4
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	da00      	bge.n	800699e <_free_r+0x12>
 800699c:	18e4      	adds	r4, r4, r3
 800699e:	0028      	movs	r0, r5
 80069a0:	f7ff ffe4 	bl	800696c <__malloc_lock>
 80069a4:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <_free_r+0x90>)
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <_free_r+0x2c>
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	6014      	str	r4, [r2, #0]
 80069b0:	0028      	movs	r0, r5
 80069b2:	f7ff ffe3 	bl	800697c <__malloc_unlock>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d908      	bls.n	80069ce <_free_r+0x42>
 80069bc:	6821      	ldr	r1, [r4, #0]
 80069be:	1860      	adds	r0, r4, r1
 80069c0:	4283      	cmp	r3, r0
 80069c2:	d1f3      	bne.n	80069ac <_free_r+0x20>
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	1841      	adds	r1, r0, r1
 80069ca:	6021      	str	r1, [r4, #0]
 80069cc:	e7ee      	b.n	80069ac <_free_r+0x20>
 80069ce:	001a      	movs	r2, r3
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <_free_r+0x4e>
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	d9f9      	bls.n	80069ce <_free_r+0x42>
 80069da:	6811      	ldr	r1, [r2, #0]
 80069dc:	1850      	adds	r0, r2, r1
 80069de:	42a0      	cmp	r0, r4
 80069e0:	d10b      	bne.n	80069fa <_free_r+0x6e>
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	1809      	adds	r1, r1, r0
 80069e6:	1850      	adds	r0, r2, r1
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	4283      	cmp	r3, r0
 80069ec:	d1e0      	bne.n	80069b0 <_free_r+0x24>
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	1841      	adds	r1, r0, r1
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	6053      	str	r3, [r2, #4]
 80069f8:	e7da      	b.n	80069b0 <_free_r+0x24>
 80069fa:	42a0      	cmp	r0, r4
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x78>
 80069fe:	230c      	movs	r3, #12
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	e7d5      	b.n	80069b0 <_free_r+0x24>
 8006a04:	6821      	ldr	r1, [r4, #0]
 8006a06:	1860      	adds	r0, r4, r1
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	d103      	bne.n	8006a14 <_free_r+0x88>
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	1841      	adds	r1, r0, r1
 8006a12:	6021      	str	r1, [r4, #0]
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6054      	str	r4, [r2, #4]
 8006a18:	e7ca      	b.n	80069b0 <_free_r+0x24>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	20001058 	.word	0x20001058

08006a20 <_init>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr

08006a2c <_fini>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr
