
Minirys_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065bc  080065bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c4  080065c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080065cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001884  20000074  08006640  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018f8  08006640  000218f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032f28  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005783  00000000  00000000  00052fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00058748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001aca0  00000000  00000000  00059ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026fbc  00000000  00000000  00074988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a7b53  00000000  00000000  0009b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00143497  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0001a876  00000000  00000000  001434ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002f70  00000000  00000000  0015dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004544  00000000  00000000  00160cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063a0 	.word	0x080063a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080063a0 	.word	0x080063a0

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__gnu_thumb1_case_uhi>:
 8000144:	b403      	push	{r0, r1}
 8000146:	4671      	mov	r1, lr
 8000148:	0849      	lsrs	r1, r1, #1
 800014a:	0040      	lsls	r0, r0, #1
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	5a09      	ldrh	r1, [r1, r0]
 8000150:	0049      	lsls	r1, r1, #1
 8000152:	448e      	add	lr, r1
 8000154:	bc03      	pop	{r0, r1}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f8f0 	bl	8000440 <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__divsi3>:
 800026c:	4603      	mov	r3, r0
 800026e:	430b      	orrs	r3, r1
 8000270:	d47f      	bmi.n	8000372 <__divsi3+0x106>
 8000272:	2200      	movs	r2, #0
 8000274:	0843      	lsrs	r3, r0, #1
 8000276:	428b      	cmp	r3, r1
 8000278:	d374      	bcc.n	8000364 <__divsi3+0xf8>
 800027a:	0903      	lsrs	r3, r0, #4
 800027c:	428b      	cmp	r3, r1
 800027e:	d35f      	bcc.n	8000340 <__divsi3+0xd4>
 8000280:	0a03      	lsrs	r3, r0, #8
 8000282:	428b      	cmp	r3, r1
 8000284:	d344      	bcc.n	8000310 <__divsi3+0xa4>
 8000286:	0b03      	lsrs	r3, r0, #12
 8000288:	428b      	cmp	r3, r1
 800028a:	d328      	bcc.n	80002de <__divsi3+0x72>
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d30d      	bcc.n	80002ae <__divsi3+0x42>
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	ba12      	rev	r2, r2
 8000298:	0c03      	lsrs	r3, r0, #16
 800029a:	428b      	cmp	r3, r1
 800029c:	d302      	bcc.n	80002a4 <__divsi3+0x38>
 800029e:	1212      	asrs	r2, r2, #8
 80002a0:	0209      	lsls	r1, r1, #8
 80002a2:	d065      	beq.n	8000370 <__divsi3+0x104>
 80002a4:	0b03      	lsrs	r3, r0, #12
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d319      	bcc.n	80002de <__divsi3+0x72>
 80002aa:	e000      	b.n	80002ae <__divsi3+0x42>
 80002ac:	0a09      	lsrs	r1, r1, #8
 80002ae:	0bc3      	lsrs	r3, r0, #15
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x4c>
 80002b4:	03cb      	lsls	r3, r1, #15
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b83      	lsrs	r3, r0, #14
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x58>
 80002c0:	038b      	lsls	r3, r1, #14
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b43      	lsrs	r3, r0, #13
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x64>
 80002cc:	034b      	lsls	r3, r1, #13
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x70>
 80002d8:	030b      	lsls	r3, r1, #12
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0ac3      	lsrs	r3, r0, #11
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x7c>
 80002e4:	02cb      	lsls	r3, r1, #11
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a83      	lsrs	r3, r0, #10
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x88>
 80002f0:	028b      	lsls	r3, r1, #10
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a43      	lsrs	r3, r0, #9
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0x94>
 80002fc:	024b      	lsls	r3, r1, #9
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	0a03      	lsrs	r3, r0, #8
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__divsi3+0xa0>
 8000308:	020b      	lsls	r3, r1, #8
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	d2cd      	bcs.n	80002ac <__divsi3+0x40>
 8000310:	09c3      	lsrs	r3, r0, #7
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xae>
 8000316:	01cb      	lsls	r3, r1, #7
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0983      	lsrs	r3, r0, #6
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xba>
 8000322:	018b      	lsls	r3, r1, #6
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0943      	lsrs	r3, r0, #5
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xc6>
 800032e:	014b      	lsls	r3, r1, #5
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xd2>
 800033a:	010b      	lsls	r3, r1, #4
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	08c3      	lsrs	r3, r0, #3
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xde>
 8000346:	00cb      	lsls	r3, r1, #3
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0883      	lsrs	r3, r0, #2
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xea>
 8000352:	008b      	lsls	r3, r1, #2
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0843      	lsrs	r3, r0, #1
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__divsi3+0xf6>
 800035e:	004b      	lsls	r3, r1, #1
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	1a41      	subs	r1, r0, r1
 8000366:	d200      	bcs.n	800036a <__divsi3+0xfe>
 8000368:	4601      	mov	r1, r0
 800036a:	4152      	adcs	r2, r2
 800036c:	4610      	mov	r0, r2
 800036e:	4770      	bx	lr
 8000370:	e05d      	b.n	800042e <__divsi3+0x1c2>
 8000372:	0fca      	lsrs	r2, r1, #31
 8000374:	d000      	beq.n	8000378 <__divsi3+0x10c>
 8000376:	4249      	negs	r1, r1
 8000378:	1003      	asrs	r3, r0, #32
 800037a:	d300      	bcc.n	800037e <__divsi3+0x112>
 800037c:	4240      	negs	r0, r0
 800037e:	4053      	eors	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	469c      	mov	ip, r3
 8000384:	0903      	lsrs	r3, r0, #4
 8000386:	428b      	cmp	r3, r1
 8000388:	d32d      	bcc.n	80003e6 <__divsi3+0x17a>
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d312      	bcc.n	80003b6 <__divsi3+0x14a>
 8000390:	22fc      	movs	r2, #252	; 0xfc
 8000392:	0189      	lsls	r1, r1, #6
 8000394:	ba12      	rev	r2, r2
 8000396:	0a03      	lsrs	r3, r0, #8
 8000398:	428b      	cmp	r3, r1
 800039a:	d30c      	bcc.n	80003b6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d308      	bcc.n	80003b6 <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d304      	bcc.n	80003b6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	d03a      	beq.n	8000426 <__divsi3+0x1ba>
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	e000      	b.n	80003b6 <__divsi3+0x14a>
 80003b4:	0989      	lsrs	r1, r1, #6
 80003b6:	09c3      	lsrs	r3, r0, #7
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x154>
 80003bc:	01cb      	lsls	r3, r1, #7
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0983      	lsrs	r3, r0, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x160>
 80003c8:	018b      	lsls	r3, r1, #6
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0943      	lsrs	r3, r0, #5
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x16c>
 80003d4:	014b      	lsls	r3, r1, #5
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0903      	lsrs	r3, r0, #4
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x178>
 80003e0:	010b      	lsls	r3, r1, #4
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	08c3      	lsrs	r3, r0, #3
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x184>
 80003ec:	00cb      	lsls	r3, r1, #3
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	0883      	lsrs	r3, r0, #2
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x190>
 80003f8:	008b      	lsls	r3, r1, #2
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	d2d9      	bcs.n	80003b4 <__divsi3+0x148>
 8000400:	0843      	lsrs	r3, r0, #1
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__divsi3+0x19e>
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	d200      	bcs.n	8000412 <__divsi3+0x1a6>
 8000410:	4601      	mov	r1, r0
 8000412:	4663      	mov	r3, ip
 8000414:	4152      	adcs	r2, r2
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	4610      	mov	r0, r2
 800041a:	d301      	bcc.n	8000420 <__divsi3+0x1b4>
 800041c:	4240      	negs	r0, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d500      	bpl.n	8000424 <__divsi3+0x1b8>
 8000422:	4249      	negs	r1, r1
 8000424:	4770      	bx	lr
 8000426:	4663      	mov	r3, ip
 8000428:	105b      	asrs	r3, r3, #1
 800042a:	d300      	bcc.n	800042e <__divsi3+0x1c2>
 800042c:	4240      	negs	r0, r0
 800042e:	b501      	push	{r0, lr}
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f805 	bl	8000440 <__aeabi_idiv0>
 8000436:	bd02      	pop	{r1, pc}

08000438 <__aeabi_idivmod>:
 8000438:	2900      	cmp	r1, #0
 800043a:	d0f8      	beq.n	800042e <__divsi3+0x1c2>
 800043c:	e716      	b.n	800026c <__divsi3>
 800043e:	4770      	bx	lr

08000440 <__aeabi_idiv0>:
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_uldivmod>:
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <__aeabi_uldivmod+0x28>
 8000448:	2a00      	cmp	r2, #0
 800044a:	d10f      	bne.n	800046c <__aeabi_uldivmod+0x28>
 800044c:	2900      	cmp	r1, #0
 800044e:	d100      	bne.n	8000452 <__aeabi_uldivmod+0xe>
 8000450:	2800      	cmp	r0, #0
 8000452:	d002      	beq.n	800045a <__aeabi_uldivmod+0x16>
 8000454:	2100      	movs	r1, #0
 8000456:	43c9      	mvns	r1, r1
 8000458:	1c08      	adds	r0, r1, #0
 800045a:	b407      	push	{r0, r1, r2}
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <__aeabi_uldivmod+0x24>)
 800045e:	a102      	add	r1, pc, #8	; (adr r1, 8000468 <__aeabi_uldivmod+0x24>)
 8000460:	1840      	adds	r0, r0, r1
 8000462:	9002      	str	r0, [sp, #8]
 8000464:	bd03      	pop	{r0, r1, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	ffffffd9 	.word	0xffffffd9
 800046c:	b403      	push	{r0, r1}
 800046e:	4668      	mov	r0, sp
 8000470:	b501      	push	{r0, lr}
 8000472:	9802      	ldr	r0, [sp, #8]
 8000474:	f000 f806 	bl	8000484 <__udivmoddi4>
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	469e      	mov	lr, r3
 800047c:	b002      	add	sp, #8
 800047e:	bc0c      	pop	{r2, r3}
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <MSM_DataCopy>:
      * @param Length Number of data to be transferred from ADC peripheral to memory
      *
      */
void MSM_DataCopy(analog_data * Dest,const analog_data * Source, uint8_t NoOfBytes )
    {
    for(int i =0; i<NoOfBytes;++i)
 8000670:	2300      	movs	r3, #0
    {
 8000672:	b510      	push	{r4, lr}
 8000674:	0052      	lsls	r2, r2, #1
    for(int i =0; i<NoOfBytes;++i)
 8000676:	4293      	cmp	r3, r2
 8000678:	d100      	bne.n	800067c <MSM_DataCopy+0xc>
	{
	Dest[i]=Source[i];
	}


    }
 800067a:	bd10      	pop	{r4, pc}
	Dest[i]=Source[i];
 800067c:	5acc      	ldrh	r4, [r1, r3]
 800067e:	52c4      	strh	r4, [r0, r3]
    for(int i =0; i<NoOfBytes;++i)
 8000680:	3302      	adds	r3, #2
 8000682:	e7f8      	b.n	8000676 <MSM_DataCopy+0x6>

08000684 <main_logic_setup>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_main_logic_setup */
void main_logic_setup(void *argument)
{
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 5 */
    HAL_TIM_Base_Start(&htim17);
 8000686:	4e1b      	ldr	r6, [pc, #108]	; (80006f4 <main_logic_setup+0x70>)
 8000688:	0030      	movs	r0, r6
 800068a:	f001 feab 	bl	80023e4 <HAL_TIM_Base_Start>
struct VCtateMachineDataType VCM;


void MSM_StateInit(struct MSM_StateDataType *MSM)
    {
    MSM->state = MSM_RUN_STATE;
 800068e:	2302      	movs	r3, #2
 8000690:	4c19      	ldr	r4, [pc, #100]	; (80006f8 <main_logic_setup+0x74>)
 8000692:	76e3      	strb	r3, [r4, #27]
  {


      //MSM_RunStateRuntime(&MachineStateData);
      //zablokowanie pamieci wspoldzielonej
     xSemaphoreTake(modbus_h.ModBusSphrHandle , 100);
 8000694:	4d19      	ldr	r5, [pc, #100]	; (80006fc <main_logic_setup+0x78>)
 8000696:	2164      	movs	r1, #100	; 0x64
 8000698:	002f      	movs	r7, r5
 800069a:	37c4      	adds	r7, #196	; 0xc4
 800069c:	6838      	ldr	r0, [r7, #0]
     HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, modbus_h.au16regs[0] & 0x1);
 800069e:	3598      	adds	r5, #152	; 0x98
     xSemaphoreTake(modbus_h.ModBusSphrHandle , 100);
 80006a0:	f004 fb25 	bl	8004cee <xQueueSemaphoreTake>
     HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, modbus_h.au16regs[0] & 0x1);
 80006a4:	682b      	ldr	r3, [r5, #0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	881a      	ldrh	r2, [r3, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <main_logic_setup+0x7c>)
 80006ae:	401a      	ands	r2, r3
 80006b0:	f001 fa36 	bl	8001b20 <HAL_GPIO_WritePin>

      //synchronizacja danych
      ModbusDATA[1]=MachineStateData.FanSpeedRPM;
 80006b4:	8b22      	ldrh	r2, [r4, #24]
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <main_logic_setup+0x80>)
      MSM_DataCopy(&ModbusDATA[2],&MachineStateData.AnalogInputs.ADCInput[0],12);
 80006b8:	0021      	movs	r1, r4
      ModbusDATA[1]=MachineStateData.FanSpeedRPM;
 80006ba:	805a      	strh	r2, [r3, #2]
      MSM_DataCopy(&ModbusDATA[2],&MachineStateData.AnalogInputs.ADCInput[0],12);
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <main_logic_setup+0x84>)
 80006be:	220c      	movs	r2, #12
 80006c0:	f7ff ffd6 	bl	8000670 <MSM_DataCopy>

     xSemaphoreGive(modbus_h.ModBusSphrHandle);
 80006c4:	2300      	movs	r3, #0
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	0019      	movs	r1, r3
 80006cc:	f004 f9b0 	bl	8004a30 <xQueueGenericSend>
	//odblokowanie pamieci wspoldzielonej


      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	20a0      	movs	r0, #160	; 0xa0
 80006d4:	0049      	lsls	r1, r1, #1
 80006d6:	05c0      	lsls	r0, r0, #23
 80006d8:	f001 fa28 	bl	8001b2c <HAL_GPIO_TogglePin>
      uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
      htim17.Instance->CNT=0;
 80006dc:	2300      	movs	r3, #0
      uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 80006de:	6832      	ldr	r2, [r6, #0]
      MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
      osDelay(20);
 80006e0:	2014      	movs	r0, #20
      uint32_t TmpFanSPeed=__HAL_TIM_GetCounter(&htim17);
 80006e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
      htim17.Instance->CNT=0;
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24
      MachineStateData.FanSpeedRPM=TmpFanSPeed*300;
 80006e6:	332d      	adds	r3, #45	; 0x2d
 80006e8:	33ff      	adds	r3, #255	; 0xff
 80006ea:	434b      	muls	r3, r1
 80006ec:	8323      	strh	r3, [r4, #24]
      osDelay(20);
 80006ee:	f003 ff7c 	bl	80045ea <osDelay>
  for(;;)
 80006f2:	e7cf      	b.n	8000694 <main_logic_setup+0x10>
 80006f4:	2000126c 	.word	0x2000126c
 80006f8:	200015dc 	.word	0x200015dc
 80006fc:	2000139c 	.word	0x2000139c
 8000700:	50000400 	.word	0x50000400
 8000704:	200012b8 	.word	0x200012b8
 8000708:	200012bc 	.word	0x200012bc

0800070c <MSM_PreflightCheck>:
 *
 *
 */

void MSM_PreflightCheck(struct MSM_StateDataType  * Robot_State)
    {
 800070c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 800070e:	2580      	movs	r5, #128	; 0x80
 8000710:	24a0      	movs	r4, #160	; 0xa0
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8000712:	4f1d      	ldr	r7, [pc, #116]	; (8000788 <MSM_PreflightCheck+0x7c>)
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000714:	4e1d      	ldr	r6, [pc, #116]	; (800078c <MSM_PreflightCheck+0x80>)
    {
 8000716:	9001      	str	r0, [sp, #4]
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	0038      	movs	r0, r7
 800071c:	2104      	movs	r1, #4
 800071e:	f001 f9ff 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8000722:	05e4      	lsls	r4, r4, #23
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000724:	0030      	movs	r0, r6
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8000726:	006d      	lsls	r5, r5, #1
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	f001 f9f8 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8000730:	0029      	movs	r1, r5
 8000732:	0020      	movs	r0, r4
 8000734:	2200      	movs	r2, #0
 8000736:	f001 f9f3 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ENABLE_SENSORS_GPIO_Port, ENABLE_SENSORS_Pin, 1);
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	2201      	movs	r2, #1
 800073e:	0020      	movs	r0, r4
 8000740:	0209      	lsls	r1, r1, #8
 8000742:	f001 f9ed 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000746:	20fa      	movs	r0, #250	; 0xfa
 8000748:	0080      	lsls	r0, r0, #2
 800074a:	f000 fba9 	bl	8000ea0 <HAL_Delay>

    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 1);
 800074e:	0038      	movs	r0, r7
 8000750:	2201      	movs	r2, #1
 8000752:	2104      	movs	r1, #4
 8000754:	f001 f9e4 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 8000758:	0030      	movs	r0, r6
 800075a:	2201      	movs	r2, #1
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	f001 f9df 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000762:	0029      	movs	r1, r5
 8000764:	0020      	movs	r0, r4
 8000766:	2201      	movs	r2, #1
 8000768:	f001 f9da 	bl	8001b20 <HAL_GPIO_WritePin>




    HAL_GPIO_WritePin(ENABLE_SENSORS_GPIO_Port, ENABLE_SENSORS_Pin, 0);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	2200      	movs	r2, #0
 8000770:	0020      	movs	r0, r4
 8000772:	0209      	lsls	r1, r1, #8
 8000774:	f001 f9d4 	bl	8001b20 <HAL_GPIO_WritePin>
    HAL_Delay(10);	//wait for capacitors to charge up
 8000778:	200a      	movs	r0, #10
 800077a:	f000 fb91 	bl	8000ea0 <HAL_Delay>

    //Check if harness or batteries are present
    if(1)//todo check 12V line (Batt+)
	{
	//todo calibrate ADC and save data to flash.
	Robot_State->BoardConfiguration = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	9a01      	ldr	r2, [sp, #4]
 8000782:	7693      	strb	r3, [r2, #26]
	    return;
	}

    Robot_State->BoardConfiguration = 2;
    return;
    }
 8000784:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	50000400 	.word	0x50000400
 800078c:	50000800 	.word	0x50000800

08000790 <SystemClock_Config>:
{
 8000790:	b510      	push	{r4, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000794:	2238      	movs	r2, #56	; 0x38
 8000796:	2100      	movs	r1, #0
 8000798:	a80e      	add	r0, sp, #56	; 0x38
 800079a:	f005 fd2c 	bl	80061f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	2210      	movs	r2, #16
 80007a0:	2100      	movs	r1, #0
 80007a2:	4668      	mov	r0, sp
 80007a4:	f005 fd27 	bl	80061f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	2228      	movs	r2, #40	; 0x28
 80007aa:	2100      	movs	r1, #0
 80007ac:	a804      	add	r0, sp, #16
 80007ae:	f005 fd22 	bl	80061f6 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b2:	2080      	movs	r0, #128	; 0x80
 80007b4:	0080      	lsls	r0, r0, #2
 80007b6:	f001 f9c1 	bl	8001b3c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007c4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007c6:	3308      	adds	r3, #8
 80007c8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	029b      	lsls	r3, r3, #10
 80007ce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	049b      	lsls	r3, r3, #18
 80007d4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007dc:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007e8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f001 f9d3 	bl	8001b94 <HAL_RCC_OscConfig>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fc:	2101      	movs	r1, #1
 80007fe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000804:	f001 fc30 	bl	8002068 <HAL_RCC_ClockConfig>
 8000808:	2800      	cmp	r0, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x80>
 800080c:	b672      	cpsid	i
  while (1)
 800080e:	e7fe      	b.n	800080e <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemClock_Config+0x9c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000812:	9005      	str	r0, [sp, #20]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000814:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000818:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081a:	f001 fd01 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	2800      	cmp	r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x96>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <SystemClock_Config+0x94>
}
 8000826:	b01c      	add	sp, #112	; 0x70
 8000828:	bd10      	pop	{r4, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	00004001 	.word	0x00004001

08000830 <main>:
{
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2601      	movs	r6, #1
{
 8000834:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000836:	f000 fb0d 	bl	8000e54 <HAL_Init>
  SystemClock_Config();
 800083a:	f7ff ffa9 	bl	8000790 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2214      	movs	r2, #20
 8000840:	2100      	movs	r1, #0
 8000842:	a805      	add	r0, sp, #20
 8000844:	f005 fcd7 	bl	80061f6 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800084a:	27de      	movs	r7, #222	; 0xde
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4db5      	ldr	r5, [pc, #724]	; (8000b24 <main+0x2f4>)
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800084e:	007f      	lsls	r7, r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000852:	48b5      	ldr	r0, [pc, #724]	; (8000b28 <main+0x2f8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4333      	orrs	r3, r6
 8000856:	636b      	str	r3, [r5, #52]	; 0x34
 8000858:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4033      	ands	r3, r6
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000864:	430a      	orrs	r2, r1
 8000866:	636a      	str	r2, [r5, #52]	; 0x34
 8000868:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800086a:	400b      	ands	r3, r1
 800086c:	9303      	str	r3, [sp, #12]
 800086e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000872:	1849      	adds	r1, r1, r1
 8000874:	430a      	orrs	r2, r1
 8000876:	636a      	str	r2, [r5, #52]	; 0x34
 8000878:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 800087a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	400b      	ands	r3, r1
 800087e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000880:	0039      	movs	r1, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 8000884:	f001 f94c 	bl	8001b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|ENABLE_SENSORS_Pin, GPIO_PIN_RESET);
 8000888:	2181      	movs	r1, #129	; 0x81
 800088a:	20a0      	movs	r0, #160	; 0xa0
 800088c:	2200      	movs	r2, #0
 800088e:	0209      	lsls	r1, r1, #8
 8000890:	05c0      	lsls	r0, r0, #23
 8000892:	f001 f945 	bl	8001b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	48a4      	ldr	r0, [pc, #656]	; (8000b2c <main+0x2fc>)
 800089c:	f001 f940 	bl	8001b20 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008a0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 80008a2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008a4:	a905      	add	r1, sp, #20
 80008a6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Power_Switch_Pin;
 80008a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(Power_Switch_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f001 f889 	bl	80019c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	489d      	ldr	r0, [pc, #628]	; (8000b28 <main+0x2f8>)
 80008b4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_B_Pin|ENABLE_STEPPER_MOTORS_Pin|ENABLE_TOFS_Pin|PWM_FAN_Pin
 80008b6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f001 f881 	bl	80019c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80008c2:	2281      	movs	r2, #129	; 0x81
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80008c6:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	a905      	add	r1, sp, #20
 80008ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_R_Pin|ENABLE_SENSORS_Pin;
 80008cc:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f001 f876 	bl	80019c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_G_Pin;
 80008d8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80008da:	4894      	ldr	r0, [pc, #592]	; (8000b2c <main+0x2fc>)
 80008dc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_G_Pin;
 80008de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f001 f86d 	bl	80019c4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80008ec:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ee:	4333      	orrs	r3, r6
 80008f0:	63ab      	str	r3, [r5, #56]	; 0x38
 80008f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80008f4:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80008f8:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80008fe:	f000 fe7b 	bl	80015f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000902:	2009      	movs	r0, #9
 8000904:	f000 fea2 	bl	800164c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000908:	4d89      	ldr	r5, [pc, #548]	; (8000b30 <main+0x300>)
 800090a:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <main+0x304>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090c:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 800090e:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000910:	23e1      	movs	r3, #225	; 0xe1
 8000912:	025b      	lsls	r3, r3, #9
 8000914:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000916:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000918:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091a:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091c:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091e:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000920:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000922:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000924:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000926:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	f002 fe13 	bl	8003554 <HAL_UART_Init>
 800092e:	0001      	movs	r1, r0
 8000930:	42a0      	cmp	r0, r4
 8000932:	d001      	beq.n	8000938 <main+0x108>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x106>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	0028      	movs	r0, r5
 800093a:	f002 ff51 	bl	80037e0 <HAL_UARTEx_SetTxFifoThreshold>
 800093e:	1e01      	subs	r1, r0, #0
 8000940:	d001      	beq.n	8000946 <main+0x116>
 8000942:	b672      	cpsid	i
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x114>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	0028      	movs	r0, r5
 8000948:	f002 ff6e 	bl	8003828 <HAL_UARTEx_SetRxFifoThreshold>
 800094c:	2800      	cmp	r0, #0
 800094e:	d001      	beq.n	8000954 <main+0x124>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x122>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000954:	0028      	movs	r0, r5
 8000956:	f002 ff25 	bl	80037a4 <HAL_UARTEx_DisableFifoMode>
 800095a:	1e07      	subs	r7, r0, #0
 800095c:	d001      	beq.n	8000962 <main+0x132>
 800095e:	b672      	cpsid	i
  while (1)
 8000960:	e7fe      	b.n	8000960 <main+0x130>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	0001      	movs	r1, r0
 8000964:	220c      	movs	r2, #12
 8000966:	a805      	add	r0, sp, #20
 8000968:	f005 fc45 	bl	80061f6 <memset>
  hadc1.Instance = ADC1;
 800096c:	4c72      	ldr	r4, [pc, #456]	; (8000b38 <main+0x308>)
 800096e:	4b73      	ldr	r3, [pc, #460]	; (8000b3c <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000970:	0020      	movs	r0, r4
  hadc1.Instance = ADC1;
 8000972:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000974:	23e0      	movs	r3, #224	; 0xe0
 8000976:	035b      	lsls	r3, r3, #13
 8000978:	6063      	str	r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	061b      	lsls	r3, r3, #24
 800097e:	6123      	str	r3, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000980:	2308      	movs	r3, #8
 8000982:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000984:	2302      	movs	r3, #2
 8000986:	33ff      	adds	r3, #255	; 0xff
 8000988:	8323      	strh	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098a:	1c63      	adds	r3, r4, #1
 800098c:	77df      	strb	r7, [r3, #31]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800098e:	0023      	movs	r3, r4
 8000990:	332c      	adds	r3, #44	; 0x2c
 8000992:	701e      	strb	r6, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000994:	2307      	movs	r3, #7
 8000996:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000998:	0023      	movs	r3, r4
 800099a:	333c      	adds	r3, #60	; 0x3c
 800099c:	701f      	strb	r7, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	059b      	lsls	r3, r3, #22
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a2:	60a7      	str	r7, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a4:	60e7      	str	r7, [r4, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009a6:	76a6      	strb	r6, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009a8:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009aa:	6267      	str	r7, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ae:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80009b0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b2:	f000 fa8b 	bl	8000ecc <HAL_ADC_Init>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d001      	beq.n	80009be <main+0x18e>
 80009ba:	b672      	cpsid	i
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x18c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	0020      	movs	r0, r4
 80009c0:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_0;
 80009c2:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009c4:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	f000 fc0f 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d001      	beq.n	80009d2 <main+0x1a2>
 80009ce:	b672      	cpsid	i
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <main+0x1a0>
  sConfig.Channel = ADC_CHANNEL_1;
 80009d2:	4b5b      	ldr	r3, [pc, #364]	; (8000b40 <main+0x310>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	0020      	movs	r0, r4
 80009d6:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_1;
 80009d8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	f000 fc05 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d001      	beq.n	80009e6 <main+0x1b6>
 80009e2:	b672      	cpsid	i
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x1b4>
  sConfig.Channel = ADC_CHANNEL_2;
 80009e6:	4b57      	ldr	r3, [pc, #348]	; (8000b44 <main+0x314>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e8:	0020      	movs	r0, r4
 80009ea:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_2;
 80009ec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	f000 fbfb 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d001      	beq.n	80009fa <main+0x1ca>
 80009f6:	b672      	cpsid	i
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <main+0x1c8>
  sConfig.Channel = ADC_CHANNEL_3;
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <main+0x318>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	0020      	movs	r0, r4
 80009fe:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_3;
 8000a00:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	f000 fbf1 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d001      	beq.n	8000a0e <main+0x1de>
 8000a0a:	b672      	cpsid	i
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x1dc>
  sConfig.Channel = ADC_CHANNEL_4;
 8000a0e:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <main+0x31c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	0020      	movs	r0, r4
 8000a12:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 8000a14:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	f000 fbe7 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d001      	beq.n	8000a22 <main+0x1f2>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_5;
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <main+0x320>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	0020      	movs	r0, r4
 8000a26:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 8000a28:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	f000 fbdd 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d001      	beq.n	8000a36 <main+0x206>
 8000a32:	b672      	cpsid	i
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x204>
  sConfig.Channel = ADC_CHANNEL_7;
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <main+0x324>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	0020      	movs	r0, r4
 8000a3a:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_7;
 8000a3c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	f000 fbd3 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d001      	beq.n	8000a4a <main+0x21a>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x218>
  sConfig.Channel = ADC_CHANNEL_8;
 8000a4a:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <main+0x328>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_8;
 8000a50:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	f000 fbc9 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d001      	beq.n	8000a5e <main+0x22e>
 8000a5a:	b672      	cpsid	i
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0x22c>
  sConfig.Channel = ADC_CHANNEL_9;
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <main+0x32c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	0020      	movs	r0, r4
 8000a62:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_9;
 8000a64:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	f000 fbbf 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d001      	beq.n	8000a72 <main+0x242>
 8000a6e:	b672      	cpsid	i
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x240>
  sConfig.Channel = ADC_CHANNEL_16;
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <main+0x330>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	0020      	movs	r0, r4
 8000a76:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_16;
 8000a78:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	f000 fbb5 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d001      	beq.n	8000a86 <main+0x256>
 8000a82:	b672      	cpsid	i
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x254>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <main+0x334>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	0020      	movs	r0, r4
 8000a8a:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a8c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	f000 fbab 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <main+0x26a>
 8000a96:	b672      	cpsid	i
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <main+0x268>
  htim17.Instance = TIM17;
 8000a9a:	4833      	ldr	r0, [pc, #204]	; (8000b68 <main+0x338>)
 8000a9c:	4a33      	ldr	r2, [pc, #204]	; (8000b6c <main+0x33c>)
  htim17.Init.Prescaler = 0;
 8000a9e:	6043      	str	r3, [r0, #4]
  htim17.Instance = TIM17;
 8000aa0:	6002      	str	r2, [r0, #0]
  htim17.Init.Period = 65535;
 8000aa2:	4a33      	ldr	r2, [pc, #204]	; (8000b70 <main+0x340>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000aa6:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000aaa:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000aae:	f001 fdf7 	bl	80026a0 <HAL_TIM_Base_Init>
 8000ab2:	1e07      	subs	r7, r0, #0
 8000ab4:	d001      	beq.n	8000aba <main+0x28a>
 8000ab6:	b672      	cpsid	i
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x288>
  MSM_PreflightCheck(&MachineStateData);
 8000aba:	482e      	ldr	r0, [pc, #184]	; (8000b74 <main+0x344>)
 8000abc:	f7ff fe26 	bl	800070c <MSM_PreflightCheck>
  modbus_h.uiModbusType = SLAVE_RTU;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	4e2d      	ldr	r6, [pc, #180]	; (8000b78 <main+0x348>)
  modbus_h.u16timeOut = 1000;
 8000ac4:	22fa      	movs	r2, #250	; 0xfa
  modbus_h.uiModbusType = SLAVE_RTU;
 8000ac6:	7033      	strb	r3, [r6, #0]
  modbus_h.u8id = 10; //Modbus slave ID
 8000ac8:	3307      	adds	r3, #7
 8000aca:	7233      	strb	r3, [r6, #8]
  modbus_h.u16timeOut = 1000;
 8000acc:	0033      	movs	r3, r6
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	33a2      	adds	r3, #162	; 0xa2
 8000ad2:	801a      	strh	r2, [r3, #0]
  modbus_h.u32overTime = 0;
 8000ad4:	0033      	movs	r3, r6
 8000ad6:	33ac      	adds	r3, #172	; 0xac
 8000ad8:	601f      	str	r7, [r3, #0]
  modbus_h.au16regs = ModbusDATA;
 8000ada:	0033      	movs	r3, r6
 8000adc:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <main+0x34c>)
 8000ade:	3398      	adds	r3, #152	; 0x98
 8000ae0:	601a      	str	r2, [r3, #0]
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000ae2:	0033      	movs	r3, r6
 8000ae4:	2212      	movs	r2, #18
 8000ae6:	33b0      	adds	r3, #176	; 0xb0
  ModbusInit(&modbus_h);
 8000ae8:	0030      	movs	r0, r6
  modbus_h.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000aea:	801a      	strh	r2, [r3, #0]
  modbus_h.port =  &huart1;
 8000aec:	6075      	str	r5, [r6, #4]
  modbus_h.EN_Port = NULL;
 8000aee:	60f7      	str	r7, [r6, #12]
  ModbusInit(&modbus_h);
 8000af0:	f002 ff6c 	bl	80039cc <ModbusInit>
  ModbusStart(&modbus_h);
 8000af4:	0030      	movs	r0, r6
 8000af6:	f002 ffe5 	bl	8003ac4 <ModbusStart>
  HAL_ADC_Start_DMA(&hadc1,&MachineStateData.AnalogInputs.ADCInput[0] ,12);
 8000afa:	220c      	movs	r2, #12
 8000afc:	491d      	ldr	r1, [pc, #116]	; (8000b74 <main+0x344>)
 8000afe:	0020      	movs	r0, r4
 8000b00:	f000 fd22 	bl	8001548 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8000b04:	0020      	movs	r0, r4
 8000b06:	f000 fcf1 	bl	80014ec <HAL_ADC_Start>
  osKernelInitialize();
 8000b0a:	f003 fceb 	bl	80044e4 <osKernelInitialize>
  main_logic_loopHandle = osThreadNew(main_logic_setup, NULL, &main_logic_loop_attributes);
 8000b0e:	0039      	movs	r1, r7
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <main+0x350>)
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <main+0x354>)
 8000b14:	f003 fd16 	bl	8004544 <osThreadNew>
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <main+0x358>)
 8000b1a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000b1c:	f003 fcf4 	bl	8004508 <osKernelStart>
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <main+0x2f0>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50000400 	.word	0x50000400
 8000b2c:	50000800 	.word	0x50000800
 8000b30:	2000154c 	.word	0x2000154c
 8000b34:	40013800 	.word	0x40013800
 8000b38:	200014e8 	.word	0x200014e8
 8000b3c:	40012400 	.word	0x40012400
 8000b40:	04000002 	.word	0x04000002
 8000b44:	08000004 	.word	0x08000004
 8000b48:	0c000008 	.word	0x0c000008
 8000b4c:	10000010 	.word	0x10000010
 8000b50:	14000020 	.word	0x14000020
 8000b54:	1c000080 	.word	0x1c000080
 8000b58:	20000100 	.word	0x20000100
 8000b5c:	24000200 	.word	0x24000200
 8000b60:	40010000 	.word	0x40010000
 8000b64:	b0001000 	.word	0xb0001000
 8000b68:	2000126c 	.word	0x2000126c
 8000b6c:	40014800 	.word	0x40014800
 8000b70:	0000ffff 	.word	0x0000ffff
 8000b74:	200015dc 	.word	0x200015dc
 8000b78:	2000139c 	.word	0x2000139c
 8000b7c:	200012b8 	.word	0x200012b8
 8000b80:	080063c8 	.word	0x080063c8
 8000b84:	08000685 	.word	0x08000685
 8000b88:	20001268 	.word	0x20001268

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000b8e:	6802      	ldr	r2, [r0, #0]
{
 8000b90:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000b96:	f000 f971 	bl	8000e7c <HAL_IncTick>
}
 8000b9a:	bd10      	pop	{r4, pc}
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <Error_Handler>:
 8000ba0:	b672      	cpsid	i
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <Error_Handler+0x2>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_MspInit+0x34>)
 8000baa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000bac:	4301      	orrs	r1, r0
 8000bae:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4002      	ands	r2, r0
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bbe:	1800      	adds	r0, r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bc6:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	400b      	ands	r3, r1
 8000bca:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bcc:	2103      	movs	r1, #3
 8000bce:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bd2:	f000 fd11 	bl	80015f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bd07      	pop	{r0, r1, r2, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	0005      	movs	r5, r0
 8000be0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	2214      	movs	r2, #20
 8000be4:	2100      	movs	r1, #0
 8000be6:	a803      	add	r0, sp, #12
 8000be8:	f005 fb05 	bl	80061f6 <memset>
  if(hadc->Instance==ADC1)
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000bee:	682a      	ldr	r2, [r5, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d147      	bne.n	8000c84 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <HAL_ADC_MspInit+0xb0>)
 8000bf8:	0340      	lsls	r0, r0, #13
 8000bfa:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA12 [PA10]     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
                          |BOARD_TEMP_PROBE1_Pin|BOARD_TEMP_PROBE2_Pin|VBAT_1_Pin|BAT_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	6419      	str	r1, [r3, #64]	; 0x40
 8000c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c04:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c06:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2001      	movs	r0, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c10:	4301      	orrs	r1, r0
 8000c12:	6359      	str	r1, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c18:	4002      	ands	r2, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PROBE_20V_Pin|VOLTAGE_PROBE_5V_Pin|CHASIS_T_1_Pin|CHASIS_T_2_Pin
 8000c36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f000 fec3 	bl	80019c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <HAL_ADC_MspInit+0xb8>)
 8000c40:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_2_Pin|VBAT_3_Pin;
 8000c42:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c44:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f000 febc 	bl	80019c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c4c:	4c12      	ldr	r4, [pc, #72]	; (8000c98 <HAL_ADC_MspInit+0xbc>)
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c50:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000c52:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c54:	2305      	movs	r3, #5
 8000c56:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	337b      	adds	r3, #123	; 0x7b
 8000c5a:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5c:	3380      	adds	r3, #128	; 0x80
 8000c5e:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c66:	2320      	movs	r3, #32
 8000c68:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	019b      	lsls	r3, r3, #6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6e:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c72:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c74:	f000 fd30 	bl	80016d8 <HAL_DMA_Init>
 8000c78:	42b0      	cmp	r0, r6
 8000c7a:	d001      	beq.n	8000c80 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8000c7c:	f7ff ff90 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c80:	652c      	str	r4, [r5, #80]	; 0x50
 8000c82:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c84:	b008      	add	sp, #32
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	40012400 	.word	0x40012400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	000010bf 	.word	0x000010bf
 8000c94:	50000400 	.word	0x50000400
 8000c98:	20001600 	.word	0x20001600
 8000c9c:	40020008 	.word	0x40020008

08000ca0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM17)
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_TIM_Base_MspInit+0x24>)
 8000ca2:	6802      	ldr	r2, [r0, #0]
{
 8000ca4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM17)
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d109      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000caa:	2080      	movs	r0, #128	; 0x80
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_TIM_Base_MspInit+0x28>)
 8000cae:	02c0      	lsls	r0, r0, #11
 8000cb0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	6411      	str	r1, [r2, #64]	; 0x40
 8000cb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cb8:	4003      	ands	r3, r0
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cbe:	b002      	add	sp, #8
 8000cc0:	4770      	bx	lr
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40014800 	.word	0x40014800
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	0004      	movs	r4, r0
 8000cd0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	a803      	add	r0, sp, #12
 8000cd8:	f005 fa8d 	bl	80061f6 <memset>
  if(huart->Instance==USART1)
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_UART_MspInit+0x6c>)
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d127      	bne.n	8000d34 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0x70>)
 8000ce8:	01c0      	lsls	r0, r0, #7
 8000cea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	6419      	str	r1, [r3, #64]	; 0x40
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	4002      	ands	r2, r0
 8000cf6:	9201      	str	r2, [sp, #4]
 8000cf8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4311      	orrs	r1, r2
 8000d02:	6359      	str	r1, [r3, #52]	; 0x34
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4013      	ands	r3, r2
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0e:	23c0      	movs	r3, #192	; 0xc0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d1a:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f000 fe50 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000d24:	201b      	movs	r0, #27
 8000d26:	0022      	movs	r2, r4
 8000d28:	2103      	movs	r1, #3
 8000d2a:	f000 fc65 	bl	80015f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d2e:	201b      	movs	r0, #27
 8000d30:	f000 fc8c 	bl	800164c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d34:	b008      	add	sp, #32
 8000d36:	bd10      	pop	{r4, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b510      	push	{r4, lr}
 8000d42:	0001      	movs	r1, r0
 8000d44:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	200d      	movs	r0, #13
 8000d4a:	f000 fc55 	bl	80015f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d4e:	200d      	movs	r0, #13
 8000d50:	f000 fc7c 	bl	800164c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d54:	2080      	movs	r0, #128	; 0x80
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_InitTick+0x68>)
 8000d58:	0100      	lsls	r0, r0, #4
 8000d5a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d5c:	4301      	orrs	r1, r0
 8000d5e:	6411      	str	r1, [r2, #64]	; 0x40
 8000d60:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d62:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d64:	4003      	ands	r3, r0
 8000d66:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d68:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f001 fa3e 	bl	80021ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d70:	f001 fa28 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d74:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <HAL_InitTick+0x6c>)
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8000d7a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_InitTick+0x78>)
 8000d7e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d80:	f7ff f9ea 	bl	8000158 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000d84:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d88:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d8a:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000d8c:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d90:	f001 fc86 	bl	80026a0 <HAL_TIM_Base_Init>
 8000d94:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	f001 fb4f 	bl	8002440 <HAL_TIM_Base_Start_IT>
}
 8000da2:	b006      	add	sp, #24
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40021000 	.word	0x40021000
 8000dac:	2000185c 	.word	0x2000185c
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	000f4240 	.word	0x000f4240
 8000db8:	000003e7 	.word	0x000003e7

08000dbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler>

08000dbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler>

08000dc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dc2:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA1_Channel1_IRQHandler+0xc>)
 8000dc4:	f000 fdaa 	bl	800191c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20001600 	.word	0x20001600

08000dd0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000dd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd2:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8000dd4:	f001 fb68 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	2000185c 	.word	0x2000185c

08000de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000de0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de2:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART1_IRQHandler+0xc>)
 8000de4:	f001 fde6 	bl	80029b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	2000154c 	.word	0x2000154c

08000df0 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <SystemInit+0xc>)
 8000df4:	0512      	lsls	r2, r2, #20
 8000df6:	609a      	str	r2, [r3, #8]
#endif
}
 8000df8:	4770      	bx	lr
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e04:	f7ff fff4 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	; (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2e:	f005 f9b3 	bl	8006198 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e32:	f7ff fcfd 	bl	8000830 <main>

08000e36 <LoopForever>:

LoopForever:
  b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   r0, =_estack
 8000e38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e44:	080065cc 	.word	0x080065cc
  ldr r2, =_sbss
 8000e48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e4c:	200018f8 	.word	0x200018f8

08000e50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_IRQHandler>
	...

08000e54 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_Init+0x24>)
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	6811      	ldr	r1, [r2, #0]
{
 8000e5c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5e:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e60:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e64:	f7ff ff6c 	bl	8000d40 <HAL_InitTick>
 8000e68:	1e04      	subs	r4, r0, #0
 8000e6a:	d103      	bne.n	8000e74 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe9a 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000e70:	0020      	movs	r0, r4
 8000e72:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e74:	2401      	movs	r4, #1
 8000e76:	e7fb      	b.n	8000e70 <HAL_Init+0x1c>
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_IncTick+0x10>)
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <HAL_IncTick+0x14>)
 8000e80:	6811      	ldr	r1, [r2, #0]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	185b      	adds	r3, r3, r1
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	4770      	bx	lr
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	200018a8 	.word	0x200018a8
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e94:	4b01      	ldr	r3, [pc, #4]	; (8000e9c <HAL_GetTick+0x8>)
 8000e96:	6818      	ldr	r0, [r3, #0]
}
 8000e98:	4770      	bx	lr
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	200018a8 	.word	0x200018a8

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fff6 	bl	8000e94 <HAL_GetTick>
 8000ea8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	1c63      	adds	r3, r4, #1
 8000eac:	d002      	beq.n	8000eb4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_Delay+0x20>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	1b40      	subs	r0, r0, r5
 8000eba:	42a0      	cmp	r0, r4
 8000ebc:	d3fa      	bcc.n	8000eb4 <HAL_Delay+0x14>
  {
  }
}
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ec4:	6880      	ldr	r0, [r0, #8]
 8000ec6:	0740      	lsls	r0, r0, #29
 8000ec8:	0fc0      	lsrs	r0, r0, #31
}
 8000eca:	4770      	bx	lr

08000ecc <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ecc:	2300      	movs	r3, #0
{
 8000ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed0:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000ed2:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000ed4:	3301      	adds	r3, #1
{
 8000ed6:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 8000ed8:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000eda:	d100      	bne.n	8000ede <HAL_ADC_Init+0x12>
 8000edc:	e0c1      	b.n	8001062 <HAL_ADC_Init+0x196>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ede:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000ee0:	2d00      	cmp	r5, #0
 8000ee2:	d105      	bne.n	8000ef0 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee4:	f7ff fe7a 	bl	8000bdc <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ee8:	0023      	movs	r3, r4
 8000eea:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000eec:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000eee:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ef0:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ef2:	6826      	ldr	r6, [r4, #0]
 8000ef4:	055b      	lsls	r3, r3, #21
 8000ef6:	68b2      	ldr	r2, [r6, #8]
 8000ef8:	421a      	tst	r2, r3
 8000efa:	d100      	bne.n	8000efe <HAL_ADC_Init+0x32>
 8000efc:	e0b4      	b.n	8001068 <HAL_ADC_Init+0x19c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efe:	2200      	movs	r2, #0
 8000f00:	68b3      	ldr	r3, [r6, #8]
 8000f02:	9201      	str	r2, [sp, #4]
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	d408      	bmi.n	8000f1a <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f08:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0c:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f0e:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f10:	4313      	orrs	r3, r2
 8000f12:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f16:	432b      	orrs	r3, r5
 8000f18:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	f7ff ffd2 	bl	8000ec4 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f20:	2310      	movs	r3, #16
 8000f22:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000f24:	401a      	ands	r2, r3
 8000f26:	4310      	orrs	r0, r2
 8000f28:	d000      	beq.n	8000f2c <HAL_ADC_Init+0x60>
 8000f2a:	e0ec      	b.n	8001106 <HAL_ADC_Init+0x23a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f2e:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_ADC_Init+0x248>)
  uint32_t tmpCFGR2 = 0UL;
 8000f30:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	401a      	ands	r2, r3
 8000f34:	2302      	movs	r3, #2
 8000f36:	4313      	orrs	r3, r2
 8000f38:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f3a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	07d2      	lsls	r2, r2, #31
 8000f40:	d431      	bmi.n	8000fa6 <HAL_ADC_Init+0xda>

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f42:	0026      	movs	r6, r4
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	3118      	adds	r1, #24
 8000f48:	438a      	bics	r2, r1
 8000f4a:	68a1      	ldr	r1, [r4, #8]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000f4c:	363c      	adds	r6, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	60da      	str	r2, [r3, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f52:	6862      	ldr	r2, [r4, #4]
 8000f54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8000f56:	7835      	ldrb	r5, [r6, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f58:	0f97      	lsrs	r7, r2, #30
 8000f5a:	07bf      	lsls	r7, r7, #30
 8000f5c:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8000f5e:	9502      	str	r5, [sp, #8]
 8000f60:	2d01      	cmp	r5, #1
 8000f62:	d108      	bne.n	8000f76 <HAL_ADC_Init+0xaa>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f64:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000f66:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000f68:	4335      	orrs	r5, r6
 8000f6a:	4329      	orrs	r1, r5
 8000f6c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f6e:	4329      	orrs	r1, r5
 8000f70:	9d02      	ldr	r5, [sp, #8]
 8000f72:	4339      	orrs	r1, r7
 8000f74:	4329      	orrs	r1, r5
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f76:	691e      	ldr	r6, [r3, #16]
 8000f78:	4f67      	ldr	r7, [pc, #412]	; (8001118 <HAL_ADC_Init+0x24c>)
 8000f7a:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f7c:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000f7e:	430e      	orrs	r6, r1
 8000f80:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f82:	0056      	lsls	r6, r2, #1
 8000f84:	0876      	lsrs	r6, r6, #1
 8000f86:	05ff      	lsls	r7, r7, #23
 8000f88:	42be      	cmp	r6, r7
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f8c:	2680      	movs	r6, #128	; 0x80
 8000f8e:	0636      	lsls	r6, r6, #24
 8000f90:	42b2      	cmp	r2, r6
 8000f92:	d008      	beq.n	8000fa6 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f94:	4e61      	ldr	r6, [pc, #388]	; (800111c <HAL_ADC_Init+0x250>)
 8000f96:	4f62      	ldr	r7, [pc, #392]	; (8001120 <HAL_ADC_Init+0x254>)
 8000f98:	6835      	ldr	r5, [r6, #0]
 8000f9a:	402f      	ands	r7, r5
 8000f9c:	25f0      	movs	r5, #240	; 0xf0
 8000f9e:	03ad      	lsls	r5, r5, #14
 8000fa0:	402a      	ands	r2, r5
 8000fa2:	433a      	orrs	r2, r7
 8000fa4:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fa6:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fa8:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000faa:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fac:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fae:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fb0:	7ea2      	ldrb	r2, [r4, #26]
 8000fb2:	4694      	mov	ip, r2
 8000fb4:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_Init+0xf4>
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	0152      	lsls	r2, r2, #5
 8000fc0:	68e5      	ldr	r5, [r4, #12]
 8000fc2:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fc4:	6925      	ldr	r5, [r4, #16]
 8000fc6:	433e      	orrs	r6, r7
 8000fc8:	9603      	str	r6, [sp, #12]
 8000fca:	9502      	str	r5, [sp, #8]
 8000fcc:	2d00      	cmp	r5, #0
 8000fce:	da60      	bge.n	8001092 <HAL_ADC_Init+0x1c6>
 8000fd0:	006f      	lsls	r7, r5, #1
 8000fd2:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fd4:	0026      	movs	r6, r4
 8000fd6:	362c      	adds	r6, #44	; 0x2c
 8000fd8:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fda:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fdc:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fde:	432e      	orrs	r6, r5
 8000fe0:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe2:	1c66      	adds	r6, r4, #1
 8000fe4:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fe6:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe8:	2e01      	cmp	r6, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_ADC_Init+0x12c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fec:	4665      	mov	r5, ip
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d152      	bne.n	8001098 <HAL_ADC_Init+0x1cc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ff2:	2680      	movs	r6, #128	; 0x80
 8000ff4:	0276      	lsls	r6, r6, #9
 8000ff6:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d005      	beq.n	800100a <HAL_ADC_Init+0x13e>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ffe:	27e0      	movs	r7, #224	; 0xe0
 8001000:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001002:	007f      	lsls	r7, r7, #1
 8001004:	403e      	ands	r6, r7
 8001006:	432e      	orrs	r6, r5
 8001008:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800100a:	68de      	ldr	r6, [r3, #12]
 800100c:	4f45      	ldr	r7, [pc, #276]	; (8001124 <HAL_ADC_Init+0x258>)
  MODIFY_REG(ADCx->SMPR,
 800100e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001010:	403e      	ands	r6, r7
 8001012:	4316      	orrs	r6, r2
 8001014:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001016:	691e      	ldr	r6, [r3, #16]
 8001018:	4f43      	ldr	r7, [pc, #268]	; (8001128 <HAL_ADC_Init+0x25c>)
 800101a:	403e      	ands	r6, r7
 800101c:	4331      	orrs	r1, r6
 800101e:	2607      	movs	r6, #7
 8001020:	2770      	movs	r7, #112	; 0x70
 8001022:	6119      	str	r1, [r3, #16]
 8001024:	6959      	ldr	r1, [r3, #20]
 8001026:	43b1      	bics	r1, r6
 8001028:	4329      	orrs	r1, r5
 800102a:	6159      	str	r1, [r3, #20]
 800102c:	695e      	ldr	r6, [r3, #20]
 800102e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001030:	43be      	bics	r6, r7
 8001032:	0109      	lsls	r1, r1, #4
 8001034:	4331      	orrs	r1, r6
 8001036:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001038:	9902      	ldr	r1, [sp, #8]
 800103a:	2900      	cmp	r1, #0
 800103c:	d134      	bne.n	80010a8 <HAL_ADC_Init+0x1dc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800103e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001040:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001042:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001044:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4938      	ldr	r1, [pc, #224]	; (800112c <HAL_ADC_Init+0x260>)
 800104a:	400b      	ands	r3, r1
 800104c:	4293      	cmp	r3, r2
 800104e:	d14d      	bne.n	80010ec <HAL_ADC_Init+0x220>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001050:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001052:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001054:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001058:	4393      	bics	r3, r2
 800105a:	001a      	movs	r2, r3
 800105c:	2301      	movs	r3, #1
 800105e:	4313      	orrs	r3, r2
 8001060:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8001062:	9801      	ldr	r0, [sp, #4]
 8001064:	b007      	add	sp, #28
 8001066:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8001068:	68b2      	ldr	r2, [r6, #8]
 800106a:	4931      	ldr	r1, [pc, #196]	; (8001130 <HAL_ADC_Init+0x264>)
 800106c:	400a      	ands	r2, r1
 800106e:	4313      	orrs	r3, r2
 8001070:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_ADC_Init+0x268>)
 8001074:	4930      	ldr	r1, [pc, #192]	; (8001138 <HAL_ADC_Init+0x26c>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f7ff f86e 	bl	8000158 <__udivsi3>
 800107c:	3001      	adds	r0, #1
 800107e:	0040      	lsls	r0, r0, #1
 8001080:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 8001082:	9b05      	ldr	r3, [sp, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <HAL_ADC_Init+0x1be>
 8001088:	e739      	b.n	8000efe <HAL_ADC_Init+0x32>
      wait_loop_index--;
 800108a:	9b05      	ldr	r3, [sp, #20]
 800108c:	3b01      	subs	r3, #1
 800108e:	9305      	str	r3, [sp, #20]
 8001090:	e7f7      	b.n	8001082 <HAL_ADC_Init+0x1b6>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001092:	2780      	movs	r7, #128	; 0x80
 8001094:	03bf      	lsls	r7, r7, #14
 8001096:	e79d      	b.n	8000fd4 <HAL_ADC_Init+0x108>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001098:	2720      	movs	r7, #32
 800109a:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800109c:	432f      	orrs	r7, r5
 800109e:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a0:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80010a2:	433e      	orrs	r6, r7
 80010a4:	65e6      	str	r6, [r4, #92]	; 0x5c
 80010a6:	e7a7      	b.n	8000ff8 <HAL_ADC_Init+0x12c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	9d02      	ldr	r5, [sp, #8]
 80010ac:	0389      	lsls	r1, r1, #14
 80010ae:	428d      	cmp	r5, r1
 80010b0:	d1c9      	bne.n	8001046 <HAL_ADC_Init+0x17a>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80010b2:	270f      	movs	r7, #15
 80010b4:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80010b6:	0035      	movs	r5, r6
 80010b8:	0081      	lsls	r1, r0, #2
 80010ba:	40cd      	lsrs	r5, r1
 80010bc:	0029      	movs	r1, r5
 80010be:	4039      	ands	r1, r7
 80010c0:	290f      	cmp	r1, #15
 80010c2:	d00d      	beq.n	80010e0 <HAL_ADC_Init+0x214>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80010c4:	3001      	adds	r0, #1
 80010c6:	2808      	cmp	r0, #8
 80010c8:	d1f5      	bne.n	80010b6 <HAL_ADC_Init+0x1ea>
        MODIFY_REG(hadc->Instance->CHSELR,
 80010ca:	201c      	movs	r0, #28
 80010cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ce:	69e1      	ldr	r1, [r4, #28]
 80010d0:	3901      	subs	r1, #1
 80010d2:	0089      	lsls	r1, r1, #2
 80010d4:	4001      	ands	r1, r0
 80010d6:	382c      	subs	r0, #44	; 0x2c
 80010d8:	4088      	lsls	r0, r1
 80010da:	0001      	movs	r1, r0
 80010dc:	4331      	orrs	r1, r6
 80010de:	e7b1      	b.n	8001044 <HAL_ADC_Init+0x178>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80010e0:	2801      	cmp	r0, #1
 80010e2:	d1f2      	bne.n	80010ca <HAL_ADC_Init+0x1fe>
        SET_BIT(hadc->Instance->CHSELR,
 80010e4:	2110      	movs	r1, #16
 80010e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010e8:	4249      	negs	r1, r1
 80010ea:	e7aa      	b.n	8001042 <HAL_ADC_Init+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 80010ec:	2212      	movs	r2, #18
 80010ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f0:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	4393      	bics	r3, r2
 80010f4:	001a      	movs	r2, r3
 80010f6:	2310      	movs	r3, #16
 80010f8:	4313      	orrs	r3, r2
 80010fa:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80010fe:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001100:	432b      	orrs	r3, r5
 8001102:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8001104:	e7ad      	b.n	8001062 <HAL_ADC_Init+0x196>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001106:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001108:	4313      	orrs	r3, r2
 800110a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	e7a7      	b.n	8001062 <HAL_ADC_Init+0x196>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	fffffefd 	.word	0xfffffefd
 8001118:	1ffffc02 	.word	0x1ffffc02
 800111c:	40012708 	.word	0x40012708
 8001120:	ffc3ffff 	.word	0xffc3ffff
 8001124:	fffe0219 	.word	0xfffe0219
 8001128:	dffffc02 	.word	0xdffffc02
 800112c:	833fffe7 	.word	0x833fffe7
 8001130:	6fffffe8 	.word	0x6fffffe8
 8001134:	20000000 	.word	0x20000000
 8001138:	00030d40 	.word	0x00030d40

0800113c <HAL_ADC_ConvCpltCallback>:
 800113c:	4770      	bx	lr

0800113e <HAL_ADC_ConvHalfCpltCallback>:
 800113e:	4770      	bx	lr

08001140 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001140:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001142:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001144:	f7ff fffb 	bl	800113e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001148:	bd10      	pop	{r4, pc}

0800114a <HAL_ADC_ErrorCallback>:
 800114a:	4770      	bx	lr

0800114c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800114c:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800114e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001150:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001152:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001154:	4313      	orrs	r3, r2
 8001156:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001158:	2304      	movs	r3, #4
 800115a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800115c:	4313      	orrs	r3, r2
 800115e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001160:	f7ff fff3 	bl	800114a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001164:	bd10      	pop	{r4, pc}
	...

08001168 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001168:	2350      	movs	r3, #80	; 0x50
{
 800116a:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800116c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800116e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001170:	421a      	tst	r2, r3
 8001172:	d12c      	bne.n	80011ce <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001174:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001176:	33b1      	adds	r3, #177	; 0xb1
 8001178:	33ff      	adds	r3, #255	; 0xff
 800117a:	4313      	orrs	r3, r2
 800117c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800117e:	23c0      	movs	r3, #192	; 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001180:	6820      	ldr	r0, [r4, #0]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	68c2      	ldr	r2, [r0, #12]
 8001186:	421a      	tst	r2, r3
 8001188:	d114      	bne.n	80011b4 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800118a:	7ea3      	ldrb	r3, [r4, #26]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	071b      	lsls	r3, r3, #28
 8001194:	d50e      	bpl.n	80011b4 <ADC_DMAConvCplt+0x4c>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001196:	f7ff fe95 	bl	8000ec4 <LL_ADC_REG_IsConversionOngoing>
 800119a:	2800      	cmp	r0, #0
 800119c:	d10e      	bne.n	80011bc <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800119e:	210c      	movs	r1, #12
 80011a0:	6822      	ldr	r2, [r4, #0]
 80011a2:	6853      	ldr	r3, [r2, #4]
 80011a4:	438b      	bics	r3, r1
 80011a6:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80011a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <ADC_DMAConvCplt+0x7c>)
 80011ac:	401a      	ands	r2, r3
 80011ae:	2301      	movs	r3, #1
 80011b0:	4313      	orrs	r3, r2
 80011b2:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80011b4:	0020      	movs	r0, r4
 80011b6:	f7ff ffc1 	bl	800113c <HAL_ADC_ConvCpltCallback>
}
 80011ba:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	2320      	movs	r3, #32
 80011be:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011c0:	4313      	orrs	r3, r2
 80011c2:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c4:	2301      	movs	r3, #1
 80011c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011c8:	4313      	orrs	r3, r2
 80011ca:	65e3      	str	r3, [r4, #92]	; 0x5c
 80011cc:	e7f2      	b.n	80011b4 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011d0:	06db      	lsls	r3, r3, #27
 80011d2:	d503      	bpl.n	80011dc <ADC_DMAConvCplt+0x74>
      HAL_ADC_ErrorCallback(hadc);
 80011d4:	0020      	movs	r0, r4
 80011d6:	f7ff ffb8 	bl	800114a <HAL_ADC_ErrorCallback>
 80011da:	e7ee      	b.n	80011ba <ADC_DMAConvCplt+0x52>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	4798      	blx	r3
}
 80011e2:	e7ea      	b.n	80011ba <ADC_DMAConvCplt+0x52>
 80011e4:	fffffefe 	.word	0xfffffefe

080011e8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 80011e8:	2300      	movs	r3, #0
{
 80011ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ec:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 80011ee:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hadc);
 80011f0:	0003      	movs	r3, r0
 80011f2:	3354      	adds	r3, #84	; 0x54
 80011f4:	781a      	ldrb	r2, [r3, #0]
{
 80011f6:	0005      	movs	r5, r0
 80011f8:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 80011fa:	2002      	movs	r0, #2
 80011fc:	2a01      	cmp	r2, #1
 80011fe:	d100      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x1a>
 8001200:	e0c3      	b.n	800138a <HAL_ADC_ConfigChannel+0x1a2>
 8001202:	2401      	movs	r4, #1
 8001204:	701c      	strb	r4, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001206:	6828      	ldr	r0, [r5, #0]
 8001208:	f7ff fe5c 	bl	8000ec4 <LL_ADC_REG_IsConversionOngoing>
 800120c:	2800      	cmp	r0, #0
 800120e:	d000      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x2a>
 8001210:	e0f9      	b.n	8001406 <HAL_ADC_ConfigChannel+0x21e>
    if (pConfig->Rank != ADC_RANK_NONE)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	6873      	ldr	r3, [r6, #4]
 8001216:	0612      	lsls	r2, r2, #24
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2304      	movs	r3, #4
 800121c:	4694      	mov	ip, r2
 800121e:	692f      	ldr	r7, [r5, #16]
 8001220:	9a01      	ldr	r2, [sp, #4]
 8001222:	439f      	bics	r7, r3
 8001224:	6833      	ldr	r3, [r6, #0]
 8001226:	2a02      	cmp	r2, #2
 8001228:	d100      	bne.n	800122c <HAL_ADC_ConfigChannel+0x44>
 800122a:	e0c2      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1ca>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800122c:	0359      	lsls	r1, r3, #13
 800122e:	0b49      	lsrs	r1, r1, #13
 8001230:	682a      	ldr	r2, [r5, #0]
 8001232:	9102      	str	r1, [sp, #8]
 8001234:	4567      	cmp	r7, ip
 8001236:	d10f      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001238:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 800123a:	4301      	orrs	r1, r0
 800123c:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 800123e:	68b1      	ldr	r1, [r6, #8]
 8001240:	6954      	ldr	r4, [r2, #20]
 8001242:	0218      	lsls	r0, r3, #8
 8001244:	4e73      	ldr	r6, [pc, #460]	; (8001414 <HAL_ADC_ConfigChannel+0x22c>)
 8001246:	4001      	ands	r1, r0
 8001248:	4031      	ands	r1, r6
 800124a:	4384      	bics	r4, r0
 800124c:	4321      	orrs	r1, r4
 800124e:	6151      	str	r1, [r2, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001250:	2b00      	cmp	r3, #0
 8001252:	db64      	blt.n	800131e <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001254:	2000      	movs	r0, #0
}
 8001256:	e095      	b.n	8001384 <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001258:	211f      	movs	r1, #31
 800125a:	9f01      	ldr	r7, [sp, #4]
 800125c:	400f      	ands	r7, r1
 800125e:	46bc      	mov	ip, r7
 8001260:	270f      	movs	r7, #15
 8001262:	4661      	mov	r1, ip
 8001264:	408f      	lsls	r7, r1
 8001266:	43f9      	mvns	r1, r7
 8001268:	9103      	str	r1, [sp, #12]
 800126a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800126c:	43b9      	bics	r1, r7
 800126e:	000f      	movs	r7, r1
 8001270:	9902      	ldr	r1, [sp, #8]
 8001272:	2900      	cmp	r1, #0
 8001274:	d114      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0xb8>
 8001276:	0e98      	lsrs	r0, r3, #26
 8001278:	311f      	adds	r1, #31
 800127a:	4008      	ands	r0, r1
 800127c:	4661      	mov	r1, ip
 800127e:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001280:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001282:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001284:	0889      	lsrs	r1, r1, #2
 8001286:	69e8      	ldr	r0, [r5, #28]
 8001288:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800128a:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800128c:	4281      	cmp	r1, r0
 800128e:	d8d6      	bhi.n	800123e <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001290:	4664      	mov	r4, ip
 8001292:	0099      	lsls	r1, r3, #2
 8001294:	0f09      	lsrs	r1, r1, #28
 8001296:	40a1      	lsls	r1, r4
 8001298:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800129a:	9c03      	ldr	r4, [sp, #12]
 800129c:	4020      	ands	r0, r4
 800129e:	e7cc      	b.n	800123a <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012a0:	4223      	tst	r3, r4
 80012a2:	d1eb      	bne.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012a4:	2102      	movs	r1, #2
 80012a6:	0020      	movs	r0, r4
 80012a8:	420b      	tst	r3, r1
 80012aa:	d1e7      	bne.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012ac:	0008      	movs	r0, r1
 80012ae:	1849      	adds	r1, r1, r1
 80012b0:	420b      	tst	r3, r1
 80012b2:	d1e3      	bne.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012b4:	3001      	adds	r0, #1
 80012b6:	0719      	lsls	r1, r3, #28
 80012b8:	d4e0      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012ba:	3001      	adds	r0, #1
 80012bc:	06d9      	lsls	r1, r3, #27
 80012be:	d4dd      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012c0:	3001      	adds	r0, #1
 80012c2:	0699      	lsls	r1, r3, #26
 80012c4:	d4da      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012c6:	3001      	adds	r0, #1
 80012c8:	0659      	lsls	r1, r3, #25
 80012ca:	d4d7      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012cc:	3001      	adds	r0, #1
 80012ce:	0619      	lsls	r1, r3, #24
 80012d0:	d4d4      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012d2:	3001      	adds	r0, #1
 80012d4:	05d9      	lsls	r1, r3, #23
 80012d6:	d4d1      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012d8:	3001      	adds	r0, #1
 80012da:	0599      	lsls	r1, r3, #22
 80012dc:	d4ce      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012de:	3001      	adds	r0, #1
 80012e0:	0559      	lsls	r1, r3, #21
 80012e2:	d4cb      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012e4:	3001      	adds	r0, #1
 80012e6:	0519      	lsls	r1, r3, #20
 80012e8:	d4c8      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012ea:	3001      	adds	r0, #1
 80012ec:	04d9      	lsls	r1, r3, #19
 80012ee:	d4c5      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012f0:	3001      	adds	r0, #1
 80012f2:	0499      	lsls	r1, r3, #18
 80012f4:	d4c2      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012f6:	3001      	adds	r0, #1
 80012f8:	0459      	lsls	r1, r3, #17
 80012fa:	d4bf      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 80012fc:	3001      	adds	r0, #1
 80012fe:	0419      	lsls	r1, r3, #16
 8001300:	d4bc      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 8001302:	3001      	adds	r0, #1
 8001304:	03d9      	lsls	r1, r3, #15
 8001306:	d4b9      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 8001308:	3001      	adds	r0, #1
 800130a:	0399      	lsls	r1, r3, #14
 800130c:	d4b6      	bmi.n	800127c <HAL_ADC_ConfigChannel+0x94>
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0018      	movs	r0, r3
 8001312:	02c9      	lsls	r1, r1, #11
 8001314:	4008      	ands	r0, r1
 8001316:	420b      	tst	r3, r1
 8001318:	d0b0      	beq.n	800127c <HAL_ADC_ConfigChannel+0x94>
 800131a:	2012      	movs	r0, #18
 800131c:	e7ae      	b.n	800127c <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800131e:	24e0      	movs	r4, #224	; 0xe0
 8001320:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <HAL_ADC_ConfigChannel+0x230>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001322:	483e      	ldr	r0, [pc, #248]	; (800141c <HAL_ADC_ConfigChannel+0x234>)
 8001324:	6811      	ldr	r1, [r2, #0]
 8001326:	0464      	lsls	r4, r4, #17
 8001328:	400c      	ands	r4, r1
 800132a:	4283      	cmp	r3, r0
 800132c:	d11a      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001332:	4219      	tst	r1, r3
 8001334:	d18e      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001336:	6811      	ldr	r1, [r2, #0]
 8001338:	4839      	ldr	r0, [pc, #228]	; (8001420 <HAL_ADC_ConfigChannel+0x238>)
 800133a:	4001      	ands	r1, r0
 800133c:	4321      	orrs	r1, r4
 800133e:	4319      	orrs	r1, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_ADC_ConfigChannel+0x23c>)
 8001342:	6011      	str	r1, [r2, #0]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	4938      	ldr	r1, [pc, #224]	; (8001428 <HAL_ADC_ConfigChannel+0x240>)
 8001348:	f7fe ff06 	bl	8000158 <__udivsi3>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	200c      	movs	r0, #12
 8001350:	4358      	muls	r0, r3
 8001352:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8001354:	9b05      	ldr	r3, [sp, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d100      	bne.n	800135c <HAL_ADC_ConfigChannel+0x174>
 800135a:	e77b      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
            wait_loop_index--;
 800135c:	9b05      	ldr	r3, [sp, #20]
 800135e:	3b01      	subs	r3, #1
 8001360:	9305      	str	r3, [sp, #20]
 8001362:	e7f7      	b.n	8001354 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001364:	4831      	ldr	r0, [pc, #196]	; (800142c <HAL_ADC_ConfigChannel+0x244>)
 8001366:	4283      	cmp	r3, r0
 8001368:	d111      	bne.n	800138e <HAL_ADC_ConfigChannel+0x1a6>
 800136a:	2680      	movs	r6, #128	; 0x80
 800136c:	0008      	movs	r0, r1
 800136e:	0476      	lsls	r6, r6, #17
 8001370:	4030      	ands	r0, r6
 8001372:	4231      	tst	r1, r6
 8001374:	d000      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x190>
 8001376:	e76d      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
 8001378:	6811      	ldr	r1, [r2, #0]
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_ADC_ConfigChannel+0x238>)
 800137c:	4019      	ands	r1, r3
 800137e:	4321      	orrs	r1, r4
 8001380:	430e      	orrs	r6, r1
 8001382:	6016      	str	r6, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001384:	2300      	movs	r3, #0
 8001386:	3554      	adds	r5, #84	; 0x54
 8001388:	702b      	strb	r3, [r5, #0]
}
 800138a:	b007      	add	sp, #28
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800138e:	4828      	ldr	r0, [pc, #160]	; (8001430 <HAL_ADC_ConfigChannel+0x248>)
 8001390:	4283      	cmp	r3, r0
 8001392:	d000      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x1ae>
 8001394:	e75e      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	0008      	movs	r0, r1
 800139a:	03db      	lsls	r3, r3, #15
 800139c:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800139e:	4219      	tst	r1, r3
 80013a0:	d000      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x1bc>
 80013a2:	e757      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	4e1e      	ldr	r6, [pc, #120]	; (8001420 <HAL_ADC_ConfigChannel+0x238>)
 80013a8:	4031      	ands	r1, r6
 80013aa:	4321      	orrs	r1, r4
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	e7e8      	b.n	8001384 <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013b2:	4567      	cmp	r7, ip
 80013b4:	d105      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013b6:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013b8:	0359      	lsls	r1, r3, #13
 80013ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013bc:	0b49      	lsrs	r1, r1, #13
 80013be:	438a      	bics	r2, r1
 80013c0:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db00      	blt.n	80013c8 <HAL_ADC_ConfigChannel+0x1e0>
 80013c6:	e745      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ca:	4814      	ldr	r0, [pc, #80]	; (800141c <HAL_ADC_ConfigChannel+0x234>)
 80013cc:	6811      	ldr	r1, [r2, #0]
 80013ce:	4283      	cmp	r3, r0
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d2:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013d4:	6810      	ldr	r0, [r2, #0]
 80013d6:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d8:	4019      	ands	r1, r3
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x238>)
 80013dc:	4003      	ands	r3, r0
 80013de:	4319      	orrs	r1, r3
 80013e0:	6011      	str	r1, [r2, #0]
 80013e2:	e737      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x244>)
 80013e6:	4283      	cmp	r3, r0
 80013e8:	d103      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	e7f2      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <HAL_ADC_ConfigChannel+0x248>)
 80013f4:	4283      	cmp	r3, r0
 80013f6:	d000      	beq.n	80013fa <HAL_ADC_ConfigChannel+0x212>
 80013f8:	e72c      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013fa:	20c0      	movs	r0, #192	; 0xc0
 80013fc:	0440      	lsls	r0, r0, #17
 80013fe:	4001      	ands	r1, r0
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <HAL_ADC_ConfigChannel+0x238>)
 8001404:	e7ea      	b.n	80013dc <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001406:	2320      	movs	r3, #32
 8001408:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800140a:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	4313      	orrs	r3, r2
 800140e:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001410:	e7b8      	b.n	8001384 <HAL_ADC_ConfigChannel+0x19c>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	07ffff00 	.word	0x07ffff00
 8001418:	40012708 	.word	0x40012708
 800141c:	b0001000 	.word	0xb0001000
 8001420:	fe3fffff 	.word	0xfe3fffff
 8001424:	20000000 	.word	0x20000000
 8001428:	00030d40 	.word	0x00030d40
 800142c:	b8004000 	.word	0xb8004000
 8001430:	b4002000 	.word	0xb4002000

08001434 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8001434:	2300      	movs	r3, #0
{
 8001436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001438:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800143a:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800143c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800143e:	2001      	movs	r0, #1
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4202      	tst	r2, r0
 8001444:	d001      	beq.n	800144a <ADC_Enable+0x16>
  return HAL_OK;
 8001446:	2000      	movs	r0, #0
}
 8001448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <ADC_Enable+0xa4>)
 800144e:	4211      	tst	r1, r2
 8001450:	d007      	beq.n	8001462 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	2310      	movs	r3, #16
 8001454:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001456:	4313      	orrs	r3, r2
 8001458:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800145c:	4303      	orrs	r3, r0
 800145e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001460:	e7f2      	b.n	8001448 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	4e1d      	ldr	r6, [pc, #116]	; (80014dc <ADC_Enable+0xa8>)
 8001466:	4032      	ands	r2, r6
 8001468:	4310      	orrs	r0, r2
 800146a:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <ADC_Enable+0xac>)
 800146e:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	d423      	bmi.n	80014bc <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001474:	7e63      	ldrb	r3, [r4, #25]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d0e5      	beq.n	8001446 <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800147a:	f7ff fd0b 	bl	8000e94 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800147e:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8001480:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6813      	ldr	r3, [r2, #0]
 8001486:	422b      	tst	r3, r5
 8001488:	d1dd      	bne.n	8001446 <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800148a:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148c:	422b      	tst	r3, r5
 800148e:	d103      	bne.n	8001498 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	4033      	ands	r3, r6
 8001494:	432b      	orrs	r3, r5
 8001496:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001498:	f7ff fcfc 	bl	8000e94 <HAL_GetTick>
 800149c:	1bc0      	subs	r0, r0, r7
 800149e:	2802      	cmp	r0, #2
 80014a0:	d9ef      	bls.n	8001482 <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	422b      	tst	r3, r5
 80014a8:	d1eb      	bne.n	8001482 <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	2310      	movs	r3, #16
 80014ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b0:	4313      	orrs	r3, r2
 80014b2:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014b6:	431d      	orrs	r5, r3
 80014b8:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80014ba:	e7c5      	b.n	8001448 <ADC_Enable+0x14>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <ADC_Enable+0xb0>)
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <ADC_Enable+0xb4>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f7fe fe49 	bl	8000158 <__udivsi3>
 80014c6:	3001      	adds	r0, #1
 80014c8:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d1      	beq.n	8001474 <ADC_Enable+0x40>
        wait_loop_index--;
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	e7f8      	b.n	80014ca <ADC_Enable+0x96>
 80014d8:	80000017 	.word	0x80000017
 80014dc:	7fffffe8 	.word	0x7fffffe8
 80014e0:	40012708 	.word	0x40012708
 80014e4:	20000000 	.word	0x20000000
 80014e8:	00030d40 	.word	0x00030d40

080014ec <HAL_ADC_Start>:
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f0:	6800      	ldr	r0, [r0, #0]
 80014f2:	f7ff fce7 	bl	8000ec4 <LL_ADC_REG_IsConversionOngoing>
 80014f6:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 80014f8:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	d11d      	bne.n	800153a <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 80014fe:	0025      	movs	r5, r4
 8001500:	3554      	adds	r5, #84	; 0x54
 8001502:	782b      	ldrb	r3, [r5, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d018      	beq.n	800153a <HAL_ADC_Start+0x4e>
 8001508:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800150a:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 800150c:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 800150e:	f7ff ff91 	bl	8001434 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001512:	2800      	cmp	r0, #0
 8001514:	d112      	bne.n	800153c <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 8001516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_ADC_Start+0x58>)
 800151c:	401a      	ands	r2, r3
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001524:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001526:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001528:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800152a:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800152c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800152e:	7028      	strb	r0, [r5, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4011      	ands	r1, r2
 8001534:	2204      	movs	r2, #4
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
}
 800153a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800153c:	702e      	strb	r6, [r5, #0]
 800153e:	e7fc      	b.n	800153a <HAL_ADC_Start+0x4e>
 8001540:	fffff0fe 	.word	0xfffff0fe
 8001544:	7fffffe8 	.word	0x7fffffe8

08001548 <HAL_ADC_Start_DMA>:
{
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800154c:	6800      	ldr	r0, [r0, #0]
{
 800154e:	000d      	movs	r5, r1
 8001550:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001552:	f7ff fcb7 	bl	8000ec4 <LL_ADC_REG_IsConversionOngoing>
    tmp_hal_status = HAL_BUSY;
 8001556:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001558:	2800      	cmp	r0, #0
 800155a:	d140      	bne.n	80015de <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 800155c:	0027      	movs	r7, r4
 800155e:	3754      	adds	r7, #84	; 0x54
 8001560:	783a      	ldrb	r2, [r7, #0]
 8001562:	2a01      	cmp	r2, #1
 8001564:	d03b      	beq.n	80015de <HAL_ADC_Start_DMA+0x96>
 8001566:	2201      	movs	r2, #1
 8001568:	703a      	strb	r2, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	68d9      	ldr	r1, [r3, #12]
 800156e:	4211      	tst	r1, r2
 8001570:	d10c      	bne.n	800158c <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001572:	6899      	ldr	r1, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001574:	4211      	tst	r1, r2
 8001576:	d005      	beq.n	8001584 <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	491a      	ldr	r1, [pc, #104]	; (80015e4 <HAL_ADC_Start_DMA+0x9c>)
 800157c:	4011      	ands	r1, r2
 800157e:	2202      	movs	r2, #2
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001584:	2201      	movs	r2, #1
 8001586:	68d9      	ldr	r1, [r3, #12]
 8001588:	430a      	orrs	r2, r1
 800158a:	60da      	str	r2, [r3, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800158c:	0020      	movs	r0, r4
 800158e:	f7ff ff51 	bl	8001434 <ADC_Enable>
 8001592:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001594:	d123      	bne.n	80015de <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001598:	4913      	ldr	r1, [pc, #76]	; (80015e8 <HAL_ADC_Start_DMA+0xa0>)
 800159a:	4011      	ands	r1, r2
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	0052      	lsls	r2, r2, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	65a2      	str	r2, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_ADC_Start_DMA+0xa4>)
 80015a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015aa:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ac:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_ADC_Start_DMA+0xa8>)
 80015b0:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_ADC_Start_DMA+0xac>)
 80015b4:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015b6:	221c      	movs	r2, #28
 80015b8:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 80015ba:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015bc:	684a      	ldr	r2, [r1, #4]
 80015be:	3310      	adds	r3, #16
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015c4:	002a      	movs	r2, r5
 80015c6:	0033      	movs	r3, r6
 80015c8:	3140      	adds	r1, #64	; 0x40
 80015ca:	f000 f8e3 	bl	8001794 <HAL_DMA_Start_IT>
 80015ce:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 80015d0:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80015d2:	4904      	ldr	r1, [pc, #16]	; (80015e4 <HAL_ADC_Start_DMA+0x9c>)
 80015d4:	6882      	ldr	r2, [r0, #8]
 80015d6:	4011      	ands	r1, r2
 80015d8:	2204      	movs	r2, #4
 80015da:	430a      	orrs	r2, r1
 80015dc:	6082      	str	r2, [r0, #8]
}
 80015de:	0018      	movs	r0, r3
 80015e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	7fffffe8 	.word	0x7fffffe8
 80015e8:	fffff0fe 	.word	0xfffff0fe
 80015ec:	08001169 	.word	0x08001169
 80015f0:	08001141 	.word	0x08001141
 80015f4:	0800114d 	.word	0x0800114d

080015f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b530      	push	{r4, r5, lr}
 80015fa:	25ff      	movs	r5, #255	; 0xff
 80015fc:	2403      	movs	r4, #3
 80015fe:	002a      	movs	r2, r5
 8001600:	4004      	ands	r4, r0
 8001602:	00e4      	lsls	r4, r4, #3
 8001604:	40a2      	lsls	r2, r4
 8001606:	0189      	lsls	r1, r1, #6
 8001608:	4029      	ands	r1, r5
 800160a:	43d2      	mvns	r2, r2
 800160c:	40a1      	lsls	r1, r4
 800160e:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001610:	2800      	cmp	r0, #0
 8001612:	db0a      	blt.n	800162a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001614:	24c0      	movs	r4, #192	; 0xc0
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_NVIC_SetPriority+0x4c>)
 8001618:	0880      	lsrs	r0, r0, #2
 800161a:	0080      	lsls	r0, r0, #2
 800161c:	18c0      	adds	r0, r0, r3
 800161e:	00a4      	lsls	r4, r4, #2
 8001620:	5903      	ldr	r3, [r0, r4]
 8001622:	401a      	ands	r2, r3
 8001624:	4311      	orrs	r1, r2
 8001626:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001628:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162a:	200f      	movs	r0, #15
 800162c:	4003      	ands	r3, r0
 800162e:	3b08      	subs	r3, #8
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_NVIC_SetPriority+0x50>)
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	181b      	adds	r3, r3, r0
 8001638:	69d8      	ldr	r0, [r3, #28]
 800163a:	4002      	ands	r2, r0
 800163c:	4311      	orrs	r1, r2
 800163e:	61d9      	str	r1, [r3, #28]
 8001640:	e7f2      	b.n	8001628 <HAL_NVIC_SetPriority+0x30>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800164c:	2800      	cmp	r0, #0
 800164e:	db05      	blt.n	800165c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001650:	231f      	movs	r3, #31
 8001652:	4018      	ands	r0, r3
 8001654:	3b1e      	subs	r3, #30
 8001656:	4083      	lsls	r3, r0
 8001658:	4a01      	ldr	r2, [pc, #4]	; (8001660 <HAL_NVIC_EnableIRQ+0x14>)
 800165a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800165c:	4770      	bx	lr
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	e000e100 	.word	0xe000e100

08001664 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001666:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001668:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800166a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800166c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800166e:	2c00      	cmp	r4, #0
 8001670:	d002      	beq.n	8001678 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001672:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001674:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001676:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001678:	251c      	movs	r5, #28
 800167a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800167c:	4e08      	ldr	r6, [pc, #32]	; (80016a0 <DMA_SetConfig+0x3c>)
 800167e:	4025      	ands	r5, r4
 8001680:	2401      	movs	r4, #1
 8001682:	40ac      	lsls	r4, r5
 8001684:	6877      	ldr	r7, [r6, #4]
 8001686:	433c      	orrs	r4, r7
 8001688:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800168a:	6804      	ldr	r4, [r0, #0]
 800168c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800168e:	6883      	ldr	r3, [r0, #8]
 8001690:	2b10      	cmp	r3, #16
 8001692:	d102      	bne.n	800169a <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001694:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001696:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800169a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800169c:	60e2      	str	r2, [r4, #12]
}
 800169e:	e7fb      	b.n	8001698 <DMA_SetConfig+0x34>
 80016a0:	40020000 	.word	0x40020000

080016a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016a4:	b510      	push	{r4, lr}
 80016a6:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	189b      	adds	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	2114      	movs	r1, #20
 80016b8:	b2d8      	uxtb	r0, r3
 80016ba:	3808      	subs	r0, #8
 80016bc:	f7fe fd4c 	bl	8000158 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80016c2:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016c4:	231f      	movs	r3, #31
 80016c6:	4018      	ands	r0, r3
 80016c8:	3b1e      	subs	r3, #30
 80016ca:	4083      	lsls	r3, r0
 80016cc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	10008200 	.word	0x10008200
 80016d4:	40020880 	.word	0x40020880

080016d8 <HAL_DMA_Init>:
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
  if (hdma == NULL)
 80016de:	2c00      	cmp	r4, #0
 80016e0:	d049      	beq.n	8001776 <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016e2:	6825      	ldr	r5, [r4, #0]
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_DMA_Init+0xac>)
 80016e6:	2114      	movs	r1, #20
 80016e8:	18e8      	adds	r0, r5, r3
 80016ea:	f7fe fd35 	bl	8000158 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ee:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016f0:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f2:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016f4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f6:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016fc:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016fe:	4013      	ands	r3, r2
 8001700:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	682a      	ldr	r2, [r5, #0]
 8001706:	430b      	orrs	r3, r1
 8001708:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800170a:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800170c:	430b      	orrs	r3, r1
 800170e:	6961      	ldr	r1, [r4, #20]
 8001710:	430b      	orrs	r3, r1
 8001712:	69a1      	ldr	r1, [r4, #24]
 8001714:	430b      	orrs	r3, r1
 8001716:	69e1      	ldr	r1, [r4, #28]
 8001718:	430b      	orrs	r3, r1
 800171a:	6a21      	ldr	r1, [r4, #32]
 800171c:	430b      	orrs	r3, r1
 800171e:	4313      	orrs	r3, r2
 8001720:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001722:	f7ff ffbf 	bl	80016a4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	68a2      	ldr	r2, [r4, #8]
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	429a      	cmp	r2, r3
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001730:	2300      	movs	r3, #0
 8001732:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001734:	233f      	movs	r3, #63	; 0x3f
 8001736:	6862      	ldr	r2, [r4, #4]
 8001738:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800173a:	4013      	ands	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001742:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001744:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001746:	2a03      	cmp	r2, #3
 8001748:	d816      	bhi.n	8001778 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800174e:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001750:	2203      	movs	r2, #3
 8001752:	3b01      	subs	r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	3a02      	subs	r2, #2
 8001758:	409a      	lsls	r2, r3
 800175a:	65a2      	str	r2, [r4, #88]	; 0x58
 800175c:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800175e:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001760:	0089      	lsls	r1, r1, #2
 8001762:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001764:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001766:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001768:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800176c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001770:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8001772:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8001774:	77e0      	strb	r0, [r4, #31]
}
 8001776:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800177c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800177e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001780:	e7f3      	b.n	800176a <HAL_DMA_Init+0x92>
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	bffdfff8 	.word	0xbffdfff8
 8001788:	ffff800f 	.word	0xffff800f
 800178c:	1000823f 	.word	0x1000823f
 8001790:	40020940 	.word	0x40020940

08001794 <HAL_DMA_Start_IT>:
{
 8001794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001796:	1d45      	adds	r5, r0, #5
{
 8001798:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800179a:	7fee      	ldrb	r6, [r5, #31]
{
 800179c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800179e:	2002      	movs	r0, #2
 80017a0:	2e01      	cmp	r6, #1
 80017a2:	d034      	beq.n	800180e <HAL_DMA_Start_IT+0x7a>
 80017a4:	3801      	subs	r0, #1
 80017a6:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 80017a8:	1da7      	adds	r7, r4, #6
 80017aa:	7ffe      	ldrb	r6, [r7, #31]
 80017ac:	46b4      	mov	ip, r6
 80017ae:	4663      	mov	r3, ip
 80017b0:	b2f6      	uxtb	r6, r6
 80017b2:	9600      	str	r6, [sp, #0]
 80017b4:	2600      	movs	r6, #0
 80017b6:	4283      	cmp	r3, r0
 80017b8:	d131      	bne.n	800181e <HAL_DMA_Start_IT+0x8a>
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ba:	3001      	adds	r0, #1
 80017bc:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 80017be:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c0:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80017c2:	6828      	ldr	r0, [r5, #0]
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4398      	bics	r0, r3
 80017c8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ca:	9b01      	ldr	r3, [sp, #4]
 80017cc:	0020      	movs	r0, r4
 80017ce:	f7ff ff49 	bl	8001664 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80017d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	42b2      	cmp	r2, r6
 80017d8:	d01a      	beq.n	8001810 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	220e      	movs	r2, #14
 80017dc:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017e4:	6811      	ldr	r1, [r2, #0]
 80017e6:	03c9      	lsls	r1, r1, #15
 80017e8:	d504      	bpl.n	80017f4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	6810      	ldr	r0, [r2, #0]
 80017ee:	0049      	lsls	r1, r1, #1
 80017f0:	4301      	orrs	r1, r0
 80017f2:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80017f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d004      	beq.n	8001804 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	6810      	ldr	r0, [r2, #0]
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	4301      	orrs	r1, r0
 8001802:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001804:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
}
 800180e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001810:	2104      	movs	r1, #4
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	438a      	bics	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	220a      	movs	r2, #10
 800181c:	e7df      	b.n	80017de <HAL_DMA_Start_IT+0x4a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001822:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8001824:	e7f3      	b.n	800180e <HAL_DMA_Start_IT+0x7a>
	...

08001828 <HAL_DMA_Abort>:
{
 8001828:	0003      	movs	r3, r0
 800182a:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001832:	1d98      	adds	r0, r3, #6
 8001834:	7fc2      	ldrb	r2, [r0, #31]
 8001836:	1d5c      	adds	r4, r3, #5
 8001838:	2a02      	cmp	r2, #2
 800183a:	d005      	beq.n	8001848 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183c:	2204      	movs	r2, #4
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001840:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001844:	77e3      	strb	r3, [r4, #31]
}
 8001846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001848:	250e      	movs	r5, #14
 800184a:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800184c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	680a      	ldr	r2, [r1, #0]
 8001850:	43aa      	bics	r2, r5
 8001852:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001854:	6832      	ldr	r2, [r6, #0]
 8001856:	4d11      	ldr	r5, [pc, #68]	; (800189c <HAL_DMA_Abort+0x74>)
 8001858:	402a      	ands	r2, r5
 800185a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 800185c:	2201      	movs	r2, #1
 800185e:	680e      	ldr	r6, [r1, #0]
 8001860:	4694      	mov	ip, r2
 8001862:	4396      	bics	r6, r2
 8001864:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001866:	211c      	movs	r1, #28
 8001868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186a:	4e0d      	ldr	r6, [pc, #52]	; (80018a0 <HAL_DMA_Abort+0x78>)
 800186c:	4011      	ands	r1, r2
 800186e:	4662      	mov	r2, ip
 8001870:	408a      	lsls	r2, r1
 8001872:	6877      	ldr	r7, [r6, #4]
 8001874:	433a      	orrs	r2, r7
 8001876:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001878:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800187a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800187c:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800187e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001880:	2a00      	cmp	r2, #0
 8001882:	d005      	beq.n	8001890 <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001884:	6811      	ldr	r1, [r2, #0]
 8001886:	4029      	ands	r1, r5
 8001888:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001890:	2301      	movs	r3, #1
 8001892:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 8001894:	2000      	movs	r0, #0
 8001896:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8001898:	e7d5      	b.n	8001846 <HAL_DMA_Abort+0x1e>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	fffffeff 	.word	0xfffffeff
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_DMA_Abort_IT>:
{
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018a6:	1d81      	adds	r1, r0, #6
 80018a8:	7fcb      	ldrb	r3, [r1, #31]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	2304      	movs	r3, #4
 80018b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80018b2:	3b03      	subs	r3, #3
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	240e      	movs	r4, #14
 80018ba:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018bc:	4d15      	ldr	r5, [pc, #84]	; (8001914 <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018be:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80018c0:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c2:	43a3      	bics	r3, r4
 80018c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80018c6:	2301      	movs	r3, #1
 80018c8:	6814      	ldr	r4, [r2, #0]
 80018ca:	439c      	bics	r4, r3
 80018cc:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018ce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	402a      	ands	r2, r5
 80018d4:	6022      	str	r2, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80018d6:	241c      	movs	r4, #28
 80018d8:	403c      	ands	r4, r7
 80018da:	40a3      	lsls	r3, r4
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_DMA_Abort_IT+0x74>)
 80018de:	6856      	ldr	r6, [r2, #4]
 80018e0:	4333      	orrs	r3, r6
 80018e2:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80018e6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80018e8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80018ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	402a      	ands	r2, r5
 80018f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018f8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80018fa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018fc:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80018fe:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001900:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8001902:	1d43      	adds	r3, r0, #5
 8001904:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001906:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8001908:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 800190a:	42a2      	cmp	r2, r4
 800190c:	d0d2      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800190e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001910:	0023      	movs	r3, r4
 8001912:	e7cf      	b.n	80018b4 <HAL_DMA_Abort_IT+0x10>
 8001914:	fffffeff 	.word	0xfffffeff
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_DMA_IRQHandler>:
{
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800191e:	211c      	movs	r1, #28
 8001920:	2704      	movs	r7, #4
 8001922:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001926:	4021      	ands	r1, r4
 8001928:	003c      	movs	r4, r7
 800192a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800192c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800192e:	6802      	ldr	r2, [r0, #0]
 8001930:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001932:	4226      	tst	r6, r4
 8001934:	d00f      	beq.n	8001956 <HAL_DMA_IRQHandler+0x3a>
 8001936:	423d      	tst	r5, r7
 8001938:	d00d      	beq.n	8001956 <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	0689      	lsls	r1, r1, #26
 800193e:	d402      	bmi.n	8001946 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001940:	6811      	ldr	r1, [r2, #0]
 8001942:	43b9      	bics	r1, r7
 8001944:	6011      	str	r1, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4314      	orrs	r4, r2
 800194a:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800194c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01b      	beq.n	800198a <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8001952:	4798      	blx	r3
  return;
 8001954:	e019      	b.n	800198a <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001956:	2702      	movs	r7, #2
 8001958:	003c      	movs	r4, r7
 800195a:	408c      	lsls	r4, r1
 800195c:	4226      	tst	r6, r4
 800195e:	d015      	beq.n	800198c <HAL_DMA_IRQHandler+0x70>
 8001960:	423d      	tst	r5, r7
 8001962:	d013      	beq.n	800198c <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001964:	6811      	ldr	r1, [r2, #0]
 8001966:	0689      	lsls	r1, r1, #26
 8001968:	d406      	bmi.n	8001978 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800196a:	250a      	movs	r5, #10
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	43a9      	bics	r1, r5
 8001970:	6011      	str	r1, [r2, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001972:	2101      	movs	r1, #1
 8001974:	1d82      	adds	r2, r0, #6
 8001976:	77d1      	strb	r1, [r2, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4314      	orrs	r4, r2
      __HAL_UNLOCK(hdma);
 800197c:	2200      	movs	r2, #0
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800197e:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001980:	1d43      	adds	r3, r0, #5
 8001982:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8001984:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001986:	4293      	cmp	r3, r2
 8001988:	d1e3      	bne.n	8001952 <HAL_DMA_IRQHandler+0x36>
}
 800198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800198c:	2408      	movs	r4, #8
 800198e:	0027      	movs	r7, r4
 8001990:	408f      	lsls	r7, r1
 8001992:	423e      	tst	r6, r7
 8001994:	d0f9      	beq.n	800198a <HAL_DMA_IRQHandler+0x6e>
 8001996:	4225      	tst	r5, r4
 8001998:	d0f7      	beq.n	800198a <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	250e      	movs	r5, #14
 800199c:	6814      	ldr	r4, [r2, #0]
 800199e:	43ac      	bics	r4, r5
 80019a0:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80019a2:	2201      	movs	r2, #1
 80019a4:	0015      	movs	r5, r2
 80019a6:	408d      	lsls	r5, r1
 80019a8:	0029      	movs	r1, r5
 80019aa:	685c      	ldr	r4, [r3, #4]
 80019ac:	4321      	orrs	r1, r4
 80019ae:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019b0:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80019b6:	2200      	movs	r2, #0
 80019b8:	1d43      	adds	r3, r0, #5
 80019ba:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80019bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019be:	e7e2      	b.n	8001986 <HAL_DMA_IRQHandler+0x6a>
 80019c0:	40020000 	.word	0x40020000

080019c4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80019c4:	2300      	movs	r3, #0
{
 80019c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	680a      	ldr	r2, [r1, #0]
 80019cc:	0014      	movs	r4, r2
 80019ce:	40dc      	lsrs	r4, r3
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 80019d2:	b005      	add	sp, #20
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d6:	2501      	movs	r5, #1
 80019d8:	0014      	movs	r4, r2
 80019da:	409d      	lsls	r5, r3
 80019dc:	402c      	ands	r4, r5
 80019de:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80019e0:	422a      	tst	r2, r5
 80019e2:	d100      	bne.n	80019e6 <HAL_GPIO_Init+0x22>
 80019e4:	e08e      	b.n	8001b04 <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e6:	684a      	ldr	r2, [r1, #4]
 80019e8:	005e      	lsls	r6, r3, #1
 80019ea:	4694      	mov	ip, r2
 80019ec:	2203      	movs	r2, #3
 80019ee:	4664      	mov	r4, ip
 80019f0:	4022      	ands	r2, r4
 80019f2:	2403      	movs	r4, #3
 80019f4:	40b4      	lsls	r4, r6
 80019f6:	43e4      	mvns	r4, r4
 80019f8:	9402      	str	r4, [sp, #8]
 80019fa:	1e54      	subs	r4, r2, #1
 80019fc:	2c01      	cmp	r4, #1
 80019fe:	d82a      	bhi.n	8001a56 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001a00:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a02:	9c02      	ldr	r4, [sp, #8]
 8001a04:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a06:	68cc      	ldr	r4, [r1, #12]
 8001a08:	40b4      	lsls	r4, r6
 8001a0a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001a0c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a0e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a12:	43ac      	bics	r4, r5
 8001a14:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a16:	4664      	mov	r4, ip
 8001a18:	0924      	lsrs	r4, r4, #4
 8001a1a:	403c      	ands	r4, r7
 8001a1c:	409c      	lsls	r4, r3
 8001a1e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001a20:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a22:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a24:	9c02      	ldr	r4, [sp, #8]
 8001a26:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a28:	688c      	ldr	r4, [r1, #8]
 8001a2a:	40b4      	lsls	r4, r6
 8001a2c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001a2e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	2a02      	cmp	r2, #2
 8001a32:	d112      	bne.n	8001a5a <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001a34:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a36:	2507      	movs	r5, #7
 8001a38:	00a4      	lsls	r4, r4, #2
 8001a3a:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001a3c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3e:	9403      	str	r4, [sp, #12]
 8001a40:	240f      	movs	r4, #15
 8001a42:	401d      	ands	r5, r3
 8001a44:	00ad      	lsls	r5, r5, #2
 8001a46:	40ac      	lsls	r4, r5
 8001a48:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4a:	690c      	ldr	r4, [r1, #16]
 8001a4c:	40ac      	lsls	r4, r5
 8001a4e:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001a50:	9c03      	ldr	r4, [sp, #12]
 8001a52:	6227      	str	r7, [r4, #32]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a56:	2a03      	cmp	r2, #3
 8001a58:	d1e3      	bne.n	8001a22 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001a5a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5c:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a60:	4025      	ands	r5, r4
 8001a62:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a64:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001a66:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a68:	24c0      	movs	r4, #192	; 0xc0
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	02a4      	lsls	r4, r4, #10
 8001a6e:	4222      	tst	r2, r4
 8001a70:	d048      	beq.n	8001b04 <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 8001a72:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a74:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001a76:	089c      	lsrs	r4, r3, #2
 8001a78:	00a4      	lsls	r4, r4, #2
 8001a7a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	401d      	ands	r5, r3
 8001a80:	00ed      	lsls	r5, r5, #3
 8001a82:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a84:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001a86:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a88:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a8a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	42b8      	cmp	r0, r7
 8001a90:	d00c      	beq.n	8001aac <HAL_GPIO_Init+0xe8>
 8001a92:	4f1e      	ldr	r7, [pc, #120]	; (8001b0c <HAL_GPIO_Init+0x148>)
 8001a94:	3201      	adds	r2, #1
 8001a96:	42b8      	cmp	r0, r7
 8001a98:	d008      	beq.n	8001aac <HAL_GPIO_Init+0xe8>
 8001a9a:	4f1d      	ldr	r7, [pc, #116]	; (8001b10 <HAL_GPIO_Init+0x14c>)
 8001a9c:	3201      	adds	r2, #1
 8001a9e:	42b8      	cmp	r0, r7
 8001aa0:	d004      	beq.n	8001aac <HAL_GPIO_Init+0xe8>
 8001aa2:	4f1c      	ldr	r7, [pc, #112]	; (8001b14 <HAL_GPIO_Init+0x150>)
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	42b8      	cmp	r0, r7
 8001aa8:	d000      	beq.n	8001aac <HAL_GPIO_Init+0xe8>
 8001aaa:	3202      	adds	r2, #2
 8001aac:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aae:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ab0:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001ab2:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 8001ab6:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 8001ab8:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 8001aba:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001abc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001abe:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ac0:	03ff      	lsls	r7, r7, #15
 8001ac2:	d401      	bmi.n	8001ac8 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 8001ac4:	0035      	movs	r5, r6
 8001ac6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac8:	4667      	mov	r7, ip
        EXTI->IMR1 = temp;
 8001aca:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001acc:	4d13      	ldr	r5, [pc, #76]	; (8001b1c <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8001ace:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8001ad0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
          temp |= iocurrent;
 8001ad2:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad4:	03bf      	lsls	r7, r7, #14
 8001ad6:	d401      	bmi.n	8001adc <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8001ad8:	4022      	ands	r2, r4
 8001ada:	0016      	movs	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001adc:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_GPIO_Init+0x144>)
 8001ae0:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001ae2:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001ae4:	9d01      	ldr	r5, [sp, #4]
 8001ae6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae8:	02ff      	lsls	r7, r7, #11
 8001aea:	d401      	bmi.n	8001af0 <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 8001aec:	0035      	movs	r5, r6
 8001aee:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af0:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001af2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001af4:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001af6:	9e01      	ldr	r6, [sp, #4]
 8001af8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001afa:	02bf      	lsls	r7, r7, #10
 8001afc:	d401      	bmi.n	8001b02 <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 8001afe:	4025      	ands	r5, r4
 8001b00:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 8001b02:	6056      	str	r6, [r2, #4]
    position++;
 8001b04:	3301      	adds	r3, #1
 8001b06:	e760      	b.n	80019ca <HAL_GPIO_Init+0x6>
 8001b08:	40021800 	.word	0x40021800
 8001b0c:	50000400 	.word	0x50000400
 8001b10:	50000800 	.word	0x50000800
 8001b14:	50000c00 	.word	0x50000c00
 8001b18:	40021804 	.word	0x40021804
 8001b1c:	40021808 	.word	0x40021808

08001b20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b26:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b28:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001b2a:	e7fc      	b.n	8001b26 <HAL_GPIO_WritePin+0x6>

08001b2c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2e:	0013      	movs	r3, r2
 8001b30:	400b      	ands	r3, r1
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	4391      	bics	r1, r2
 8001b36:	4319      	orrs	r1, r3
 8001b38:	6181      	str	r1, [r0, #24]
}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b3c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b3e:	4c11      	ldr	r4, [pc, #68]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001b40:	4911      	ldr	r1, [pc, #68]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001b42:	6823      	ldr	r3, [r4, #0]
{
 8001b44:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b46:	400b      	ands	r3, r1
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4c:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b4e:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d10e      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001b58:	490d      	ldr	r1, [pc, #52]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	4358      	muls	r0, r3
 8001b60:	f7fe fafa 	bl	8000158 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b64:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b66:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b68:	00d2      	lsls	r2, r2, #3
 8001b6a:	6961      	ldr	r1, [r4, #20]
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4010      	ands	r0, r2
 8001b70:	4211      	tst	r1, r2
 8001b72:	d100      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8001b74:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	e7f5      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8001b7e:	2003      	movs	r0, #3
 8001b80:	e7f8      	b.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x38>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40007000 	.word	0x40007000
 8001b88:	fffff9ff 	.word	0xfffff9ff
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	000f4240 	.word	0x000f4240

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	0004      	movs	r4, r0
 8001b98:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9e:	6803      	ldr	r3, [r0, #0]
 8001ba0:	07db      	lsls	r3, r3, #31
 8001ba2:	d410      	bmi.n	8001bc6 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	079b      	lsls	r3, r3, #30
 8001ba8:	d45e      	bmi.n	8001c68 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	d500      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
 8001bb0:	e0c3      	b.n	8001d3a <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	d500      	bpl.n	8001bba <HAL_RCC_OscConfig+0x26>
 8001bb8:	e0f5      	b.n	8001da6 <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bba:	69e2      	ldr	r2, [r4, #28]
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d000      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2e>
 8001bc0:	e17c      	b.n	8001ebc <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e029      	b.n	8001c1a <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc6:	2238      	movs	r2, #56	; 0x38
 8001bc8:	4db0      	ldr	r5, [pc, #704]	; (8001e8c <HAL_RCC_OscConfig+0x2f8>)
 8001bca:	68ab      	ldr	r3, [r5, #8]
 8001bcc:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bce:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d10a      	bne.n	8001bea <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd4:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bd6:	0793      	lsls	r3, r2, #30
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	682b      	ldr	r3, [r5, #0]
 8001bdc:	039b      	lsls	r3, r3, #14
 8001bde:	d5e1      	bpl.n	8001ba4 <HAL_RCC_OscConfig+0x10>
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1de      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	e017      	b.n	8001c1a <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d0f5      	beq.n	8001bda <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	6863      	ldr	r3, [r4, #4]
 8001bf2:	0252      	lsls	r2, r2, #9
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x8a>
 8001bf8:	682a      	ldr	r2, [r5, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f949 	bl	8000e94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c04:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	02bf      	lsls	r7, r7, #10
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	423b      	tst	r3, r7
 8001c0c:	d1ca      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7ff f941 	bl	8000e94 <HAL_GetTick>
 8001c12:	1b80      	subs	r0, r0, r6
 8001c14:	2864      	cmp	r0, #100	; 0x64
 8001c16:	d9f7      	bls.n	8001c08 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001c18:	2003      	movs	r0, #3
}
 8001c1a:	b005      	add	sp, #20
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	21a0      	movs	r1, #160	; 0xa0
 8001c20:	02c9      	lsls	r1, r1, #11
 8001c22:	428b      	cmp	r3, r1
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0xa4>
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	6829      	ldr	r1, [r5, #0]
 8001c2a:	02db      	lsls	r3, r3, #11
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	602b      	str	r3, [r5, #0]
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c36:	e7e2      	b.n	8001bfe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	682a      	ldr	r2, [r5, #0]
 8001c3a:	4995      	ldr	r1, [pc, #596]	; (8001e90 <HAL_RCC_OscConfig+0x2fc>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	602a      	str	r2, [r5, #0]
 8001c40:	682a      	ldr	r2, [r5, #0]
 8001c42:	4994      	ldr	r1, [pc, #592]	; (8001e94 <HAL_RCC_OscConfig+0x300>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1d8      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f922 	bl	8000e94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c50:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c52:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c54:	02bf      	lsls	r7, r7, #10
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	423b      	tst	r3, r7
 8001c5a:	d0a3      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f91a 	bl	8000e94 <HAL_GetTick>
 8001c60:	1b80      	subs	r0, r0, r6
 8001c62:	2864      	cmp	r0, #100	; 0x64
 8001c64:	d9f7      	bls.n	8001c56 <HAL_RCC_OscConfig+0xc2>
 8001c66:	e7d7      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c68:	2338      	movs	r3, #56	; 0x38
 8001c6a:	4d88      	ldr	r5, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x2f8>)
 8001c6c:	68aa      	ldr	r2, [r5, #8]
 8001c6e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c70:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d128      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c76:	2103      	movs	r1, #3
 8001c78:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c7a:	2a02      	cmp	r2, #2
 8001c7c:	d126      	bne.n	8001ccc <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7e:	682a      	ldr	r2, [r5, #0]
 8001c80:	0552      	lsls	r2, r2, #21
 8001c82:	d502      	bpl.n	8001c8a <HAL_RCC_OscConfig+0xf6>
 8001c84:	68e2      	ldr	r2, [r4, #12]
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d0ad      	beq.n	8001be6 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	6869      	ldr	r1, [r5, #4]
 8001c8c:	6962      	ldr	r2, [r4, #20]
 8001c8e:	4882      	ldr	r0, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x304>)
 8001c90:	0212      	lsls	r2, r2, #8
 8001c92:	4001      	ands	r1, r0
 8001c94:	430a      	orrs	r2, r1
 8001c96:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	4a7f      	ldr	r2, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x308>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	6922      	ldr	r2, [r4, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_RCC_OscConfig+0x30c>)
 8001cac:	049b      	lsls	r3, r3, #18
 8001cae:	0f5b      	lsrs	r3, r3, #29
 8001cb0:	40da      	lsrs	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	4a7b      	ldr	r2, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x310>)
 8001cb6:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cb8:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x314>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	f7ff f840 	bl	8000d40 <HAL_InitTick>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x132>
 8001cc4:	e771      	b.n	8001baa <HAL_RCC_OscConfig+0x16>
 8001cc6:	e78e      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0d8      	beq.n	8001c7e <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	68e3      	ldr	r3, [r4, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	4a71      	ldr	r2, [pc, #452]	; (8001e9c <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd6:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cd8:	4013      	ands	r3, r2
 8001cda:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	682a      	ldr	r2, [r5, #0]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cec:	f7ff f8d2 	bl	8000e94 <HAL_GetTick>
 8001cf0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	682b      	ldr	r3, [r5, #0]
 8001cf4:	423b      	tst	r3, r7
 8001cf6:	d007      	beq.n	8001d08 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	686a      	ldr	r2, [r5, #4]
 8001cfa:	6963      	ldr	r3, [r4, #20]
 8001cfc:	4966      	ldr	r1, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x304>)
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	400a      	ands	r2, r1
 8001d02:	4313      	orrs	r3, r2
 8001d04:	606b      	str	r3, [r5, #4]
 8001d06:	e750      	b.n	8001baa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff f8c4 	bl	8000e94 <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	2802      	cmp	r0, #2
 8001d10:	d9ef      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x15e>
 8001d12:	e781      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	4a65      	ldr	r2, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d18:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f8b9 	bl	8000e94 <HAL_GetTick>
 8001d22:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d24:	00ff      	lsls	r7, r7, #3
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	423b      	tst	r3, r7
 8001d2a:	d100      	bne.n	8001d2e <HAL_RCC_OscConfig+0x19a>
 8001d2c:	e73d      	b.n	8001baa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f8b1 	bl	8000e94 <HAL_GetTick>
 8001d32:	1b80      	subs	r0, r0, r6
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d9f6      	bls.n	8001d26 <HAL_RCC_OscConfig+0x192>
 8001d38:	e76e      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d3a:	2138      	movs	r1, #56	; 0x38
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_OscConfig+0x2f8>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	001d      	movs	r5, r3
 8001d42:	400a      	ands	r2, r1
 8001d44:	2a18      	cmp	r2, #24
 8001d46:	d108      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	079b      	lsls	r3, r3, #30
 8001d4c:	d400      	bmi.n	8001d50 <HAL_RCC_OscConfig+0x1bc>
 8001d4e:	e730      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
 8001d50:	69a3      	ldr	r3, [r4, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d000      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1c4>
 8001d56:	e72c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
 8001d58:	e745      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5a:	69a2      	ldr	r2, [r4, #24]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	d010      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8001d62:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d64:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001d66:	4313      	orrs	r3, r2
 8001d68:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f893 	bl	8000e94 <HAL_GetTick>
 8001d6e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d70:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001d72:	423b      	tst	r3, r7
 8001d74:	d000      	beq.n	8001d78 <HAL_RCC_OscConfig+0x1e4>
 8001d76:	e71c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff f88c 	bl	8000e94 <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	d9f6      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1dc>
 8001d82:	e749      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8001d84:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d86:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001d88:	439a      	bics	r2, r3
 8001d8a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f882 	bl	8000e94 <HAL_GetTick>
 8001d90:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d92:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001d94:	423b      	tst	r3, r7
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0x206>
 8001d98:	e70b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f87b 	bl	8000e94 <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	2802      	cmp	r0, #2
 8001da2:	d9f6      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1fe>
 8001da4:	e738      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001da6:	2138      	movs	r1, #56	; 0x38
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0x2f8>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	001d      	movs	r5, r3
 8001dae:	400a      	ands	r2, r1
 8001db0:	2a20      	cmp	r2, #32
 8001db2:	d108      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	079b      	lsls	r3, r3, #30
 8001db8:	d400      	bmi.n	8001dbc <HAL_RCC_OscConfig+0x228>
 8001dba:	e6fe      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
 8001dbc:	68a3      	ldr	r3, [r4, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d000      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x230>
 8001dc2:	e6fa      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
 8001dc4:	e70f      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc6:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd0:	4213      	tst	r3, r2
 8001dd2:	d108      	bne.n	8001de6 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001dda:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001ddc:	4013      	ands	r3, r2
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de6:	2780      	movs	r7, #128	; 0x80
 8001de8:	4e31      	ldr	r6, [pc, #196]	; (8001eb0 <HAL_RCC_OscConfig+0x31c>)
 8001dea:	007f      	lsls	r7, r7, #1
 8001dec:	6833      	ldr	r3, [r6, #0]
 8001dee:	423b      	tst	r3, r7
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	68a3      	ldr	r3, [r4, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d122      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2aa>
 8001df8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f849 	bl	8000e94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e02:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001e04:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001e08:	423b      	tst	r3, r7
 8001e0a:	d038      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8001e0c:	9b00      	ldr	r3, [sp, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d000      	beq.n	8001e14 <HAL_RCC_OscConfig+0x280>
 8001e12:	e6d2      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001e16:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x320>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001e1c:	e6cd      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1e:	6833      	ldr	r3, [r6, #0]
 8001e20:	433b      	orrs	r3, r7
 8001e22:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e24:	f7ff f836 	bl	8000e94 <HAL_GetTick>
 8001e28:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	6833      	ldr	r3, [r6, #0]
 8001e2c:	423b      	tst	r3, r7
 8001e2e:	d1e0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7ff f830 	bl	8000e94 <HAL_GetTick>
 8001e34:	9b01      	ldr	r3, [sp, #4]
 8001e36:	1ac0      	subs	r0, r0, r3
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9f6      	bls.n	8001e2a <HAL_RCC_OscConfig+0x296>
 8001e3c:	e6ec      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2bc>
 8001e44:	3b01      	subs	r3, #1
 8001e46:	4313      	orrs	r3, r2
 8001e48:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001e4a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e7d4      	b.n	8001dfa <HAL_RCC_OscConfig+0x266>
 8001e50:	2101      	movs	r1, #1
 8001e52:	438a      	bics	r2, r1
 8001e54:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001e56:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001e58:	3103      	adds	r1, #3
 8001e5a:	438a      	bics	r2, r1
 8001e5c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1cd      	bne.n	8001dfe <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 8001e62:	f7ff f817 	bl	8000e94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e66:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001e68:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001e6c:	423b      	tst	r3, r7
 8001e6e:	d0cd      	beq.n	8001e0c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff f810 	bl	8000e94 <HAL_GetTick>
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x324>)
 8001e76:	1b80      	subs	r0, r0, r6
 8001e78:	4298      	cmp	r0, r3
 8001e7a:	d9f6      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2d6>
 8001e7c:	e6cc      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f809 	bl	8000e94 <HAL_GetTick>
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_OscConfig+0x324>)
 8001e84:	1b80      	subs	r0, r0, r6
 8001e86:	4298      	cmp	r0, r3
 8001e88:	d9bd      	bls.n	8001e06 <HAL_RCC_OscConfig+0x272>
 8001e8a:	e6c5      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	fffbffff 	.word	0xfffbffff
 8001e98:	ffff80ff 	.word	0xffff80ff
 8001e9c:	ffffc7ff 	.word	0xffffc7ff
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	fffffeff 	.word	0xfffffeff
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	efffffff 	.word	0xefffffff
 8001eb8:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	2038      	movs	r0, #56	; 0x38
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0x43c>)
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	001d      	movs	r5, r3
 8001ec4:	4001      	ands	r1, r0
 8001ec6:	2910      	cmp	r1, #16
 8001ec8:	d054      	beq.n	8001f74 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4941      	ldr	r1, [pc, #260]	; (8001fd4 <HAL_RCC_OscConfig+0x440>)
 8001ece:	400b      	ands	r3, r1
 8001ed0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed2:	2a02      	cmp	r2, #2
 8001ed4:	d137      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ffdd 	bl	8000e94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eda:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001edc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	04bf      	lsls	r7, r7, #18
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	423b      	tst	r3, r7
 8001ee4:	d129      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ee8:	6a23      	ldr	r3, [r4, #32]
 8001eea:	68ea      	ldr	r2, [r5, #12]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <HAL_RCC_OscConfig+0x444>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef8:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efa:	4313      	orrs	r3, r2
 8001efc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001efe:	4313      	orrs	r3, r2
 8001f00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f02:	4313      	orrs	r3, r2
 8001f04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f06:	0212      	lsls	r2, r2, #8
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	682a      	ldr	r2, [r5, #0]
 8001f10:	045b      	lsls	r3, r3, #17
 8001f12:	4313      	orrs	r3, r2
 8001f14:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	68ea      	ldr	r2, [r5, #12]
 8001f1a:	055b      	lsls	r3, r3, #21
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001f20:	f7fe ffb8 	bl	8000e94 <HAL_GetTick>
 8001f24:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	4233      	tst	r3, r6
 8001f2a:	d000      	beq.n	8001f2e <HAL_RCC_OscConfig+0x39a>
 8001f2c:	e649      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe ffb1 	bl	8000e94 <HAL_GetTick>
 8001f32:	1b00      	subs	r0, r0, r4
 8001f34:	2802      	cmp	r0, #2
 8001f36:	d9f6      	bls.n	8001f26 <HAL_RCC_OscConfig+0x392>
 8001f38:	e66e      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe ffab 	bl	8000e94 <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	2802      	cmp	r0, #2
 8001f42:	d9cd      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x34c>
 8001f44:	e668      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f46:	2203      	movs	r2, #3
 8001f48:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4a:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f50:	68eb      	ldr	r3, [r5, #12]
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x448>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f56:	4013      	ands	r3, r2
 8001f58:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ff9b 	bl	8000e94 <HAL_GetTick>
 8001f5e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	4233      	tst	r3, r6
 8001f64:	d100      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3d4>
 8001f66:	e62c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ff94 	bl	8000e94 <HAL_GetTick>
 8001f6c:	1b00      	subs	r0, r0, r4
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	d9f6      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
 8001f72:	e651      	b.n	8001c18 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	2a01      	cmp	r2, #1
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3e6>
 8001f78:	e635      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001f7c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	6a21      	ldr	r1, [r4, #32]
 8001f80:	401a      	ands	r2, r3
 8001f82:	428a      	cmp	r2, r1
 8001f84:	d000      	beq.n	8001f88 <HAL_RCC_OscConfig+0x3f4>
 8001f86:	e62e      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f88:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d000      	beq.n	8001f94 <HAL_RCC_OscConfig+0x400>
 8001f92:	e628      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f94:	21fe      	movs	r1, #254	; 0xfe
 8001f96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f98:	01c9      	lsls	r1, r1, #7
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9e:	4291      	cmp	r1, r2
 8001fa0:	d000      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x410>
 8001fa2:	e620      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa4:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa8:	0392      	lsls	r2, r2, #14
 8001faa:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	428a      	cmp	r2, r1
 8001fae:	d000      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x41e>
 8001fb0:	e619      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fb2:	22e0      	movs	r2, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fb6:	0512      	lsls	r2, r2, #20
 8001fb8:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fba:	428a      	cmp	r2, r1
 8001fbc:	d000      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x42c>
 8001fbe:	e612      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fc2:	0f5b      	lsrs	r3, r3, #29
 8001fc4:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d100      	bne.n	8001fcc <HAL_RCC_OscConfig+0x438>
 8001fca:	e5fa      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2e>
 8001fcc:	e60b      	b.n	8001be6 <HAL_RCC_OscConfig+0x52>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	feffffff 	.word	0xfeffffff
 8001fd8:	11c1808c 	.word	0x11c1808c
 8001fdc:	eefeffff 	.word	0xeefeffff

08001fe0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe0:	2338      	movs	r3, #56	; 0x38
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001fe4:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe6:	6891      	ldr	r1, [r2, #8]
 8001fe8:	0014      	movs	r4, r2
 8001fea:	4219      	tst	r1, r3
 8001fec:	d105      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fee:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ff0:	481b      	ldr	r0, [pc, #108]	; (8002060 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ff2:	049b      	lsls	r3, r3, #18
 8001ff4:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ff6:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffa:	6891      	ldr	r1, [r2, #8]
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	2908      	cmp	r1, #8
 8002000:	d027      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002002:	6891      	ldr	r1, [r2, #8]
 8002004:	4019      	ands	r1, r3
 8002006:	2910      	cmp	r1, #16
 8002008:	d117      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800200a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800200c:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800200e:	43db      	mvns	r3, r3
 8002010:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002012:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	0649      	lsls	r1, r1, #25
 8002016:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002018:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800201a:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800201c:	4015      	ands	r5, r2
    switch (pllsource)
 800201e:	079b      	lsls	r3, r3, #30
 8002020:	d109      	bne.n	8002036 <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002022:	4810      	ldr	r0, [pc, #64]	; (8002064 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002024:	f7fe f898 	bl	8000158 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002028:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800202a:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800202c:	0f49      	lsrs	r1, r1, #29
 800202e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002030:	f7fe f892 	bl	8000158 <__udivsi3>
  return sysclockfreq;
 8002034:	e7e0      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002036:	480a      	ldr	r0, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x80>)
 8002038:	e7f4      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800203a:	6891      	ldr	r1, [r2, #8]
 800203c:	4019      	ands	r1, r3
 800203e:	2920      	cmp	r1, #32
 8002040:	d009      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002042:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8002044:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002046:	4013      	ands	r3, r2
 8002048:	2b18      	cmp	r3, #24
 800204a:	d1d5      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800204c:	20fa      	movs	r0, #250	; 0xfa
 800204e:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8002050:	e7d2      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <HAL_RCC_GetSysClockFreq+0x84>)
 8002054:	e7d0      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002056:	2080      	movs	r0, #128	; 0x80
 8002058:	0200      	lsls	r0, r0, #8
 800205a:	e7cd      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x18>
 800205c:	40021000 	.word	0x40021000
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_ClockConfig>:
{
 8002068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800206a:	0005      	movs	r5, r0
 800206c:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800206e:	2800      	cmp	r0, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
}
 8002074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002076:	2707      	movs	r7, #7
 8002078:	4c4a      	ldr	r4, [pc, #296]	; (80021a4 <HAL_RCC_ClockConfig+0x13c>)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	403b      	ands	r3, r7
 800207e:	428b      	cmp	r3, r1
 8002080:	d32a      	bcc.n	80020d8 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	6829      	ldr	r1, [r5, #0]
 8002084:	078b      	lsls	r3, r1, #30
 8002086:	d43b      	bmi.n	8002100 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002088:	07cb      	lsls	r3, r1, #31
 800208a:	d448      	bmi.n	800211e <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	2707      	movs	r7, #7
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	403b      	ands	r3, r7
 8002092:	42b3      	cmp	r3, r6
 8002094:	d90a      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	43bb      	bics	r3, r7
 800209a:	4333      	orrs	r3, r6
 800209c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800209e:	f7fe fef9 	bl	8000e94 <HAL_GetTick>
 80020a2:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	403b      	ands	r3, r7
 80020a8:	42b3      	cmp	r3, r6
 80020aa:	d16b      	bne.n	8002184 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	4c3e      	ldr	r4, [pc, #248]	; (80021a8 <HAL_RCC_ClockConfig+0x140>)
 80020b0:	075b      	lsls	r3, r3, #29
 80020b2:	d46f      	bmi.n	8002194 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020b4:	f7ff ff94 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 80020b8:	68a3      	ldr	r3, [r4, #8]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_RCC_ClockConfig+0x144>)
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	0f1b      	lsrs	r3, r3, #28
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	221f      	movs	r2, #31
 80020c6:	4013      	ands	r3, r2
 80020c8:	40d8      	lsrs	r0, r3
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_ClockConfig+0x148>)
 80020cc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_ClockConfig+0x14c>)
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	f7fe fe35 	bl	8000d40 <HAL_InitTick>
 80020d6:	e7cd      	b.n	8002074 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	43bb      	bics	r3, r7
 80020dc:	430b      	orrs	r3, r1
 80020de:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80020e0:	f7fe fed8 	bl	8000e94 <HAL_GetTick>
 80020e4:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	403b      	ands	r3, r7
 80020ea:	42b3      	cmp	r3, r6
 80020ec:	d0c9      	beq.n	8002082 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7fe fed1 	bl	8000e94 <HAL_GetTick>
 80020f2:	9b01      	ldr	r3, [sp, #4]
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_ClockConfig+0x150>)
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d9f4      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
 80020fe:	e7b9      	b.n	8002074 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_RCC_ClockConfig+0x140>)
 8002102:	074b      	lsls	r3, r1, #29
 8002104:	d504      	bpl.n	8002110 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002106:	23e0      	movs	r3, #224	; 0xe0
 8002108:	6890      	ldr	r0, [r2, #8]
 800210a:	01db      	lsls	r3, r3, #7
 800210c:	4303      	orrs	r3, r0
 800210e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	6893      	ldr	r3, [r2, #8]
 8002112:	482a      	ldr	r0, [pc, #168]	; (80021bc <HAL_RCC_ClockConfig+0x154>)
 8002114:	4003      	ands	r3, r0
 8002116:	68a8      	ldr	r0, [r5, #8]
 8002118:	4303      	orrs	r3, r0
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	e7b4      	b.n	8002088 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	686a      	ldr	r2, [r5, #4]
 8002120:	4f21      	ldr	r7, [pc, #132]	; (80021a8 <HAL_RCC_ClockConfig+0x140>)
 8002122:	2a01      	cmp	r2, #1
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	039b      	lsls	r3, r3, #14
 800212a:	d5a2      	bpl.n	8002072 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800212c:	2107      	movs	r1, #7
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	438b      	bics	r3, r1
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002136:	f7fe fead 	bl	8000e94 <HAL_GetTick>
 800213a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213c:	2338      	movs	r3, #56	; 0x38
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	401a      	ands	r2, r3
 8002142:	686b      	ldr	r3, [r5, #4]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	429a      	cmp	r2, r3
 8002148:	d0a0      	beq.n	800208c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7fe fea3 	bl	8000e94 <HAL_GetTick>
 800214e:	9b01      	ldr	r3, [sp, #4]
 8002150:	1ac0      	subs	r0, r0, r3
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x150>)
 8002154:	4298      	cmp	r0, r3
 8002156:	d9f1      	bls.n	800213c <HAL_RCC_ClockConfig+0xd4>
 8002158:	e7d0      	b.n	80020fc <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	2a02      	cmp	r2, #2
 800215c:	d103      	bne.n	8002166 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	d4e3      	bmi.n	800212c <HAL_RCC_ClockConfig+0xc4>
 8002164:	e785      	b.n	8002072 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002166:	2a00      	cmp	r2, #0
 8002168:	d103      	bne.n	8002172 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	055b      	lsls	r3, r3, #21
 800216e:	d4dd      	bmi.n	800212c <HAL_RCC_ClockConfig+0xc4>
 8002170:	e77f      	b.n	8002072 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002172:	2302      	movs	r3, #2
 8002174:	2a03      	cmp	r2, #3
 8002176:	d103      	bne.n	8002180 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4219      	tst	r1, r3
 800217c:	d1d6      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
 800217e:	e778      	b.n	8002072 <HAL_RCC_ClockConfig+0xa>
 8002180:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002182:	e7fa      	b.n	800217a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fe86 	bl	8000e94 <HAL_GetTick>
 8002188:	9b01      	ldr	r3, [sp, #4]
 800218a:	1ac0      	subs	r0, r0, r3
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x150>)
 800218e:	4298      	cmp	r0, r3
 8002190:	d988      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
 8002192:	e7b3      	b.n	80020fc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	68a3      	ldr	r3, [r4, #8]
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x158>)
 8002198:	4013      	ands	r3, r2
 800219a:	68ea      	ldr	r2, [r5, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60a3      	str	r3, [r4, #8]
 80021a0:	e788      	b.n	80020b4 <HAL_RCC_ClockConfig+0x4c>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080063ec 	.word	0x080063ec
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000008 	.word	0x20000008
 80021b8:	00001388 	.word	0x00001388
 80021bc:	fffff0ff 	.word	0xfffff0ff
 80021c0:	ffff8fff 	.word	0xffff8fff

080021c4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	045b      	lsls	r3, r3, #17
 80021cc:	0f5b      	lsrs	r3, r3, #29
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	589b      	ldr	r3, [r3, r2]
 80021d2:	221f      	movs	r2, #31
 80021d4:	4013      	ands	r3, r2
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d8:	6810      	ldr	r0, [r2, #0]
 80021da:	40d8      	lsrs	r0, r3
}
 80021dc:	4770      	bx	lr
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800642c 	.word	0x0800642c
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80021ec:	2207      	movs	r2, #7
{
 80021ee:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80021f4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f6:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f8:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021fa:	4014      	ands	r4, r2
 80021fc:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021fe:	689c      	ldr	r4, [r3, #8]
 8002200:	402c      	ands	r4, r5
 8002202:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002204:	24e0      	movs	r4, #224	; 0xe0
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	01e4      	lsls	r4, r4, #7
 800220a:	4023      	ands	r3, r4
 800220c:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800220e:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetClockConfig+0x30>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4013      	ands	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
}
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	40022000 	.word	0x40022000

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002224:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002226:	2000      	movs	r0, #0
{
 8002228:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800222a:	039b      	lsls	r3, r3, #14
 800222c:	d53c      	bpl.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x88>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	4c60      	ldr	r4, [pc, #384]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002232:	0552      	lsls	r2, r2, #21
 8002234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002236:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002238:	4213      	tst	r3, r2
 800223a:	d108      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800223e:	4313      	orrs	r3, r2
 8002240:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002244:	4013      	ands	r3, r2
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224e:	2780      	movs	r7, #128	; 0x80
 8002250:	4e59      	ldr	r6, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002252:	007f      	lsls	r7, r7, #1
 8002254:	6833      	ldr	r3, [r6, #0]
 8002256:	433b      	orrs	r3, r7
 8002258:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225a:	f7fe fe1b 	bl	8000e94 <HAL_GetTick>
 800225e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002260:	6833      	ldr	r3, [r6, #0]
 8002262:	423b      	tst	r3, r7
 8002264:	d012      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002266:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	0011      	movs	r1, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4e53      	ldr	r6, [pc, #332]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002270:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002272:	421a      	tst	r2, r3
 8002274:	d003      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002278:	4299      	cmp	r1, r3
 800227a:	d000      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800227c:	e07a      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002280:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002282:	401e      	ands	r6, r3
 8002284:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002286:	431e      	orrs	r6, r3
 8002288:	65e6      	str	r6, [r4, #92]	; 0x5c
 800228a:	e006      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fe02 	bl	8000e94 <HAL_GetTick>
 8002290:	9b01      	ldr	r3, [sp, #4]
 8002292:	1ac0      	subs	r0, r0, r3
 8002294:	2802      	cmp	r0, #2
 8002296:	d9e3      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002298:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229a:	9b00      	ldr	r3, [sp, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d103      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022a2:	4a47      	ldr	r2, [pc, #284]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	07da      	lsls	r2, r3, #31
 80022ac:	d506      	bpl.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ae:	2403      	movs	r4, #3
 80022b0:	4940      	ldr	r1, [pc, #256]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022b2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022b4:	43a2      	bics	r2, r4
 80022b6:	686c      	ldr	r4, [r5, #4]
 80022b8:	4322      	orrs	r2, r4
 80022ba:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022bc:	06da      	lsls	r2, r3, #27
 80022be:	d506      	bpl.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c0:	493c      	ldr	r1, [pc, #240]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022c2:	4c40      	ldr	r4, [pc, #256]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022c4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022c6:	4022      	ands	r2, r4
 80022c8:	68ac      	ldr	r4, [r5, #8]
 80022ca:	4322      	orrs	r2, r4
 80022cc:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ce:	059a      	lsls	r2, r3, #22
 80022d0:	d506      	bpl.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d2:	4938      	ldr	r1, [pc, #224]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022d4:	4c3c      	ldr	r4, [pc, #240]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022d6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022d8:	4022      	ands	r2, r4
 80022da:	696c      	ldr	r4, [r5, #20]
 80022dc:	4322      	orrs	r2, r4
 80022de:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022e0:	055a      	lsls	r2, r3, #21
 80022e2:	d506      	bpl.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e4:	4933      	ldr	r1, [pc, #204]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022e6:	4c39      	ldr	r4, [pc, #228]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022ea:	4022      	ands	r2, r4
 80022ec:	69ac      	ldr	r4, [r5, #24]
 80022ee:	4322      	orrs	r2, r4
 80022f0:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f2:	069a      	lsls	r2, r3, #26
 80022f4:	d506      	bpl.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f6:	492f      	ldr	r1, [pc, #188]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022f8:	4c35      	ldr	r4, [pc, #212]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022fa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022fc:	4022      	ands	r2, r4
 80022fe:	68ec      	ldr	r4, [r5, #12]
 8002300:	4322      	orrs	r2, r4
 8002302:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002304:	045a      	lsls	r2, r3, #17
 8002306:	d50f      	bpl.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002308:	492a      	ldr	r1, [pc, #168]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800230a:	69ec      	ldr	r4, [r5, #28]
 800230c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	0892      	lsrs	r2, r2, #2
 8002312:	4322      	orrs	r2, r4
 8002314:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	05d2      	lsls	r2, r2, #23
 800231a:	4294      	cmp	r4, r2
 800231c:	d104      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	68cc      	ldr	r4, [r1, #12]
 8002322:	0252      	lsls	r2, r2, #9
 8002324:	4322      	orrs	r2, r4
 8002326:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002328:	029a      	lsls	r2, r3, #10
 800232a:	d50f      	bpl.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800232c:	4921      	ldr	r1, [pc, #132]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800232e:	4e29      	ldr	r6, [pc, #164]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002330:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002332:	6a2c      	ldr	r4, [r5, #32]
 8002334:	4032      	ands	r2, r6
 8002336:	4322      	orrs	r2, r4
 8002338:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	03d2      	lsls	r2, r2, #15
 800233e:	4294      	cmp	r4, r2
 8002340:	d104      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	68cc      	ldr	r4, [r1, #12]
 8002346:	0452      	lsls	r2, r2, #17
 8002348:	4322      	orrs	r2, r4
 800234a:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800234c:	051b      	lsls	r3, r3, #20
 800234e:	d50f      	bpl.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002352:	4c21      	ldr	r4, [pc, #132]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002354:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002356:	6929      	ldr	r1, [r5, #16]
 8002358:	4023      	ands	r3, r4
 800235a:	430b      	orrs	r3, r1
 800235c:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	01db      	lsls	r3, r3, #7
 8002362:	4299      	cmp	r1, r3
 8002364:	d104      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	68d1      	ldr	r1, [r2, #12]
 800236a:	025b      	lsls	r3, r3, #9
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002370:	b005      	add	sp, #20
 8002372:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8002374:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002376:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002378:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237a:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 800237c:	025b      	lsls	r3, r3, #9
 800237e:	4303      	orrs	r3, r0
 8002380:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002382:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002384:	4815      	ldr	r0, [pc, #84]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002386:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4003      	ands	r3, r0
 800238a:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 800238c:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800238e:	07d3      	lsls	r3, r2, #31
 8002390:	d400      	bmi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002392:	e774      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 8002394:	f7fe fd7e 	bl	8000e94 <HAL_GetTick>
 8002398:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239a:	2202      	movs	r2, #2
 800239c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800239e:	4213      	tst	r3, r2
 80023a0:	d000      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80023a2:	e76c      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fd76 	bl	8000e94 <HAL_GetTick>
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023aa:	1bc0      	subs	r0, r0, r7
 80023ac:	4298      	cmp	r0, r3
 80023ae:	d9f4      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023b0:	e772      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	fffffcff 	.word	0xfffffcff
 80023c0:	efffffff 	.word	0xefffffff
 80023c4:	fffff3ff 	.word	0xfffff3ff
 80023c8:	fff3ffff 	.word	0xfff3ffff
 80023cc:	ffcfffff 	.word	0xffcfffff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	ffbfffff 	.word	0xffbfffff
 80023d8:	ffff3fff 	.word	0xffff3fff
 80023dc:	fffeffff 	.word	0xfffeffff
 80023e0:	00001388 	.word	0x00001388

080023e4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	0002      	movs	r2, r0
{
 80023e6:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80023ea:	323d      	adds	r2, #61	; 0x3d
 80023ec:	7811      	ldrb	r1, [r2, #0]
 80023ee:	4281      	cmp	r1, r0
 80023f0:	d119      	bne.n	8002426 <HAL_TIM_Base_Start+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	2102      	movs	r1, #2
 80023f4:	7011      	strb	r1, [r2, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_TIM_Base_Start+0x50>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d006      	beq.n	800240c <HAL_TIM_Base_Start+0x28>
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	05d2      	lsls	r2, r2, #23
 8002402:	4293      	cmp	r3, r2
 8002404:	d002      	beq.n	800240c <HAL_TIM_Base_Start+0x28>
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_TIM_Base_Start+0x54>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10d      	bne.n	8002428 <HAL_TIM_Base_Start+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	490b      	ldr	r1, [pc, #44]	; (800243c <HAL_TIM_Base_Start+0x58>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002412:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	2a06      	cmp	r2, #6
 8002416:	d006      	beq.n	8002426 <HAL_TIM_Base_Start+0x42>
 8002418:	3907      	subs	r1, #7
 800241a:	428a      	cmp	r2, r1
 800241c:	d003      	beq.n	8002426 <HAL_TIM_Base_Start+0x42>
      __HAL_TIM_ENABLE(htim);
 800241e:	2201      	movs	r2, #1
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4310      	orrs	r0, r2
 800242c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800242e:	2000      	movs	r0, #0
 8002430:	e7f9      	b.n	8002426 <HAL_TIM_Base_Start+0x42>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	00010007 	.word	0x00010007

08002440 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002440:	0002      	movs	r2, r0
{
 8002442:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002446:	323d      	adds	r2, #61	; 0x3d
 8002448:	7811      	ldrb	r1, [r2, #0]
 800244a:	4281      	cmp	r1, r0
 800244c:	d11c      	bne.n	8002488 <HAL_TIM_Base_Start_IT+0x48>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244e:	2102      	movs	r1, #2
 8002450:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4302      	orrs	r2, r0
 8002458:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245a:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_TIM_Base_Start_IT+0x54>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d006      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x2e>
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	05d2      	lsls	r2, r2, #23
 8002464:	4293      	cmp	r3, r2
 8002466:	d002      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x2e>
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_TIM_Base_Start_IT+0x58>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <HAL_TIM_Base_Start_IT+0x4a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	490a      	ldr	r1, [pc, #40]	; (800249c <HAL_TIM_Base_Start_IT+0x5c>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002472:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002474:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	2a06      	cmp	r2, #6
 8002478:	d006      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x48>
 800247a:	3907      	subs	r1, #7
 800247c:	428a      	cmp	r2, r1
 800247e:	d003      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 8002480:	2201      	movs	r2, #1
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4310      	orrs	r0, r2
 800248e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002490:	2000      	movs	r0, #0
 8002492:	e7f9      	b.n	8002488 <HAL_TIM_Base_Start_IT+0x48>
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	00010007 	.word	0x00010007

080024a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIM_IC_CaptureCallback>:
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_TriggerCallback>:
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a8:	2202      	movs	r2, #2
 80024aa:	6803      	ldr	r3, [r0, #0]
{
 80024ac:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024ae:	6919      	ldr	r1, [r3, #16]
{
 80024b0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b2:	4211      	tst	r1, r2
 80024b4:	d00e      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	4211      	tst	r1, r2
 80024ba:	d00b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024bc:	3a05      	subs	r2, #5
 80024be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c0:	3204      	adds	r2, #4
 80024c2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	079b      	lsls	r3, r3, #30
 80024c8:	d100      	bne.n	80024cc <HAL_TIM_IRQHandler+0x24>
 80024ca:	e086      	b.n	80025da <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024cc:	f7ff ffe9 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d0:	2300      	movs	r3, #0
 80024d2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024d4:	2204      	movs	r2, #4
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	4211      	tst	r1, r2
 80024dc:	d011      	beq.n	8002502 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024de:	68d9      	ldr	r1, [r3, #12]
 80024e0:	4211      	tst	r1, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e4:	3a09      	subs	r2, #9
 80024e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024e8:	3207      	adds	r2, #7
 80024ea:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f4:	421a      	tst	r2, r3
 80024f6:	d100      	bne.n	80024fa <HAL_TIM_IRQHandler+0x52>
 80024f8:	e075      	b.n	80025e6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	f7ff ffd2 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	2300      	movs	r3, #0
 8002500:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002502:	2208      	movs	r2, #8
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	6919      	ldr	r1, [r3, #16]
 8002508:	4211      	tst	r1, r2
 800250a:	d00e      	beq.n	800252a <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	4211      	tst	r1, r2
 8002510:	d00b      	beq.n	800252a <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002512:	3a11      	subs	r2, #17
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	320d      	adds	r2, #13
 8002518:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251a:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	079b      	lsls	r3, r3, #30
 8002520:	d067      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	f7ff ffbe 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	2300      	movs	r3, #0
 8002528:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800252a:	2210      	movs	r2, #16
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
 8002530:	4211      	tst	r1, r2
 8002532:	d010      	beq.n	8002556 <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002534:	68d9      	ldr	r1, [r3, #12]
 8002536:	4211      	tst	r1, r2
 8002538:	d00d      	beq.n	8002556 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253a:	3a21      	subs	r2, #33	; 0x21
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	3219      	adds	r2, #25
 8002540:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002548:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254a:	421a      	tst	r2, r3
 800254c:	d057      	beq.n	80025fe <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	f7ff ffa8 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	2300      	movs	r3, #0
 8002554:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002556:	2201      	movs	r2, #1
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	6919      	ldr	r1, [r3, #16]
 800255c:	4211      	tst	r1, r2
 800255e:	d007      	beq.n	8002570 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	4211      	tst	r1, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002566:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002568:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800256a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800256c:	f7fe fb0e 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	4211      	tst	r1, r2
 8002578:	d008      	beq.n	800258c <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257a:	68d9      	ldr	r1, [r3, #12]
 800257c:	4211      	tst	r1, r2
 800257e:	d005      	beq.n	800258c <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002580:	3a02      	subs	r2, #2
 8002582:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002584:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002586:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002588:	f000 f8b5 	bl	80026f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	05d2      	lsls	r2, r2, #23
 8002592:	d507      	bpl.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	0612      	lsls	r2, r2, #24
 8002598:	d504      	bpl.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800259c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800259e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80025a0:	f000 f8aa 	bl	80026f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	4211      	tst	r1, r2
 80025ac:	d007      	beq.n	80025be <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	4211      	tst	r1, r2
 80025b2:	d004      	beq.n	80025be <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b4:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80025ba:	f7ff ff74 	bl	80024a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025be:	2220      	movs	r2, #32
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	4211      	tst	r1, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025c8:	68d9      	ldr	r1, [r3, #12]
 80025ca:	4211      	tst	r1, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ce:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80025d4:	f000 f88e 	bl	80026f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	f7ff ff61 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025de:	0020      	movs	r0, r4
 80025e0:	f7ff ff60 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80025e4:	e774      	b.n	80024d0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	f7ff ff5b 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ea:	0020      	movs	r0, r4
 80025ec:	f7ff ff5a 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80025f0:	e785      	b.n	80024fe <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	f7ff ff55 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f6:	0020      	movs	r0, r4
 80025f8:	f7ff ff54 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80025fc:	e793      	b.n	8002526 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	f7ff ff4f 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002602:	0020      	movs	r0, r4
 8002604:	f7ff ff4e 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002608:	e7a3      	b.n	8002552 <HAL_TIM_IRQHandler+0xaa>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffeff 	.word	0xfffffeff

08002610 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <TIM_Base_SetConfig+0x78>)
{
 8002612:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002614:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002616:	4290      	cmp	r0, r2
 8002618:	d006      	beq.n	8002628 <TIM_Base_SetConfig+0x18>
 800261a:	2480      	movs	r4, #128	; 0x80
 800261c:	05e4      	lsls	r4, r4, #23
 800261e:	42a0      	cmp	r0, r4
 8002620:	d002      	beq.n	8002628 <TIM_Base_SetConfig+0x18>
 8002622:	4c1a      	ldr	r4, [pc, #104]	; (800268c <TIM_Base_SetConfig+0x7c>)
 8002624:	42a0      	cmp	r0, r4
 8002626:	d10c      	bne.n	8002642 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	2470      	movs	r4, #112	; 0x70
 800262a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800262c:	684c      	ldr	r4, [r1, #4]
 800262e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002630:	4290      	cmp	r0, r2
 8002632:	d00f      	beq.n	8002654 <TIM_Base_SetConfig+0x44>
 8002634:	2480      	movs	r4, #128	; 0x80
 8002636:	05e4      	lsls	r4, r4, #23
 8002638:	42a0      	cmp	r0, r4
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0x44>
 800263c:	4c13      	ldr	r4, [pc, #76]	; (800268c <TIM_Base_SetConfig+0x7c>)
 800263e:	42a0      	cmp	r0, r4
 8002640:	d008      	beq.n	8002654 <TIM_Base_SetConfig+0x44>
 8002642:	4c13      	ldr	r4, [pc, #76]	; (8002690 <TIM_Base_SetConfig+0x80>)
 8002644:	42a0      	cmp	r0, r4
 8002646:	d005      	beq.n	8002654 <TIM_Base_SetConfig+0x44>
 8002648:	4c12      	ldr	r4, [pc, #72]	; (8002694 <TIM_Base_SetConfig+0x84>)
 800264a:	42a0      	cmp	r0, r4
 800264c:	d002      	beq.n	8002654 <TIM_Base_SetConfig+0x44>
 800264e:	4c12      	ldr	r4, [pc, #72]	; (8002698 <TIM_Base_SetConfig+0x88>)
 8002650:	42a0      	cmp	r0, r4
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002654:	4c11      	ldr	r4, [pc, #68]	; (800269c <TIM_Base_SetConfig+0x8c>)
 8002656:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002658:	68cc      	ldr	r4, [r1, #12]
 800265a:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800265c:	2480      	movs	r4, #128	; 0x80
 800265e:	43a3      	bics	r3, r4
 8002660:	694c      	ldr	r4, [r1, #20]
 8002662:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002664:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002666:	688b      	ldr	r3, [r1, #8]
 8002668:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266a:	680b      	ldr	r3, [r1, #0]
 800266c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266e:	4290      	cmp	r0, r2
 8002670:	d005      	beq.n	800267e <TIM_Base_SetConfig+0x6e>
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <TIM_Base_SetConfig+0x84>)
 8002674:	4298      	cmp	r0, r3
 8002676:	d002      	beq.n	800267e <TIM_Base_SetConfig+0x6e>
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <TIM_Base_SetConfig+0x88>)
 800267a:	4298      	cmp	r0, r3
 800267c:	d101      	bne.n	8002682 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267e:	690b      	ldr	r3, [r1, #16]
 8002680:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002682:	2301      	movs	r3, #1
 8002684:	6143      	str	r3, [r0, #20]
}
 8002686:	bd10      	pop	{r4, pc}
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40000400 	.word	0x40000400
 8002690:	40002000 	.word	0x40002000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	fffffcff 	.word	0xfffffcff

080026a0 <HAL_TIM_Base_Init>:
{
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
  if (htim == NULL)
 80026a6:	2c00      	cmp	r4, #0
 80026a8:	d023      	beq.n	80026f2 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80026aa:	0025      	movs	r5, r4
 80026ac:	353d      	adds	r5, #61	; 0x3d
 80026ae:	782b      	ldrb	r3, [r5, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80026b6:	0023      	movs	r3, r4
 80026b8:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80026ba:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80026bc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80026be:	f7fe faef 	bl	8000ca0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c6:	6820      	ldr	r0, [r4, #0]
 80026c8:	1d21      	adds	r1, r4, #4
 80026ca:	f7ff ffa1 	bl	8002610 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ce:	0022      	movs	r2, r4
 80026d0:	2301      	movs	r3, #1
  return HAL_OK;
 80026d2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d4:	3248      	adds	r2, #72	; 0x48
 80026d6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026da:	3a0a      	subs	r2, #10
 80026dc:	7013      	strb	r3, [r2, #0]
 80026de:	7053      	strb	r3, [r2, #1]
 80026e0:	7093      	strb	r3, [r2, #2]
 80026e2:	70d3      	strb	r3, [r2, #3]
 80026e4:	7113      	strb	r3, [r2, #4]
 80026e6:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	7193      	strb	r3, [r2, #6]
 80026ea:	71d3      	strb	r3, [r2, #7]
 80026ec:	7213      	strb	r3, [r2, #8]
 80026ee:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	702b      	strb	r3, [r5, #0]
}
 80026f2:	bd70      	pop	{r4, r5, r6, pc}

080026f4 <HAL_TIMEx_CommutCallback>:
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIMEx_BreakCallback>:
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIMEx_Break2Callback>:
 80026f8:	4770      	bx	lr
	...

080026fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026fc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fe:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	2201      	movs	r2, #1
 8002704:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002708:	6801      	ldr	r1, [r0, #0]
 800270a:	4d13      	ldr	r5, [pc, #76]	; (8002758 <UART_EndRxTransfer+0x5c>)
 800270c:	680b      	ldr	r3, [r1, #0]
 800270e:	402b      	ands	r3, r5
 8002710:	600b      	str	r3, [r1, #0]
 8002712:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002716:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800271e:	6802      	ldr	r2, [r0, #0]
 8002720:	4c0e      	ldr	r4, [pc, #56]	; (800275c <UART_EndRxTransfer+0x60>)
 8002722:	6893      	ldr	r3, [r2, #8]
 8002724:	4023      	ands	r3, r4
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10a      	bne.n	8002748 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002732:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002736:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273a:	2410      	movs	r4, #16
 800273c:	6802      	ldr	r2, [r0, #0]
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	43a3      	bics	r3, r4
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002748:	0003      	movs	r3, r0
 800274a:	2220      	movs	r2, #32
 800274c:	3388      	adds	r3, #136	; 0x88
 800274e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002750:	2300      	movs	r3, #0
 8002752:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002754:	6703      	str	r3, [r0, #112]	; 0x70
}
 8002756:	bd30      	pop	{r4, r5, pc}
 8002758:	fffffedf 	.word	0xfffffedf
 800275c:	effffffe 	.word	0xeffffffe

08002760 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 8002760:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002762:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	2201      	movs	r2, #1
 8002768:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800276c:	2580      	movs	r5, #128	; 0x80
 800276e:	6801      	ldr	r1, [r0, #0]
 8002770:	680b      	ldr	r3, [r1, #0]
 8002772:	43ab      	bics	r3, r5
 8002774:	600b      	str	r3, [r1, #0]
 8002776:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002782:	2340      	movs	r3, #64	; 0x40
 8002784:	6802      	ldr	r2, [r0, #0]
 8002786:	6810      	ldr	r0, [r2, #0]
 8002788:	4303      	orrs	r3, r0
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002790:	bd30      	pop	{r4, r5, pc}

08002792 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002792:	0003      	movs	r3, r0
 8002794:	3308      	adds	r3, #8
 8002796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8002798:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800279a:	2b21      	cmp	r3, #33	; 0x21
 800279c:	d106      	bne.n	80027ac <UART_TxISR_8BIT+0x1a>
    if (huart->TxXferCount == 0U)
 800279e:	0002      	movs	r2, r0
 80027a0:	3256      	adds	r2, #86	; 0x56
 80027a2:	8813      	ldrh	r3, [r2, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <UART_TxISR_8BIT+0x1c>
 80027a8:	f7ff ffda 	bl	8002760 <UART_TxISR_16BIT.part.0>
}
 80027ac:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80027ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027b0:	6801      	ldr	r1, [r0, #0]
 80027b2:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 80027b4:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80027b6:	628c      	str	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 80027b8:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80027ba:	8813      	ldrh	r3, [r2, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
}
 80027c2:	e7f3      	b.n	80027ac <UART_TxISR_8BIT+0x1a>

080027c4 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027c4:	0003      	movs	r3, r0
 80027c6:	3308      	adds	r3, #8
 80027c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80027ca:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027cc:	2b21      	cmp	r3, #33	; 0x21
 80027ce:	d106      	bne.n	80027de <UART_TxISR_16BIT+0x1a>
  {
    if (huart->TxXferCount == 0U)
 80027d0:	0001      	movs	r1, r0
 80027d2:	3156      	adds	r1, #86	; 0x56
 80027d4:	880b      	ldrh	r3, [r1, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <UART_TxISR_16BIT+0x1c>
 80027da:	f7ff ffc1 	bl	8002760 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80027de:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027e0:	6d02      	ldr	r2, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80027e2:	6804      	ldr	r4, [r0, #0]
 80027e4:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 80027e6:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	0ddb      	lsrs	r3, r3, #23
 80027ec:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80027ee:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80027f0:	880b      	ldrh	r3, [r1, #0]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	800b      	strh	r3, [r1, #0]
}
 80027f8:	e7f1      	b.n	80027de <UART_TxISR_16BIT+0x1a>
	...

080027fc <UART_TxISR_16BIT_FIFOEN.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
 80027fc:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	2201      	movs	r2, #1
 8002804:	f382 8810 	msr	PRIMASK, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
    {
      if (huart->TxXferCount == 0U)
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002808:	6801      	ldr	r1, [r0, #0]
 800280a:	4d09      	ldr	r5, [pc, #36]	; (8002830 <UART_TxISR_16BIT_FIFOEN.part.0+0x34>)
 800280c:	688b      	ldr	r3, [r1, #8]
 800280e:	402b      	ands	r3, r5
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002816:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	f382 8810 	msr	PRIMASK, r2

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	6802      	ldr	r2, [r0, #0]
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	4303      	orrs	r3, r0
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 800282c:	bd30      	pop	{r4, r5, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	ff7fffff 	.word	0xff7fffff

08002834 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002834:	0003      	movs	r3, r0
 8002836:	3308      	adds	r3, #8
 8002838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800283a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800283c:	2b21      	cmp	r3, #33	; 0x21
 800283e:	d10c      	bne.n	800285a <UART_TxISR_8BIT_FIFOEN+0x26>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002840:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8002842:	0001      	movs	r1, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002844:	2480      	movs	r4, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002846:	336a      	adds	r3, #106	; 0x6a
 8002848:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 800284a:	3156      	adds	r1, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <UART_TxISR_8BIT_FIFOEN+0x26>
      if (huart->TxXferCount == 0U)
 8002850:	880a      	ldrh	r2, [r1, #0]
 8002852:	2a00      	cmp	r2, #0
 8002854:	d102      	bne.n	800285c <UART_TxISR_8BIT_FIFOEN+0x28>
 8002856:	f7ff ffd1 	bl	80027fc <UART_TxISR_16BIT_FIFOEN.part.0>
}
 800285a:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800285c:	6805      	ldr	r5, [r0, #0]
 800285e:	69ea      	ldr	r2, [r5, #28]
 8002860:	4222      	tst	r2, r4
 8002862:	d008      	beq.n	8002876 <UART_TxISR_8BIT_FIFOEN+0x42>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002864:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002866:	7816      	ldrb	r6, [r2, #0]
        huart->pTxBuffPtr++;
 8002868:	3201      	adds	r2, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800286a:	62ae      	str	r6, [r5, #40]	; 0x28
        huart->pTxBuffPtr++;
 800286c:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800286e:	880a      	ldrh	r2, [r1, #0]
 8002870:	3a01      	subs	r2, #1
 8002872:	b292      	uxth	r2, r2
 8002874:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002876:	3b01      	subs	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	e7e7      	b.n	800284c <UART_TxISR_8BIT_FIFOEN+0x18>

0800287c <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800287c:	0003      	movs	r3, r0
 800287e:	3308      	adds	r3, #8
 8002880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8002882:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002884:	2b21      	cmp	r3, #33	; 0x21
 8002886:	d10c      	bne.n	80028a2 <UART_TxISR_16BIT_FIFOEN+0x26>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002888:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 800288a:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800288c:	2480      	movs	r4, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800288e:	336a      	adds	r3, #106	; 0x6a
 8002890:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 8002892:	3156      	adds	r1, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <UART_TxISR_16BIT_FIFOEN+0x26>
      if (huart->TxXferCount == 0U)
 8002898:	880a      	ldrh	r2, [r1, #0]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d102      	bne.n	80028a4 <UART_TxISR_16BIT_FIFOEN+0x28>
 800289e:	f7ff ffad 	bl	80027fc <UART_TxISR_16BIT_FIFOEN.part.0>
      {
        /* Nothing to do */
      }
    }
  }
}
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80028a4:	6806      	ldr	r6, [r0, #0]
 80028a6:	69f2      	ldr	r2, [r6, #28]
 80028a8:	4222      	tst	r2, r4
 80028aa:	d00a      	beq.n	80028c2 <UART_TxISR_16BIT_FIFOEN+0x46>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80028ac:	6d05      	ldr	r5, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80028ae:	882a      	ldrh	r2, [r5, #0]
        huart->pTxBuffPtr += 2U;
 80028b0:	3502      	adds	r5, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80028b2:	05d2      	lsls	r2, r2, #23
 80028b4:	0dd2      	lsrs	r2, r2, #23
 80028b6:	62b2      	str	r2, [r6, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80028b8:	6505      	str	r5, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80028ba:	880a      	ldrh	r2, [r1, #0]
 80028bc:	3a01      	subs	r2, #1
 80028be:	b292      	uxth	r2, r2
 80028c0:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	e7e5      	b.n	8002894 <UART_TxISR_16BIT_FIFOEN+0x18>

080028c8 <HAL_UART_Transmit_IT>:
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80028ca:	0006      	movs	r6, r0
 80028cc:	3608      	adds	r6, #8
 80028ce:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 80028d0:	0003      	movs	r3, r0
    return HAL_BUSY;
 80028d2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80028d4:	2c20      	cmp	r4, #32
 80028d6:	d141      	bne.n	800295c <HAL_UART_Transmit_IT+0x94>
      return HAL_ERROR;
 80028d8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80028da:	2900      	cmp	r1, #0
 80028dc:	d03e      	beq.n	800295c <HAL_UART_Transmit_IT+0x94>
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d03c      	beq.n	800295c <HAL_UART_Transmit_IT+0x94>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	2080      	movs	r0, #128	; 0x80
 80028e4:	689d      	ldr	r5, [r3, #8]
 80028e6:	0140      	lsls	r0, r0, #5
 80028e8:	4285      	cmp	r5, r0
 80028ea:	d106      	bne.n	80028fa <HAL_UART_Transmit_IT+0x32>
 80028ec:	6918      	ldr	r0, [r3, #16]
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d103      	bne.n	80028fa <HAL_UART_Transmit_IT+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80028f2:	3c1f      	subs	r4, #31
      return HAL_ERROR;
 80028f4:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80028f6:	4221      	tst	r1, r4
 80028f8:	d130      	bne.n	800295c <HAL_UART_Transmit_IT+0x94>
    __HAL_LOCK(huart);
 80028fa:	001c      	movs	r4, r3
 80028fc:	3480      	adds	r4, #128	; 0x80
 80028fe:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8002900:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002902:	2f01      	cmp	r7, #1
 8002904:	d02a      	beq.n	800295c <HAL_UART_Transmit_IT+0x94>
 8002906:	3801      	subs	r0, #1
 8002908:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 800290a:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800290c:	0019      	movs	r1, r3
 800290e:	3154      	adds	r1, #84	; 0x54
 8002910:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8002912:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	328c      	adds	r2, #140	; 0x8c
 800291a:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291c:	2221      	movs	r2, #33	; 0x21
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	67f2      	str	r2, [r6, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8002926:	0592      	lsls	r2, r2, #22
 8002928:	0149      	lsls	r1, r1, #5
 800292a:	4290      	cmp	r0, r2
 800292c:	d117      	bne.n	800295e <HAL_UART_Transmit_IT+0x96>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_UART_Transmit_IT+0xc0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002930:	428d      	cmp	r5, r1
 8002932:	d103      	bne.n	800293c <HAL_UART_Transmit_IT+0x74>
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	2900      	cmp	r1, #0
 8002938:	d100      	bne.n	800293c <HAL_UART_Transmit_IT+0x74>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_UART_Transmit_IT+0xc4>)
      __HAL_UNLOCK(huart);
 800293c:	2000      	movs	r0, #0
 800293e:	675a      	str	r2, [r3, #116]	; 0x74
 8002940:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	2201      	movs	r2, #1
 8002948:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	6894      	ldr	r4, [r2, #8]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	4323      	orrs	r3, r4
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	f381 8810 	msr	PRIMASK, r1
}
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_UART_Transmit_IT+0xc8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002960:	428d      	cmp	r5, r1
 8002962:	d103      	bne.n	800296c <HAL_UART_Transmit_IT+0xa4>
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	2900      	cmp	r1, #0
 8002968:	d100      	bne.n	800296c <HAL_UART_Transmit_IT+0xa4>
        huart->TxISR = UART_TxISR_16BIT;
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_UART_Transmit_IT+0xcc>)
      __HAL_UNLOCK(huart);
 800296c:	2000      	movs	r0, #0
 800296e:	675a      	str	r2, [r3, #116]	; 0x74
 8002970:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002972:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	2201      	movs	r2, #1
 8002978:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	6814      	ldr	r4, [r2, #0]
 8002982:	4323      	orrs	r3, r4
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e7e7      	b.n	8002958 <HAL_UART_Transmit_IT+0x90>
 8002988:	08002835 	.word	0x08002835
 800298c:	0800287d 	.word	0x0800287d
 8002990:	08002793 	.word	0x08002793
 8002994:	080027c5 	.word	0x080027c5

08002998 <HAL_UART_ErrorCallback>:
 8002998:	4770      	bx	lr

0800299a <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800299a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	0002      	movs	r2, r0
{
 80029a0:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80029a2:	325e      	adds	r2, #94	; 0x5e
 80029a4:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80029a6:	3a08      	subs	r2, #8
 80029a8:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80029aa:	f7ff fff5 	bl	8002998 <HAL_UART_ErrorCallback>
}
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <HAL_UARTEx_RxEventCallback>:
}
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_UART_IRQHandler>:
{
 80029b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029b6:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029b8:	4dc1      	ldr	r5, [pc, #772]	; (8002cc0 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029ba:	69cb      	ldr	r3, [r1, #28]
{
 80029bc:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029be:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c0:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80029c2:	422b      	tst	r3, r5
 80029c4:	d110      	bne.n	80029e8 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029c6:	2520      	movs	r5, #32
 80029c8:	422b      	tst	r3, r5
 80029ca:	d100      	bne.n	80029ce <HAL_UART_IRQHandler+0x1a>
 80029cc:	e099      	b.n	8002b02 <HAL_UART_IRQHandler+0x14e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029ce:	2680      	movs	r6, #128	; 0x80
 80029d0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029d2:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029d4:	4006      	ands	r6, r0
 80029d6:	4335      	orrs	r5, r6
 80029d8:	d100      	bne.n	80029dc <HAL_UART_IRQHandler+0x28>
 80029da:	e092      	b.n	8002b02 <HAL_UART_IRQHandler+0x14e>
      if (huart->RxISR != NULL)
 80029dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
      huart->TxISR(huart);
 80029de:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d000      	beq.n	80029e6 <HAL_UART_IRQHandler+0x32>
 80029e4:	e082      	b.n	8002aec <HAL_UART_IRQHandler+0x138>
 80029e6:	e082      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80029e8:	4db6      	ldr	r5, [pc, #728]	; (8002cc4 <HAL_UART_IRQHandler+0x310>)
 80029ea:	4005      	ands	r5, r0
 80029ec:	46ac      	mov	ip, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029ee:	4666      	mov	r6, ip
 80029f0:	4db5      	ldr	r5, [pc, #724]	; (8002cc8 <HAL_UART_IRQHandler+0x314>)
 80029f2:	4015      	ands	r5, r2
 80029f4:	4335      	orrs	r5, r6
 80029f6:	d100      	bne.n	80029fa <HAL_UART_IRQHandler+0x46>
 80029f8:	e083      	b.n	8002b02 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029fa:	2501      	movs	r5, #1
 80029fc:	422b      	tst	r3, r5
 80029fe:	d007      	beq.n	8002a10 <HAL_UART_IRQHandler+0x5c>
 8002a00:	05d6      	lsls	r6, r2, #23
 8002a02:	d505      	bpl.n	8002a10 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a04:	0026      	movs	r6, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a06:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a08:	368c      	adds	r6, #140	; 0x8c
 8002a0a:	6837      	ldr	r7, [r6, #0]
 8002a0c:	433d      	orrs	r5, r7
 8002a0e:	6035      	str	r5, [r6, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a10:	0025      	movs	r5, r4
 8002a12:	2602      	movs	r6, #2
 8002a14:	358c      	adds	r5, #140	; 0x8c
 8002a16:	9501      	str	r5, [sp, #4]
 8002a18:	4233      	tst	r3, r6
 8002a1a:	d007      	beq.n	8002a2c <HAL_UART_IRQHandler+0x78>
 8002a1c:	07c5      	lsls	r5, r0, #31
 8002a1e:	d505      	bpl.n	8002a2c <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a20:	9d01      	ldr	r5, [sp, #4]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a22:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a24:	682f      	ldr	r7, [r5, #0]
 8002a26:	19b6      	adds	r6, r6, r6
 8002a28:	433e      	orrs	r6, r7
 8002a2a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2c:	2604      	movs	r6, #4
 8002a2e:	4233      	tst	r3, r6
 8002a30:	d009      	beq.n	8002a46 <HAL_UART_IRQHandler+0x92>
 8002a32:	07c5      	lsls	r5, r0, #31
 8002a34:	d507      	bpl.n	8002a46 <HAL_UART_IRQHandler+0x92>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a36:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a38:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a3a:	378c      	adds	r7, #140	; 0x8c
 8002a3c:	683e      	ldr	r6, [r7, #0]
 8002a3e:	0035      	movs	r5, r6
 8002a40:	2602      	movs	r6, #2
 8002a42:	432e      	orrs	r6, r5
 8002a44:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a46:	2608      	movs	r6, #8
 8002a48:	4233      	tst	r3, r6
 8002a4a:	d00a      	beq.n	8002a62 <HAL_UART_IRQHandler+0xae>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a4c:	2720      	movs	r7, #32
 8002a4e:	4665      	mov	r5, ip
 8002a50:	4017      	ands	r7, r2
 8002a52:	432f      	orrs	r7, r5
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0xae>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a56:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a58:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a5a:	378c      	adds	r7, #140	; 0x8c
 8002a5c:	683d      	ldr	r5, [r7, #0]
 8002a5e:	432e      	orrs	r6, r5
 8002a60:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a62:	2780      	movs	r7, #128	; 0x80
 8002a64:	0026      	movs	r6, r4
 8002a66:	013f      	lsls	r7, r7, #4
 8002a68:	368c      	adds	r6, #140	; 0x8c
 8002a6a:	423b      	tst	r3, r7
 8002a6c:	d006      	beq.n	8002a7c <HAL_UART_IRQHandler+0xc8>
 8002a6e:	0155      	lsls	r5, r2, #5
 8002a70:	d504      	bpl.n	8002a7c <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a72:	620f      	str	r7, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a74:	2120      	movs	r1, #32
 8002a76:	6837      	ldr	r7, [r6, #0]
 8002a78:	4339      	orrs	r1, r7
 8002a7a:	6031      	str	r1, [r6, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7c:	6831      	ldr	r1, [r6, #0]
 8002a7e:	2900      	cmp	r1, #0
 8002a80:	d035      	beq.n	8002aee <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a82:	2120      	movs	r1, #32
 8002a84:	420b      	tst	r3, r1
 8002a86:	d00a      	beq.n	8002a9e <HAL_UART_IRQHandler+0xea>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a88:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	0552      	lsls	r2, r2, #21
 8002a8e:	4010      	ands	r0, r2
 8002a90:	4301      	orrs	r1, r0
 8002a92:	d004      	beq.n	8002a9e <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 8002a94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_UART_IRQHandler+0xea>
          huart->RxISR(huart);
 8002a9a:	0020      	movs	r0, r4
 8002a9c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a9e:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002aa0:	9b01      	ldr	r3, [sp, #4]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa2:	2740      	movs	r7, #64	; 0x40
      errorcode = huart->ErrorCode;
 8002aa4:	681b      	ldr	r3, [r3, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aac:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002aae:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ab0:	431e      	orrs	r6, r3
 8002ab2:	d021      	beq.n	8002af8 <HAL_UART_IRQHandler+0x144>
        UART_EndRxTransfer(huart);
 8002ab4:	f7ff fe22 	bl	80026fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	423b      	tst	r3, r7
 8002abe:	d017      	beq.n	8002af0 <HAL_UART_IRQHandler+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6893      	ldr	r3, [r2, #8]
 8002ace:	43bb      	bics	r3, r7
 8002ad0:	6093      	str	r3, [r2, #8]
 8002ad2:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002ad6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002adc:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_UART_IRQHandler+0x318>)
 8002ade:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae0:	f7fe fee0 	bl	80018a4 <HAL_DMA_Abort_IT>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002aec:	4798      	blx	r3
}
 8002aee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002af0:	0020      	movs	r0, r4
 8002af2:	f7ff ff51 	bl	8002998 <HAL_UART_ErrorCallback>
 8002af6:	e7fa      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
        HAL_UART_ErrorCallback(huart);
 8002af8:	f7ff ff4e 	bl	8002998 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	601e      	str	r6, [r3, #0]
 8002b00:	e7f5      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b02:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002b04:	2d01      	cmp	r5, #1
 8002b06:	d000      	beq.n	8002b0a <HAL_UART_IRQHandler+0x156>
 8002b08:	e098      	b.n	8002c3c <HAL_UART_IRQHandler+0x288>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b0a:	2610      	movs	r6, #16
 8002b0c:	4233      	tst	r3, r6
 8002b0e:	d100      	bne.n	8002b12 <HAL_UART_IRQHandler+0x15e>
 8002b10:	e094      	b.n	8002c3c <HAL_UART_IRQHandler+0x288>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b12:	4232      	tst	r2, r6
 8002b14:	d100      	bne.n	8002b18 <HAL_UART_IRQHandler+0x164>
 8002b16:	e091      	b.n	8002c3c <HAL_UART_IRQHandler+0x288>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b18:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1a:	688b      	ldr	r3, [r1, #8]
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	0018      	movs	r0, r3
 8002b20:	4010      	ands	r0, r2
 8002b22:	4213      	tst	r3, r2
 8002b24:	d052      	beq.n	8002bcc <HAL_UART_IRQHandler+0x218>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	684b      	ldr	r3, [r1, #4]
 8002b2c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0dd      	beq.n	8002aee <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b32:	0020      	movs	r0, r4
 8002b34:	305c      	adds	r0, #92	; 0x5c
 8002b36:	8800      	ldrh	r0, [r0, #0]
 8002b38:	4298      	cmp	r0, r3
 8002b3a:	d9d8      	bls.n	8002aee <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002b3c:	0020      	movs	r0, r4
 8002b3e:	305e      	adds	r0, #94	; 0x5e
 8002b40:	8003      	strh	r3, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b42:	6809      	ldr	r1, [r1, #0]
 8002b44:	2320      	movs	r3, #32
 8002b46:	0008      	movs	r0, r1
 8002b48:	4018      	ands	r0, r3
 8002b4a:	9001      	str	r0, [sp, #4]
 8002b4c:	4219      	tst	r1, r3
 8002b4e:	d131      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b50:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b54:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	4e5d      	ldr	r6, [pc, #372]	; (8002cd0 <HAL_UART_IRQHandler+0x31c>)
 8002b5c:	6801      	ldr	r1, [r0, #0]
 8002b5e:	4031      	ands	r1, r6
 8002b60:	6001      	str	r1, [r0, #0]
 8002b62:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b66:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	6881      	ldr	r1, [r0, #8]
 8002b72:	43a9      	bics	r1, r5
 8002b74:	6081      	str	r1, [r0, #8]
 8002b76:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	688f      	ldr	r7, [r1, #8]
 8002b86:	4397      	bics	r7, r2
 8002b88:	608f      	str	r7, [r1, #8]
 8002b8a:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	0022      	movs	r2, r4
 8002b90:	3288      	adds	r2, #136	; 0x88
 8002b92:	6013      	str	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	9b01      	ldr	r3, [sp, #4]
 8002b96:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	2010      	movs	r0, #16
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	4383      	bics	r3, r0
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002bb0:	f7fe fe3a 	bl	8001828 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bb4:	0023      	movs	r3, r4
 8002bb6:	0022      	movs	r2, r4
 8002bb8:	335e      	adds	r3, #94	; 0x5e
 8002bba:	325c      	adds	r2, #92	; 0x5c
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	8811      	ldrh	r1, [r2, #0]
 8002bc0:	1ac9      	subs	r1, r1, r3
 8002bc2:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	f7ff fef3 	bl	80029b0 <HAL_UARTEx_RxEventCallback>
 8002bca:	e790      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bcc:	0022      	movs	r2, r4
 8002bce:	325e      	adds	r2, #94	; 0x5e
 8002bd0:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 8002bd2:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd4:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d100      	bne.n	8002bdc <HAL_UART_IRQHandler+0x228>
 8002bda:	e788      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bdc:	0022      	movs	r2, r4
 8002bde:	325c      	adds	r2, #92	; 0x5c
 8002be0:	8811      	ldrh	r1, [r2, #0]
 8002be2:	1ac9      	subs	r1, r1, r3
 8002be4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002be6:	2900      	cmp	r1, #0
 8002be8:	d100      	bne.n	8002bec <HAL_UART_IRQHandler+0x238>
 8002bea:	e780      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bec:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	4e37      	ldr	r6, [pc, #220]	; (8002cd4 <HAL_UART_IRQHandler+0x320>)
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	4033      	ands	r3, r6
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	4e32      	ldr	r6, [pc, #200]	; (8002cd8 <HAL_UART_IRQHandler+0x324>)
 8002c0e:	6893      	ldr	r3, [r2, #8]
 8002c10:	4033      	ands	r3, r6
 8002c12:	6093      	str	r3, [r2, #8]
 8002c14:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8002c18:	0023      	movs	r3, r4
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	3388      	adds	r3, #136	; 0x88
 8002c1e:	601a      	str	r2, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c20:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002c22:	6720      	str	r0, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	2510      	movs	r5, #16
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	6813      	ldr	r3, [r2, #0]
 8002c32:	43ab      	bics	r3, r5
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	f380 8810 	msr	PRIMASK, r0
 8002c3a:	e7c3      	b.n	8002bc4 <HAL_UART_IRQHandler+0x210>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c3c:	2580      	movs	r5, #128	; 0x80
 8002c3e:	036d      	lsls	r5, r5, #13
 8002c40:	422b      	tst	r3, r5
 8002c42:	d006      	beq.n	8002c52 <HAL_UART_IRQHandler+0x29e>
 8002c44:	0246      	lsls	r6, r0, #9
 8002c46:	d504      	bpl.n	8002c52 <HAL_UART_IRQHandler+0x29e>
    HAL_UARTEx_WakeupCallback(huart);
 8002c48:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c4a:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002c4c:	f000 fda6 	bl	800379c <HAL_UARTEx_WakeupCallback>
    return;
 8002c50:	e74d      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	420b      	tst	r3, r1
 8002c56:	d007      	beq.n	8002c68 <HAL_UART_IRQHandler+0x2b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c58:	2580      	movs	r5, #128	; 0x80
 8002c5a:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c5c:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c5e:	4028      	ands	r0, r5
 8002c60:	4308      	orrs	r0, r1
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_IRQHandler+0x2b4>
    if (huart->TxISR != NULL)
 8002c64:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002c66:	e6ba      	b.n	80029de <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	420b      	tst	r3, r1
 8002c6c:	d016      	beq.n	8002c9c <HAL_UART_IRQHandler+0x2e8>
 8002c6e:	420a      	tst	r2, r1
 8002c70:	d014      	beq.n	8002c9c <HAL_UART_IRQHandler+0x2e8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	2301      	movs	r3, #1
 8002c78:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	438b      	bics	r3, r1
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	0023      	movs	r3, r4
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c90:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c92:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002c94:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8002c96:	f001 fbb5 	bl	8004404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c9a:	e728      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c9c:	0219      	lsls	r1, r3, #8
 8002c9e:	d505      	bpl.n	8002cac <HAL_UART_IRQHandler+0x2f8>
 8002ca0:	0051      	lsls	r1, r2, #1
 8002ca2:	d503      	bpl.n	8002cac <HAL_UART_IRQHandler+0x2f8>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ca4:	0020      	movs	r0, r4
 8002ca6:	f000 fd7b 	bl	80037a0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002caa:	e720      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	d400      	bmi.n	8002cb2 <HAL_UART_IRQHandler+0x2fe>
 8002cb0:	e71d      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
 8002cb2:	2a00      	cmp	r2, #0
 8002cb4:	db00      	blt.n	8002cb8 <HAL_UART_IRQHandler+0x304>
 8002cb6:	e71a      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cb8:	0020      	movs	r0, r4
 8002cba:	f000 fd70 	bl	800379e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002cbe:	e716      	b.n	8002aee <HAL_UART_IRQHandler+0x13a>
 8002cc0:	0000080f 	.word	0x0000080f
 8002cc4:	10000001 	.word	0x10000001
 8002cc8:	04000120 	.word	0x04000120
 8002ccc:	0800299b 	.word	0x0800299b
 8002cd0:	fffffeff 	.word	0xfffffeff
 8002cd4:	fffffedf 	.word	0xfffffedf
 8002cd8:	effffffe 	.word	0xeffffffe

08002cdc <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8002cdc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ce8:	6801      	ldr	r1, [r0, #0]
 8002cea:	4d19      	ldr	r5, [pc, #100]	; (8002d50 <UART_RxISR_16BIT.part.0+0x74>)
 8002cec:	680b      	ldr	r3, [r1, #0]
 8002cee:	402b      	ands	r3, r5
 8002cf0:	600b      	str	r3, [r1, #0]
 8002cf2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	6801      	ldr	r1, [r0, #0]
 8002d00:	688b      	ldr	r3, [r1, #8]
 8002d02:	4393      	bics	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
 8002d06:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	321f      	adds	r2, #31
 8002d0e:	3388      	adds	r3, #136	; 0x88
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d12:	2200      	movs	r2, #0

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8002d16:	6702      	str	r2, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d116      	bne.n	8002d4a <UART_RxISR_16BIT.part.0+0x6e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1c:	66c2      	str	r2, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d26:	6801      	ldr	r1, [r0, #0]
 8002d28:	330f      	adds	r3, #15
 8002d2a:	680a      	ldr	r2, [r1, #0]
 8002d2c:	439a      	bics	r2, r3
 8002d2e:	600a      	str	r2, [r1, #0]
 8002d30:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	69d1      	ldr	r1, [r2, #28]
 8002d38:	4219      	tst	r1, r3
 8002d3a:	d000      	beq.n	8002d3e <UART_RxISR_16BIT.part.0+0x62>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d3c:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d3e:	0003      	movs	r3, r0
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	8819      	ldrh	r1, [r3, #0]
 8002d44:	f7ff fe34 	bl	80029b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8002d4a:	f001 fb85 	bl	8004458 <HAL_UART_RxCpltCallback>
}
 8002d4e:	e7fb      	b.n	8002d48 <UART_RxISR_16BIT.part.0+0x6c>
 8002d50:	fffffedf 	.word	0xfffffedf

08002d54 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d54:	0003      	movs	r3, r0
 8002d56:	3388      	adds	r3, #136	; 0x88
 8002d58:	681a      	ldr	r2, [r3, #0]
{
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d5e:	2a22      	cmp	r2, #34	; 0x22
 8002d60:	d114      	bne.n	8002d8c <UART_RxISR_16BIT+0x38>
  uint16_t uhMask = huart->Mask;
 8002d62:	0001      	movs	r1, r0
 8002d64:	3160      	adds	r1, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d68:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d6a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002d70:	0002      	movs	r2, r0
    huart->pRxBuffPtr += 2U;
 8002d72:	3302      	adds	r3, #2
 8002d74:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d76:	325e      	adds	r2, #94	; 0x5e
 8002d78:	8813      	ldrh	r3, [r2, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002d80:	8813      	ldrh	r3, [r2, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <UART_RxISR_16BIT+0x36>
 8002d86:	f7ff ffa9 	bl	8002cdc <UART_RxISR_16BIT.part.0>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d8a:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	6999      	ldr	r1, [r3, #24]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]
}
 8002d94:	e7f9      	b.n	8002d8a <UART_RxISR_16BIT+0x36>

08002d96 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d96:	0003      	movs	r3, r0
 8002d98:	3388      	adds	r3, #136	; 0x88
 8002d9a:	681a      	ldr	r2, [r3, #0]
{
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da0:	2a22      	cmp	r2, #34	; 0x22
 8002da2:	d115      	bne.n	8002dd0 <UART_RxISR_8BIT+0x3a>
  uint16_t uhMask = huart->Mask;
 8002da4:	0002      	movs	r2, r0
 8002da6:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002daa:	8812      	ldrh	r2, [r2, #0]
 8002dac:	4013      	ands	r3, r2
 8002dae:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002db0:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8002db2:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8002db4:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002db6:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8002db8:	3301      	adds	r3, #1
 8002dba:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002dbc:	8813      	ldrh	r3, [r2, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 8002dc4:	8813      	ldrh	r3, [r2, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <UART_RxISR_8BIT+0x38>
 8002dca:	f7ff ff87 	bl	8002cdc <UART_RxISR_16BIT.part.0>
}
 8002dce:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	6999      	ldr	r1, [r3, #24]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
}
 8002dd8:	e7f9      	b.n	8002dce <UART_RxISR_8BIT+0x38>
	...

08002ddc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002dde:	6803      	ldr	r3, [r0, #0]
{
 8002de0:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002de2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002de4:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002de6:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002de8:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dea:	0002      	movs	r2, r0
 8002dec:	3288      	adds	r2, #136	; 0x88
 8002dee:	6812      	ldr	r2, [r2, #0]
{
 8002df0:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df2:	2a22      	cmp	r2, #34	; 0x22
 8002df4:	d000      	beq.n	8002df8 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8002df6:	e0b7      	b.n	8002f68 <UART_RxISR_8BIT_FIFOEN+0x18c>
  uint16_t  uhMask = huart->Mask;
 8002df8:	0003      	movs	r3, r0
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002e00:	0003      	movs	r3, r0
 8002e02:	3368      	adds	r3, #104	; 0x68
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e08:	0022      	movs	r2, r4
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	325e      	adds	r2, #94	; 0x5e
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <UART_RxISR_8BIT_FIFOEN+0x3c>
 8002e12:	2320      	movs	r3, #32
 8002e14:	421d      	tst	r5, r3
 8002e16:	d123      	bne.n	8002e60 <UART_RxISR_8BIT_FIFOEN+0x84>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002e18:	8813      	ldrh	r3, [r2, #0]
 8002e1a:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01d      	beq.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0x80>
 8002e20:	0023      	movs	r3, r4
 8002e22:	3368      	adds	r3, #104	; 0x68
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d918      	bls.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002e34:	6821      	ldr	r1, [r4, #0]
 8002e36:	4d4f      	ldr	r5, [pc, #316]	; (8002f74 <UART_RxISR_8BIT_FIFOEN+0x198>)
 8002e38:	688b      	ldr	r3, [r1, #8]
 8002e3a:	402b      	ands	r3, r5
 8002e3c:	608b      	str	r3, [r1, #8]
 8002e3e:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8002e44:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e4e:	2320      	movs	r3, #32
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	6810      	ldr	r0, [r2, #0]
 8002e54:	4303      	orrs	r3, r0
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e5c:	b005      	add	sp, #20
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e60:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e62:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e66:	400b      	ands	r3, r1
 8002e68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e6a:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8002e6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e6e:	3301      	adds	r3, #1
 8002e70:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002e72:	8813      	ldrh	r3, [r2, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e7a:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e80:	421d      	tst	r5, r3
 8002e82:	d02d      	beq.n	8002ee0 <UART_RxISR_8BIT_FIFOEN+0x104>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e84:	3b06      	subs	r3, #6
 8002e86:	421d      	tst	r5, r3
 8002e88:	d008      	beq.n	8002e9c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002e8a:	9902      	ldr	r1, [sp, #8]
 8002e8c:	05c9      	lsls	r1, r1, #23
 8002e8e:	d505      	bpl.n	8002e9c <UART_RxISR_8BIT_FIFOEN+0xc0>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e90:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e92:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e94:	318c      	adds	r1, #140	; 0x8c
 8002e96:	6808      	ldr	r0, [r1, #0]
 8002e98:	4303      	orrs	r3, r0
 8002e9a:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	421d      	tst	r5, r3
 8002ea0:	d008      	beq.n	8002eb4 <UART_RxISR_8BIT_FIFOEN+0xd8>
 8002ea2:	07f1      	lsls	r1, r6, #31
 8002ea4:	d506      	bpl.n	8002eb4 <UART_RxISR_8BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ea6:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ea8:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eaa:	318c      	adds	r1, #140	; 0x8c
 8002eac:	6808      	ldr	r0, [r1, #0]
 8002eae:	18db      	adds	r3, r3, r3
 8002eb0:	4303      	orrs	r3, r0
 8002eb2:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	421d      	tst	r5, r3
 8002eb8:	d008      	beq.n	8002ecc <UART_RxISR_8BIT_FIFOEN+0xf0>
 8002eba:	07f1      	lsls	r1, r6, #31
 8002ebc:	d506      	bpl.n	8002ecc <UART_RxISR_8BIT_FIFOEN+0xf0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ebe:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec0:	0022      	movs	r2, r4
 8002ec2:	328c      	adds	r2, #140	; 0x8c
 8002ec4:	6811      	ldr	r1, [r2, #0]
 8002ec6:	3b02      	subs	r3, #2
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ecc:	0027      	movs	r7, r4
 8002ece:	378c      	adds	r7, #140	; 0x8c
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <UART_RxISR_8BIT_FIFOEN+0x104>
          HAL_UART_ErrorCallback(huart);
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7ff fd5e 	bl	8002998 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8002ee0:	0023      	movs	r3, r4
 8002ee2:	335e      	adds	r3, #94	; 0x5e
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d000      	beq.n	8002eee <UART_RxISR_8BIT_FIFOEN+0x112>
 8002eec:	e78c      	b.n	8002e08 <UART_RxISR_8BIT_FIFOEN+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	6803      	ldr	r3, [r0, #0]
 8002efc:	0019      	movs	r1, r3
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 8002f00:	4019      	ands	r1, r3
 8002f02:	6001      	str	r1, [r0, #0]
 8002f04:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f12:	6821      	ldr	r1, [r4, #0]
 8002f14:	4f1a      	ldr	r7, [pc, #104]	; (8002f80 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 8002f16:	688b      	ldr	r3, [r1, #8]
 8002f18:	403b      	ands	r3, r7
 8002f1a:	608b      	str	r3, [r1, #8]
 8002f1c:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8002f20:	0023      	movs	r3, r4
 8002f22:	2120      	movs	r1, #32
 8002f24:	3388      	adds	r3, #136	; 0x88
 8002f26:	6019      	str	r1, [r3, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002f2a:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d117      	bne.n	8002f60 <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f32:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f36:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3a:	6821      	ldr	r1, [r4, #0]
 8002f3c:	330f      	adds	r3, #15
 8002f3e:	680a      	ldr	r2, [r1, #0]
 8002f40:	439a      	bics	r2, r3
 8002f42:	600a      	str	r2, [r1, #0]
 8002f44:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	69d1      	ldr	r1, [r2, #28]
 8002f4c:	4219      	tst	r1, r3
 8002f4e:	d000      	beq.n	8002f52 <UART_RxISR_8BIT_FIFOEN+0x176>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f50:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f52:	0023      	movs	r3, r4
 8002f54:	335c      	adds	r3, #92	; 0x5c
 8002f56:	0020      	movs	r0, r4
 8002f58:	8819      	ldrh	r1, [r3, #0]
 8002f5a:	f7ff fd29 	bl	80029b0 <HAL_UARTEx_RxEventCallback>
 8002f5e:	e753      	b.n	8002e08 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8002f60:	0020      	movs	r0, r4
 8002f62:	f001 fa79 	bl	8004458 <HAL_UART_RxCpltCallback>
 8002f66:	e74f      	b.n	8002e08 <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f68:	2208      	movs	r2, #8
 8002f6a:	6999      	ldr	r1, [r3, #24]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	619a      	str	r2, [r3, #24]
}
 8002f70:	e774      	b.n	8002e5c <UART_RxISR_8BIT_FIFOEN+0x80>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	efffffff 	.word	0xefffffff
 8002f78:	08002d97 	.word	0x08002d97
 8002f7c:	fffffeff 	.word	0xfffffeff
 8002f80:	effffffe 	.word	0xeffffffe

08002f84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f86:	6803      	ldr	r3, [r0, #0]
{
 8002f88:	b085      	sub	sp, #20
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f8a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f8c:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f8e:	689e      	ldr	r6, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f90:	9202      	str	r2, [sp, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f92:	0002      	movs	r2, r0
 8002f94:	3288      	adds	r2, #136	; 0x88
 8002f96:	6812      	ldr	r2, [r2, #0]
{
 8002f98:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f9a:	2a22      	cmp	r2, #34	; 0x22
 8002f9c:	d000      	beq.n	8002fa0 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8002f9e:	e0b5      	b.n	800310c <UART_RxISR_16BIT_FIFOEN+0x188>
  uint16_t  uhMask = huart->Mask;
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	9301      	str	r3, [sp, #4]
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002fa8:	0003      	movs	r3, r0
 8002faa:	3368      	adds	r3, #104	; 0x68
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	9303      	str	r3, [sp, #12]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002fb0:	0021      	movs	r1, r4
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	315e      	adds	r1, #94	; 0x5e
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8002fba:	2320      	movs	r3, #32
 8002fbc:	421d      	tst	r5, r3
 8002fbe:	d123      	bne.n	8003008 <UART_RxISR_16BIT_FIFOEN+0x84>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002fc0:	880b      	ldrh	r3, [r1, #0]
 8002fc2:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01d      	beq.n	8003004 <UART_RxISR_16BIT_FIFOEN+0x80>
 8002fc8:	0023      	movs	r3, r4
 8002fca:	3368      	adds	r3, #104	; 0x68
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d918      	bls.n	8003004 <UART_RxISR_16BIT_FIFOEN+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002fdc:	6821      	ldr	r1, [r4, #0]
 8002fde:	4d4e      	ldr	r5, [pc, #312]	; (8003118 <UART_RxISR_16BIT_FIFOEN+0x194>)
 8002fe0:	688b      	ldr	r3, [r1, #8]
 8002fe2:	402b      	ands	r3, r5
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <UART_RxISR_16BIT_FIFOEN+0x198>)
 8002fec:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003004:	b005      	add	sp, #20
 8003006:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003008:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800300a:	9d01      	ldr	r5, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800300c:	6a58      	ldr	r0, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800300e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8003010:	4028      	ands	r0, r5
 8003012:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003014:	3202      	adds	r2, #2
 8003016:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003018:	880a      	ldrh	r2, [r1, #0]
 800301a:	3a01      	subs	r2, #1
 800301c:	b292      	uxth	r2, r2
 800301e:	800a      	strh	r2, [r1, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003020:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8003022:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003024:	4215      	tst	r5, r2
 8003026:	d02d      	beq.n	8003084 <UART_RxISR_16BIT_FIFOEN+0x100>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003028:	3a06      	subs	r2, #6
 800302a:	4215      	tst	r5, r2
 800302c:	d008      	beq.n	8003040 <UART_RxISR_16BIT_FIFOEN+0xbc>
 800302e:	9902      	ldr	r1, [sp, #8]
 8003030:	05c9      	lsls	r1, r1, #23
 8003032:	d505      	bpl.n	8003040 <UART_RxISR_16BIT_FIFOEN+0xbc>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003034:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003036:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003038:	318c      	adds	r1, #140	; 0x8c
 800303a:	6808      	ldr	r0, [r1, #0]
 800303c:	4302      	orrs	r2, r0
 800303e:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003040:	2202      	movs	r2, #2
 8003042:	4215      	tst	r5, r2
 8003044:	d008      	beq.n	8003058 <UART_RxISR_16BIT_FIFOEN+0xd4>
 8003046:	07f1      	lsls	r1, r6, #31
 8003048:	d506      	bpl.n	8003058 <UART_RxISR_16BIT_FIFOEN+0xd4>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800304c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304e:	318c      	adds	r1, #140	; 0x8c
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	1892      	adds	r2, r2, r2
 8003054:	4302      	orrs	r2, r0
 8003056:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003058:	2204      	movs	r2, #4
 800305a:	4215      	tst	r5, r2
 800305c:	d008      	beq.n	8003070 <UART_RxISR_16BIT_FIFOEN+0xec>
 800305e:	07f1      	lsls	r1, r6, #31
 8003060:	d506      	bpl.n	8003070 <UART_RxISR_16BIT_FIFOEN+0xec>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003062:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003064:	0022      	movs	r2, r4
 8003066:	2302      	movs	r3, #2
 8003068:	328c      	adds	r2, #140	; 0x8c
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003070:	0027      	movs	r7, r4
 8003072:	378c      	adds	r7, #140	; 0x8c
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <UART_RxISR_16BIT_FIFOEN+0x100>
          HAL_UART_ErrorCallback(huart);
 800307a:	0020      	movs	r0, r4
 800307c:	f7ff fc8c 	bl	8002998 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	2300      	movs	r3, #0
 8003082:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003084:	0023      	movs	r3, r4
 8003086:	335e      	adds	r3, #94	; 0x5e
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29a      	uxth	r2, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d000      	beq.n	8003092 <UART_RxISR_16BIT_FIFOEN+0x10e>
 8003090:	e78e      	b.n	8002fb0 <UART_RxISR_16BIT_FIFOEN+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	3301      	adds	r3, #1
 8003098:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	6803      	ldr	r3, [r0, #0]
 80030a0:	0019      	movs	r1, r3
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80030a4:	4019      	ands	r1, r3
 80030a6:	6001      	str	r1, [r0, #0]
 80030a8:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	2301      	movs	r3, #1
 80030b2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030b6:	6821      	ldr	r1, [r4, #0]
 80030b8:	4f1a      	ldr	r7, [pc, #104]	; (8003124 <UART_RxISR_16BIT_FIFOEN+0x1a0>)
 80030ba:	688b      	ldr	r3, [r1, #8]
 80030bc:	403b      	ands	r3, r7
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 80030c4:	0023      	movs	r3, r4
 80030c6:	2120      	movs	r1, #32
 80030c8:	3388      	adds	r3, #136	; 0x88
 80030ca:	6019      	str	r1, [r3, #0]
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80030ce:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d117      	bne.n	8003104 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	6821      	ldr	r1, [r4, #0]
 80030e0:	330f      	adds	r3, #15
 80030e2:	680a      	ldr	r2, [r1, #0]
 80030e4:	439a      	bics	r2, r3
 80030e6:	600a      	str	r2, [r1, #0]
 80030e8:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	69d1      	ldr	r1, [r2, #28]
 80030f0:	4219      	tst	r1, r3
 80030f2:	d000      	beq.n	80030f6 <UART_RxISR_16BIT_FIFOEN+0x172>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030f4:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f6:	0023      	movs	r3, r4
 80030f8:	335c      	adds	r3, #92	; 0x5c
 80030fa:	0020      	movs	r0, r4
 80030fc:	8819      	ldrh	r1, [r3, #0]
 80030fe:	f7ff fc57 	bl	80029b0 <HAL_UARTEx_RxEventCallback>
 8003102:	e755      	b.n	8002fb0 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 8003104:	0020      	movs	r0, r4
 8003106:	f001 f9a7 	bl	8004458 <HAL_UART_RxCpltCallback>
 800310a:	e751      	b.n	8002fb0 <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800310c:	2208      	movs	r2, #8
 800310e:	6999      	ldr	r1, [r3, #24]
 8003110:	430a      	orrs	r2, r1
 8003112:	619a      	str	r2, [r3, #24]
}
 8003114:	e776      	b.n	8003004 <UART_RxISR_16BIT_FIFOEN+0x80>
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	efffffff 	.word	0xefffffff
 800311c:	08002d55 	.word	0x08002d55
 8003120:	fffffeff 	.word	0xfffffeff
 8003124:	effffffe 	.word	0xeffffffe

08003128 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8003128:	0003      	movs	r3, r0
  temp2 = huart->RxState;
 800312a:	3088      	adds	r0, #136	; 0x88
  temp1 = huart->gState;
 800312c:	3308      	adds	r3, #8
 800312e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  temp2 = huart->RxState;
 8003130:	6800      	ldr	r0, [r0, #0]
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003132:	4310      	orrs	r0, r2
}
 8003134:	4770      	bx	lr
	...

08003138 <UART_SetConfig>:
{
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800313c:	6925      	ldr	r5, [r4, #16]
 800313e:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003140:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003142:	4329      	orrs	r1, r5
 8003144:	6965      	ldr	r5, [r4, #20]
 8003146:	69c3      	ldr	r3, [r0, #28]
 8003148:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800314a:	6810      	ldr	r0, [r2, #0]
 800314c:	4d70      	ldr	r5, [pc, #448]	; (8003310 <UART_SetConfig+0x1d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800314e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	4028      	ands	r0, r5
 8003152:	4301      	orrs	r1, r0
 8003154:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003156:	6851      	ldr	r1, [r2, #4]
 8003158:	486e      	ldr	r0, [pc, #440]	; (8003314 <UART_SetConfig+0x1dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800315a:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315c:	4001      	ands	r1, r0
 800315e:	68e0      	ldr	r0, [r4, #12]
 8003160:	4301      	orrs	r1, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003162:	486d      	ldr	r0, [pc, #436]	; (8003318 <UART_SetConfig+0x1e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003166:	4282      	cmp	r2, r0
 8003168:	d001      	beq.n	800316e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800316a:	6a21      	ldr	r1, [r4, #32]
 800316c:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800316e:	6891      	ldr	r1, [r2, #8]
 8003170:	4e6a      	ldr	r6, [pc, #424]	; (800331c <UART_SetConfig+0x1e4>)
 8003172:	4031      	ands	r1, r6
 8003174:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003176:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003178:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800317a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800317c:	43a9      	bics	r1, r5
 800317e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003180:	4329      	orrs	r1, r5
 8003182:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003184:	4966      	ldr	r1, [pc, #408]	; (8003320 <UART_SetConfig+0x1e8>)
 8003186:	428a      	cmp	r2, r1
 8003188:	d116      	bne.n	80031b8 <UART_SetConfig+0x80>
 800318a:	2103      	movs	r1, #3
 800318c:	4a65      	ldr	r2, [pc, #404]	; (8003324 <UART_SetConfig+0x1ec>)
 800318e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003190:	400a      	ands	r2, r1
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	3a01      	subs	r2, #1
 8003196:	0209      	lsls	r1, r1, #8
 8003198:	2a02      	cmp	r2, #2
 800319a:	d900      	bls.n	800319e <UART_SetConfig+0x66>
 800319c:	e08a      	b.n	80032b4 <UART_SetConfig+0x17c>
 800319e:	4862      	ldr	r0, [pc, #392]	; (8003328 <UART_SetConfig+0x1f0>)
 80031a0:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a2:	428b      	cmp	r3, r1
 80031a4:	d060      	beq.n	8003268 <UART_SetConfig+0x130>
    switch (clocksource)
 80031a6:	2808      	cmp	r0, #8
 80031a8:	d81c      	bhi.n	80031e4 <UART_SetConfig+0xac>
 80031aa:	f7fc ffb7 	bl	800011c <__gnu_thumb1_case_uqi>
 80031ae:	1bab      	.short	0x1bab
 80031b0:	1b7e1b81 	.word	0x1b7e1b81
 80031b4:	1b1b      	.short	0x1b1b
 80031b6:	6b          	.byte	0x6b
 80031b7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b8:	495c      	ldr	r1, [pc, #368]	; (800332c <UART_SetConfig+0x1f4>)
 80031ba:	428a      	cmp	r2, r1
 80031bc:	d100      	bne.n	80031c0 <UART_SetConfig+0x88>
 80031be:	e09d      	b.n	80032fc <UART_SetConfig+0x1c4>
 80031c0:	4282      	cmp	r2, r0
 80031c2:	d10f      	bne.n	80031e4 <UART_SetConfig+0xac>
 80031c4:	22c0      	movs	r2, #192	; 0xc0
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <UART_SetConfig+0x1ec>)
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	0109      	lsls	r1, r1, #4
 80031d0:	4013      	ands	r3, r2
 80031d2:	428b      	cmp	r3, r1
 80031d4:	d01b      	beq.n	800320e <UART_SetConfig+0xd6>
 80031d6:	d807      	bhi.n	80031e8 <UART_SetConfig+0xb0>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_SetConfig+0xba>
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	00d2      	lsls	r2, r2, #3
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d011      	beq.n	8003208 <UART_SetConfig+0xd0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e4:	2001      	movs	r0, #1
 80031e6:	e009      	b.n	80031fc <UART_SetConfig+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d1fb      	bne.n	80031e4 <UART_SetConfig+0xac>
 80031ec:	2680      	movs	r6, #128	; 0x80
 80031ee:	0236      	lsls	r6, r6, #8
 80031f0:	e00e      	b.n	8003210 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f2:	f7fe ffe7 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 80031f8:	d10a      	bne.n	8003210 <UART_SetConfig+0xd8>
 80031fa:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <UART_SetConfig+0x1f8>)
 80031fe:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8003204:	6763      	str	r3, [r4, #116]	; 0x74
}
 8003206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8003208:	f7fe feea 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 800320c:	e7f3      	b.n	80031f6 <UART_SetConfig+0xbe>
        pclk = (uint32_t) HSI_VALUE;
 800320e:	4e49      	ldr	r6, [pc, #292]	; (8003334 <UART_SetConfig+0x1fc>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003212:	4a49      	ldr	r2, [pc, #292]	; (8003338 <UART_SetConfig+0x200>)
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	5a9f      	ldrh	r7, [r3, r2]
 8003218:	0030      	movs	r0, r6
 800321a:	0039      	movs	r1, r7
 800321c:	f7fc ff9c 	bl	8000158 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003220:	2303      	movs	r3, #3
 8003222:	6865      	ldr	r5, [r4, #4]
 8003224:	436b      	muls	r3, r5
 8003226:	4283      	cmp	r3, r0
 8003228:	d8dc      	bhi.n	80031e4 <UART_SetConfig+0xac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800322a:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800322c:	4283      	cmp	r3, r0
 800322e:	d3d9      	bcc.n	80031e4 <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003230:	2300      	movs	r3, #0
 8003232:	003a      	movs	r2, r7
 8003234:	0030      	movs	r0, r6
 8003236:	0019      	movs	r1, r3
 8003238:	f7fd f904 	bl	8000444 <__aeabi_uldivmod>
 800323c:	2700      	movs	r7, #0
 800323e:	0e06      	lsrs	r6, r0, #24
 8003240:	020b      	lsls	r3, r1, #8
 8003242:	4333      	orrs	r3, r6
 8003244:	0202      	lsls	r2, r0, #8
 8003246:	086e      	lsrs	r6, r5, #1
 8003248:	1992      	adds	r2, r2, r6
 800324a:	417b      	adcs	r3, r7
 800324c:	0010      	movs	r0, r2
 800324e:	0019      	movs	r1, r3
 8003250:	002a      	movs	r2, r5
 8003252:	003b      	movs	r3, r7
 8003254:	f7fd f8f6 	bl	8000444 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <UART_SetConfig+0x204>)
 800325a:	18c2      	adds	r2, r0, r3
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <UART_SetConfig+0x208>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325e:	429a      	cmp	r2, r3
 8003260:	d8c0      	bhi.n	80031e4 <UART_SetConfig+0xac>
        huart->Instance->BRR = usartdiv;
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	60d8      	str	r0, [r3, #12]
 8003266:	e7c8      	b.n	80031fa <UART_SetConfig+0xc2>
    switch (clocksource)
 8003268:	2808      	cmp	r0, #8
 800326a:	d8bb      	bhi.n	80031e4 <UART_SetConfig+0xac>
 800326c:	f7fc ff4c 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003270:	ba08ba24 	.word	0xba08ba24
 8003274:	bababa05 	.word	0xbababa05
 8003278:	28          	.byte	0x28
 8003279:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800327a:	f7fe feb1 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 800327e:	e01d      	b.n	80032bc <UART_SetConfig+0x184>
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <UART_SetConfig+0x1fc>)
 8003282:	e01d      	b.n	80032c0 <UART_SetConfig+0x188>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003284:	2080      	movs	r0, #128	; 0x80
 8003286:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800328a:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <UART_SetConfig+0x200>)
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	5a99      	ldrh	r1, [r3, r2]
 8003290:	f7fc ff62 	bl	8000158 <__udivsi3>
 8003294:	6865      	ldr	r5, [r4, #4]
 8003296:	086b      	lsrs	r3, r5, #1
 8003298:	18c0      	adds	r0, r0, r3
 800329a:	0029      	movs	r1, r5
 800329c:	f7fc ff5c 	bl	8000158 <__udivsi3>
 80032a0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a2:	0002      	movs	r2, r0
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <UART_SetConfig+0x20c>)
 80032a6:	3a10      	subs	r2, #16
 80032a8:	e7d9      	b.n	800325e <UART_SetConfig+0x126>
        pclk = HAL_RCC_GetSysClockFreq();
 80032aa:	f7fe fe99 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
        break;
 80032ae:	e02b      	b.n	8003308 <UART_SetConfig+0x1d0>
        pclk = (uint32_t) HSI_VALUE;
 80032b0:	4820      	ldr	r0, [pc, #128]	; (8003334 <UART_SetConfig+0x1fc>)
 80032b2:	e7e9      	b.n	8003288 <UART_SetConfig+0x150>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b4:	428b      	cmp	r3, r1
 80032b6:	d125      	bne.n	8003304 <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe ff84 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80032bc:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80032be:	d09c      	beq.n	80031fa <UART_SetConfig+0xc2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032c2:	491d      	ldr	r1, [pc, #116]	; (8003338 <UART_SetConfig+0x200>)
 80032c4:	0052      	lsls	r2, r2, #1
 80032c6:	5a51      	ldrh	r1, [r2, r1]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fc ff45 	bl	8000158 <__udivsi3>
 80032ce:	6865      	ldr	r5, [r4, #4]
 80032d0:	0040      	lsls	r0, r0, #1
 80032d2:	086b      	lsrs	r3, r5, #1
 80032d4:	0029      	movs	r1, r5
 80032d6:	18c0      	adds	r0, r0, r3
 80032d8:	f7fc ff3e 	bl	8000158 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	4919      	ldr	r1, [pc, #100]	; (8003344 <UART_SetConfig+0x20c>)
 80032de:	b282      	uxth	r2, r0
 80032e0:	3a10      	subs	r2, #16
 80032e2:	0403      	lsls	r3, r0, #16
 80032e4:	428a      	cmp	r2, r1
 80032e6:	d900      	bls.n	80032ea <UART_SetConfig+0x1b2>
 80032e8:	e77c      	b.n	80031e4 <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ea:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ec:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ee:	4390      	bics	r0, r2
 80032f0:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80032f2:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032f4:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80032f6:	4318      	orrs	r0, r3
 80032f8:	60d0      	str	r0, [r2, #12]
 80032fa:	e77e      	b.n	80031fa <UART_SetConfig+0xc2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4293      	cmp	r3, r2
 8003302:	d0d9      	beq.n	80032b8 <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003304:	f7fe ff5e 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003308:	2800      	cmp	r0, #0
 800330a:	d100      	bne.n	800330e <UART_SetConfig+0x1d6>
 800330c:	e775      	b.n	80031fa <UART_SetConfig+0xc2>
 800330e:	e7bb      	b.n	8003288 <UART_SetConfig+0x150>
 8003310:	cfff69f3 	.word	0xcfff69f3
 8003314:	ffffcfff 	.word	0xffffcfff
 8003318:	40008000 	.word	0x40008000
 800331c:	11fff4ff 	.word	0x11fff4ff
 8003320:	40013800 	.word	0x40013800
 8003324:	40021000 	.word	0x40021000
 8003328:	0800644c 	.word	0x0800644c
 800332c:	40004400 	.word	0x40004400
 8003330:	00010001 	.word	0x00010001
 8003334:	00f42400 	.word	0x00f42400
 8003338:	08006450 	.word	0x08006450
 800333c:	fffffd00 	.word	0xfffffd00
 8003340:	000ffcff 	.word	0x000ffcff
 8003344:	0000ffef 	.word	0x0000ffef

08003348 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003348:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800334a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800334c:	07da      	lsls	r2, r3, #31
 800334e:	d506      	bpl.n	800335e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003350:	6801      	ldr	r1, [r0, #0]
 8003352:	4c28      	ldr	r4, [pc, #160]	; (80033f4 <UART_AdvFeatureConfig+0xac>)
 8003354:	684a      	ldr	r2, [r1, #4]
 8003356:	4022      	ands	r2, r4
 8003358:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800335a:	4322      	orrs	r2, r4
 800335c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800335e:	079a      	lsls	r2, r3, #30
 8003360:	d506      	bpl.n	8003370 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003362:	6801      	ldr	r1, [r0, #0]
 8003364:	4c24      	ldr	r4, [pc, #144]	; (80033f8 <UART_AdvFeatureConfig+0xb0>)
 8003366:	684a      	ldr	r2, [r1, #4]
 8003368:	4022      	ands	r2, r4
 800336a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800336c:	4322      	orrs	r2, r4
 800336e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003370:	075a      	lsls	r2, r3, #29
 8003372:	d506      	bpl.n	8003382 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003374:	6801      	ldr	r1, [r0, #0]
 8003376:	4c21      	ldr	r4, [pc, #132]	; (80033fc <UART_AdvFeatureConfig+0xb4>)
 8003378:	684a      	ldr	r2, [r1, #4]
 800337a:	4022      	ands	r2, r4
 800337c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800337e:	4322      	orrs	r2, r4
 8003380:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003382:	071a      	lsls	r2, r3, #28
 8003384:	d506      	bpl.n	8003394 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003386:	6801      	ldr	r1, [r0, #0]
 8003388:	4c1d      	ldr	r4, [pc, #116]	; (8003400 <UART_AdvFeatureConfig+0xb8>)
 800338a:	684a      	ldr	r2, [r1, #4]
 800338c:	4022      	ands	r2, r4
 800338e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003390:	4322      	orrs	r2, r4
 8003392:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003394:	06da      	lsls	r2, r3, #27
 8003396:	d506      	bpl.n	80033a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	4c1a      	ldr	r4, [pc, #104]	; (8003404 <UART_AdvFeatureConfig+0xbc>)
 800339c:	688a      	ldr	r2, [r1, #8]
 800339e:	4022      	ands	r2, r4
 80033a0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80033a2:	4322      	orrs	r2, r4
 80033a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a6:	069a      	lsls	r2, r3, #26
 80033a8:	d506      	bpl.n	80033b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033aa:	6801      	ldr	r1, [r0, #0]
 80033ac:	4c16      	ldr	r4, [pc, #88]	; (8003408 <UART_AdvFeatureConfig+0xc0>)
 80033ae:	688a      	ldr	r2, [r1, #8]
 80033b0:	4022      	ands	r2, r4
 80033b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80033b4:	4322      	orrs	r2, r4
 80033b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	065a      	lsls	r2, r3, #25
 80033ba:	d510      	bpl.n	80033de <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033bc:	6801      	ldr	r1, [r0, #0]
 80033be:	4d13      	ldr	r5, [pc, #76]	; (800340c <UART_AdvFeatureConfig+0xc4>)
 80033c0:	684a      	ldr	r2, [r1, #4]
 80033c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033c4:	402a      	ands	r2, r5
 80033c6:	4322      	orrs	r2, r4
 80033c8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	0352      	lsls	r2, r2, #13
 80033ce:	4294      	cmp	r4, r2
 80033d0:	d105      	bne.n	80033de <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	4c0e      	ldr	r4, [pc, #56]	; (8003410 <UART_AdvFeatureConfig+0xc8>)
 80033d6:	4022      	ands	r2, r4
 80033d8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80033da:	4322      	orrs	r2, r4
 80033dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	d506      	bpl.n	80033f0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e2:	6802      	ldr	r2, [r0, #0]
 80033e4:	490b      	ldr	r1, [pc, #44]	; (8003414 <UART_AdvFeatureConfig+0xcc>)
 80033e6:	6853      	ldr	r3, [r2, #4]
 80033e8:	400b      	ands	r3, r1
 80033ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6053      	str	r3, [r2, #4]
}
 80033f0:	bd30      	pop	{r4, r5, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	fffdffff 	.word	0xfffdffff
 80033f8:	fffeffff 	.word	0xfffeffff
 80033fc:	fffbffff 	.word	0xfffbffff
 8003400:	ffff7fff 	.word	0xffff7fff
 8003404:	ffffefff 	.word	0xffffefff
 8003408:	ffffdfff 	.word	0xffffdfff
 800340c:	ffefffff 	.word	0xffefffff
 8003410:	ff9fffff 	.word	0xff9fffff
 8003414:	fff7ffff 	.word	0xfff7ffff

08003418 <UART_WaitOnFlagUntilTimeout>:
{
 8003418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800341a:	2780      	movs	r7, #128	; 0x80
{
 800341c:	0004      	movs	r4, r0
 800341e:	000d      	movs	r5, r1
 8003420:	0016      	movs	r6, r2
 8003422:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003424:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	69d3      	ldr	r3, [r2, #28]
 800342a:	402b      	ands	r3, r5
 800342c:	1b5b      	subs	r3, r3, r5
 800342e:	4259      	negs	r1, r3
 8003430:	414b      	adcs	r3, r1
 8003432:	42b3      	cmp	r3, r6
 8003434:	d001      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8003436:	2000      	movs	r0, #0
 8003438:	e02b      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0x7a>
    if (Timeout != HAL_MAX_DELAY)
 800343a:	9b08      	ldr	r3, [sp, #32]
 800343c:	3301      	adds	r3, #1
 800343e:	d0f3      	beq.n	8003428 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fd fd28 	bl	8000e94 <HAL_GetTick>
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	1ac0      	subs	r0, r0, r3
 8003448:	9b08      	ldr	r3, [sp, #32]
 800344a:	4298      	cmp	r0, r3
 800344c:	d801      	bhi.n	8003452 <UART_WaitOnFlagUntilTimeout+0x3a>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d120      	bne.n	8003494 <UART_WaitOnFlagUntilTimeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003452:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	2201      	movs	r2, #1
 8003458:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800345c:	6821      	ldr	r1, [r4, #0]
 800345e:	4d21      	ldr	r5, [pc, #132]	; (80034e4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8003460:	680b      	ldr	r3, [r1, #0]
 8003462:	402b      	ands	r3, r5
 8003464:	600b      	str	r3, [r1, #0]
 8003466:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	6821      	ldr	r1, [r4, #0]
 8003474:	688b      	ldr	r3, [r1, #8]
 8003476:	4393      	bics	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800347e:	0022      	movs	r2, r4
 8003480:	2320      	movs	r3, #32
 8003482:	3208      	adds	r2, #8
 8003484:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003486:	3280      	adds	r2, #128	; 0x80
 8003488:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 800348a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800348c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800348e:	3480      	adds	r4, #128	; 0x80
 8003490:	7023      	strb	r3, [r4, #0]
}
 8003492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003494:	2104      	movs	r1, #4
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	420a      	tst	r2, r1
 800349c:	d0c3      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	423a      	tst	r2, r7
 80034a2:	d0c0      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a4:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	2201      	movs	r2, #1
 80034ac:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034b0:	6821      	ldr	r1, [r4, #0]
 80034b2:	4d0c      	ldr	r5, [pc, #48]	; (80034e4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80034b4:	680b      	ldr	r3, [r1, #0]
 80034b6:	402b      	ands	r3, r5
 80034b8:	600b      	str	r3, [r1, #0]
 80034ba:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	688b      	ldr	r3, [r1, #8]
 80034ca:	4393      	bics	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
 80034ce:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80034d2:	0022      	movs	r2, r4
 80034d4:	2320      	movs	r3, #32
 80034d6:	3208      	adds	r2, #8
 80034d8:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80034da:	3280      	adds	r2, #128	; 0x80
 80034dc:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034de:	6053      	str	r3, [r2, #4]
 80034e0:	e7d3      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0x72>
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	fffffe5f 	.word	0xfffffe5f

080034e8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	0003      	movs	r3, r0
{
 80034ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	2600      	movs	r6, #0
{
 80034ee:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	338c      	adds	r3, #140	; 0x8c
 80034f2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80034f4:	f7fd fcce 	bl	8000e94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80034fa:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	071b      	lsls	r3, r3, #28
 8003500:	d419      	bmi.n	8003536 <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	075b      	lsls	r3, r3, #29
 8003508:	d50a      	bpl.n	8003520 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <UART_CheckIdleState+0x68>)
 800350e:	2200      	movs	r2, #0
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	0020      	movs	r0, r4
 8003514:	002b      	movs	r3, r5
 8003516:	03c9      	lsls	r1, r1, #15
 8003518:	f7ff ff7e 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 800351c:	2800      	cmp	r0, #0
 800351e:	d115      	bne.n	800354c <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003520:	0022      	movs	r2, r4
 8003522:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003526:	3208      	adds	r2, #8
 8003528:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800352a:	3280      	adds	r2, #128	; 0x80
 800352c:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003530:	3480      	adds	r4, #128	; 0x80
 8003532:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003534:	e00b      	b.n	800354e <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <UART_CheckIdleState+0x68>)
 800353a:	0032      	movs	r2, r6
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	0389      	lsls	r1, r1, #14
 8003540:	0003      	movs	r3, r0
 8003542:	0020      	movs	r0, r4
 8003544:	f7ff ff68 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8003548:	2800      	cmp	r0, #0
 800354a:	d0da      	beq.n	8003502 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800354c:	2003      	movs	r0, #3
}
 800354e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003550:	01ffffff 	.word	0x01ffffff

08003554 <HAL_UART_Init>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	0005      	movs	r5, r0
 8003560:	3508      	adds	r5, #8
 8003562:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8003568:	0002      	movs	r2, r0
 800356a:	3280      	adds	r2, #128	; 0x80
 800356c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800356e:	f7fd fbad 	bl	8000ccc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003572:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003574:	2101      	movs	r1, #1
 8003576:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800357a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800357e:	438b      	bics	r3, r1
 8003580:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003582:	f7ff fdd9 	bl	8003138 <UART_SetConfig>
 8003586:	2801      	cmp	r0, #1
 8003588:	d0e7      	beq.n	800355a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8003590:	0020      	movs	r0, r4
 8003592:	f7ff fed9 	bl	8003348 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	4907      	ldr	r1, [pc, #28]	; (80035b8 <HAL_UART_Init+0x64>)
 800359a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800359c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	438a      	bics	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80035aa:	2201      	movs	r2, #1
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80035b2:	f7ff ff99 	bl	80034e8 <UART_CheckIdleState>
 80035b6:	e7d1      	b.n	800355c <HAL_UART_Init+0x8>
 80035b8:	ffffb7ff 	.word	0xffffb7ff

080035bc <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80035bc:	0003      	movs	r3, r0
{
 80035be:	b570      	push	{r4, r5, r6, lr}
  huart->RxISR       = NULL;
 80035c0:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 80035c2:	2580      	movs	r5, #128	; 0x80
  huart->pRxBuffPtr  = pData;
 80035c4:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 80035c6:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 80035c8:	335c      	adds	r3, #92	; 0x5c
 80035ca:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80035cc:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 80035ce:	016d      	lsls	r5, r5, #5
  huart->RxISR       = NULL;
 80035d0:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80035d2:	3304      	adds	r3, #4
 80035d4:	42a9      	cmp	r1, r5
 80035d6:	d14c      	bne.n	8003672 <UART_Start_Receive_IT+0xb6>
 80035d8:	6901      	ldr	r1, [r0, #16]
 80035da:	42a1      	cmp	r1, r4
 80035dc:	d147      	bne.n	800366e <UART_Start_Receive_IT+0xb2>
 80035de:	4939      	ldr	r1, [pc, #228]	; (80036c4 <UART_Start_Receive_IT+0x108>)
 80035e0:	8019      	strh	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	0003      	movs	r3, r0
 80035e4:	2100      	movs	r1, #0
 80035e6:	338c      	adds	r3, #140	; 0x8c
 80035e8:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ea:	3122      	adds	r1, #34	; 0x22
 80035ec:	3b04      	subs	r3, #4
 80035ee:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	2301      	movs	r3, #1
 80035f6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	6801      	ldr	r1, [r0, #0]
 80035fc:	688d      	ldr	r5, [r1, #8]
 80035fe:	432b      	orrs	r3, r5
 8003600:	608b      	str	r3, [r1, #8]
 8003602:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003606:	2580      	movs	r5, #128	; 0x80
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0003      	movs	r3, r0
 800360c:	6e46      	ldr	r6, [r0, #100]	; 0x64
 800360e:	6884      	ldr	r4, [r0, #8]
 8003610:	05ad      	lsls	r5, r5, #22
 8003612:	0149      	lsls	r1, r1, #5
 8003614:	3380      	adds	r3, #128	; 0x80
 8003616:	42ae      	cmp	r6, r5
 8003618:	d13d      	bne.n	8003696 <UART_Start_Receive_IT+0xda>
 800361a:	0005      	movs	r5, r0
 800361c:	3568      	adds	r5, #104	; 0x68
 800361e:	882d      	ldrh	r5, [r5, #0]
 8003620:	4295      	cmp	r5, r2
 8003622:	d838      	bhi.n	8003696 <UART_Start_Receive_IT+0xda>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003624:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <UART_Start_Receive_IT+0x10c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003626:	428c      	cmp	r4, r1
 8003628:	d103      	bne.n	8003632 <UART_Start_Receive_IT+0x76>
 800362a:	6901      	ldr	r1, [r0, #16]
 800362c:	2900      	cmp	r1, #0
 800362e:	d100      	bne.n	8003632 <UART_Start_Receive_IT+0x76>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <UART_Start_Receive_IT+0x110>)
 8003632:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003638:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	3201      	adds	r2, #1
 800363e:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	6801      	ldr	r1, [r0, #0]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	680d      	ldr	r5, [r1, #0]
 800364a:	432b      	orrs	r3, r5
 800364c:	600b      	str	r3, [r1, #0]
 800364e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	6802      	ldr	r2, [r0, #0]
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	6890      	ldr	r0, [r2, #8]
 8003662:	4303      	orrs	r3, r0
 8003664:	6093      	str	r3, [r2, #8]
 8003666:	f381 8810 	msr	PRIMASK, r1
}
 800366a:	2000      	movs	r0, #0
 800366c:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 800366e:	21ff      	movs	r1, #255	; 0xff
 8003670:	e7b6      	b.n	80035e0 <UART_Start_Receive_IT+0x24>
 8003672:	2900      	cmp	r1, #0
 8003674:	d104      	bne.n	8003680 <UART_Start_Receive_IT+0xc4>
 8003676:	6901      	ldr	r1, [r0, #16]
 8003678:	2900      	cmp	r1, #0
 800367a:	d0f8      	beq.n	800366e <UART_Start_Receive_IT+0xb2>
 800367c:	217f      	movs	r1, #127	; 0x7f
 800367e:	e7af      	b.n	80035e0 <UART_Start_Receive_IT+0x24>
 8003680:	2580      	movs	r5, #128	; 0x80
 8003682:	056d      	lsls	r5, r5, #21
 8003684:	42a9      	cmp	r1, r5
 8003686:	d104      	bne.n	8003692 <UART_Start_Receive_IT+0xd6>
 8003688:	6901      	ldr	r1, [r0, #16]
 800368a:	2900      	cmp	r1, #0
 800368c:	d0f6      	beq.n	800367c <UART_Start_Receive_IT+0xc0>
 800368e:	213f      	movs	r1, #63	; 0x3f
 8003690:	e7a6      	b.n	80035e0 <UART_Start_Receive_IT+0x24>
 8003692:	801c      	strh	r4, [r3, #0]
 8003694:	e7a5      	b.n	80035e2 <UART_Start_Receive_IT+0x26>
      huart->RxISR = UART_RxISR_8BIT;
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <UART_Start_Receive_IT+0x114>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003698:	428c      	cmp	r4, r1
 800369a:	d103      	bne.n	80036a4 <UART_Start_Receive_IT+0xe8>
 800369c:	6901      	ldr	r1, [r0, #16]
 800369e:	2900      	cmp	r1, #0
 80036a0:	d100      	bne.n	80036a4 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <UART_Start_Receive_IT+0x118>)
 80036a4:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	2301      	movs	r3, #1
 80036b0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036b4:	6802      	ldr	r2, [r0, #0]
 80036b6:	3320      	adds	r3, #32
 80036b8:	6810      	ldr	r0, [r2, #0]
 80036ba:	33ff      	adds	r3, #255	; 0xff
 80036bc:	4303      	orrs	r3, r0
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e7d1      	b.n	8003666 <UART_Start_Receive_IT+0xaa>
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	000001ff 	.word	0x000001ff
 80036c8:	08002ddd 	.word	0x08002ddd
 80036cc:	08002f85 	.word	0x08002f85
 80036d0:	08002d97 	.word	0x08002d97
 80036d4:	08002d55 	.word	0x08002d55

080036d8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80036d8:	0003      	movs	r3, r0
 80036da:	3388      	adds	r3, #136	; 0x88
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80036de:	681c      	ldr	r4, [r3, #0]
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e2:	2c20      	cmp	r4, #32
 80036e4:	d130      	bne.n	8003748 <HAL_UART_Receive_IT+0x70>
      return HAL_ERROR;
 80036e6:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d02d      	beq.n	8003748 <HAL_UART_Receive_IT+0x70>
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	d02b      	beq.n	8003748 <HAL_UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	6884      	ldr	r4, [r0, #8]
 80036f4:	015b      	lsls	r3, r3, #5
 80036f6:	429c      	cmp	r4, r3
 80036f8:	d106      	bne.n	8003708 <HAL_UART_Receive_IT+0x30>
 80036fa:	6903      	ldr	r3, [r0, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_UART_Receive_IT+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003700:	2401      	movs	r4, #1
      return HAL_ERROR;
 8003702:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8003704:	4221      	tst	r1, r4
 8003706:	d11f      	bne.n	8003748 <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8003708:	0004      	movs	r4, r0
 800370a:	3480      	adds	r4, #128	; 0x80
 800370c:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8003710:	2d01      	cmp	r5, #1
 8003712:	d019      	beq.n	8003748 <HAL_UART_Receive_IT+0x70>
 8003714:	3b01      	subs	r3, #1
 8003716:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	2400      	movs	r4, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800371a:	4d0c      	ldr	r5, [pc, #48]	; (800374c <HAL_UART_Receive_IT+0x74>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371c:	66c4      	str	r4, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800371e:	6804      	ldr	r4, [r0, #0]
 8003720:	42ac      	cmp	r4, r5
 8003722:	d00e      	beq.n	8003742 <HAL_UART_Receive_IT+0x6a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003724:	6864      	ldr	r4, [r4, #4]
 8003726:	0224      	lsls	r4, r4, #8
 8003728:	d50b      	bpl.n	8003742 <HAL_UART_Receive_IT+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	6804      	ldr	r4, [r0, #0]
 8003736:	04db      	lsls	r3, r3, #19
 8003738:	6826      	ldr	r6, [r4, #0]
 800373a:	4333      	orrs	r3, r6
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003742:	f7ff ff3b 	bl	80035bc <UART_Start_Receive_IT>
 8003746:	0003      	movs	r3, r0
}
 8003748:	0018      	movs	r0, r3
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	40008000 	.word	0x40008000

08003750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003752:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003754:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <UARTEx_SetNbDataToProcess+0x40>)
 800375c:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003760:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003762:	4e0c      	ldr	r6, [pc, #48]	; (8003794 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003764:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003766:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800376a:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800376c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800376e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003770:	00c0      	lsls	r0, r0, #3
 8003772:	f7fc fd7b 	bl	800026c <__divsi3>
 8003776:	0023      	movs	r3, r4
 8003778:	336a      	adds	r3, #106	; 0x6a
 800377a:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800377c:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800377e:	0f5b      	lsrs	r3, r3, #29
 8003780:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003782:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003784:	00c0      	lsls	r0, r0, #3
 8003786:	f7fc fd71 	bl	800026c <__divsi3>
 800378a:	3468      	adds	r4, #104	; 0x68
 800378c:	8020      	strh	r0, [r4, #0]
}
 800378e:	e7e6      	b.n	800375e <UARTEx_SetNbDataToProcess+0xe>
 8003790:	00010001 	.word	0x00010001
 8003794:	08006470 	.word	0x08006470
 8003798:	08006468 	.word	0x08006468

0800379c <HAL_UARTEx_WakeupCallback>:
}
 800379c:	4770      	bx	lr

0800379e <HAL_UARTEx_RxFifoFullCallback>:
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_TxFifoEmptyCallback>:
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_UARTEx_DisableFifoMode>:
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80037a6:	0004      	movs	r4, r0
 80037a8:	3480      	adds	r4, #128	; 0x80
 80037aa:	7822      	ldrb	r2, [r4, #0]
{
 80037ac:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80037ae:	2002      	movs	r0, #2
 80037b0:	2a01      	cmp	r2, #1
 80037b2:	d011      	beq.n	80037d8 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	001d      	movs	r5, r3
 80037b6:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80037b8:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80037ba:	3508      	adds	r5, #8
 80037bc:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80037c2:	6810      	ldr	r0, [r2, #0]
 80037c4:	43b0      	bics	r0, r6
 80037c6:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <HAL_UARTEx_DisableFifoMode+0x38>)
 80037ca:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037cc:	2000      	movs	r0, #0
 80037ce:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 80037d0:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80037d6:	7020      	strb	r0, [r4, #0]
}
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	dfffffff 	.word	0xdfffffff

080037e0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80037e2:	0005      	movs	r5, r0
 80037e4:	3580      	adds	r5, #128	; 0x80
 80037e6:	782b      	ldrb	r3, [r5, #0]
{
 80037e8:	0004      	movs	r4, r0
 80037ea:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80037ec:	2002      	movs	r0, #2
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d018      	beq.n	8003824 <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 80037f2:	0026      	movs	r6, r4
 80037f4:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80037f6:	3801      	subs	r0, #1
 80037f8:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037fa:	3608      	adds	r6, #8
 80037fc:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	4381      	bics	r1, r0
 8003806:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003808:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800380a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800380c:	00c9      	lsls	r1, r1, #3
 800380e:	08c9      	lsrs	r1, r1, #3
 8003810:	4311      	orrs	r1, r2
 8003812:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003814:	f7ff ff9c 	bl	8003750 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003818:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800381a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800381c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800381e:	2320      	movs	r3, #32
 8003820:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003822:	7028      	strb	r0, [r5, #0]
}
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003828 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800382a:	0005      	movs	r5, r0
 800382c:	3580      	adds	r5, #128	; 0x80
 800382e:	782b      	ldrb	r3, [r5, #0]
{
 8003830:	0004      	movs	r4, r0
 8003832:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003834:	2002      	movs	r0, #2
 8003836:	2b01      	cmp	r3, #1
 8003838:	d018      	beq.n	800386c <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 800383a:	0026      	movs	r6, r4
 800383c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800383e:	3801      	subs	r0, #1
 8003840:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003842:	3608      	adds	r6, #8
 8003844:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	4381      	bics	r1, r0
 800384e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8003854:	4001      	ands	r1, r0
 8003856:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 8003858:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800385a:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800385c:	f7ff ff78 	bl	8003750 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003860:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003862:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003864:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003866:	2320      	movs	r3, #32
 8003868:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800386a:	7028      	strb	r0, [r5, #0]
}
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	f1ffffff 	.word	0xf1ffffff

08003874 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8003874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003876:	0006      	movs	r6, r0
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8003878:	2500      	movs	r5, #0
 800387a:	4c11      	ldr	r4, [pc, #68]	; (80038c0 <vTimerCallbackT35+0x4c>)
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <vTimerCallbackT35+0x50>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	42ab      	cmp	r3, r5
 8003882:	dc00      	bgt.n	8003886 <vTimerCallbackT35+0x12>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
		}

	}
}
 8003884:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	0002      	movs	r2, r0
 800388a:	32bc      	adds	r2, #188	; 0xbc
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	42b2      	cmp	r2, r6
 8003890:	d112      	bne.n	80038b8 <vTimerCallbackT35+0x44>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 8003892:	7802      	ldrb	r2, [r0, #0]
 8003894:	2a04      	cmp	r2, #4
 8003896:	d107      	bne.n	80038a8 <vTimerCallbackT35+0x34>
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8003898:	2200      	movs	r2, #0
 800389a:	30c0      	adds	r0, #192	; 0xc0
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	0013      	movs	r3, r2
 80038a0:	2103      	movs	r1, #3
 80038a2:	6800      	ldr	r0, [r0, #0]
 80038a4:	f002 f994 	bl	8005bd0 <xTimerGenericCommand>
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80038a8:	2300      	movs	r3, #0
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	2203      	movs	r2, #3
 80038ae:	30b8      	adds	r0, #184	; 0xb8
 80038b0:	0019      	movs	r1, r3
 80038b2:	6800      	ldr	r0, [r0, #0]
 80038b4:	f002 f808 	bl	80058c8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80038b8:	3501      	adds	r5, #1
 80038ba:	3404      	adds	r4, #4
 80038bc:	e7de      	b.n	800387c <vTimerCallbackT35+0x8>
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000125c 	.word	0x2000125c
 80038c4:	20000090 	.word	0x20000090

080038c8 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	0006      	movs	r6, r0
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80038cc:	2400      	movs	r4, #0
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <vTimerCallbackTimeout+0x34>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	dc00      	bgt.n	80038d8 <vTimerCallbackTimeout+0x10>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
		}

	}

}
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <vTimerCallbackTimeout+0x38>)
 80038da:	00a3      	lsls	r3, r4, #2
 80038dc:	58d5      	ldr	r5, [r2, r3]
 80038de:	002a      	movs	r2, r5
 80038e0:	32c0      	adds	r2, #192	; 0xc0
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	42b2      	cmp	r2, r6
 80038e6:	d106      	bne.n	80038f6 <vTimerCallbackTimeout+0x2e>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 80038e8:	35b8      	adds	r5, #184	; 0xb8
 80038ea:	2300      	movs	r3, #0
 80038ec:	2203      	movs	r2, #3
 80038ee:	21ff      	movs	r1, #255	; 0xff
 80038f0:	6828      	ldr	r0, [r5, #0]
 80038f2:	f001 ffe9 	bl	80058c8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80038f6:	3401      	adds	r4, #1
 80038f8:	e7e9      	b.n	80038ce <vTimerCallbackTimeout+0x6>
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	20000090 	.word	0x20000090
 8003900:	2000125c 	.word	0x2000125c

08003904 <RingAdd>:
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8003904:	0002      	movs	r2, r0
{
 8003906:	b510      	push	{r4, lr}
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8003908:	3281      	adds	r2, #129	; 0x81
 800390a:	7813      	ldrb	r3, [r2, #0]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800390c:	247f      	movs	r4, #127	; 0x7f
	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800390e:	54c1      	strb	r1, [r0, r3]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003910:	0001      	movs	r1, r0
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8003912:	3301      	adds	r3, #1
 8003914:	4023      	ands	r3, r4
 8003916:	7013      	strb	r3, [r2, #0]
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003918:	3182      	adds	r1, #130	; 0x82
 800391a:	780a      	ldrb	r2, [r1, #0]
 800391c:	2a80      	cmp	r2, #128	; 0x80
 800391e:	d105      	bne.n	800392c <RingAdd+0x28>
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003920:	3080      	adds	r0, #128	; 0x80
 8003922:	7803      	ldrb	r3, [r0, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4023      	ands	r3, r4
 8003928:	7003      	strb	r3, [r0, #0]
}
 800392a:	bd10      	pop	{r4, pc}
		xRingBuffer->u8available++;
 800392c:	3201      	adds	r2, #1
 800392e:	700a      	strb	r2, [r1, #0]
}
 8003930:	e7fb      	b.n	800392a <RingAdd+0x26>

08003932 <RingGetNBytes>:
{
 8003932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003934:	0006      	movs	r6, r0
{
 8003936:	9101      	str	r1, [sp, #4]
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8003938:	3682      	adds	r6, #130	; 0x82
{
 800393a:	0004      	movs	r4, r0
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800393c:	7830      	ldrb	r0, [r6, #0]
 800393e:	2800      	cmp	r0, #0
 8003940:	d01e      	beq.n	8003980 <RingGetNBytes+0x4e>
 8003942:	1e53      	subs	r3, r2, #1
 8003944:	2000      	movs	r0, #0
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	d41a      	bmi.n	8003980 <RingGetNBytes+0x4e>
 800394a:	0003      	movs	r3, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800394c:	0027      	movs	r7, r4
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800394e:	307f      	adds	r0, #127	; 0x7f
 8003950:	4684      	mov	ip, r0
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8003952:	3780      	adds	r7, #128	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003954:	7835      	ldrb	r5, [r6, #0]
 8003956:	b2d8      	uxtb	r0, r3
 8003958:	4285      	cmp	r5, r0
 800395a:	d90e      	bls.n	800397a <RingGetNBytes+0x48>
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800395c:	783d      	ldrb	r5, [r7, #0]
 800395e:	9901      	ldr	r1, [sp, #4]
 8003960:	5d65      	ldrb	r5, [r4, r5]
 8003962:	3001      	adds	r0, #1
 8003964:	54cd      	strb	r5, [r1, r3]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003966:	4661      	mov	r1, ip
 8003968:	783d      	ldrb	r5, [r7, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	3501      	adds	r5, #1
 800396e:	400d      	ands	r5, r1
 8003970:	703d      	strb	r5, [r7, #0]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003972:	b2dd      	uxtb	r5, r3
 8003974:	b2c0      	uxtb	r0, r0
 8003976:	42aa      	cmp	r2, r5
 8003978:	d8ec      	bhi.n	8003954 <RingGetNBytes+0x22>
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800397a:	7833      	ldrb	r3, [r6, #0]
 800397c:	1a1b      	subs	r3, r3, r0
 800397e:	7033      	strb	r3, [r6, #0]
}
 8003980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003982 <RingGetAllBytes>:
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8003982:	0003      	movs	r3, r0
{
 8003984:	b510      	push	{r4, lr}
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8003986:	3382      	adds	r3, #130	; 0x82
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	f7ff ffd2 	bl	8003932 <RingGetNBytes>
}
 800398e:	bd10      	pop	{r4, pc}

08003990 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	0004      	movs	r4, r0
    bool bBuffOverflow = false;

    if (modH->EN_Port)
 8003994:	68c0      	ldr	r0, [r0, #12]
 8003996:	2800      	cmp	r0, #0
 8003998:	d003      	beq.n	80039a2 <getRxBuffer+0x12>
    {
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	8a21      	ldrh	r1, [r4, #16]
 800399e:	f7fe f8bf 	bl	8001b20 <HAL_GPIO_WritePin>
return xRingBuffer->u8available;
 80039a2:	0023      	movs	r3, r4
    }

    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80039a4:	0025      	movs	r5, r4
return xRingBuffer->u8available;
 80039a6:	0020      	movs	r0, r4
    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80039a8:	0021      	movs	r1, r4
return xRingBuffer->u8available;
 80039aa:	334b      	adds	r3, #75	; 0x4b
 80039ac:	33ff      	adds	r3, #255	; 0xff
    modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	3593      	adds	r5, #147	; 0x93
 80039b2:	702b      	strb	r3, [r5, #0]
 80039b4:	3113      	adds	r1, #19
return xRingBuffer->u8available;
 80039b6:	30c8      	adds	r0, #200	; 0xc8
    RingGetAllBytes(&modH->xBufferRX, modH->au8Buffer);
 80039b8:	f7ff ffe3 	bl	8003982 <RingGetAllBytes>

    modH->u16InCnt++;
 80039bc:	2000      	movs	r0, #0
 80039be:	349c      	adds	r4, #156	; 0x9c
 80039c0:	8823      	ldrh	r3, [r4, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	8023      	strh	r3, [r4, #0]
    if (bBuffOverflow)
    {
    	modH->u16errCnt++;
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
    }
    return modH->u8BufferSize;
 80039c6:	5628      	ldrsb	r0, [r5, r0]
}
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039cc <ModbusInit>:
{
 80039cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (numberHandlers < MAX_M_HANDLERS)
 80039ce:	4d31      	ldr	r5, [pc, #196]	; (8003a94 <ModbusInit+0xc8>)
{
 80039d0:	0004      	movs	r4, r0
  if (numberHandlers < MAX_M_HANDLERS)
 80039d2:	782b      	ldrb	r3, [r5, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d85c      	bhi.n	8003a92 <ModbusInit+0xc6>
xRingBuffer->u8start = 0;
 80039d8:	0003      	movs	r3, r0
 80039da:	2700      	movs	r7, #0
 80039dc:	3349      	adds	r3, #73	; 0x49
 80039de:	33ff      	adds	r3, #255	; 0xff
 80039e0:	701f      	strb	r7, [r3, #0]
xRingBuffer->u8end = 0;
 80039e2:	705f      	strb	r7, [r3, #1]
xRingBuffer->u8available = 0;
 80039e4:	709f      	strb	r7, [r3, #2]
	  if(modH->uiModbusType == SLAVE_RTU)
 80039e6:	7803      	ldrb	r3, [r0, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d10d      	bne.n	8003a08 <ModbusInit+0x3c>
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80039ec:	0001      	movs	r1, r0
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <ModbusInit+0xcc>)
 80039f0:	482a      	ldr	r0, [pc, #168]	; (8003a9c <ModbusInit+0xd0>)
 80039f2:	f000 fda7 	bl	8004544 <osThreadNew>
 80039f6:	0023      	movs	r3, r4
 80039f8:	33b8      	adds	r3, #184	; 0xb8
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80039fa:	6018      	str	r0, [r3, #0]
	  if  (modH->myTaskModbusAHandle == NULL)
 80039fc:	0023      	movs	r3, r4
 80039fe:	33b8      	adds	r3, #184	; 0xb8
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d125      	bne.n	8003a52 <ModbusInit+0x86>
		  while(1); //Error creating modbus task, check heap and stack size
 8003a06:	e7fe      	b.n	8003a06 <ModbusInit+0x3a>
	  else if (modH->uiModbusType == MASTER_RTU)
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11e      	bne.n	8003a4a <ModbusInit+0x7e>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8003a0c:	0001      	movs	r1, r0
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <ModbusInit+0xd4>)
 8003a10:	4824      	ldr	r0, [pc, #144]	; (8003aa4 <ModbusInit+0xd8>)
 8003a12:	f000 fd97 	bl	8004544 <osThreadNew>
 8003a16:	0023      	movs	r3, r4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8003a18:	0026      	movs	r6, r4
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8003a1a:	33b8      	adds	r3, #184	; 0xb8
 8003a1c:	6018      	str	r0, [r3, #0]
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8003a1e:	3b16      	subs	r3, #22
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8003a20:	8819      	ldrh	r1, [r3, #0]
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <ModbusInit+0xdc>)
 8003a24:	36c0      	adds	r6, #192	; 0xc0
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	003a      	movs	r2, r7
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	481f      	ldr	r0, [pc, #124]	; (8003aac <ModbusInit+0xe0>)
 8003a2e:	f002 f8a9 	bl	8005b84 <xTimerCreate>
 8003a32:	6030      	str	r0, [r6, #0]
		  if(modH->xTimerTimeout == NULL)
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d100      	bne.n	8003a3a <ModbusInit+0x6e>
			  while(1); //error creating timer, check heap and stack size
 8003a38:	e7fe      	b.n	8003a38 <ModbusInit+0x6c>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <ModbusInit+0xe4>)
 8003a40:	f000 fe2a 	bl	8004698 <osMessageQueueNew>
		  if(modH->QueueTelegramHandle == NULL)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d101      	bne.n	8003a4c <ModbusInit+0x80>
			  while(1); //error creating queue for telegrams, check heap and stack size
 8003a48:	e7fe      	b.n	8003a48 <ModbusInit+0x7c>
		  while(1); //Error Modbus type not supported choose a valid Type
 8003a4a:	e7fe      	b.n	8003a4a <ModbusInit+0x7e>
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	33b4      	adds	r3, #180	; 0xb4
 8003a50:	e7d3      	b.n	80039fa <ModbusInit+0x2e>
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8003a52:	0026      	movs	r6, r4
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <ModbusInit+0xe8>)
 8003a56:	36bc      	adds	r6, #188	; 0xbc
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2105      	movs	r1, #5
 8003a5e:	6833      	ldr	r3, [r6, #0]
 8003a60:	4815      	ldr	r0, [pc, #84]	; (8003ab8 <ModbusInit+0xec>)
 8003a62:	f002 f88f 	bl	8005b84 <xTimerCreate>
 8003a66:	6030      	str	r0, [r6, #0]
	  if (modH->xTimerT35 == NULL)
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d100      	bne.n	8003a6e <ModbusInit+0xa2>
		  while(1); //Error creating the timer, check heap and stack size
 8003a6c:	e7fe      	b.n	8003a6c <ModbusInit+0xa0>
	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <ModbusInit+0xf0>)
 8003a72:	0008      	movs	r0, r1
 8003a74:	f000 fdc7 	bl	8004606 <osSemaphoreNew>
 8003a78:	0023      	movs	r3, r4
 8003a7a:	33c4      	adds	r3, #196	; 0xc4
 8003a7c:	6018      	str	r0, [r3, #0]
	  if(modH->ModBusSphrHandle == NULL)
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d100      	bne.n	8003a84 <ModbusInit+0xb8>
		  while(1); //Error creating the semaphore, check heap and stack size
 8003a82:	e7fe      	b.n	8003a82 <ModbusInit+0xb6>
	  mHandlers[numberHandlers] = modH;
 8003a84:	782b      	ldrb	r3, [r5, #0]
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <ModbusInit+0xf4>)
 8003a88:	0099      	lsls	r1, r3, #2
	  numberHandlers++;
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	702b      	strb	r3, [r5, #0]
	  mHandlers[numberHandlers] = modH;
 8003a8e:	508c      	str	r4, [r1, r2]
}
 8003a90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	  while(1); //error no more Modbus handlers supported
 8003a92:	e7fe      	b.n	8003a92 <ModbusInit+0xc6>
 8003a94:	20000090 	.word	0x20000090
 8003a98:	08006500 	.word	0x08006500
 8003a9c:	08003bf1 	.word	0x08003bf1
 8003aa0:	08006524 	.word	0x08006524
 8003aa4:	080040d9 	.word	0x080040d9
 8003aa8:	080038c9 	.word	0x080038c9
 8003aac:	08006478 	.word	0x08006478
 8003ab0:	080064e0 	.word	0x080064e0
 8003ab4:	08003875 	.word	0x08003875
 8003ab8:	08006486 	.word	0x08006486
 8003abc:	080064d0 	.word	0x080064d0
 8003ac0:	2000125c 	.word	0x2000125c

08003ac4 <ModbusStart>:
{
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	0004      	movs	r4, r0
	if (modH->EN_Port != NULL )
 8003ac8:	68c0      	ldr	r0, [r0, #12]
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d003      	beq.n	8003ad6 <ModbusStart+0x12>
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	8a21      	ldrh	r1, [r4, #16]
 8003ad2:	f7fe f825 	bl	8001b20 <HAL_GPIO_WritePin>
    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8003ad6:	7823      	ldrb	r3, [r4, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d105      	bne.n	8003ae8 <ModbusStart+0x24>
 8003adc:	0023      	movs	r3, r4
 8003ade:	3398      	adds	r3, #152	; 0x98
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d100      	bne.n	8003ae8 <ModbusStart+0x24>
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8003ae6:	e7fe      	b.n	8003ae6 <ModbusStart+0x22>
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8003ae8:	6860      	ldr	r0, [r4, #4]
 8003aea:	f7ff fb1d 	bl	8003128 <HAL_UART_GetState>
 8003aee:	2820      	cmp	r0, #32
 8003af0:	d1fa      	bne.n	8003ae8 <ModbusStart+0x24>
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8003af2:	0021      	movs	r1, r4
 8003af4:	2201      	movs	r2, #1
 8003af6:	6860      	ldr	r0, [r4, #4]
 8003af8:	31b2      	adds	r1, #178	; 0xb2
 8003afa:	f7ff fded 	bl	80036d8 <HAL_UART_Receive_IT>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d000      	beq.n	8003b04 <ModbusStart+0x40>
        while(1)
 8003b02:	e7fe      	b.n	8003b02 <ModbusStart+0x3e>
    modH->u8lastRec = modH->u8BufferSize = 0;
 8003b04:	0023      	movs	r3, r4
 8003b06:	3393      	adds	r3, #147	; 0x93
 8003b08:	7058      	strb	r0, [r3, #1]
 8003b0a:	7018      	strb	r0, [r3, #0]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8003b0c:	34a0      	adds	r4, #160	; 0xa0
    modH->u8lastRec = modH->u8BufferSize = 0;
 8003b0e:	3301      	adds	r3, #1
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8003b10:	6098      	str	r0, [r3, #8]
 8003b12:	8020      	strh	r0, [r4, #0]
}
 8003b14:	bd10      	pop	{r4, pc}
	...

08003b18 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
    for (unsigned char i = 0; i < u8length; i++)
    {
        temp = temp ^ Buffer[i];
 8003b1a:	2408      	movs	r4, #8
        for (unsigned char j = 1; j <= 8; j++)
        {
            flag = temp & 0x0001;
 8003b1c:	2501      	movs	r5, #1
    temp = 0xFFFF;
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <calcCRC+0x38>)
            temp >>=1;
            if (flag)
                temp ^= 0xA001;
 8003b20:	4e0c      	ldr	r6, [pc, #48]	; (8003b54 <calcCRC+0x3c>)
 8003b22:	1841      	adds	r1, r0, r1
    for (unsigned char i = 0; i < u8length; i++)
 8003b24:	4288      	cmp	r0, r1
 8003b26:	d104      	bne.n	8003b32 <calcCRC+0x1a>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8003b28:	0a18      	lsrs	r0, r3, #8
    temp = (temp << 8) | temp2;
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	4318      	orrs	r0, r3
    temp &= 0xFFFF;
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8003b2e:	b280      	uxth	r0, r0

}
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = temp ^ Buffer[i];
 8003b32:	7802      	ldrb	r2, [r0, #0]
 8003b34:	4053      	eors	r3, r2
 8003b36:	0022      	movs	r2, r4
            flag = temp & 0x0001;
 8003b38:	001f      	movs	r7, r3
            temp >>=1;
 8003b3a:	085b      	lsrs	r3, r3, #1
            flag = temp & 0x0001;
 8003b3c:	402f      	ands	r7, r5
            if (flag)
 8003b3e:	d000      	beq.n	8003b42 <calcCRC+0x2a>
                temp ^= 0xA001;
 8003b40:	4073      	eors	r3, r6
        for (unsigned char j = 1; j <= 8; j++)
 8003b42:	3a01      	subs	r2, #1
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	d1f6      	bne.n	8003b38 <calcCRC+0x20>
    for (unsigned char i = 0; i < u8length; i++)
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	e7ea      	b.n	8003b24 <calcCRC+0xc>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	0000ffff 	.word	0x0000ffff
 8003b54:	0000a001 	.word	0x0000a001

08003b58 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8003b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8003b5a:	0006      	movs	r6, r0
 8003b5c:	0007      	movs	r7, r0
 8003b5e:	3693      	adds	r6, #147	; 0x93
 8003b60:	7835      	ldrb	r5, [r6, #0]
 8003b62:	3713      	adds	r7, #19
{
 8003b64:	0004      	movs	r4, r0
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8003b66:	0029      	movs	r1, r5
 8003b68:	0038      	movs	r0, r7
 8003b6a:	f7ff ffd5 	bl	8003b18 <calcCRC>
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8003b6e:	1963      	adds	r3, r4, r5
 8003b70:	0a02      	lsrs	r2, r0, #8
 8003b72:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8003b74:	1c6b      	adds	r3, r5, #1
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	18e3      	adds	r3, r4, r3
    modH->u8BufferSize++;
 8003b7a:	3502      	adds	r5, #2
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8003b7c:	74d8      	strb	r0, [r3, #19]
    modH->u8BufferSize++;
 8003b7e:	7035      	strb	r5, [r6, #0]
#if ENABLE_USB_CDC ==1
    if(modH->u8TypeHW == USART_HW)
    {
#endif
    	if (modH->EN_Port != NULL)
 8003b80:	68e0      	ldr	r0, [r4, #12]
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d003      	beq.n	8003b8e <sendTxBuffer+0x36>
        {
            // set RS485 transceiver to transmit mode
        	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8003b86:	2201      	movs	r2, #1
 8003b88:	8a21      	ldrh	r1, [r4, #16]
 8003b8a:	f7fd ffc9 	bl	8001b20 <HAL_GPIO_WritePin>
        }

        // transfer buffer to serial line
        HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8003b8e:	0039      	movs	r1, r7
 8003b90:	7832      	ldrb	r2, [r6, #0]
 8003b92:	6860      	ldr	r0, [r4, #4]
 8003b94:	f7fe fe98 	bl	80028c8 <HAL_UART_Transmit_IT>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	4249      	negs	r1, r1
 8003b9e:	f001 fe61 	bl	8005864 <ulTaskNotifyTake>


         if (modH->EN_Port != NULL)
 8003ba2:	68e3      	ldr	r3, [r4, #12]
             //return RS485 transceiver to receive mode

        	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
             #else
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003ba4:	2540      	movs	r5, #64	; 0x40
         if (modH->EN_Port != NULL)
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d117      	bne.n	8003bda <sendTxBuffer+0x82>
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
         }


         // set timeout for master query
         if(modH->uiModbusType == MASTER_RTU )
 8003baa:	7823      	ldrb	r3, [r4, #0]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d10b      	bne.n	8003bc8 <sendTxBuffer+0x70>
         {
 	    	xTimerReset(modH->xTimerTimeout,0);
 8003bb0:	0023      	movs	r3, r4
 8003bb2:	33c0      	adds	r3, #192	; 0xc0
 8003bb4:	681d      	ldr	r5, [r3, #0]
 8003bb6:	f001 fb95 	bl	80052e4 <xTaskGetTickCount>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	f002 f804 	bl	8005bd0 <xTimerGenericCommand>

	}
#endif


     modH->u8BufferSize = 0;
 8003bc8:	2300      	movs	r3, #0
     // increase message counter
     modH->u16OutCnt++;
 8003bca:	349e      	adds	r4, #158	; 0x9e
     modH->u8BufferSize = 0;
 8003bcc:	7033      	strb	r3, [r6, #0]
     modH->u16OutCnt++;
 8003bce:	8823      	ldrh	r3, [r4, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	8023      	strh	r3, [r4, #0]

}
 8003bd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        		taskYIELD();
 8003bd6:	f002 f96f 	bl	8005eb8 <vPortYield>
        	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8003bda:	6863      	ldr	r3, [r4, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	422b      	tst	r3, r5
 8003be2:	d0f8      	beq.n	8003bd6 <sendTxBuffer+0x7e>
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003be4:	2200      	movs	r2, #0
 8003be6:	8a21      	ldrh	r1, [r4, #16]
 8003be8:	68e0      	ldr	r0, [r4, #12]
 8003bea:	f7fd ff99 	bl	8001b20 <HAL_GPIO_WritePin>
 8003bee:	e7dc      	b.n	8003baa <sendTxBuffer+0x52>

08003bf0 <StartTaskModbusSlave>:
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	0004      	movs	r4, r0
 8003bf4:	b095      	sub	sp, #84	; 0x54
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	4249      	negs	r1, r1
 8003bfc:	f001 fe32 	bl	8005864 <ulTaskNotifyTake>
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003c00:	0023      	movs	r3, r4
	  modH->i8lastError = 0;
 8003c02:	2200      	movs	r2, #0
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003c04:	334b      	adds	r3, #75	; 0x4b
	  modH->i8lastError = 0;
 8003c06:	74a2      	strb	r2, [r4, #18]
	  modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
 8003c08:	33ff      	adds	r3, #255	; 0xff
 8003c0a:	7819      	ldrb	r1, [r3, #0]
 8003c0c:	3bb7      	subs	r3, #183	; 0xb7
 8003c0e:	7019      	strb	r1, [r3, #0]
	  if (modH->EN_Port != NULL )
 8003c10:	68e0      	ldr	r0, [r4, #12]
 8003c12:	4290      	cmp	r0, r2
 8003c14:	d002      	beq.n	8003c1c <StartTaskModbusSlave+0x2c>
	   	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8003c16:	8a21      	ldrh	r1, [r4, #16]
 8003c18:	f7fd ff82 	bl	8001b20 <HAL_GPIO_WritePin>
 	  i8state = getRxBuffer(modH);
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f7ff feb7 	bl	8003990 <getRxBuffer>
	  if (i8state < 7){
 8003c22:	2806      	cmp	r0, #6
 8003c24:	dc07      	bgt.n	8003c36 <StartTaskModbusSlave+0x46>
		  modH->i8lastError = ERR_BAD_SIZE;
 8003c26:	23fa      	movs	r3, #250	; 0xfa
		  modH->u16errCnt++;
 8003c28:	0022      	movs	r2, r4
		  modH->i8lastError = ERR_BAD_SIZE;
 8003c2a:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 8003c2c:	32a0      	adds	r2, #160	; 0xa0
 8003c2e:	8813      	ldrh	r3, [r2, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	8013      	strh	r3, [r2, #0]
		  continue;
 8003c34:	e7df      	b.n	8003bf6 <StartTaskModbusSlave+0x6>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8003c36:	7a26      	ldrb	r6, [r4, #8]
 8003c38:	7ce3      	ldrb	r3, [r4, #19]
 8003c3a:	42b3      	cmp	r3, r6
 8003c3c:	d1db      	bne.n	8003bf6 <StartTaskModbusSlave+0x6>
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003c3e:	0023      	movs	r3, r4
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003c40:	0020      	movs	r0, r4
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003c42:	3393      	adds	r3, #147	; 0x93
 8003c44:	781d      	ldrb	r5, [r3, #0]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003c46:	3013      	adds	r0, #19
 8003c48:	1ea9      	subs	r1, r5, #2
 8003c4a:	b2c9      	uxtb	r1, r1
 8003c4c:	f7ff ff64 	bl	8003b18 <calcCRC>
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003c50:	1965      	adds	r5, r4, r5
 8003c52:	7c6a      	ldrb	r2, [r5, #17]
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8003c54:	7cab      	ldrb	r3, [r5, #18]
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8003c56:	0212      	lsls	r2, r2, #8
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4283      	cmp	r3, r0
 8003c5c:	d007      	beq.n	8003c6e <StartTaskModbusSlave+0x7e>
	    	modH->u16errCnt ++;
 8003c5e:	0022      	movs	r2, r4
	        return NO_REPLY;
 8003c60:	25ff      	movs	r5, #255	; 0xff
	    	modH->u16errCnt ++;
 8003c62:	32a0      	adds	r2, #160	; 0xa0
 8003c64:	8813      	ldrh	r3, [r2, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	8013      	strh	r3, [r2, #0]
		  modH->i8lastError = u8exception;
 8003c6a:	74a5      	strb	r5, [r4, #18]
		  continue;
 8003c6c:	e7c3      	b.n	8003bf6 <StartTaskModbusSlave+0x6>
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8003c6e:	2200      	movs	r2, #0
 8003c70:	7d23      	ldrb	r3, [r4, #20]
 8003c72:	49d4      	ldr	r1, [pc, #848]	; (8003fc4 <StartTaskModbusSlave+0x3d4>)
 8003c74:	5c50      	ldrb	r0, [r2, r1]
 8003c76:	4298      	cmp	r0, r3
 8003c78:	d100      	bne.n	8003c7c <StartTaskModbusSlave+0x8c>
 8003c7a:	e214      	b.n	80040a6 <StartTaskModbusSlave+0x4b6>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8003c7c:	3201      	adds	r2, #1
 8003c7e:	2a08      	cmp	r2, #8
 8003c80:	d1f8      	bne.n	8003c74 <StartTaskModbusSlave+0x84>
	    	modH->u16errCnt ++;
 8003c82:	0021      	movs	r1, r4
 8003c84:	31a0      	adds	r1, #160	; 0xa0
 8003c86:	880a      	ldrh	r2, [r1, #0]
	        return EXC_FUNC_CODE;
 8003c88:	2501      	movs	r5, #1
	    	modH->u16errCnt ++;
 8003c8a:	3201      	adds	r2, #1
 8003c8c:	800a      	strh	r2, [r1, #0]
	  if (u8exception > 0)
 8003c8e:	e023      	b.n	8003cd8 <StartTaskModbusSlave+0xe8>
	W.u8[0] = L;
 8003c90:	25ff      	movs	r5, #255	; 0xff
 8003c92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c94:	7da1      	ldrb	r1, [r4, #22]
 8003c96:	43a8      	bics	r0, r5
 8003c98:	4308      	orrs	r0, r1
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003c9a:	7d62      	ldrb	r2, [r4, #21]
	W.u8[1] = H;
 8003c9c:	49ca      	ldr	r1, [pc, #808]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003c9e:	0212      	lsls	r2, r2, #8
 8003ca0:	4008      	ands	r0, r1
 8003ca2:	4310      	orrs	r0, r2
	return W.u16[0];
 8003ca4:	466a      	mov	r2, sp
	W.u8[1] = H;
 8003ca6:	900b      	str	r0, [sp, #44]	; 0x2c
	return W.u16[0];
 8003ca8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
	W.u8[0] = L;
 8003caa:	7e27      	ldrb	r7, [r4, #24]
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003cac:	0912      	lsrs	r2, r2, #4
 8003cae:	4694      	mov	ip, r2
	W.u8[0] = L;
 8003cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8003cb2:	7de0      	ldrb	r0, [r4, #23]
	W.u8[0] = L;
 8003cb4:	43aa      	bics	r2, r5
 8003cb6:	0015      	movs	r5, r2
	return W.u16[0];
 8003cb8:	466a      	mov	r2, sp
	W.u8[0] = L;
 8003cba:	433d      	orrs	r5, r7
	W.u8[1] = H;
 8003cbc:	0200      	lsls	r0, r0, #8
 8003cbe:	4029      	ands	r1, r5
 8003cc0:	4301      	orrs	r1, r0
 8003cc2:	910c      	str	r1, [sp, #48]	; 0x30
	return W.u16[0];
 8003cc4:	8e11      	ldrh	r1, [r2, #48]	; 0x30
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003cc6:	0020      	movs	r0, r4
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8003cc8:	0909      	lsrs	r1, r1, #4
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003cca:	000a      	movs	r2, r1
 8003ccc:	30b0      	adds	r0, #176	; 0xb0
 8003cce:	8800      	ldrh	r0, [r0, #0]
 8003cd0:	4462      	add	r2, ip
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d220      	bcs.n	8003d18 <StartTaskModbusSlave+0x128>
 8003cd6:	2502      	movs	r5, #2
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8003cd8:	3b80      	subs	r3, #128	; 0x80
 8003cda:	7523      	strb	r3, [r4, #20]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003cdc:	0023      	movs	r3, r4
 8003cde:	2203      	movs	r2, #3
 8003ce0:	3393      	adds	r3, #147	; 0x93
    modH->au8Buffer[ ID ]      = modH->u8id;
 8003ce2:	74e6      	strb	r6, [r4, #19]
    modH->au8Buffer[ 2 ]       = u8exception;
 8003ce4:	7565      	strb	r5, [r4, #21]
			  sendTxBuffer(modH);
 8003ce6:	0020      	movs	r0, r4
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8003ce8:	701a      	strb	r2, [r3, #0]
			  sendTxBuffer(modH);
 8003cea:	f7ff ff35 	bl	8003b58 <sendTxBuffer>
 8003cee:	e7bc      	b.n	8003c6a <StartTaskModbusSlave+0x7a>
	W.u8[0] = L;
 8003cf0:	20ff      	movs	r0, #255	; 0xff
 8003cf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003cf4:	7da1      	ldrb	r1, [r4, #22]
 8003cf6:	4385      	bics	r5, r0
 8003cf8:	0028      	movs	r0, r5
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8003cfa:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003cfc:	4308      	orrs	r0, r1
	W.u8[1] = H;
 8003cfe:	49b2      	ldr	r1, [pc, #712]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003d00:	0212      	lsls	r2, r2, #8
 8003d02:	4001      	ands	r1, r0
 8003d04:	4311      	orrs	r1, r2
 8003d06:	910a      	str	r1, [sp, #40]	; 0x28
	return W.u16[0];
 8003d08:	466a      	mov	r2, sp
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003d0a:	0021      	movs	r1, r4
	return W.u16[0];
 8003d0c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003d0e:	31b0      	adds	r1, #176	; 0xb0
 8003d10:	8809      	ldrh	r1, [r1, #0]
 8003d12:	0912      	lsrs	r2, r2, #4
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003d14:	4291      	cmp	r1, r2
 8003d16:	d3de      	bcc.n	8003cd6 <StartTaskModbusSlave+0xe6>
	  modH->i8lastError = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74a3      	strb	r3, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003d1c:	0023      	movs	r3, r4
 8003d1e:	2101      	movs	r1, #1
 8003d20:	33c4      	adds	r3, #196	; 0xc4
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4249      	negs	r1, r1
 8003d26:	f000 ffe2 	bl	8004cee <xQueueSemaphoreTake>
	    switch(modH->au8Buffer[ FUNC ] )
 8003d2a:	7d20      	ldrb	r0, [r4, #20]
 8003d2c:	3801      	subs	r0, #1
 8003d2e:	280f      	cmp	r0, #15
 8003d30:	d900      	bls.n	8003d34 <StartTaskModbusSlave+0x144>
 8003d32:	e0dd      	b.n	8003ef0 <StartTaskModbusSlave+0x300>
 8003d34:	f7fc fa06 	bl	8000144 <__gnu_thumb1_case_uhi>
 8003d38:	003e003e 	.word	0x003e003e
 8003d3c:	00aa00aa 	.word	0x00aa00aa
 8003d40:	012600f8 	.word	0x012600f8
 8003d44:	00dc00dc 	.word	0x00dc00dc
 8003d48:	00dc00dc 	.word	0x00dc00dc
 8003d4c:	00dc00dc 	.word	0x00dc00dc
 8003d50:	00dc00dc 	.word	0x00dc00dc
 8003d54:	0190014a 	.word	0x0190014a
	W.u8[0] = L;
 8003d58:	20ff      	movs	r0, #255	; 0xff
 8003d5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003d5c:	7da1      	ldrb	r1, [r4, #22]
 8003d5e:	4385      	bics	r5, r0
 8003d60:	0028      	movs	r0, r5
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8003d62:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003d64:	4308      	orrs	r0, r1
	W.u8[1] = H;
 8003d66:	4998      	ldr	r1, [pc, #608]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003d68:	0212      	lsls	r2, r2, #8
 8003d6a:	4001      	ands	r1, r0
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	9109      	str	r1, [sp, #36]	; 0x24
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003d70:	0021      	movs	r1, r4
	return W.u16[0];
 8003d72:	466a      	mov	r2, sp
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003d74:	31b0      	adds	r1, #176	; 0xb0
	return W.u16[0];
 8003d76:	8c92      	ldrh	r2, [r2, #36]	; 0x24
	        if (u16regs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8003d78:	8809      	ldrh	r1, [r1, #0]
 8003d7a:	e7cb      	b.n	8003d14 <StartTaskModbusSlave+0x124>
	W.u8[0] = L;
 8003d7c:	20ff      	movs	r0, #255	; 0xff
 8003d7e:	9f08      	ldr	r7, [sp, #32]
 8003d80:	9d07      	ldr	r5, [sp, #28]
 8003d82:	4387      	bics	r7, r0
 8003d84:	4385      	bics	r5, r0
 8003d86:	0038      	movs	r0, r7
 8003d88:	7da2      	ldrb	r2, [r4, #22]
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8003d8a:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003d8c:	4315      	orrs	r5, r2
	W.u8[1] = H;
 8003d8e:	4a8e      	ldr	r2, [pc, #568]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003d90:	0209      	lsls	r1, r1, #8
 8003d92:	4015      	ands	r5, r2
 8003d94:	430d      	orrs	r5, r1
 8003d96:	9507      	str	r5, [sp, #28]
	W.u8[0] = L;
 8003d98:	7e25      	ldrb	r5, [r4, #24]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003d9a:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003d9c:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003d9e:	0209      	lsls	r1, r1, #8
 8003da0:	4002      	ands	r2, r0
 8003da2:	430a      	orrs	r2, r1
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003da4:	9907      	ldr	r1, [sp, #28]
	W.u8[1] = H;
 8003da6:	9208      	str	r2, [sp, #32]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8003da8:	1852      	adds	r2, r2, r1
	        if (u16regs > modH->u16regsize) return EXC_ADDR_RANGE;
 8003daa:	0021      	movs	r1, r4
 8003dac:	31b0      	adds	r1, #176	; 0xb0
 8003dae:	8809      	ldrh	r1, [r1, #0]
 8003db0:	b292      	uxth	r2, r2
 8003db2:	e7af      	b.n	8003d14 <StartTaskModbusSlave+0x124>
	W.u8[0] = L;
 8003db4:	20ff      	movs	r0, #255	; 0xff
 8003db6:	9e06      	ldr	r6, [sp, #24]
 8003db8:	9905      	ldr	r1, [sp, #20]
 8003dba:	4386      	bics	r6, r0
 8003dbc:	4381      	bics	r1, r0
 8003dbe:	0030      	movs	r0, r6
 8003dc0:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003dc2:	7d62      	ldrb	r2, [r4, #21]
	W.u8[0] = L;
 8003dc4:	4319      	orrs	r1, r3
	W.u8[1] = H;
 8003dc6:	4b80      	ldr	r3, [pc, #512]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003dc8:	0212      	lsls	r2, r2, #8
 8003dca:	4019      	ands	r1, r3
 8003dcc:	4311      	orrs	r1, r2
	W.u8[0] = L;
 8003dce:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003dd0:	9105      	str	r1, [sp, #20]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003dd2:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003dd4:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003dd6:	0209      	lsls	r1, r1, #8
 8003dd8:	4003      	ands	r3, r0
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	9306      	str	r3, [sp, #24]
	return W.u16[0];
 8003dde:	466b      	mov	r3, sp
 8003de0:	8b19      	ldrh	r1, [r3, #24]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003de2:	2007      	movs	r0, #7
 8003de4:	000d      	movs	r5, r1
	return W.u16[0];
 8003de6:	466a      	mov	r2, sp
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003de8:	08cb      	lsrs	r3, r1, #3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003dea:	4005      	ands	r5, r0
	return W.u16[0];
 8003dec:	8a92      	ldrh	r2, [r2, #20]
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8003dee:	b2db      	uxtb	r3, r3
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8003df0:	9513      	str	r5, [sp, #76]	; 0x4c
 8003df2:	4201      	tst	r1, r0
 8003df4:	d001      	beq.n	8003dfa <StartTaskModbusSlave+0x20a>
 8003df6:	3301      	adds	r3, #1
 8003df8:	b2db      	uxtb	r3, r3
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
    modH->u8BufferSize         = ADD_LO;
 8003dfa:	0027      	movs	r7, r4
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	3793      	adds	r7, #147	; 0x93
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8003e00:	7563      	strb	r3, [r4, #21]
    modH->u8BufferSize         = ADD_LO;
 8003e02:	7038      	strb	r0, [r7, #0]
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8003e04:	18e0      	adds	r0, r4, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	1851      	adds	r1, r2, r1
 8003e0a:	b289      	uxth	r1, r1
 8003e0c:	7543      	strb	r3, [r0, #21]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003e0e:	9112      	str	r1, [sp, #72]	; 0x48
 8003e10:	9711      	str	r7, [sp, #68]	; 0x44
 8003e12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003e14:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003e16:	7809      	ldrb	r1, [r1, #0]
 8003e18:	4290      	cmp	r0, r2
 8003e1a:	d10e      	bne.n	8003e3a <StartTaskModbusSlave+0x24a>
            modH->u8BufferSize++;
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8003e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <StartTaskModbusSlave+0x236>
 8003e22:	3101      	adds	r1, #1
 8003e24:	7039      	strb	r1, [r7, #0]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003e26:	783d      	ldrb	r5, [r7, #0]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

        modH->au16regs[ u8StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
    sendTxBuffer(modH);
 8003e28:	0020      	movs	r0, r4
 8003e2a:	f7ff fe95 	bl	8003b58 <sendTxBuffer>
				modH->i8state = process_FC16(modH);
 8003e2e:	0023      	movs	r3, r4
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003e30:	3502      	adds	r5, #2
 8003e32:	b2ed      	uxtb	r5, r5
				modH->i8state = process_FC16(modH);
 8003e34:	33b3      	adds	r3, #179	; 0xb3
 8003e36:	701d      	strb	r5, [r3, #0]
				break;
 8003e38:	e05a      	b.n	8003ef0 <StartTaskModbusSlave+0x300>
        bitWrite(
 8003e3a:	1860      	adds	r0, r4, r1
 8003e3c:	7cc6      	ldrb	r6, [r0, #19]
 8003e3e:	2001      	movs	r0, #1
 8003e40:	4098      	lsls	r0, r3
 8003e42:	b2c0      	uxtb	r0, r0
 8003e44:	9010      	str	r0, [sp, #64]	; 0x40
 8003e46:	2098      	movs	r0, #152	; 0x98
 8003e48:	4684      	mov	ip, r0
 8003e4a:	44a4      	add	ip, r4
 8003e4c:	4660      	mov	r0, ip
        u8currentRegister = (uint8_t) (u16coil / 16);
 8003e4e:	0915      	lsrs	r5, r2, #4
        bitWrite(
 8003e50:	6800      	ldr	r0, [r0, #0]
 8003e52:	b2ed      	uxtb	r5, r5
 8003e54:	006d      	lsls	r5, r5, #1
 8003e56:	5a2d      	ldrh	r5, [r5, r0]
 8003e58:	200f      	movs	r0, #15
 8003e5a:	4010      	ands	r0, r2
 8003e5c:	4105      	asrs	r5, r0
 8003e5e:	2001      	movs	r0, #1
 8003e60:	4205      	tst	r5, r0
 8003e62:	d00e      	beq.n	8003e82 <StartTaskModbusSlave+0x292>
 8003e64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003e66:	1865      	adds	r5, r4, r1
 8003e68:	4330      	orrs	r0, r6
 8003e6a:	74e8      	strb	r0, [r5, #19]
        u8bitsno ++;
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
        if (u8bitsno > 7)
 8003e70:	2b07      	cmp	r3, #7
 8003e72:	d903      	bls.n	8003e7c <StartTaskModbusSlave+0x28c>
            modH->u8BufferSize++;
 8003e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e76:	3101      	adds	r1, #1
 8003e78:	7019      	strb	r1, [r3, #0]
            u8bitsno = 0;
 8003e7a:	2300      	movs	r3, #0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003e7c:	3201      	adds	r2, #1
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	e7c7      	b.n	8003e12 <StartTaskModbusSlave+0x222>
        bitWrite(
 8003e82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003e84:	4386      	bics	r6, r0
 8003e86:	1860      	adds	r0, r4, r1
 8003e88:	74c6      	strb	r6, [r0, #19]
 8003e8a:	e7ef      	b.n	8003e6c <StartTaskModbusSlave+0x27c>
	W.u8[0] = L;
 8003e8c:	20ff      	movs	r0, #255	; 0xff
 8003e8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e92:	4386      	bics	r6, r0
 8003e94:	4382      	bics	r2, r0
 8003e96:	0030      	movs	r0, r6
 8003e98:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003e9a:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	920e      	str	r2, [sp, #56]	; 0x38
	W.u8[1] = H;
 8003ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ea2:	4a49      	ldr	r2, [pc, #292]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003ea4:	0209      	lsls	r1, r1, #8
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	4319      	orrs	r1, r3
	W.u8[0] = L;
 8003eaa:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003eac:	910e      	str	r1, [sp, #56]	; 0x38
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003eae:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003eb0:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003eb2:	4002      	ands	r2, r0
 8003eb4:	0209      	lsls	r1, r1, #8
 8003eb6:	4311      	orrs	r1, r2
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003eb8:	b2db      	uxtb	r3, r3
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003eba:	b2d2      	uxtb	r2, r2
	W.u8[1] = H;
 8003ebc:	910f      	str	r1, [sp, #60]	; 0x3c
    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8003ebe:	0051      	lsls	r1, r2, #1
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003ec0:	189a      	adds	r2, r3, r2
 8003ec2:	9211      	str	r2, [sp, #68]	; 0x44
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003ec4:	2298      	movs	r2, #152	; 0x98
    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8003ec6:	7561      	strb	r1, [r4, #21]
    modH->u8BufferSize         = 3;
 8003ec8:	0021      	movs	r1, r4
 8003eca:	2003      	movs	r0, #3
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003ecc:	4694      	mov	ip, r2
    modH->u8BufferSize         = 3;
 8003ece:	3193      	adds	r1, #147	; 0x93
 8003ed0:	7008      	strb	r0, [r1, #0]
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003ed2:	44a4      	add	ip, r4
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003ed4:	780a      	ldrb	r2, [r1, #0]
 8003ed6:	1c95      	adds	r5, r2, #2
 8003ed8:	b2e8      	uxtb	r0, r5
 8003eda:	9010      	str	r0, [sp, #64]	; 0x40
 8003edc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003ede:	4283      	cmp	r3, r0
 8003ee0:	db0f      	blt.n	8003f02 <StartTaskModbusSlave+0x312>
    sendTxBuffer(modH);
 8003ee2:	0020      	movs	r0, r4
 8003ee4:	f7ff fe38 	bl	8003b58 <sendTxBuffer>
				modH->i8state = process_FC3(modH);
 8003ee8:	0023      	movs	r3, r4
 8003eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eec:	33b3      	adds	r3, #179	; 0xb3
				modH->i8state = process_FC6(modH);
 8003eee:	701a      	strb	r2, [r3, #0]
	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003ef0:	0020      	movs	r0, r4
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	30c4      	adds	r0, #196	; 0xc4
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	0019      	movs	r1, r3
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	f000 fd98 	bl	8004a30 <xQueueGenericSend>
	    continue;
 8003f00:	e679      	b.n	8003bf6 <StartTaskModbusSlave+0x6>
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003f02:	4660      	mov	r0, ip
 8003f04:	6807      	ldr	r7, [r0, #0]
 8003f06:	18a0      	adds	r0, r4, r2
 8003f08:	0005      	movs	r5, r0
 8003f0a:	005e      	lsls	r6, r3, #1
 8003f0c:	5bb8      	ldrh	r0, [r7, r6]
    	modH->u8BufferSize++;
 8003f0e:	3201      	adds	r2, #1
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003f10:	0a00      	lsrs	r0, r0, #8
    	modH->u8BufferSize++;
 8003f12:	b2d2      	uxtb	r2, r2
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8003f14:	74e8      	strb	r0, [r5, #19]
    	modH->u8BufferSize++;
 8003f16:	700a      	strb	r2, [r1, #0]
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 8003f18:	5bb8      	ldrh	r0, [r7, r6]
 8003f1a:	18a2      	adds	r2, r4, r2
 8003f1c:	74d0      	strb	r0, [r2, #19]
    	modH->u8BufferSize++;
 8003f1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003f20:	3301      	adds	r3, #1
    	modH->u8BufferSize++;
 8003f22:	700a      	strb	r2, [r1, #0]
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e7d5      	b.n	8003ed4 <StartTaskModbusSlave+0x2e4>
	W.u8[0] = L;
 8003f28:	21ff      	movs	r1, #255	; 0xff
 8003f2a:	9804      	ldr	r0, [sp, #16]
 8003f2c:	7da2      	ldrb	r2, [r4, #22]
 8003f2e:	4388      	bics	r0, r1
 8003f30:	0001      	movs	r1, r0
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003f32:	7d63      	ldrb	r3, [r4, #21]
	W.u8[0] = L;
 8003f34:	4311      	orrs	r1, r2
	W.u8[1] = H;
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	431a      	orrs	r2, r3
	return W.u16[0];
 8003f3e:	466b      	mov	r3, sp
	W.u8[1] = H;
 8003f40:	9204      	str	r2, [sp, #16]
    u8currentBit = (uint8_t) (u16coil % 16);
 8003f42:	220f      	movs	r2, #15
	return W.u16[0];
 8003f44:	8a19      	ldrh	r1, [r3, #16]
    bitWrite(
 8003f46:	7de5      	ldrb	r5, [r4, #23]
    u8currentRegister = (uint8_t) (u16coil / 16);
 8003f48:	090b      	lsrs	r3, r1, #4
    u8currentBit = (uint8_t) (u16coil % 16);
 8003f4a:	4011      	ands	r1, r2
 8003f4c:	0022      	movs	r2, r4
 8003f4e:	3298      	adds	r2, #152	; 0x98
 8003f50:	6810      	ldr	r0, [r2, #0]
 8003f52:	2201      	movs	r2, #1
    u8currentRegister = (uint8_t) (u16coil / 16);
 8003f54:	b2db      	uxtb	r3, r3
    bitWrite(
 8003f56:	4093      	lsls	r3, r2
 8003f58:	408a      	lsls	r2, r1
 8003f5a:	2dff      	cmp	r5, #255	; 0xff
 8003f5c:	d10e      	bne.n	8003f7c <StartTaskModbusSlave+0x38c>
 8003f5e:	0011      	movs	r1, r2
 8003f60:	5ac2      	ldrh	r2, [r0, r3]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	52c2      	strh	r2, [r0, r3]
    modH->u8BufferSize = RESPONSE_SIZE;
 8003f66:	0023      	movs	r3, r4
 8003f68:	2206      	movs	r2, #6
 8003f6a:	3393      	adds	r3, #147	; 0x93
 8003f6c:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8003f6e:	0020      	movs	r0, r4
 8003f70:	f7ff fdf2 	bl	8003b58 <sendTxBuffer>
				modH->i8state = process_FC6(modH);
 8003f74:	0023      	movs	r3, r4
 8003f76:	2208      	movs	r2, #8
 8003f78:	33b3      	adds	r3, #179	; 0xb3
 8003f7a:	e7b8      	b.n	8003eee <StartTaskModbusSlave+0x2fe>
    bitWrite(
 8003f7c:	5ac1      	ldrh	r1, [r0, r3]
 8003f7e:	4391      	bics	r1, r2
 8003f80:	52c1      	strh	r1, [r0, r3]
    modH->u8BufferSize = 6;
 8003f82:	e7f0      	b.n	8003f66 <StartTaskModbusSlave+0x376>
	W.u8[0] = L;
 8003f84:	20ff      	movs	r0, #255	; 0xff
 8003f86:	9e03      	ldr	r6, [sp, #12]
 8003f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f8a:	4386      	bics	r6, r0
 8003f8c:	4382      	bics	r2, r0
 8003f8e:	0030      	movs	r0, r6
 8003f90:	7da3      	ldrb	r3, [r4, #22]
    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003f92:	7d61      	ldrb	r1, [r4, #21]
	W.u8[0] = L;
 8003f94:	431a      	orrs	r2, r3
 8003f96:	920d      	str	r2, [sp, #52]	; 0x34
	W.u8[1] = H;
 8003f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <StartTaskModbusSlave+0x3d8>)
 8003f9c:	0209      	lsls	r1, r1, #8
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	4319      	orrs	r1, r3
	W.u8[0] = L;
 8003fa2:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003fa4:	910d      	str	r1, [sp, #52]	; 0x34
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003fa6:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003fa8:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003faa:	0209      	lsls	r1, r1, #8
 8003fac:	4002      	ands	r2, r0
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	9203      	str	r2, [sp, #12]
    modH->au16regs[ u8add ] = u16val;
 8003fb2:	0022      	movs	r2, r4
 8003fb4:	3298      	adds	r2, #152	; 0x98
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	9903      	ldr	r1, [sp, #12]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	52d1      	strh	r1, [r2, r3]
 8003fc0:	e7d1      	b.n	8003f66 <StartTaskModbusSlave+0x376>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	080064f8 	.word	0x080064f8
 8003fc8:	ffff00ff 	.word	0xffff00ff
	W.u8[0] = L;
 8003fcc:	20ff      	movs	r0, #255	; 0xff
 8003fce:	9901      	ldr	r1, [sp, #4]
 8003fd0:	7da2      	ldrb	r2, [r4, #22]
 8003fd2:	9e02      	ldr	r6, [sp, #8]
 8003fd4:	4381      	bics	r1, r0
 8003fd6:	4311      	orrs	r1, r2
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8003fd8:	7d63      	ldrb	r3, [r4, #21]
	W.u8[1] = H;
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <StartTaskModbusSlave+0x4e4>)
	W.u8[0] = L;
 8003fdc:	4386      	bics	r6, r0
	W.u8[1] = H;
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	4011      	ands	r1, r2
	W.u8[0] = L;
 8003fe2:	0030      	movs	r0, r6
	W.u8[1] = H;
 8003fe4:	4319      	orrs	r1, r3
	return W.u16[0];
 8003fe6:	466b      	mov	r3, sp
	W.u8[0] = L;
 8003fe8:	7e25      	ldrb	r5, [r4, #24]
	W.u8[1] = H;
 8003fea:	9101      	str	r1, [sp, #4]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8003fec:	7de1      	ldrb	r1, [r4, #23]
	W.u8[0] = L;
 8003fee:	4328      	orrs	r0, r5
	W.u8[1] = H;
 8003ff0:	4002      	ands	r2, r0
	return W.u16[0];
 8003ff2:	889b      	ldrh	r3, [r3, #4]
	W.u8[1] = H;
 8003ff4:	0209      	lsls	r1, r1, #8
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	9202      	str	r2, [sp, #8]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003ffa:	18d2      	adds	r2, r2, r3
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	0027      	movs	r7, r4
 8004000:	9212      	str	r2, [sp, #72]	; 0x48
    u8frameByte = 7;
 8004002:	2007      	movs	r0, #7
    u8bitsno = 0;
 8004004:	2200      	movs	r2, #0
 8004006:	3798      	adds	r7, #152	; 0x98
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004008:	9912      	ldr	r1, [sp, #72]	; 0x48
 800400a:	428b      	cmp	r3, r1
 800400c:	d0ab      	beq.n	8003f66 <StartTaskModbusSlave+0x376>
        bitWrite(
 800400e:	210f      	movs	r1, #15
 8004010:	2501      	movs	r5, #1
 8004012:	4019      	ands	r1, r3
 8004014:	408d      	lsls	r5, r1
 8004016:	b2a9      	uxth	r1, r5
 8004018:	9110      	str	r1, [sp, #64]	; 0x40
        u8currentRegister = (uint8_t) (u16coil / 16);
 800401a:	0919      	lsrs	r1, r3, #4
 800401c:	683d      	ldr	r5, [r7, #0]
 800401e:	b2c9      	uxtb	r1, r1
 8004020:	0049      	lsls	r1, r1, #1
 8004022:	186e      	adds	r6, r5, r1
 8004024:	5a69      	ldrh	r1, [r5, r1]
        bTemp = bitRead(
 8004026:	1825      	adds	r5, r4, r0
 8004028:	7ced      	ldrb	r5, [r5, #19]
 800402a:	9111      	str	r1, [sp, #68]	; 0x44
 800402c:	4115      	asrs	r5, r2
        bitWrite(
 800402e:	2101      	movs	r1, #1
 8004030:	420d      	tst	r5, r1
 8004032:	d00d      	beq.n	8004050 <StartTaskModbusSlave+0x460>
 8004034:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004036:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004038:	4329      	orrs	r1, r5
        u8bitsno ++;
 800403a:	3201      	adds	r2, #1
 800403c:	b2d2      	uxtb	r2, r2
        bitWrite(
 800403e:	8031      	strh	r1, [r6, #0]
        if (u8bitsno > 7)
 8004040:	2a07      	cmp	r2, #7
 8004042:	d902      	bls.n	800404a <StartTaskModbusSlave+0x45a>
            u8bitsno = 0;
 8004044:	2200      	movs	r2, #0
            u8frameByte++;
 8004046:	3001      	adds	r0, #1
 8004048:	b2c0      	uxtb	r0, r0
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800404a:	3301      	adds	r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	e7db      	b.n	8004008 <StartTaskModbusSlave+0x418>
        bitWrite(
 8004050:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004052:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004054:	43a9      	bics	r1, r5
 8004056:	e7f0      	b.n	800403a <StartTaskModbusSlave+0x44a>
    modH->au8Buffer[ NB_HI ]   = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	75e3      	strb	r3, [r4, #23]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800405c:	0023      	movs	r3, r4
 800405e:	2006      	movs	r0, #6
 8004060:	3393      	adds	r3, #147	; 0x93
        modH->au16regs[ u8StartAdd + i ] = temp;
 8004062:	0026      	movs	r6, r4
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8004064:	7da2      	ldrb	r2, [r4, #22]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8004066:	7e21      	ldrb	r1, [r4, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8004068:	7018      	strb	r0, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 800406a:	0023      	movs	r3, r4
 800406c:	0049      	lsls	r1, r1, #1
 800406e:	1909      	adds	r1, r1, r4
 8004070:	0052      	lsls	r2, r2, #1
 8004072:	9110      	str	r1, [sp, #64]	; 0x40
	W.u8[0] = L;
 8004074:	30f9      	adds	r0, #249	; 0xf9
        modH->au16regs[ u8StartAdd + i ] = temp;
 8004076:	3698      	adds	r6, #152	; 0x98
    for (i = 0; i < u8regsno; i++)
 8004078:	9910      	ldr	r1, [sp, #64]	; 0x40
 800407a:	4299      	cmp	r1, r3
 800407c:	d103      	bne.n	8004086 <StartTaskModbusSlave+0x496>
    u8CopyBufferSize = modH->u8BufferSize +2;
 800407e:	0023      	movs	r3, r4
 8004080:	3393      	adds	r3, #147	; 0x93
 8004082:	781d      	ldrb	r5, [r3, #0]
 8004084:	e6d0      	b.n	8003e28 <StartTaskModbusSlave+0x238>
	W.u8[0] = L;
 8004086:	9d00      	ldr	r5, [sp, #0]
 8004088:	7edf      	ldrb	r7, [r3, #27]
 800408a:	4385      	bics	r5, r0
 800408c:	433d      	orrs	r5, r7
	W.u8[1] = H;
 800408e:	002f      	movs	r7, r5
        temp = word(
 8004090:	7e99      	ldrb	r1, [r3, #26]
	W.u8[1] = H;
 8004092:	4d10      	ldr	r5, [pc, #64]	; (80040d4 <StartTaskModbusSlave+0x4e4>)
 8004094:	0209      	lsls	r1, r1, #8
 8004096:	402f      	ands	r7, r5
 8004098:	430f      	orrs	r7, r1
        modH->au16regs[ u8StartAdd + i ] = temp;
 800409a:	6831      	ldr	r1, [r6, #0]
	W.u8[1] = H;
 800409c:	9700      	str	r7, [sp, #0]
        modH->au16regs[ u8StartAdd + i ] = temp;
 800409e:	528f      	strh	r7, [r1, r2]
    for (i = 0; i < u8regsno; i++)
 80040a0:	3302      	adds	r3, #2
 80040a2:	3202      	adds	r2, #2
 80040a4:	e7e8      	b.n	8004078 <StartTaskModbusSlave+0x488>
	    switch ( modH->au8Buffer[ FUNC ] )
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	280f      	cmp	r0, #15
 80040aa:	d900      	bls.n	80040ae <StartTaskModbusSlave+0x4be>
 80040ac:	e634      	b.n	8003d18 <StartTaskModbusSlave+0x128>
 80040ae:	f7fc f83f 	bl	8000130 <__gnu_thumb1_case_shi>
 80040b2:	fdef      	.short	0xfdef
 80040b4:	fe65fdef 	.word	0xfe65fdef
 80040b8:	fe1ffe65 	.word	0xfe1ffe65
 80040bc:	fe33fe53 	.word	0xfe33fe53
 80040c0:	fe33fe33 	.word	0xfe33fe33
 80040c4:	fe33fe33 	.word	0xfe33fe33
 80040c8:	fe33fe33 	.word	0xfe33fe33
 80040cc:	fdeffe33 	.word	0xfdeffe33
 80040d0:	fe65      	.short	0xfe65
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	ffff00ff 	.word	0xffff00ff

080040d8 <StartTaskModbusMaster>:
{
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	0004      	movs	r4, r0
 80040dc:	b08f      	sub	sp, #60	; 0x3c
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80040de:	0023      	movs	r3, r4
 80040e0:	2201      	movs	r2, #1
 80040e2:	ad0a      	add	r5, sp, #40	; 0x28
 80040e4:	33b4      	adds	r3, #180	; 0xb4
 80040e6:	0029      	movs	r1, r5
 80040e8:	4252      	negs	r2, r2
 80040ea:	6818      	ldr	r0, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80040ec:	0026      	movs	r6, r4
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80040ee:	f000 fd79 	bl	8004be4 <xQueueReceive>
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80040f2:	2101      	movs	r1, #1
	  SendQuery(modH, telegram);
 80040f4:	782b      	ldrb	r3, [r5, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80040f6:	36c4      	adds	r6, #196	; 0xc4
	  SendQuery(modH, telegram);
 80040f8:	9306      	str	r3, [sp, #24]
 80040fa:	786b      	ldrb	r3, [r5, #1]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80040fc:	4249      	negs	r1, r1
	  SendQuery(modH, telegram);
 80040fe:	9307      	str	r3, [sp, #28]
 8004100:	886b      	ldrh	r3, [r5, #2]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004102:	6830      	ldr	r0, [r6, #0]
	  SendQuery(modH, telegram);
 8004104:	9308      	str	r3, [sp, #32]
 8004106:	88ad      	ldrh	r5, [r5, #4]
 8004108:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800410a:	f000 fdf0 	bl	8004cee <xQueueSemaphoreTake>
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800410e:	0022      	movs	r2, r4
 8004110:	2100      	movs	r1, #0
 8004112:	32b3      	adds	r2, #179	; 0xb3
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
 8004116:	5651      	ldrsb	r1, [r2, r1]
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8004118:	7a23      	ldrb	r3, [r4, #8]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800411a:	22fe      	movs	r2, #254	; 0xfe
 800411c:	2900      	cmp	r1, #0
 800411e:	d103      	bne.n	8004128 <StartTaskModbusMaster+0x50>
	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	4193      	sbcs	r3, r2
 8004124:	425b      	negs	r3, r3
 8004126:	b2da      	uxtb	r2, r3
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8004128:	9b06      	ldr	r3, [sp, #24]
 800412a:	3b01      	subs	r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2bf6      	cmp	r3, #246	; 0xf6
 8004130:	d824      	bhi.n	800417c <StartTaskModbusMaster+0xa4>
	if(error)
 8004132:	2a00      	cmp	r2, #0
 8004134:	d024      	beq.n	8004180 <StartTaskModbusMaster+0xa8>
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8004136:	2300      	movs	r3, #0
		 modH->i8lastError = error;
 8004138:	74a2      	strb	r2, [r4, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800413a:	0019      	movs	r1, r3
 800413c:	001a      	movs	r2, r3
 800413e:	6830      	ldr	r0, [r6, #0]
 8004140:	f000 fc76 	bl	8004a30 <xQueueGenericSend>
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004144:	2101      	movs	r1, #1
 8004146:	2001      	movs	r0, #1
 8004148:	4249      	negs	r1, r1
 800414a:	f001 fb8b 	bl	8005864 <ulTaskNotifyTake>
	  modH->i8lastError = 0;
 800414e:	2500      	movs	r5, #0
 8004150:	74a5      	strb	r5, [r4, #18]
      if(ulNotificationValue == NO_REPLY)
 8004152:	28ff      	cmp	r0, #255	; 0xff
 8004154:	d000      	beq.n	8004158 <StartTaskModbusMaster+0x80>
 8004156:	e095      	b.n	8004284 <StartTaskModbusMaster+0x1ac>
    	  modH->i8state = COM_IDLE;
 8004158:	0023      	movs	r3, r4
 800415a:	33b3      	adds	r3, #179	; 0xb3
 800415c:	701d      	strb	r5, [r3, #0]
    	  modH->u16errCnt++;
 800415e:	0022      	movs	r2, r4
    	  modH->i8lastError = NO_REPLY;
 8004160:	23ff      	movs	r3, #255	; 0xff
    	  modH->u16errCnt++;
 8004162:	32a0      	adds	r2, #160	; 0xa0
    	  modH->i8lastError = NO_REPLY;
 8004164:	74a3      	strb	r3, [r4, #18]
    	  modH->u16errCnt++;
 8004166:	8813      	ldrh	r3, [r2, #0]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004168:	2101      	movs	r1, #1
    	  modH->u16errCnt++;
 800416a:	3301      	adds	r3, #1
 800416c:	8013      	strh	r3, [r2, #0]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800416e:	002b      	movs	r3, r5
 8004170:	2203      	movs	r2, #3
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004172:	4249      	negs	r1, r1
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8004174:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004176:	f001 fba7 	bl	80058c8 <xTaskGenericNotify>
	  continue;
 800417a:	e7b0      	b.n	80040de <StartTaskModbusMaster+0x6>
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800417c:	22f7      	movs	r2, #247	; 0xf7
 800417e:	e7da      	b.n	8004136 <StartTaskModbusMaster+0x5e>
	modH->au16regs = telegram.au16reg;
 8004180:	0023      	movs	r3, r4
 8004182:	3398      	adds	r3, #152	; 0x98
 8004184:	601f      	str	r7, [r3, #0]
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8004186:	9b06      	ldr	r3, [sp, #24]
 8004188:	74e3      	strb	r3, [r4, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 800418a:	9b07      	ldr	r3, [sp, #28]
 800418c:	7523      	strb	r3, [r4, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800418e:	9b08      	ldr	r3, [sp, #32]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	7563      	strb	r3, [r4, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8004194:	9b08      	ldr	r3, [sp, #32]
 8004196:	75a3      	strb	r3, [r4, #22]
	switch( telegram.u8fct )
 8004198:	9b07      	ldr	r3, [sp, #28]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	280f      	cmp	r0, #15
 800419e:	d810      	bhi.n	80041c2 <StartTaskModbusMaster+0xea>
 80041a0:	f7fb ffbc 	bl	800011c <__gnu_thumb1_case_uqi>
 80041a4:	08080808 	.word	0x08080808
 80041a8:	0f0f2921 	.word	0x0f0f2921
 80041ac:	0f0f0f0f 	.word	0x0f0f0f0f
 80041b0:	522e0f0f 	.word	0x522e0f0f
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80041b4:	0a2b      	lsrs	r3, r5, #8
 80041b6:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80041b8:	7625      	strb	r5, [r4, #24]
	    modH->u8BufferSize = 6;
 80041ba:	0023      	movs	r3, r4
 80041bc:	2206      	movs	r2, #6
 80041be:	3393      	adds	r3, #147	; 0x93
 80041c0:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(modH->ModBusSphrHandle);
 80041c2:	0020      	movs	r0, r4
 80041c4:	2300      	movs	r3, #0
 80041c6:	30c4      	adds	r0, #196	; 0xc4
 80041c8:	001a      	movs	r2, r3
 80041ca:	0019      	movs	r1, r3
 80041cc:	6800      	ldr	r0, [r0, #0]
 80041ce:	f000 fc2f 	bl	8004a30 <xQueueGenericSend>
	sendTxBuffer(modH);
 80041d2:	0020      	movs	r0, r4
 80041d4:	f7ff fcc0 	bl	8003b58 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 80041d8:	0023      	movs	r3, r4
 80041da:	2201      	movs	r2, #1
 80041dc:	33b3      	adds	r3, #179	; 0xb3
 80041de:	701a      	strb	r2, [r3, #0]
	modH->i8lastError = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	74a3      	strb	r3, [r4, #18]
	return 0;
 80041e4:	e7ae      	b.n	8004144 <StartTaskModbusMaster+0x6c>
	    modH->au8Buffer[ NB_HI ]      = (( telegram.au16reg[0]> 0) ? 0xff : 0);
 80041e6:	883b      	ldrh	r3, [r7, #0]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	4193      	sbcs	r3, r2
 80041ec:	425b      	negs	r3, r3
 80041ee:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 80041f0:	2300      	movs	r3, #0
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 80041f2:	7623      	strb	r3, [r4, #24]
 80041f4:	e7e1      	b.n	80041ba <StartTaskModbusMaster+0xe2>
	    modH->au8Buffer[ NB_HI ]      = highByte( telegram.au16reg[0]);
 80041f6:	883b      	ldrh	r3, [r7, #0]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.au16reg[0]);
 80041fc:	883b      	ldrh	r3, [r7, #0]
 80041fe:	e7f8      	b.n	80041f2 <StartTaskModbusMaster+0x11a>
	    u8regsno = telegram.u16CoilsNo / 16;
 8004200:	092b      	lsrs	r3, r5, #4
	    u8bytesno = u8regsno * 2;
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
	    if ((telegram.u16CoilsNo % 16) != 0)
 8004206:	072a      	lsls	r2, r5, #28
 8004208:	d001      	beq.n	800420e <StartTaskModbusMaster+0x136>
	        u8bytesno++;
 800420a:	3301      	adds	r3, #1
 800420c:	b2db      	uxtb	r3, r3
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800420e:	0a2a      	lsrs	r2, r5, #8
	    modH->u8BufferSize = 7;
 8004210:	0021      	movs	r1, r4
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004212:	75e2      	strb	r2, [r4, #23]
	    modH->u8BufferSize = 7;
 8004214:	2207      	movs	r2, #7
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8004216:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8004218:	3193      	adds	r1, #147	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800421a:	b29b      	uxth	r3, r3
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800421c:	7625      	strb	r5, [r4, #24]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800421e:	469c      	mov	ip, r3
	    modH->u8BufferSize = 7;
 8004220:	700a      	strb	r2, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004222:	2200      	movs	r2, #0
 8004224:	4562      	cmp	r2, ip
 8004226:	d2cc      	bcs.n	80041c2 <StartTaskModbusMaster+0xea>
	        if(i%2)
 8004228:	2301      	movs	r3, #1
 800422a:	0850      	lsrs	r0, r2, #1
 800422c:	0040      	lsls	r0, r0, #1
 800422e:	5bc5      	ldrh	r5, [r0, r7]
 8004230:	7808      	ldrb	r0, [r1, #0]
 8004232:	1826      	adds	r6, r4, r0
 8004234:	421a      	tst	r2, r3
 8004236:	d005      	beq.n	8004244 <StartTaskModbusMaster+0x16c>
	        modH->u8BufferSize++;
 8004238:	3001      	adds	r0, #1
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800423a:	3201      	adds	r2, #1
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 800423c:	74f5      	strb	r5, [r6, #19]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800423e:	b292      	uxth	r2, r2
	        modH->u8BufferSize++;
 8004240:	7008      	strb	r0, [r1, #0]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8004242:	e7ef      	b.n	8004224 <StartTaskModbusMaster+0x14c>
	        	modH->au8Buffer[  modH->u8BufferSize ] = highByte( telegram.au16reg[ i/2 ] );
 8004244:	0a2d      	lsrs	r5, r5, #8
 8004246:	e7f7      	b.n	8004238 <StartTaskModbusMaster+0x160>
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8004248:	0a2b      	lsrs	r3, r5, #8
 800424a:	75e3      	strb	r3, [r4, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800424c:	b2eb      	uxtb	r3, r5
 800424e:	7623      	strb	r3, [r4, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	7663      	strb	r3, [r4, #25]
	    modH->u8BufferSize = 7;
 8004254:	0023      	movs	r3, r4
 8004256:	2207      	movs	r2, #7
 8004258:	3393      	adds	r3, #147	; 0x93
 800425a:	701a      	strb	r2, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800425c:	003a      	movs	r2, r7
 800425e:	006d      	lsls	r5, r5, #1
 8004260:	197d      	adds	r5, r7, r5
 8004262:	42aa      	cmp	r2, r5
 8004264:	d0ad      	beq.n	80041c2 <StartTaskModbusMaster+0xea>
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  telegram.au16reg[ i ] );
 8004266:	7818      	ldrb	r0, [r3, #0]
 8004268:	8811      	ldrh	r1, [r2, #0]
 800426a:	1826      	adds	r6, r4, r0
 800426c:	0a09      	lsrs	r1, r1, #8
 800426e:	74f1      	strb	r1, [r6, #19]
	        modH->u8BufferSize++;
 8004270:	1c41      	adds	r1, r0, #1
 8004272:	b2c9      	uxtb	r1, r1
 8004274:	7019      	strb	r1, [r3, #0]
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 8004276:	8816      	ldrh	r6, [r2, #0]
 8004278:	1861      	adds	r1, r4, r1
	        modH->u8BufferSize++;
 800427a:	3002      	adds	r0, #2
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte( telegram.au16reg[ i ] );
 800427c:	74ce      	strb	r6, [r1, #19]
	        modH->u8BufferSize++;
 800427e:	3202      	adds	r2, #2
 8004280:	7018      	strb	r0, [r3, #0]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8004282:	e7ee      	b.n	8004262 <StartTaskModbusMaster+0x18a>
      i8state = getRxBuffer(modH);
 8004284:	0020      	movs	r0, r4
 8004286:	f7ff fb83 	bl	8003990 <getRxBuffer>
	  if (i8state < 6){
 800428a:	2805      	cmp	r0, #5
 800428c:	dc0c      	bgt.n	80042a8 <StartTaskModbusMaster+0x1d0>
		  modH->i8state = COM_IDLE;
 800428e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		  modH->u16errCnt++;
 8004290:	0022      	movs	r2, r4
		  modH->i8state = COM_IDLE;
 8004292:	701d      	strb	r5, [r3, #0]
		  modH->i8lastError = ERR_BAD_SIZE;
 8004294:	23fa      	movs	r3, #250	; 0xfa
		  modH->u16errCnt++;
 8004296:	32a0      	adds	r2, #160	; 0xa0
		  modH->i8lastError = ERR_BAD_SIZE;
 8004298:	74a3      	strb	r3, [r4, #18]
		  modH->u16errCnt++;
 800429a:	8813      	ldrh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800429c:	2106      	movs	r1, #6
		  modH->u16errCnt++;
 800429e:	3301      	adds	r3, #1
 80042a0:	8013      	strh	r3, [r2, #0]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80042a2:	002b      	movs	r3, r5
 80042a4:	2203      	movs	r2, #3
 80042a6:	e764      	b.n	8004172 <StartTaskModbusMaster+0x9a>
	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80042a8:	0020      	movs	r0, r4
 80042aa:	9500      	str	r5, [sp, #0]
 80042ac:	30c0      	adds	r0, #192	; 0xc0
 80042ae:	002a      	movs	r2, r5
 80042b0:	002b      	movs	r3, r5
 80042b2:	2103      	movs	r1, #3
 80042b4:	6800      	ldr	r0, [r0, #0]
 80042b6:	f001 fc8b 	bl	8005bd0 <xTimerGenericCommand>
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80042ba:	0023      	movs	r3, r4
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80042bc:	0020      	movs	r0, r4
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80042be:	3393      	adds	r3, #147	; 0x93
 80042c0:	781e      	ldrb	r6, [r3, #0]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80042c2:	3013      	adds	r0, #19
 80042c4:	1eb1      	subs	r1, r6, #2
 80042c6:	b2c9      	uxtb	r1, r1
 80042c8:	f7ff fc26 	bl	8003b18 <calcCRC>
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80042cc:	19a6      	adds	r6, r4, r6
 80042ce:	7c72      	ldrb	r2, [r6, #17]
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80042d0:	7cb3      	ldrb	r3, [r6, #18]
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80042d2:	0212      	lsls	r2, r2, #8
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80042d4:	4313      	orrs	r3, r2
 80042d6:	4283      	cmp	r3, r0
 80042d8:	d00d      	beq.n	80042f6 <StartTaskModbusMaster+0x21e>
    	modH->u16errCnt ++;
 80042da:	0022      	movs	r2, r4
 80042dc:	2104      	movs	r1, #4
 80042de:	32a0      	adds	r2, #160	; 0xa0
 80042e0:	8813      	ldrh	r3, [r2, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	8013      	strh	r3, [r2, #0]
        return ERR_BAD_CRC;
 80042e6:	4249      	negs	r1, r1
		 modH->i8state = COM_IDLE;
 80042e8:	0022      	movs	r2, r4
 80042ea:	2300      	movs	r3, #0
 80042ec:	32b3      	adds	r2, #179	; 0xb3
 80042ee:	7013      	strb	r3, [r2, #0]
         modH->i8lastError = u8exception;
 80042f0:	74a1      	strb	r1, [r4, #18]
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80042f2:	2203      	movs	r2, #3
 80042f4:	e73e      	b.n	8004174 <StartTaskModbusMaster+0x9c>
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 80042f6:	2214      	movs	r2, #20
 80042f8:	56a2      	ldrsb	r2, [r4, r2]
 80042fa:	7d23      	ldrb	r3, [r4, #20]
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	da06      	bge.n	800430e <StartTaskModbusMaster+0x236>
    	modH->u16errCnt ++;
 8004300:	0022      	movs	r2, r4
 8004302:	32a0      	adds	r2, #160	; 0xa0
 8004304:	8813      	ldrh	r3, [r2, #0]
 8004306:	2105      	movs	r1, #5
 8004308:	3301      	adds	r3, #1
 800430a:	8013      	strh	r3, [r2, #0]
        return ERR_EXCEPTION;
 800430c:	e7eb      	b.n	80042e6 <StartTaskModbusMaster+0x20e>
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <StartTaskModbusMaster+0x324>)
 8004310:	5caa      	ldrb	r2, [r5, r2]
 8004312:	429a      	cmp	r2, r3
 8004314:	d009      	beq.n	800432a <StartTaskModbusMaster+0x252>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004316:	3501      	adds	r5, #1
 8004318:	2d08      	cmp	r5, #8
 800431a:	d1f8      	bne.n	800430e <StartTaskModbusMaster+0x236>
    	modH->u16errCnt ++;
 800431c:	0022      	movs	r2, r4
 800431e:	32a0      	adds	r2, #160	; 0xa0
 8004320:	8813      	ldrh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 8004322:	2101      	movs	r1, #1
    	modH->u16errCnt ++;
 8004324:	3301      	adds	r3, #1
 8004326:	8013      	strh	r3, [r2, #0]
        return EXC_FUNC_CODE;
 8004328:	e7de      	b.n	80042e8 <StartTaskModbusMaster+0x210>
    return 0; // OK, no exception code thrown
 800432a:	2500      	movs	r5, #0
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800432c:	0023      	movs	r3, r4
 800432e:	2101      	movs	r1, #1
 8004330:	33c4      	adds	r3, #196	; 0xc4
	  modH->i8lastError = u8exception;
 8004332:	74a5      	strb	r5, [r4, #18]
	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	4249      	negs	r1, r1
 8004338:	f000 fcd9 	bl	8004cee <xQueueSemaphoreTake>
	  switch( modH->au8Buffer[ FUNC ] )
 800433c:	7d23      	ldrb	r3, [r4, #20]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d806      	bhi.n	8004350 <StartTaskModbusMaster+0x278>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d03e      	beq.n	80043c4 <StartTaskModbusMaster+0x2ec>
 8004346:	0027      	movs	r7, r4
 8004348:	002b      	movs	r3, r5
 800434a:	20ff      	movs	r0, #255	; 0xff
 800434c:	3798      	adds	r7, #152	; 0x98
 800434e:	e036      	b.n	80043be <StartTaskModbusMaster+0x2e6>
 8004350:	3b03      	subs	r3, #3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d836      	bhi.n	80043c4 <StartTaskModbusMaster+0x2ec>
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004356:	0021      	movs	r1, r4
	  switch( modH->au8Buffer[ FUNC ] )
 8004358:	002b      	movs	r3, r5
	W.u8[0] = L;
 800435a:	20ff      	movs	r0, #255	; 0xff
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 800435c:	3198      	adds	r1, #152	; 0x98
 800435e:	b2df      	uxtb	r7, r3
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8004360:	7d66      	ldrb	r6, [r4, #21]
 8004362:	007a      	lsls	r2, r7, #1
 8004364:	3203      	adds	r2, #3
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	0876      	lsrs	r6, r6, #1
 800436a:	42b7      	cmp	r7, r6
 800436c:	d22a      	bcs.n	80043c4 <StartTaskModbusMaster+0x2ec>
	W.u8[0] = L;
 800436e:	9d03      	ldr	r5, [sp, #12]
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004370:	18a7      	adds	r7, r4, r2
 8004372:	7cfa      	ldrb	r2, [r7, #19]
	W.u8[0] = L;
 8004374:	7d3f      	ldrb	r7, [r7, #20]
 8004376:	4385      	bics	r5, r0
 8004378:	433d      	orrs	r5, r7
	W.u8[1] = H;
 800437a:	002f      	movs	r7, r5
 800437c:	4d20      	ldr	r5, [pc, #128]	; (8004400 <StartTaskModbusMaster+0x328>)
 800437e:	0212      	lsls	r2, r2, #8
 8004380:	402f      	ands	r7, r5
 8004382:	4317      	orrs	r7, r2
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8004384:	680a      	ldr	r2, [r1, #0]
 8004386:	005e      	lsls	r6, r3, #1
	W.u8[1] = H;
 8004388:	9703      	str	r7, [sp, #12]
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 800438a:	5397      	strh	r7, [r2, r6]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 800438c:	3301      	adds	r3, #1
 800438e:	e7e6      	b.n	800435e <StartTaskModbusMaster+0x286>
        if(i%2)
 8004390:	18e2      	adds	r2, r4, r3
 8004392:	683d      	ldr	r5, [r7, #0]
 8004394:	7d91      	ldrb	r1, [r2, #22]
 8004396:	085a      	lsrs	r2, r3, #1
 8004398:	0052      	lsls	r2, r2, #1
 800439a:	18ae      	adds	r6, r5, r2
 800439c:	5aaa      	ldrh	r2, [r5, r2]
 800439e:	2501      	movs	r5, #1
 80043a0:	422b      	tst	r3, r5
 80043a2:	d01f      	beq.n	80043e4 <StartTaskModbusMaster+0x30c>
	W.u8[0] = L;
 80043a4:	9d05      	ldr	r5, [sp, #20]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	4385      	bics	r5, r0
 80043aa:	4315      	orrs	r5, r2
	W.u8[1] = H;
 80043ac:	002a      	movs	r2, r5
 80043ae:	4d14      	ldr	r5, [pc, #80]	; (8004400 <StartTaskModbusMaster+0x328>)
 80043b0:	0209      	lsls	r1, r1, #8
 80043b2:	402a      	ands	r2, r5
 80043b4:	430a      	orrs	r2, r1
 80043b6:	9205      	str	r2, [sp, #20]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80043b8:	3301      	adds	r3, #1
        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80043ba:	8032      	strh	r2, [r6, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	7d62      	ldrb	r2, [r4, #21]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d8e5      	bhi.n	8004390 <StartTaskModbusMaster+0x2b8>
	  modH->i8state = COM_IDLE;
 80043c4:	0023      	movs	r3, r4
 80043c6:	2500      	movs	r5, #0
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80043c8:	0020      	movs	r0, r4
	  modH->i8state = COM_IDLE;
 80043ca:	33b3      	adds	r3, #179	; 0xb3
 80043cc:	701d      	strb	r5, [r3, #0]
	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80043ce:	30c4      	adds	r0, #196	; 0xc4
 80043d0:	002b      	movs	r3, r5
 80043d2:	0029      	movs	r1, r5
 80043d4:	002a      	movs	r2, r5
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	f000 fb2a 	bl	8004a30 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80043dc:	2112      	movs	r1, #18
 80043de:	002b      	movs	r3, r5
 80043e0:	5661      	ldrsb	r1, [r4, r1]
 80043e2:	e786      	b.n	80042f2 <StartTaskModbusMaster+0x21a>
	W.u8[0] = L;
 80043e4:	9d04      	ldr	r5, [sp, #16]
	W.u8[1] = H;
 80043e6:	0a12      	lsrs	r2, r2, #8
	W.u8[0] = L;
 80043e8:	4385      	bics	r5, r0
 80043ea:	430d      	orrs	r5, r1
	W.u8[1] = H;
 80043ec:	0029      	movs	r1, r5
 80043ee:	4d04      	ldr	r5, [pc, #16]	; (8004400 <StartTaskModbusMaster+0x328>)
 80043f0:	0212      	lsls	r2, r2, #8
 80043f2:	4029      	ands	r1, r5
 80043f4:	4311      	orrs	r1, r2
        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80043f6:	000a      	movs	r2, r1
	W.u8[1] = H;
 80043f8:	9104      	str	r1, [sp, #16]
	return W.u16[0];
 80043fa:	e7dd      	b.n	80043b8 <StartTaskModbusMaster+0x2e0>
 80043fc:	080064f8 	.word	0x080064f8
 8004400:	ffff00ff 	.word	0xffff00ff

08004404 <HAL_UART_TxCpltCallback>:
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004404:	2300      	movs	r3, #0
{
 8004406:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8004408:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_UART_TxCpltCallback+0x48>)
{
 800440a:	b085      	sub	sp, #20
	for (i = 0; i < numberHandlers; i++ )
 800440c:	7811      	ldrb	r1, [r2, #0]
	{
	   	if (mHandlers[i]->port == huart )
 800440e:	4c10      	ldr	r4, [pc, #64]	; (8004450 <HAL_UART_TxCpltCallback+0x4c>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004410:	9303      	str	r3, [sp, #12]
	for (i = 0; i < numberHandlers; i++ )
 8004412:	4299      	cmp	r1, r3
 8004414:	dd11      	ble.n	800443a <HAL_UART_TxCpltCallback+0x36>
	   	if (mHandlers[i]->port == huart )
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	58a2      	ldr	r2, [r4, r2]
 800441a:	6855      	ldr	r5, [r2, #4]
 800441c:	4285      	cmp	r5, r0
 800441e:	d10e      	bne.n	800443e <HAL_UART_TxCpltCallback+0x3a>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8004420:	32b8      	adds	r2, #184	; 0xb8
 8004422:	ab03      	add	r3, sp, #12
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	0010      	movs	r0, r2
 8004428:	2300      	movs	r3, #0
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	001a      	movs	r2, r3
 800442e:	0019      	movs	r1, r3
 8004430:	f001 faae 	bl	8005990 <xTaskGenericNotifyFromISR>

	   		break;

	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_UART_TxCpltCallback+0x3e>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800443a:	b005      	add	sp, #20
 800443c:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < numberHandlers; i++ )
 800443e:	3301      	adds	r3, #1
 8004440:	e7e7      	b.n	8004412 <HAL_UART_TxCpltCallback+0xe>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_UART_TxCpltCallback+0x50>)
 8004446:	0552      	lsls	r2, r2, #21
 8004448:	601a      	str	r2, [r3, #0]
}
 800444a:	e7f6      	b.n	800443a <HAL_UART_TxCpltCallback+0x36>
 800444c:	20000090 	.word	0x20000090
 8004450:	2000125c 	.word	0x2000125c
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800445a:	2300      	movs	r3, #0

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_UART_RxCpltCallback+0x68>)
    {
    	if (mHandlers[i]->port == UartHandle  )
 800445e:	4c19      	ldr	r4, [pc, #100]	; (80044c4 <HAL_UART_RxCpltCallback+0x6c>)
    for (i = 0; i < numberHandlers; i++ )
 8004460:	7811      	ldrb	r1, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004462:	9303      	str	r3, [sp, #12]
    for (i = 0; i < numberHandlers; i++ )
 8004464:	4299      	cmp	r1, r3
 8004466:	dd22      	ble.n	80044ae <HAL_UART_RxCpltCallback+0x56>
    	if (mHandlers[i]->port == UartHandle  )
 8004468:	009d      	lsls	r5, r3, #2
 800446a:	5962      	ldr	r2, [r4, r5]
 800446c:	6856      	ldr	r6, [r2, #4]
 800446e:	4286      	cmp	r6, r0
 8004470:	d11e      	bne.n	80044b0 <HAL_UART_RxCpltCallback+0x58>
    	{
    		RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8004472:	0013      	movs	r3, r2
 8004474:	32c8      	adds	r2, #200	; 0xc8
 8004476:	33b2      	adds	r3, #178	; 0xb2
 8004478:	0010      	movs	r0, r2
 800447a:	7819      	ldrb	r1, [r3, #0]
 800447c:	f7ff fa42 	bl	8003904 <RingAdd>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8004480:	5963      	ldr	r3, [r4, r5]
 8004482:	2201      	movs	r2, #1
 8004484:	0019      	movs	r1, r3
 8004486:	6858      	ldr	r0, [r3, #4]
 8004488:	31b2      	adds	r1, #178	; 0xb2
 800448a:	f7ff f925 	bl	80036d8 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800448e:	5963      	ldr	r3, [r4, r5]
 8004490:	33bc      	adds	r3, #188	; 0xbc
 8004492:	681c      	ldr	r4, [r3, #0]
 8004494:	f000 ff2c 	bl	80052f0 <xTaskGetTickCountFromISR>
 8004498:	2300      	movs	r3, #0
 800449a:	0002      	movs	r2, r0
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2107      	movs	r1, #7
 80044a0:	ab03      	add	r3, sp, #12
 80044a2:	0020      	movs	r0, r4
 80044a4:	f001 fb94 	bl	8005bd0 <xTimerGenericCommand>
    		break;
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_UART_RxCpltCallback+0x5c>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80044ae:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    for (i = 0; i < numberHandlers; i++ )
 80044b0:	3301      	adds	r3, #1
 80044b2:	e7d7      	b.n	8004464 <HAL_UART_RxCpltCallback+0xc>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_UART_RxCpltCallback+0x70>)
 80044b8:	0552      	lsls	r2, r2, #21
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	e7f7      	b.n	80044ae <HAL_UART_RxCpltCallback+0x56>
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20000090 	.word	0x20000090
 80044c4:	2000125c 	.word	0x2000125c
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 80044ce:	b510      	push	{r4, lr}
  SysTick->CTRL;
 80044d0:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044d2:	f001 f8fb 	bl	80056cc <xTaskGetSchedulerState>
 80044d6:	2801      	cmp	r0, #1
 80044d8:	d001      	beq.n	80044de <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 80044da:	f001 fd43 	bl	8005f64 <xPortSysTickHandler>
  }
}
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	e000e010 	.word	0xe000e010

080044e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <osKernelInitialize+0x20>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d105      	bne.n	8004500 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 80044f8:	4770      	bx	lr
    stat = osErrorISR;
 80044fa:	2006      	movs	r0, #6
      stat = osError;
 80044fc:	4240      	negs	r0, r0
  return (stat);
 80044fe:	e7fb      	b.n	80044f8 <osKernelInitialize+0x14>
      stat = osError;
 8004500:	2001      	movs	r0, #1
 8004502:	e7fb      	b.n	80044fc <osKernelInitialize+0x18>
 8004504:	20000350 	.word	0x20000350

08004508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004508:	b510      	push	{r4, lr}
 800450a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800450e:	2c00      	cmp	r4, #0
 8004510:	d10e      	bne.n	8004530 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <osKernelStart+0x34>)
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10d      	bne.n	8004536 <osKernelStart+0x2e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800451a:	4909      	ldr	r1, [pc, #36]	; (8004540 <osKernelStart+0x38>)
 800451c:	69cb      	ldr	r3, [r1, #28]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004524:	2302      	movs	r3, #2
 8004526:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004528:	f000 fe94 	bl	8005254 <vTaskStartScheduler>
      stat = osOK;
 800452c:	0020      	movs	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800452e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004530:	2006      	movs	r0, #6
      stat = osError;
 8004532:	4240      	negs	r0, r0
  return (stat);
 8004534:	e7fb      	b.n	800452e <osKernelStart+0x26>
      stat = osError;
 8004536:	2001      	movs	r0, #1
 8004538:	e7fb      	b.n	8004532 <osKernelStart+0x2a>
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	20000350 	.word	0x20000350
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004548:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	9105      	str	r1, [sp, #20]
  hTask = NULL;
 800454e:	9207      	str	r2, [sp, #28]
 8004550:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004554:	2a00      	cmp	r2, #0
 8004556:	d124      	bne.n	80045a2 <osThreadNew+0x5e>
 8004558:	2800      	cmp	r0, #0
 800455a:	d022      	beq.n	80045a2 <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800455c:	2c00      	cmp	r4, #0
 800455e:	d038      	beq.n	80045d2 <osThreadNew+0x8e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004560:	69a5      	ldr	r5, [r4, #24]
 8004562:	2d00      	cmp	r5, #0
 8004564:	d100      	bne.n	8004568 <osThreadNew+0x24>
 8004566:	3518      	adds	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004568:	1e69      	subs	r1, r5, #1
 800456a:	002f      	movs	r7, r5
        return (NULL);
 800456c:	2200      	movs	r2, #0
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800456e:	2937      	cmp	r1, #55	; 0x37
 8004570:	d818      	bhi.n	80045a4 <osThreadNew+0x60>
 8004572:	6861      	ldr	r1, [r4, #4]
 8004574:	07cb      	lsls	r3, r1, #31
 8004576:	d415      	bmi.n	80045a4 <osThreadNew+0x60>
      }

      if (attr->stack_size > 0U) {
 8004578:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800457a:	3280      	adds	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800457c:	2e00      	cmp	r6, #0
 800457e:	d000      	beq.n	8004582 <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004580:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004582:	68a3      	ldr	r3, [r4, #8]
      if (attr->name != NULL) {
 8004584:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	68e3      	ldr	r3, [r4, #12]
 800458a:	469c      	mov	ip, r3
 800458c:	9b04      	ldr	r3, [sp, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <osThreadNew+0x66>
 8004592:	4663      	mov	r3, ip
 8004594:	2bbb      	cmp	r3, #187	; 0xbb
 8004596:	d904      	bls.n	80045a2 <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004598:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800459a:	2c00      	cmp	r4, #0
 800459c:	d001      	beq.n	80045a2 <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459e:	2e00      	cmp	r6, #0
 80045a0:	d11a      	bne.n	80045d8 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045a2:	9a07      	ldr	r2, [sp, #28]
}
 80045a4:	0010      	movs	r0, r2
 80045a6:	b009      	add	sp, #36	; 0x24
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045aa:	4663      	mov	r3, ip
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f8      	bne.n	80045a2 <osThreadNew+0x5e>
      if (mem == 0) {
 80045b0:	6924      	ldr	r4, [r4, #16]
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	d1f5      	bne.n	80045a2 <osThreadNew+0x5e>
 80045b6:	000c      	movs	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045b8:	a907      	add	r1, sp, #28
 80045ba:	9101      	str	r1, [sp, #4]
 80045bc:	9b05      	ldr	r3, [sp, #20]
 80045be:	0021      	movs	r1, r4
 80045c0:	b292      	uxth	r2, r2
 80045c2:	9700      	str	r7, [sp, #0]
 80045c4:	f000 fe1a 	bl	80051fc <xTaskCreate>
 80045c8:	2801      	cmp	r0, #1
 80045ca:	d0ea      	beq.n	80045a2 <osThreadNew+0x5e>
            hTask = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	9307      	str	r3, [sp, #28]
 80045d0:	e7e7      	b.n	80045a2 <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;
 80045d2:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 80045d4:	2280      	movs	r2, #128	; 0x80
 80045d6:	e7ef      	b.n	80045b8 <osThreadNew+0x74>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	9401      	str	r4, [sp, #4]
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	9500      	str	r5, [sp, #0]
 80045e0:	9b05      	ldr	r3, [sp, #20]
 80045e2:	f000 fde5 	bl	80051b0 <xTaskCreateStatic>
 80045e6:	9007      	str	r0, [sp, #28]
 80045e8:	e7db      	b.n	80045a2 <osThreadNew+0x5e>

080045ea <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045ea:	b510      	push	{r4, lr}
 80045ec:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80045f0:	2c00      	cmp	r4, #0
 80045f2:	d105      	bne.n	8004600 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d001      	beq.n	80045fc <osDelay+0x12>
      vTaskDelay(ticks);
 80045f8:	f000 ff68 	bl	80054cc <vTaskDelay>
    }
  }

  return (stat);
}
 80045fc:	0020      	movs	r0, r4
 80045fe:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004600:	2406      	movs	r4, #6
 8004602:	4264      	negs	r4, r4
 8004604:	e7fa      	b.n	80045fc <osDelay+0x12>

08004606 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004608:	000e      	movs	r6, r1
 800460a:	0015      	movs	r5, r2
 800460c:	f3ef 8105 	mrs	r1, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004610:	2900      	cmp	r1, #0
 8004612:	d002      	beq.n	800461a <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8004614:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004616:	0020      	movs	r0, r4
 8004618:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800461a:	2800      	cmp	r0, #0
 800461c:	d0fa      	beq.n	8004614 <osSemaphoreNew+0xe>
 800461e:	42b0      	cmp	r0, r6
 8004620:	d3f8      	bcc.n	8004614 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8004622:	2a00      	cmp	r2, #0
 8004624:	d01d      	beq.n	8004662 <osSemaphoreNew+0x5c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004626:	6893      	ldr	r3, [r2, #8]
 8004628:	68d2      	ldr	r2, [r2, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <osSemaphoreNew+0x58>
 800462e:	2a4f      	cmp	r2, #79	; 0x4f
 8004630:	d9f0      	bls.n	8004614 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8004632:	2801      	cmp	r0, #1
 8004634:	d128      	bne.n	8004688 <osSemaphoreNew+0x82>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004636:	2203      	movs	r2, #3
 8004638:	9200      	str	r2, [sp, #0]
 800463a:	000a      	movs	r2, r1
 800463c:	f000 f97d 	bl	800493a <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8004640:	1e04      	subs	r4, r0, #0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004642:	d0e7      	beq.n	8004614 <osSemaphoreNew+0xe>
 8004644:	2e00      	cmp	r6, #0
 8004646:	d018      	beq.n	800467a <osSemaphoreNew+0x74>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004648:	2300      	movs	r3, #0
 800464a:	001a      	movs	r2, r3
 800464c:	0019      	movs	r1, r3
 800464e:	f000 f9ef 	bl	8004a30 <xQueueGenericSend>
 8004652:	2801      	cmp	r0, #1
 8004654:	d011      	beq.n	800467a <osSemaphoreNew+0x74>
            vSemaphoreDelete (hSemaphore);
 8004656:	0020      	movs	r0, r4
 8004658:	f000 fc16 	bl	8004e88 <vQueueDelete>
 800465c:	e7da      	b.n	8004614 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800465e:	2a00      	cmp	r2, #0
 8004660:	d1d8      	bne.n	8004614 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8004662:	2801      	cmp	r0, #1
 8004664:	d104      	bne.n	8004670 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8004666:	2203      	movs	r2, #3
 8004668:	2100      	movs	r1, #0
 800466a:	f000 f997 	bl	800499c <xQueueGenericCreate>
 800466e:	e7e7      	b.n	8004640 <osSemaphoreNew+0x3a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004670:	0031      	movs	r1, r6
 8004672:	f000 f9cb 	bl	8004a0c <xQueueCreateCountingSemaphore>
 8004676:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 8004678:	d0cc      	beq.n	8004614 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800467a:	2d00      	cmp	r5, #0
 800467c:	d10a      	bne.n	8004694 <osSemaphoreNew+0x8e>
        vQueueAddToRegistry (hSemaphore, name);
 800467e:	0029      	movs	r1, r5
 8004680:	0020      	movs	r0, r4
 8004682:	f000 fbdb 	bl	8004e3c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8004686:	e7c6      	b.n	8004616 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004688:	001a      	movs	r2, r3
 800468a:	0031      	movs	r1, r6
 800468c:	f000 f9a9 	bl	80049e2 <xQueueCreateCountingSemaphoreStatic>
 8004690:	1e04      	subs	r4, r0, #0
      if (hSemaphore != NULL) {
 8004692:	d0bf      	beq.n	8004614 <osSemaphoreNew+0xe>
          name = attr->name;
 8004694:	682d      	ldr	r5, [r5, #0]
 8004696:	e7f2      	b.n	800467e <osSemaphoreNew+0x78>

08004698 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469a:	0014      	movs	r4, r2
 800469c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	d002      	beq.n	80046aa <osMessageQueueNew+0x12>
  hQueue = NULL;
 80046a4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80046a6:	0028      	movs	r0, r5
 80046a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0fa      	beq.n	80046a4 <osMessageQueueNew+0xc>
 80046ae:	2900      	cmp	r1, #0
 80046b0:	d0f8      	beq.n	80046a4 <osMessageQueueNew+0xc>
    if (attr != NULL) {
 80046b2:	2a00      	cmp	r2, #0
 80046b4:	d01c      	beq.n	80046f0 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80046b6:	6893      	ldr	r3, [r2, #8]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d010      	beq.n	80046e0 <osMessageQueueNew+0x48>
 80046be:	2a4f      	cmp	r2, #79	; 0x4f
 80046c0:	d9f0      	bls.n	80046a4 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80046c2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d0ed      	beq.n	80046a4 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80046c8:	000d      	movs	r5, r1
 80046ca:	4345      	muls	r5, r0
 80046cc:	6967      	ldr	r7, [r4, #20]
 80046ce:	42af      	cmp	r7, r5
 80046d0:	d3e8      	bcc.n	80046a4 <osMessageQueueNew+0xc>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80046d2:	9600      	str	r6, [sp, #0]
 80046d4:	f000 f931 	bl	800493a <xQueueGenericCreateStatic>
 80046d8:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80046da:	d0e3      	beq.n	80046a4 <osMessageQueueNew+0xc>
        name = attr->name;
 80046dc:	6824      	ldr	r4, [r4, #0]
 80046de:	e00e      	b.n	80046fe <osMessageQueueNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d1df      	bne.n	80046a4 <osMessageQueueNew+0xc>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1dc      	bne.n	80046a4 <osMessageQueueNew+0xc>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80046ea:	6963      	ldr	r3, [r4, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1d9      	bne.n	80046a4 <osMessageQueueNew+0xc>
          hQueue = xQueueCreate (msg_count, msg_size);
 80046f0:	2200      	movs	r2, #0
 80046f2:	f000 f953 	bl	800499c <xQueueGenericCreate>
 80046f6:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 80046f8:	d0d4      	beq.n	80046a4 <osMessageQueueNew+0xc>
      if (attr != NULL) {
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	d1ee      	bne.n	80046dc <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80046fe:	0021      	movs	r1, r4
 8004700:	0028      	movs	r0, r5
 8004702:	f000 fb9b 	bl	8004e3c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8004706:	e7ce      	b.n	80046a6 <osMessageQueueNew+0xe>

08004708 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <vApplicationGetIdleTaskMemory+0x10>)
 800470a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <vApplicationGetIdleTaskMemory+0x14>)
 800470e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	4770      	bx	lr
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	20000294 	.word	0x20000294
 800471c:	20000094 	.word	0x20000094

08004720 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <vApplicationGetTimerTaskMemory+0x10>)
 8004722:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <vApplicationGetTimerTaskMemory+0x14>)
 8004726:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	4770      	bx	lr
 8004730:	20000754 	.word	0x20000754
 8004734:	20000354 	.word	0x20000354

08004738 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004738:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800473a:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800473c:	3308      	adds	r3, #8
 800473e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004742:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004744:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004746:	4252      	negs	r2, r2
 8004748:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800474c:	4770      	bx	lr

0800474e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004752:	4770      	bx	lr

08004754 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004754:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004756:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004758:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800475a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004760:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004762:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004764:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004766:	3301      	adds	r3, #1
 8004768:	6003      	str	r3, [r0, #0]
}
 800476a:	4770      	bx	lr

0800476c <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800476c:	0002      	movs	r2, r0
{
 800476e:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004770:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004772:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004774:	1c63      	adds	r3, r4, #1
 8004776:	d10a      	bne.n	800478e <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004778:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800477e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004780:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004782:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004784:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004786:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004788:	3301      	adds	r3, #1
 800478a:	6003      	str	r3, [r0, #0]
}
 800478c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800478e:	0013      	movs	r3, r2
 8004790:	6852      	ldr	r2, [r2, #4]
 8004792:	6815      	ldr	r5, [r2, #0]
 8004794:	42a5      	cmp	r5, r4
 8004796:	d9fa      	bls.n	800478e <vListInsert+0x22>
 8004798:	e7ef      	b.n	800477a <vListInsert+0xe>

0800479a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800479a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800479c:	6841      	ldr	r1, [r0, #4]
 800479e:	6882      	ldr	r2, [r0, #8]
 80047a0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	4281      	cmp	r1, r0
 80047a8:	d100      	bne.n	80047ac <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047ac:	2200      	movs	r2, #0
 80047ae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	3a01      	subs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047b6:	6818      	ldr	r0, [r3, #0]
}
 80047b8:	4770      	bx	lr

080047ba <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047ba:	b510      	push	{r4, lr}
 80047bc:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047be:	f001 fb87 	bl	8005ed0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047c2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 fb90 	bl	8005ee8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047c8:	4260      	negs	r0, r4
 80047ca:	4160      	adcs	r0, r4

	return xReturn;
}
 80047cc:	bd10      	pop	{r4, pc}

080047ce <prvCopyDataToQueue>:
{
 80047ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d0:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80047d4:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047d8:	2a00      	cmp	r2, #0
 80047da:	d10c      	bne.n	80047f6 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047dc:	6807      	ldr	r7, [r0, #0]
BaseType_t xReturn = pdFALSE;
 80047de:	0015      	movs	r5, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	d104      	bne.n	80047ee <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047e4:	6880      	ldr	r0, [r0, #8]
 80047e6:	f000 ffbf 	bl	8005768 <xTaskPriorityDisinherit>
 80047ea:	0005      	movs	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ec:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047ee:	3601      	adds	r6, #1
}
 80047f0:	0028      	movs	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047f2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80047f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	d10c      	bne.n	8004814 <prvCopyDataToQueue+0x46>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047fa:	6840      	ldr	r0, [r0, #4]
 80047fc:	f001 fcf2 	bl	80061e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004800:	6863      	ldr	r3, [r4, #4]
 8004802:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004804:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004806:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004808:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800480a:	4293      	cmp	r3, r2
 800480c:	d3ef      	bcc.n	80047ee <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	e7ec      	b.n	80047ee <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004814:	68c0      	ldr	r0, [r0, #12]
 8004816:	f001 fce5 	bl	80061e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800481e:	4251      	negs	r1, r2
 8004820:	1a9a      	subs	r2, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004822:	6823      	ldr	r3, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004824:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004826:	429a      	cmp	r2, r3
 8004828:	d202      	bcs.n	8004830 <prvCopyDataToQueue+0x62>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800482a:	68a3      	ldr	r3, [r4, #8]
 800482c:	1859      	adds	r1, r3, r1
 800482e:	60e1      	str	r1, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004830:	2d02      	cmp	r5, #2
 8004832:	d105      	bne.n	8004840 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004834:	0033      	movs	r3, r6
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	4193      	sbcs	r3, r2
BaseType_t xReturn = pdFALSE;
 800483a:	2500      	movs	r5, #0
				--uxMessagesWaiting;
 800483c:	1af6      	subs	r6, r6, r3
 800483e:	e7d6      	b.n	80047ee <prvCopyDataToQueue+0x20>
BaseType_t xReturn = pdFALSE;
 8004840:	2500      	movs	r5, #0
 8004842:	e7d4      	b.n	80047ee <prvCopyDataToQueue+0x20>

08004844 <prvCopyDataFromQueue>:
{
 8004844:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004848:	0008      	movs	r0, r1
 800484a:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800484c:	2a00      	cmp	r2, #0
 800484e:	d00a      	beq.n	8004866 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004850:	68d9      	ldr	r1, [r3, #12]
 8004852:	188c      	adds	r4, r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004854:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004856:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004858:	428c      	cmp	r4, r1
 800485a:	d301      	bcc.n	8004860 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800485c:	6819      	ldr	r1, [r3, #0]
 800485e:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004860:	68d9      	ldr	r1, [r3, #12]
 8004862:	f001 fcbf 	bl	80061e4 <memcpy>
}
 8004866:	bd10      	pop	{r4, pc}

08004868 <prvUnlockQueue>:
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 800486c:	0026      	movs	r6, r4
 800486e:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 8004870:	f001 fb2e 	bl	8005ed0 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004874:	7835      	ldrb	r5, [r6, #0]
 8004876:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004878:	2d00      	cmp	r5, #0
 800487a:	dc10      	bgt.n	800489e <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 800487c:	23ff      	movs	r3, #255	; 0xff
 800487e:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 8004880:	0026      	movs	r6, r4
 8004882:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 8004884:	f001 fb30 	bl	8005ee8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004888:	f001 fb22 	bl	8005ed0 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800488c:	7835      	ldrb	r5, [r6, #0]
 800488e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004890:	2d00      	cmp	r5, #0
 8004892:	dc11      	bgt.n	80048b8 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8004894:	23ff      	movs	r3, #255	; 0xff
 8004896:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 8004898:	f001 fb26 	bl	8005ee8 <vPortExitCritical>
}
 800489c:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0eb      	beq.n	800487c <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a4:	0020      	movs	r0, r4
 80048a6:	3024      	adds	r0, #36	; 0x24
 80048a8:	f000 fe90 	bl	80055cc <xTaskRemoveFromEventList>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d001      	beq.n	80048b4 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 80048b0:	f000 ff06 	bl	80056c0 <vTaskMissedYield>
			--cTxLock;
 80048b4:	3d01      	subs	r5, #1
 80048b6:	e7de      	b.n	8004876 <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ea      	beq.n	8004894 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048be:	0020      	movs	r0, r4
 80048c0:	3010      	adds	r0, #16
 80048c2:	f000 fe83 	bl	80055cc <xTaskRemoveFromEventList>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d001      	beq.n	80048ce <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80048ca:	f000 fef9 	bl	80056c0 <vTaskMissedYield>
				--cRxLock;
 80048ce:	3d01      	subs	r5, #1
 80048d0:	e7dd      	b.n	800488e <prvUnlockQueue+0x26>

080048d2 <xQueueGenericReset>:
{
 80048d2:	b570      	push	{r4, r5, r6, lr}
 80048d4:	0004      	movs	r4, r0
 80048d6:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 80048d8:	2800      	cmp	r0, #0
 80048da:	d101      	bne.n	80048e0 <xQueueGenericReset+0xe>
 80048dc:	b672      	cpsid	i
 80048de:	e7fe      	b.n	80048de <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 80048e0:	f001 faf6 	bl	8005ed0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	434b      	muls	r3, r1
 80048ec:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ee:	1a5b      	subs	r3, r3, r1
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048f4:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048f6:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048f8:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048fa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80048fc:	22ff      	movs	r2, #255	; 0xff
 80048fe:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004900:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004902:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8004904:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 8004906:	4285      	cmp	r5, r0
 8004908:	d10e      	bne.n	8004928 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	4283      	cmp	r3, r0
 800490e:	d007      	beq.n	8004920 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004910:	0020      	movs	r0, r4
 8004912:	3010      	adds	r0, #16
 8004914:	f000 fe5a 	bl	80055cc <xTaskRemoveFromEventList>
 8004918:	2800      	cmp	r0, #0
 800491a:	d001      	beq.n	8004920 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 800491c:	f001 facc 	bl	8005eb8 <vPortYield>
	taskEXIT_CRITICAL();
 8004920:	f001 fae2 	bl	8005ee8 <vPortExitCritical>
}
 8004924:	2001      	movs	r0, #1
 8004926:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004928:	0020      	movs	r0, r4
 800492a:	3010      	adds	r0, #16
 800492c:	f7ff ff04 	bl	8004738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004930:	0020      	movs	r0, r4
 8004932:	3024      	adds	r0, #36	; 0x24
 8004934:	f7ff ff00 	bl	8004738 <vListInitialise>
 8004938:	e7f2      	b.n	8004920 <xQueueGenericReset+0x4e>

0800493a <xQueueGenericCreateStatic>:
	{
 800493a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800493c:	001c      	movs	r4, r3
 800493e:	ab06      	add	r3, sp, #24
 8004940:	781d      	ldrb	r5, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004942:	2800      	cmp	r0, #0
 8004944:	d101      	bne.n	800494a <xQueueGenericCreateStatic+0x10>
 8004946:	b672      	cpsid	i
 8004948:	e7fe      	b.n	8004948 <xQueueGenericCreateStatic+0xe>
		configASSERT( pxStaticQueue != NULL );
 800494a:	2c00      	cmp	r4, #0
 800494c:	d101      	bne.n	8004952 <xQueueGenericCreateStatic+0x18>
 800494e:	b672      	cpsid	i
 8004950:	e7fe      	b.n	8004950 <xQueueGenericCreateStatic+0x16>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004952:	2a00      	cmp	r2, #0
 8004954:	d003      	beq.n	800495e <xQueueGenericCreateStatic+0x24>
 8004956:	2900      	cmp	r1, #0
 8004958:	d105      	bne.n	8004966 <xQueueGenericCreateStatic+0x2c>
 800495a:	b672      	cpsid	i
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800495e:	2900      	cmp	r1, #0
 8004960:	d001      	beq.n	8004966 <xQueueGenericCreateStatic+0x2c>
 8004962:	b672      	cpsid	i
 8004964:	e7fe      	b.n	8004964 <xQueueGenericCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004966:	2350      	movs	r3, #80	; 0x50
 8004968:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800496a:	9b01      	ldr	r3, [sp, #4]
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d001      	beq.n	8004974 <xQueueGenericCreateStatic+0x3a>
 8004970:	b672      	cpsid	i
 8004972:	e7fe      	b.n	8004972 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004974:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004976:	0023      	movs	r3, r4
 8004978:	2601      	movs	r6, #1
 800497a:	3346      	adds	r3, #70	; 0x46
 800497c:	701e      	strb	r6, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800497e:	2900      	cmp	r1, #0
 8004980:	d100      	bne.n	8004984 <xQueueGenericCreateStatic+0x4a>
 8004982:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004984:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004986:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004988:	0020      	movs	r0, r4
 800498a:	2101      	movs	r1, #1
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	f7ff ffa0 	bl	80048d2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004992:	0023      	movs	r3, r4
 8004994:	334c      	adds	r3, #76	; 0x4c
	}
 8004996:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004998:	701d      	strb	r5, [r3, #0]
	}
 800499a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800499c <xQueueGenericCreate>:
	{
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	0006      	movs	r6, r0
 80049a0:	000d      	movs	r5, r1
 80049a2:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d101      	bne.n	80049ac <xQueueGenericCreate+0x10>
 80049a8:	b672      	cpsid	i
 80049aa:	e7fe      	b.n	80049aa <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	0008      	movs	r0, r1
 80049ae:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049b0:	3050      	adds	r0, #80	; 0x50
 80049b2:	f001 fb45 	bl	8006040 <pvPortMalloc>
 80049b6:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80049b8:	d011      	beq.n	80049de <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049ba:	0003      	movs	r3, r0
 80049bc:	2200      	movs	r2, #0
 80049be:	3346      	adds	r3, #70	; 0x46
 80049c0:	701a      	strb	r2, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80049c2:	0003      	movs	r3, r0
 80049c4:	4295      	cmp	r5, r2
 80049c6:	d000      	beq.n	80049ca <xQueueGenericCreate+0x2e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c8:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ca:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049cc:	2101      	movs	r1, #1
 80049ce:	0020      	movs	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 80049d0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049d4:	f7ff ff7d 	bl	80048d2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80049d8:	0023      	movs	r3, r4
 80049da:	334c      	adds	r3, #76	; 0x4c
 80049dc:	701f      	strb	r7, [r3, #0]
	}
 80049de:	0020      	movs	r0, r4
 80049e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049e2 <xQueueCreateCountingSemaphoreStatic>:
	{
 80049e2:	b513      	push	{r0, r1, r4, lr}
 80049e4:	0013      	movs	r3, r2
 80049e6:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d101      	bne.n	80049f0 <xQueueCreateCountingSemaphoreStatic+0xe>
 80049ec:	b672      	cpsid	i
 80049ee:	e7fe      	b.n	80049ee <xQueueCreateCountingSemaphoreStatic+0xc>
		configASSERT( uxInitialCount <= uxMaxCount );
 80049f0:	4288      	cmp	r0, r1
 80049f2:	d201      	bcs.n	80049f8 <xQueueCreateCountingSemaphoreStatic+0x16>
 80049f4:	b672      	cpsid	i
 80049f6:	e7fe      	b.n	80049f6 <xQueueCreateCountingSemaphoreStatic+0x14>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80049f8:	2202      	movs	r2, #2
 80049fa:	9200      	str	r2, [sp, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	0011      	movs	r1, r2
 8004a00:	f7ff ff9b 	bl	800493a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d000      	beq.n	8004a0a <xQueueCreateCountingSemaphoreStatic+0x28>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a08:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004a0a:	bd16      	pop	{r1, r2, r4, pc}

08004a0c <xQueueCreateCountingSemaphore>:
	{
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d101      	bne.n	8004a18 <xQueueCreateCountingSemaphore+0xc>
 8004a14:	b672      	cpsid	i
 8004a16:	e7fe      	b.n	8004a16 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a18:	4288      	cmp	r0, r1
 8004a1a:	d201      	bcs.n	8004a20 <xQueueCreateCountingSemaphore+0x14>
 8004a1c:	b672      	cpsid	i
 8004a1e:	e7fe      	b.n	8004a1e <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a20:	2202      	movs	r2, #2
 8004a22:	2100      	movs	r1, #0
 8004a24:	f7ff ffba 	bl	800499c <xQueueGenericCreate>
		if( xHandle != NULL )
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d000      	beq.n	8004a2e <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a2c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <xQueueGenericSend>:
{
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b085      	sub	sp, #20
 8004a34:	0004      	movs	r4, r0
 8004a36:	000d      	movs	r5, r1
 8004a38:	001f      	movs	r7, r3
 8004a3a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d101      	bne.n	8004a44 <xQueueGenericSend+0x14>
 8004a40:	b672      	cpsid	i
 8004a42:	e7fe      	b.n	8004a42 <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d104      	bne.n	8004a52 <xQueueGenericSend+0x22>
 8004a48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <xQueueGenericSend+0x22>
 8004a4e:	b672      	cpsid	i
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a52:	2f02      	cmp	r7, #2
 8004a54:	d104      	bne.n	8004a60 <xQueueGenericSend+0x30>
 8004a56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <xQueueGenericSend+0x30>
 8004a5c:	b672      	cpsid	i
 8004a5e:	e7fe      	b.n	8004a5e <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a60:	f000 fe34 	bl	80056cc <xTaskGetSchedulerState>
 8004a64:	1e06      	subs	r6, r0, #0
 8004a66:	d104      	bne.n	8004a72 <xQueueGenericSend+0x42>
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04d      	beq.n	8004b0a <xQueueGenericSend+0xda>
 8004a6e:	b672      	cpsid	i
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericSend+0x40>
 8004a72:	2600      	movs	r6, #0
 8004a74:	e049      	b.n	8004b0a <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericSend+0x56>
					taskEXIT_CRITICAL();
 8004a7e:	f001 fa33 	bl	8005ee8 <vPortExitCritical>
			return errQUEUE_FULL;
 8004a82:	2000      	movs	r0, #0
 8004a84:	e05c      	b.n	8004b40 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d102      	bne.n	8004a90 <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a8a:	a802      	add	r0, sp, #8
 8004a8c:	f000 fdda 	bl	8005644 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004a90:	f001 fa2a 	bl	8005ee8 <vPortExitCritical>
		vTaskSuspendAll();
 8004a94:	f000 fc1e 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a98:	f001 fa1a 	bl	8005ed0 <vPortEnterCritical>
 8004a9c:	0022      	movs	r2, r4
 8004a9e:	3244      	adds	r2, #68	; 0x44
 8004aa0:	7813      	ldrb	r3, [r2, #0]
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	d101      	bne.n	8004aac <xQueueGenericSend+0x7c>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	7013      	strb	r3, [r2, #0]
 8004aac:	0022      	movs	r2, r4
 8004aae:	3245      	adds	r2, #69	; 0x45
 8004ab0:	7813      	ldrb	r3, [r2, #0]
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	d101      	bne.n	8004abc <xQueueGenericSend+0x8c>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	7013      	strb	r3, [r2, #0]
 8004abc:	f001 fa14 	bl	8005ee8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ac0:	a901      	add	r1, sp, #4
 8004ac2:	a802      	add	r0, sp, #8
 8004ac4:	f000 fdca 	bl	800565c <xTaskCheckForTimeOut>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d13b      	bne.n	8004b44 <xQueueGenericSend+0x114>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004acc:	f001 fa00 	bl	8005ed0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d110      	bne.n	8004afa <xQueueGenericSend+0xca>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004ad8:	f001 fa06 	bl	8005ee8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004adc:	0020      	movs	r0, r4
 8004ade:	9901      	ldr	r1, [sp, #4]
 8004ae0:	3010      	adds	r0, #16
 8004ae2:	f000 fd49 	bl	8005578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	f7ff febe 	bl	8004868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aec:	f000 fc86 	bl	80053fc <xTaskResumeAll>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d109      	bne.n	8004b08 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004af4:	f001 f9e0 	bl	8005eb8 <vPortYield>
 8004af8:	e006      	b.n	8004b08 <xQueueGenericSend+0xd8>
	taskEXIT_CRITICAL();
 8004afa:	f001 f9f5 	bl	8005ee8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004afe:	0020      	movs	r0, r4
 8004b00:	f7ff feb2 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b04:	f000 fc7a 	bl	80053fc <xTaskResumeAll>
 8004b08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004b0a:	f001 f9e1 	bl	8005ed0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d301      	bcc.n	8004b1a <xQueueGenericSend+0xea>
 8004b16:	2f02      	cmp	r7, #2
 8004b18:	d1ad      	bne.n	8004a76 <xQueueGenericSend+0x46>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b1a:	003a      	movs	r2, r7
 8004b1c:	0029      	movs	r1, r5
 8004b1e:	0020      	movs	r0, r4
 8004b20:	f7ff fe55 	bl	80047ce <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <xQueueGenericSend+0x102>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	3024      	adds	r0, #36	; 0x24
 8004b2e:	f000 fd4d 	bl	80055cc <xTaskRemoveFromEventList>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d001      	beq.n	8004b3a <xQueueGenericSend+0x10a>
							queueYIELD_IF_USING_PREEMPTION();
 8004b36:	f001 f9bf 	bl	8005eb8 <vPortYield>
				taskEXIT_CRITICAL();
 8004b3a:	f001 f9d5 	bl	8005ee8 <vPortExitCritical>
				return pdPASS;
 8004b3e:	2001      	movs	r0, #1
}
 8004b40:	b005      	add	sp, #20
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8004b44:	0020      	movs	r0, r4
 8004b46:	f7ff fe8f 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b4a:	f000 fc57 	bl	80053fc <xTaskResumeAll>
 8004b4e:	e798      	b.n	8004a82 <xQueueGenericSend+0x52>

08004b50 <xQueueGenericSendFromISR>:
{
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	0004      	movs	r4, r0
 8004b56:	0017      	movs	r7, r2
 8004b58:	001e      	movs	r6, r3
 8004b5a:	9101      	str	r1, [sp, #4]
	configASSERT( pxQueue );
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d101      	bne.n	8004b64 <xQueueGenericSendFromISR+0x14>
 8004b60:	b672      	cpsid	i
 8004b62:	e7fe      	b.n	8004b62 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b64:	9b01      	ldr	r3, [sp, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <xQueueGenericSendFromISR+0x24>
 8004b6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <xQueueGenericSendFromISR+0x24>
 8004b70:	b672      	cpsid	i
 8004b72:	e7fe      	b.n	8004b72 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b74:	2e02      	cmp	r6, #2
 8004b76:	d104      	bne.n	8004b82 <xQueueGenericSendFromISR+0x32>
 8004b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <xQueueGenericSendFromISR+0x32>
 8004b7e:	b672      	cpsid	i
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b82:	f001 f9bf 	bl	8005f04 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b8a:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d302      	bcc.n	8004b96 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 8004b90:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b92:	2e02      	cmp	r6, #2
 8004b94:	d11b      	bne.n	8004bce <xQueueGenericSendFromISR+0x7e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b96:	0023      	movs	r3, r4
 8004b98:	3345      	adds	r3, #69	; 0x45
 8004b9a:	9302      	str	r3, [sp, #8]
 8004b9c:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b9e:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ba0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba2:	0020      	movs	r0, r4
 8004ba4:	9901      	ldr	r1, [sp, #4]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba8:	f7ff fe11 	bl	80047ce <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004bac:	1c6b      	adds	r3, r5, #1
 8004bae:	d114      	bne.n	8004bda <xQueueGenericSendFromISR+0x8a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
 8004bb6:	2501      	movs	r5, #1
 8004bb8:	e009      	b.n	8004bce <xQueueGenericSendFromISR+0x7e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bba:	0020      	movs	r0, r4
 8004bbc:	3024      	adds	r0, #36	; 0x24
 8004bbe:	f000 fd05 	bl	80055cc <xTaskRemoveFromEventList>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d0f7      	beq.n	8004bb6 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d0f5      	beq.n	8004bb6 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bca:	2501      	movs	r5, #1
 8004bcc:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004bce:	9803      	ldr	r0, [sp, #12]
 8004bd0:	f001 f99c 	bl	8005f0c <vClearInterruptMaskFromISR>
}
 8004bd4:	0028      	movs	r0, r5
 8004bd6:	b005      	add	sp, #20
 8004bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	3501      	adds	r5, #1
 8004bde:	b26d      	sxtb	r5, r5
 8004be0:	701d      	strb	r5, [r3, #0]
 8004be2:	e7e8      	b.n	8004bb6 <xQueueGenericSendFromISR+0x66>

08004be4 <xQueueReceive>:
{
 8004be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	0004      	movs	r4, r0
 8004bea:	000f      	movs	r7, r1
 8004bec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d101      	bne.n	8004bf6 <xQueueReceive+0x12>
 8004bf2:	b672      	cpsid	i
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueReceive+0x10>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d104      	bne.n	8004c04 <xQueueReceive+0x20>
 8004bfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <xQueueReceive+0x20>
 8004c00:	b672      	cpsid	i
 8004c02:	e7fe      	b.n	8004c02 <xQueueReceive+0x1e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c04:	f000 fd62 	bl	80056cc <xTaskGetSchedulerState>
 8004c08:	1e06      	subs	r6, r0, #0
 8004c0a:	d104      	bne.n	8004c16 <xQueueReceive+0x32>
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d041      	beq.n	8004c96 <xQueueReceive+0xb2>
 8004c12:	b672      	cpsid	i
 8004c14:	e7fe      	b.n	8004c14 <xQueueReceive+0x30>
 8004c16:	2600      	movs	r6, #0
 8004c18:	e03d      	b.n	8004c96 <xQueueReceive+0xb2>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c1a:	9d01      	ldr	r5, [sp, #4]
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	d103      	bne.n	8004c28 <xQueueReceive+0x44>
					taskEXIT_CRITICAL();
 8004c20:	f001 f962 	bl	8005ee8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004c24:	2000      	movs	r0, #0
 8004c26:	e04f      	b.n	8004cc8 <xQueueReceive+0xe4>
				else if( xEntryTimeSet == pdFALSE )
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	d102      	bne.n	8004c32 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c2c:	a802      	add	r0, sp, #8
 8004c2e:	f000 fd09 	bl	8005644 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004c32:	f001 f959 	bl	8005ee8 <vPortExitCritical>
		vTaskSuspendAll();
 8004c36:	f000 fb4d 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c3a:	f001 f949 	bl	8005ed0 <vPortEnterCritical>
 8004c3e:	0022      	movs	r2, r4
 8004c40:	3244      	adds	r2, #68	; 0x44
 8004c42:	7813      	ldrb	r3, [r2, #0]
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	d101      	bne.n	8004c4e <xQueueReceive+0x6a>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	7013      	strb	r3, [r2, #0]
 8004c4e:	0022      	movs	r2, r4
 8004c50:	3245      	adds	r2, #69	; 0x45
 8004c52:	7813      	ldrb	r3, [r2, #0]
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	d101      	bne.n	8004c5e <xQueueReceive+0x7a>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	7013      	strb	r3, [r2, #0]
 8004c5e:	f001 f943 	bl	8005ee8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c62:	a901      	add	r1, sp, #4
 8004c64:	a802      	add	r0, sp, #8
 8004c66:	f000 fcf9 	bl	800565c <xTaskCheckForTimeOut>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d134      	bne.n	8004cd8 <xQueueReceive+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c6e:	0020      	movs	r0, r4
 8004c70:	f7ff fda3 	bl	80047ba <prvIsQueueEmpty>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d029      	beq.n	8004ccc <xQueueReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c78:	0020      	movs	r0, r4
 8004c7a:	9901      	ldr	r1, [sp, #4]
 8004c7c:	3024      	adds	r0, #36	; 0x24
 8004c7e:	f000 fc7b 	bl	8005578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c82:	0020      	movs	r0, r4
 8004c84:	f7ff fdf0 	bl	8004868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c88:	f000 fbb8 	bl	80053fc <xTaskResumeAll>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d101      	bne.n	8004c94 <xQueueReceive+0xb0>
					portYIELD_WITHIN_API();
 8004c90:	f001 f912 	bl	8005eb8 <vPortYield>
 8004c94:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004c96:	f001 f91b 	bl	8005ed0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	d0bc      	beq.n	8004c1a <xQueueReceive+0x36>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca0:	0039      	movs	r1, r7
 8004ca2:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ca4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca6:	f7ff fdcd 	bl	8004844 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004caa:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <xQueueReceive+0xde>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb2:	0020      	movs	r0, r4
 8004cb4:	3010      	adds	r0, #16
 8004cb6:	f000 fc89 	bl	80055cc <xTaskRemoveFromEventList>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d001      	beq.n	8004cc2 <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 8004cbe:	f001 f8fb 	bl	8005eb8 <vPortYield>
				taskEXIT_CRITICAL();
 8004cc2:	f001 f911 	bl	8005ee8 <vPortExitCritical>
				return pdPASS;
 8004cc6:	2001      	movs	r0, #1
}
 8004cc8:	b005      	add	sp, #20
 8004cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004ccc:	0020      	movs	r0, r4
 8004cce:	f7ff fdcb 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd2:	f000 fb93 	bl	80053fc <xTaskResumeAll>
 8004cd6:	e7dd      	b.n	8004c94 <xQueueReceive+0xb0>
			prvUnlockQueue( pxQueue );
 8004cd8:	0020      	movs	r0, r4
 8004cda:	f7ff fdc5 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cde:	f000 fb8d 	bl	80053fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce2:	0020      	movs	r0, r4
 8004ce4:	f7ff fd69 	bl	80047ba <prvIsQueueEmpty>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0d3      	beq.n	8004c94 <xQueueReceive+0xb0>
 8004cec:	e79a      	b.n	8004c24 <xQueueReceive+0x40>

08004cee <xQueueSemaphoreTake>:
{
 8004cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	1e04      	subs	r4, r0, #0
 8004cf4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004cf6:	d101      	bne.n	8004cfc <xQueueSemaphoreTake+0xe>
 8004cf8:	b672      	cpsid	i
 8004cfa:	e7fe      	b.n	8004cfa <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cfc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	d001      	beq.n	8004d06 <xQueueSemaphoreTake+0x18>
 8004d02:	b672      	cpsid	i
 8004d04:	e7fe      	b.n	8004d04 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d06:	f000 fce1 	bl	80056cc <xTaskGetSchedulerState>
 8004d0a:	1e06      	subs	r6, r0, #0
 8004d0c:	d104      	bne.n	8004d18 <xQueueSemaphoreTake+0x2a>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <xQueueSemaphoreTake+0x30>
 8004d14:	b672      	cpsid	i
 8004d16:	e7fe      	b.n	8004d16 <xQueueSemaphoreTake+0x28>
 8004d18:	002e      	movs	r6, r5
 8004d1a:	2701      	movs	r7, #1
 8004d1c:	e04d      	b.n	8004dba <xQueueSemaphoreTake+0xcc>
 8004d1e:	0005      	movs	r5, r0
 8004d20:	e7fb      	b.n	8004d1a <xQueueSemaphoreTake+0x2c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <xQueueSemaphoreTake+0x48>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d28:	2d00      	cmp	r5, #0
 8004d2a:	d001      	beq.n	8004d30 <xQueueSemaphoreTake+0x42>
 8004d2c:	b672      	cpsid	i
 8004d2e:	e7fe      	b.n	8004d2e <xQueueSemaphoreTake+0x40>
					taskEXIT_CRITICAL();
 8004d30:	f001 f8da 	bl	8005ee8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004d34:	e05c      	b.n	8004df0 <xQueueSemaphoreTake+0x102>
				else if( xEntryTimeSet == pdFALSE )
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	d102      	bne.n	8004d40 <xQueueSemaphoreTake+0x52>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d3a:	a802      	add	r0, sp, #8
 8004d3c:	f000 fc82 	bl	8005644 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004d40:	f001 f8d2 	bl	8005ee8 <vPortExitCritical>
		vTaskSuspendAll();
 8004d44:	f000 fac6 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d48:	f001 f8c2 	bl	8005ed0 <vPortEnterCritical>
 8004d4c:	0022      	movs	r2, r4
 8004d4e:	3244      	adds	r2, #68	; 0x44
 8004d50:	7813      	ldrb	r3, [r2, #0]
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	3301      	adds	r3, #1
 8004d56:	d101      	bne.n	8004d5c <xQueueSemaphoreTake+0x6e>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	7013      	strb	r3, [r2, #0]
 8004d5c:	0022      	movs	r2, r4
 8004d5e:	3245      	adds	r2, #69	; 0x45
 8004d60:	7813      	ldrb	r3, [r2, #0]
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	3301      	adds	r3, #1
 8004d66:	d101      	bne.n	8004d6c <xQueueSemaphoreTake+0x7e>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	7013      	strb	r3, [r2, #0]
 8004d6c:	f001 f8bc 	bl	8005ee8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d70:	a901      	add	r1, sp, #4
 8004d72:	a802      	add	r0, sp, #8
 8004d74:	f000 fc72 	bl	800565c <xTaskCheckForTimeOut>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d142      	bne.n	8004e02 <xQueueSemaphoreTake+0x114>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7c:	0020      	movs	r0, r4
 8004d7e:	f7ff fd1c 	bl	80047ba <prvIsQueueEmpty>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d037      	beq.n	8004df6 <xQueueSemaphoreTake+0x108>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <xQueueSemaphoreTake+0xae>
						taskENTER_CRITICAL();
 8004d8c:	f001 f8a0 	bl	8005ed0 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d90:	68a0      	ldr	r0, [r4, #8]
 8004d92:	f000 fcab 	bl	80056ec <xTaskPriorityInherit>
 8004d96:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
 8004d98:	f001 f8a6 	bl	8005ee8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d9c:	0020      	movs	r0, r4
 8004d9e:	9901      	ldr	r1, [sp, #4]
 8004da0:	3024      	adds	r0, #36	; 0x24
 8004da2:	f000 fbe9 	bl	8005578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004da6:	0020      	movs	r0, r4
 8004da8:	f7ff fd5e 	bl	8004868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dac:	f000 fb26 	bl	80053fc <xTaskResumeAll>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d101      	bne.n	8004db8 <xQueueSemaphoreTake+0xca>
					portYIELD_WITHIN_API();
 8004db4:	f001 f880 	bl	8005eb8 <vPortYield>
 8004db8:	003e      	movs	r6, r7
		taskENTER_CRITICAL();
 8004dba:	f001 f889 	bl	8005ed0 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ae      	beq.n	8004d22 <xQueueSemaphoreTake+0x34>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <xQueueSemaphoreTake+0xe6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dce:	f000 fd3d 	bl	800584c <pvTaskIncrementMutexHeldCount>
 8004dd2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <xQueueSemaphoreTake+0xfc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dda:	0020      	movs	r0, r4
 8004ddc:	3010      	adds	r0, #16
 8004dde:	f000 fbf5 	bl	80055cc <xTaskRemoveFromEventList>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d001      	beq.n	8004dea <xQueueSemaphoreTake+0xfc>
						queueYIELD_IF_USING_PREEMPTION();
 8004de6:	f001 f867 	bl	8005eb8 <vPortYield>
				taskEXIT_CRITICAL();
 8004dea:	f001 f87d 	bl	8005ee8 <vPortExitCritical>
				return pdPASS;
 8004dee:	2501      	movs	r5, #1
}
 8004df0:	0028      	movs	r0, r5
 8004df2:	b005      	add	sp, #20
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004df6:	0020      	movs	r0, r4
 8004df8:	f7ff fd36 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dfc:	f000 fafe 	bl	80053fc <xTaskResumeAll>
 8004e00:	e7da      	b.n	8004db8 <xQueueSemaphoreTake+0xca>
			prvUnlockQueue( pxQueue );
 8004e02:	0020      	movs	r0, r4
 8004e04:	f7ff fd30 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e08:	f000 faf8 	bl	80053fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e0c:	0020      	movs	r0, r4
 8004e0e:	f7ff fcd4 	bl	80047ba <prvIsQueueEmpty>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d0d0      	beq.n	8004db8 <xQueueSemaphoreTake+0xca>
					if( xInheritanceOccurred != pdFALSE )
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	d0ea      	beq.n	8004df0 <xQueueSemaphoreTake+0x102>
						taskENTER_CRITICAL();
 8004e1a:	f001 f859 	bl	8005ed0 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d003      	beq.n	8004e2c <xQueueSemaphoreTake+0x13e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e24:	2138      	movs	r1, #56	; 0x38
 8004e26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e2c:	68a0      	ldr	r0, [r4, #8]
 8004e2e:	f000 fcd1 	bl	80057d4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8004e32:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8004e34:	f001 f858 	bl	8005ee8 <vPortExitCritical>
 8004e38:	e7da      	b.n	8004df0 <xQueueSemaphoreTake+0x102>
	...

08004e3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e3c:	2300      	movs	r3, #0
	{
 8004e3e:	b570      	push	{r4, r5, r6, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e40:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <vQueueAddToRegistry+0x20>)
 8004e42:	00dd      	lsls	r5, r3, #3
 8004e44:	18ac      	adds	r4, r5, r2
 8004e46:	6826      	ldr	r6, [r4, #0]
 8004e48:	2e00      	cmp	r6, #0
 8004e4a:	d102      	bne.n	8004e52 <vQueueAddToRegistry+0x16>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e4c:	50a9      	str	r1, [r5, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e4e:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e52:	3301      	adds	r3, #1
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d1f4      	bne.n	8004e42 <vQueueAddToRegistry+0x6>
 8004e58:	e7fa      	b.n	8004e50 <vQueueAddToRegistry+0x14>
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	200018ac 	.word	0x200018ac

08004e60 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <vQueueUnregisterQueue+0x24>)
 8004e62:	2300      	movs	r3, #0
 8004e64:	0011      	movs	r1, r2
	{
 8004e66:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e68:	6854      	ldr	r4, [r2, #4]
 8004e6a:	4284      	cmp	r4, r0
 8004e6c:	d105      	bne.n	8004e7a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e6e:	2200      	movs	r2, #0
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	50ca      	str	r2, [r1, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e74:	18cb      	adds	r3, r1, r3
 8004e76:	605a      	str	r2, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e78:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	3208      	adds	r2, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d1f2      	bne.n	8004e68 <vQueueUnregisterQueue+0x8>
 8004e82:	e7f9      	b.n	8004e78 <vQueueUnregisterQueue+0x18>
 8004e84:	200018ac 	.word	0x200018ac

08004e88 <vQueueDelete>:
{
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	1e04      	subs	r4, r0, #0
	configASSERT( pxQueue );
 8004e8c:	d101      	bne.n	8004e92 <vQueueDelete+0xa>
 8004e8e:	b672      	cpsid	i
 8004e90:	e7fe      	b.n	8004e90 <vQueueDelete+0x8>
		vQueueUnregisterQueue( pxQueue );
 8004e92:	f7ff ffe5 	bl	8004e60 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e96:	0023      	movs	r3, r4
 8004e98:	3346      	adds	r3, #70	; 0x46
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <vQueueDelete+0x1e>
			vPortFree( pxQueue );
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	f001 f94f 	bl	8006144 <vPortFree>
}
 8004ea6:	bd10      	pop	{r4, pc}

08004ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	0004      	movs	r4, r0
 8004eac:	0016      	movs	r6, r2
 8004eae:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eb0:	f001 f80e 	bl	8005ed0 <vPortEnterCritical>
 8004eb4:	0022      	movs	r2, r4
 8004eb6:	3244      	adds	r2, #68	; 0x44
 8004eb8:	7813      	ldrb	r3, [r2, #0]
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <vQueueWaitForMessageRestricted+0x1c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	7013      	strb	r3, [r2, #0]
 8004ec4:	0022      	movs	r2, r4
 8004ec6:	3245      	adds	r2, #69	; 0x45
 8004ec8:	7813      	ldrb	r3, [r2, #0]
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <vQueueWaitForMessageRestricted+0x2c>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	7013      	strb	r3, [r2, #0]
 8004ed4:	f001 f808 	bl	8005ee8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x42>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ede:	0020      	movs	r0, r4
 8004ee0:	0032      	movs	r2, r6
 8004ee2:	0029      	movs	r1, r5
 8004ee4:	3024      	adds	r0, #36	; 0x24
 8004ee6:	f000 fb59 	bl	800559c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eea:	0020      	movs	r0, r4
 8004eec:	f7ff fcbc 	bl	8004868 <prvUnlockQueue>
	}
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ef4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ef8:	f000 ffea 	bl	8005ed0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <prvAddNewTaskToReadyList+0xb4>)
		if( pxCurrentTCB == NULL )
 8004efe:	4d2b      	ldr	r5, [pc, #172]	; (8004fac <prvAddNewTaskToReadyList+0xb8>)
		uxCurrentNumberOfTasks++;
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	3201      	adds	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004f06:	682e      	ldr	r6, [r5, #0]
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	d142      	bne.n	8004f92 <prvAddNewTaskToReadyList+0x9e>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f0c:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d11e      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f14:	2714      	movs	r7, #20
 8004f16:	0038      	movs	r0, r7
 8004f18:	4370      	muls	r0, r6
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <prvAddNewTaskToReadyList+0xbc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f1c:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f1e:	1818      	adds	r0, r3, r0
 8004f20:	f7ff fc0a 	bl	8004738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f24:	2e38      	cmp	r6, #56	; 0x38
 8004f26:	d1f6      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x22>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f28:	4f22      	ldr	r7, [pc, #136]	; (8004fb4 <prvAddNewTaskToReadyList+0xc0>)
 8004f2a:	0038      	movs	r0, r7
 8004f2c:	f7ff fc04 	bl	8004738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f30:	4e21      	ldr	r6, [pc, #132]	; (8004fb8 <prvAddNewTaskToReadyList+0xc4>)
 8004f32:	0030      	movs	r0, r6
 8004f34:	f7ff fc00 	bl	8004738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f38:	4820      	ldr	r0, [pc, #128]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f3a:	f7ff fbfd 	bl	8004738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f3e:	4820      	ldr	r0, [pc, #128]	; (8004fc0 <prvAddNewTaskToReadyList+0xcc>)
 8004f40:	f7ff fbfa 	bl	8004738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f44:	481f      	ldr	r0, [pc, #124]	; (8004fc4 <prvAddNewTaskToReadyList+0xd0>)
 8004f46:	f7ff fbf7 	bl	8004738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <prvAddNewTaskToReadyList+0xd4>)
 8004f4c:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <prvAddNewTaskToReadyList+0xd8>)
 8004f50:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8004f52:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <prvAddNewTaskToReadyList+0xdc>)
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <prvAddNewTaskToReadyList+0xe0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f5c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004f5e:	6811      	ldr	r1, [r2, #0]
 8004f60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f62:	428b      	cmp	r3, r1
 8004f64:	d900      	bls.n	8004f68 <prvAddNewTaskToReadyList+0x74>
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	2014      	movs	r0, #20
 8004f6a:	4358      	muls	r0, r3
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <prvAddNewTaskToReadyList+0xbc>)
 8004f6e:	1d21      	adds	r1, r4, #4
 8004f70:	1818      	adds	r0, r3, r0
 8004f72:	f7ff fbef 	bl	8004754 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004f76:	f000 ffb7 	bl	8005ee8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004f7a:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <prvAddNewTaskToReadyList+0xe4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <prvAddNewTaskToReadyList+0x9c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d201      	bcs.n	8004f90 <prvAddNewTaskToReadyList+0x9c>
			taskYIELD_IF_USING_PREEMPTION();
 8004f8c:	f000 ff94 	bl	8005eb8 <vPortYield>
}
 8004f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <prvAddNewTaskToReadyList+0xe4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1db      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d8d6      	bhi.n	8004f52 <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8004fa4:	602c      	str	r4, [r5, #0]
 8004fa6:	e7d4      	b.n	8004f52 <prvAddNewTaskToReadyList+0x5e>
 8004fa8:	20000c7c 	.word	0x20000c7c
 8004fac:	20000810 	.word	0x20000810
 8004fb0:	2000081c 	.word	0x2000081c
 8004fb4:	20000c90 	.word	0x20000c90
 8004fb8:	20000ca4 	.word	0x20000ca4
 8004fbc:	20000cc4 	.word	0x20000cc4
 8004fc0:	20000cf0 	.word	0x20000cf0
 8004fc4:	20000cdc 	.word	0x20000cdc
 8004fc8:	20000814 	.word	0x20000814
 8004fcc:	20000818 	.word	0x20000818
 8004fd0:	20000c88 	.word	0x20000c88
 8004fd4:	20000c8c 	.word	0x20000c8c
 8004fd8:	20000cd8 	.word	0x20000cd8

08004fdc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fdc:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <prvResetNextTaskUnblockTime+0x20>)
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <prvResetNextTaskUnblockTime+0x24>)
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d103      	bne.n	8004ff0 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fec:	601a      	str	r2, [r3, #0]
	}
}
 8004fee:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	6852      	ldr	r2, [r2, #4]
 8004ff8:	e7f8      	b.n	8004fec <prvResetNextTaskUnblockTime+0x10>
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	20000814 	.word	0x20000814
 8005000:	20000cb8 	.word	0x20000cb8

08005004 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005008:	0096      	lsls	r6, r2, #2
 800500a:	0032      	movs	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800500c:	9000      	str	r0, [sp, #0]
 800500e:	000d      	movs	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005010:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005012:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005014:	9301      	str	r3, [sp, #4]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005016:	f001 f8ee 	bl	80061f6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800501a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800501c:	3e04      	subs	r6, #4
 800501e:	199e      	adds	r6, r3, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005020:	2307      	movs	r3, #7
 8005022:	439e      	bics	r6, r3
 8005024:	0037      	movs	r7, r6
	if( pcName != NULL )
 8005026:	2d00      	cmp	r5, #0
 8005028:	d03d      	beq.n	80050a6 <prvInitialiseNewTask.isra.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800502a:	0022      	movs	r2, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800502c:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800502e:	3234      	adds	r2, #52	; 0x34
 8005030:	5ce9      	ldrb	r1, [r5, r3]
 8005032:	54d1      	strb	r1, [r2, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8005034:	5ce9      	ldrb	r1, [r5, r3]
 8005036:	2900      	cmp	r1, #0
 8005038:	d002      	beq.n	8005040 <prvInitialiseNewTask.isra.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800503a:	3301      	adds	r3, #1
 800503c:	2b10      	cmp	r3, #16
 800503e:	d1f7      	bne.n	8005030 <prvInitialiseNewTask.isra.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005040:	0023      	movs	r3, r4
 8005042:	2200      	movs	r2, #0
 8005044:	3343      	adds	r3, #67	; 0x43
 8005046:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005048:	9d08      	ldr	r5, [sp, #32]
 800504a:	2d37      	cmp	r5, #55	; 0x37
 800504c:	d900      	bls.n	8005050 <prvInitialiseNewTask.isra.0+0x4c>
 800504e:	2537      	movs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005050:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8005052:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005054:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005056:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8005058:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800505a:	f7ff fb78 	bl	800474e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800505e:	0020      	movs	r0, r4
 8005060:	3018      	adds	r0, #24
 8005062:	f7ff fb74 	bl	800474e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005066:	2338      	movs	r3, #56	; 0x38
 8005068:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 800506a:	0023      	movs	r3, r4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800506c:	0020      	movs	r0, r4
		pxNewTCB->ulNotifiedValue = 0;
 800506e:	33b4      	adds	r3, #180	; 0xb4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005070:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005072:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005074:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005076:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8005078:	601e      	str	r6, [r3, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800507a:	0031      	movs	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800507c:	711e      	strb	r6, [r3, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800507e:	3054      	adds	r0, #84	; 0x54
 8005080:	f001 f8b9 	bl	80061f6 <memset>
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <prvInitialiseNewTask.isra.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005086:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005088:	65a3      	str	r3, [r4, #88]	; 0x58
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <prvInitialiseNewTask.isra.0+0xb0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800508c:	9a01      	ldr	r2, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800508e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <prvInitialiseNewTask.isra.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005092:	9900      	ldr	r1, [sp, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005094:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005096:	f000 fefd 	bl	8005e94 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800509c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800509e:	42b3      	cmp	r3, r6
 80050a0:	d000      	beq.n	80050a4 <prvInitialiseNewTask.isra.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050a2:	601c      	str	r4, [r3, #0]
}
 80050a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050a6:	0023      	movs	r3, r4
 80050a8:	3334      	adds	r3, #52	; 0x34
 80050aa:	701d      	strb	r5, [r3, #0]
 80050ac:	e7cc      	b.n	8005048 <prvInitialiseNewTask.isra.0+0x44>
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	0800657c 	.word	0x0800657c
 80050b4:	0800659c 	.word	0x0800659c
 80050b8:	0800655c 	.word	0x0800655c

080050bc <prvDeleteTCB>:
	{
 80050bc:	b510      	push	{r4, lr}
 80050be:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80050c0:	3054      	adds	r0, #84	; 0x54
 80050c2:	f001 f8ad 	bl	8006220 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050c6:	0023      	movs	r3, r4
 80050c8:	33b9      	adds	r3, #185	; 0xb9
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80050d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80050d2:	f001 f837 	bl	8006144 <vPortFree>
				vPortFree( pxTCB );
 80050d6:	0020      	movs	r0, r4
 80050d8:	f001 f834 	bl	8006144 <vPortFree>
	}
 80050dc:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d0f9      	beq.n	80050d6 <prvDeleteTCB+0x1a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d0fa      	beq.n	80050dc <prvDeleteTCB+0x20>
 80050e6:	b672      	cpsid	i
 80050e8:	e7fe      	b.n	80050e8 <prvDeleteTCB+0x2c>
	...

080050ec <prvIdleTask>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050ee:	4c10      	ldr	r4, [pc, #64]	; (8005130 <prvIdleTask+0x44>)
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <prvIdleTask+0x48>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d9f7      	bls.n	80050ee <prvIdleTask+0x2>
				taskYIELD();
 80050fe:	f000 fedb 	bl	8005eb8 <vPortYield>
 8005102:	e7f4      	b.n	80050ee <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 8005104:	f000 fee4 	bl	8005ed0 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <prvIdleTask+0x4c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510e:	1d28      	adds	r0, r5, #4
 8005110:	f7ff fb43 	bl	800479a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <prvIdleTask+0x50>)
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005122:	f000 fee1 	bl	8005ee8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005126:	0028      	movs	r0, r5
 8005128:	f7ff ffc8 	bl	80050bc <prvDeleteTCB>
 800512c:	e7df      	b.n	80050ee <prvIdleTask+0x2>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	20000c80 	.word	0x20000c80
 8005134:	2000081c 	.word	0x2000081c
 8005138:	20000cf0 	.word	0x20000cf0
 800513c:	20000c7c 	.word	0x20000c7c

08005140 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005144:	4b14      	ldr	r3, [pc, #80]	; (8005198 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005146:	4d15      	ldr	r5, [pc, #84]	; (800519c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8005148:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514a:	6828      	ldr	r0, [r5, #0]
{
 800514c:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514e:	3004      	adds	r0, #4
 8005150:	f7ff fb23 	bl	800479a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005154:	1c63      	adds	r3, r4, #1
 8005156:	d107      	bne.n	8005168 <prvAddCurrentTaskToDelayedList+0x28>
 8005158:	2f00      	cmp	r7, #0
 800515a:	d005      	beq.n	8005168 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515c:	6829      	ldr	r1, [r5, #0]
 800515e:	4810      	ldr	r0, [pc, #64]	; (80051a0 <prvAddCurrentTaskToDelayedList+0x60>)
 8005160:	3104      	adds	r1, #4
 8005162:	f7ff faf7 	bl	8004754 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005168:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800516a:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800516c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800516e:	42a6      	cmp	r6, r4
 8005170:	d906      	bls.n	8005180 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <prvAddCurrentTaskToDelayedList+0x64>)
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	6829      	ldr	r1, [r5, #0]
 8005178:	3104      	adds	r1, #4
 800517a:	f7ff faf7 	bl	800476c <vListInsert>
 800517e:	e7f2      	b.n	8005166 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <prvAddCurrentTaskToDelayedList+0x68>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	6829      	ldr	r1, [r5, #0]
 8005186:	3104      	adds	r1, #4
 8005188:	f7ff faf0 	bl	800476c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <prvAddCurrentTaskToDelayedList+0x6c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	42a2      	cmp	r2, r4
 8005192:	d9e8      	bls.n	8005166 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8005194:	601c      	str	r4, [r3, #0]
}
 8005196:	e7e6      	b.n	8005166 <prvAddCurrentTaskToDelayedList+0x26>
 8005198:	20000d04 	.word	0x20000d04
 800519c:	20000810 	.word	0x20000810
 80051a0:	20000cdc 	.word	0x20000cdc
 80051a4:	20000818 	.word	0x20000818
 80051a8:	20000814 	.word	0x20000814
 80051ac:	20000cb8 	.word	0x20000cb8

080051b0 <xTaskCreateStatic>:
	{
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80051b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	d101      	bne.n	80051c0 <xTaskCreateStatic+0x10>
 80051bc:	b672      	cpsid	i
 80051be:	e7fe      	b.n	80051be <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d101      	bne.n	80051c8 <xTaskCreateStatic+0x18>
 80051c4:	b672      	cpsid	i
 80051c6:	e7fe      	b.n	80051c6 <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 80051c8:	26bc      	movs	r6, #188	; 0xbc
 80051ca:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051cc:	9e05      	ldr	r6, [sp, #20]
 80051ce:	2ebc      	cmp	r6, #188	; 0xbc
 80051d0:	d001      	beq.n	80051d6 <xTaskCreateStatic+0x26>
 80051d2:	b672      	cpsid	i
 80051d4:	e7fe      	b.n	80051d4 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051d6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051d8:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051da:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051dc:	2602      	movs	r6, #2
 80051de:	35b9      	adds	r5, #185	; 0xb9
 80051e0:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051e2:	ad04      	add	r5, sp, #16
 80051e4:	9501      	str	r5, [sp, #4]
 80051e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80051e8:	9402      	str	r4, [sp, #8]
 80051ea:	9500      	str	r5, [sp, #0]
 80051ec:	f7ff ff0a 	bl	8005004 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f0:	0020      	movs	r0, r4
 80051f2:	f7ff fe7f 	bl	8004ef4 <prvAddNewTaskToReadyList>
	}
 80051f6:	9804      	ldr	r0, [sp, #16]
 80051f8:	b006      	add	sp, #24
 80051fa:	bd70      	pop	{r4, r5, r6, pc}

080051fc <xTaskCreate>:
	{
 80051fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fe:	0007      	movs	r7, r0
 8005200:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005202:	0090      	lsls	r0, r2, #2
	{
 8005204:	0016      	movs	r6, r2
 8005206:	9104      	str	r1, [sp, #16]
 8005208:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800520a:	f000 ff19 	bl	8006040 <pvPortMalloc>
 800520e:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 8005210:	d01d      	beq.n	800524e <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005212:	20bc      	movs	r0, #188	; 0xbc
 8005214:	f000 ff14 	bl	8006040 <pvPortMalloc>
 8005218:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 800521a:	d015      	beq.n	8005248 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800521c:	0003      	movs	r3, r0
 800521e:	2200      	movs	r2, #0
 8005220:	33b9      	adds	r3, #185	; 0xb9
					pxNewTCB->pxStack = pxStack;
 8005222:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005224:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005228:	0032      	movs	r2, r6
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800522e:	9904      	ldr	r1, [sp, #16]
 8005230:	9002      	str	r0, [sp, #8]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0038      	movs	r0, r7
 8005236:	9b05      	ldr	r3, [sp, #20]
 8005238:	f7ff fee4 	bl	8005004 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800523c:	0020      	movs	r0, r4
 800523e:	f7ff fe59 	bl	8004ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005242:	2001      	movs	r0, #1
	}
 8005244:	b007      	add	sp, #28
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8005248:	0028      	movs	r0, r5
 800524a:	f000 ff7b 	bl	8006144 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800524e:	2001      	movs	r0, #1
 8005250:	4240      	negs	r0, r0
		return xReturn;
 8005252:	e7f7      	b.n	8005244 <xTaskCreate+0x48>

08005254 <vTaskStartScheduler>:
{
 8005254:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005256:	2400      	movs	r4, #0
{
 8005258:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800525a:	aa07      	add	r2, sp, #28
 800525c:	a906      	add	r1, sp, #24
 800525e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005260:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005262:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005264:	f7ff fa50 	bl	8004708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005268:	9b05      	ldr	r3, [sp, #20]
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	4911      	ldr	r1, [pc, #68]	; (80052b8 <vTaskStartScheduler+0x64>)
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	4811      	ldr	r0, [pc, #68]	; (80052bc <vTaskStartScheduler+0x68>)
 8005276:	0023      	movs	r3, r4
 8005278:	9400      	str	r4, [sp, #0]
 800527a:	f7ff ff99 	bl	80051b0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800527e:	42a0      	cmp	r0, r4
 8005280:	d013      	beq.n	80052aa <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 8005282:	f000 fc51 	bl	8005b28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005286:	2801      	cmp	r0, #1
 8005288:	d111      	bne.n	80052ae <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800528a:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <vTaskStartScheduler+0x6c>)
 800528e:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <vTaskStartScheduler+0x70>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3354      	adds	r3, #84	; 0x54
 8005294:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005296:	2201      	movs	r2, #1
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <vTaskStartScheduler+0x74>)
 800529a:	4252      	negs	r2, r2
 800529c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <vTaskStartScheduler+0x78>)
 80052a0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <vTaskStartScheduler+0x7c>)
 80052a4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80052a6:	f000 fe89 	bl	8005fbc <xPortStartScheduler>
}
 80052aa:	b008      	add	sp, #32
 80052ac:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d1fb      	bne.n	80052aa <vTaskStartScheduler+0x56>
 80052b2:	b672      	cpsid	i
 80052b4:	e7fe      	b.n	80052b4 <vTaskStartScheduler+0x60>
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	08006548 	.word	0x08006548
 80052bc:	080050ed 	.word	0x080050ed
 80052c0:	20000810 	.word	0x20000810
 80052c4:	20000010 	.word	0x20000010
 80052c8:	20000cb8 	.word	0x20000cb8
 80052cc:	20000cd8 	.word	0x20000cd8
 80052d0:	20000d04 	.word	0x20000d04

080052d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80052d4:	4a02      	ldr	r2, [pc, #8]	; (80052e0 <vTaskSuspendAll+0xc>)
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	4770      	bx	lr
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	20000c84 	.word	0x20000c84

080052e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80052e4:	4b01      	ldr	r3, [pc, #4]	; (80052ec <xTaskGetTickCount+0x8>)
 80052e6:	6818      	ldr	r0, [r3, #0]
}
 80052e8:	4770      	bx	lr
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	20000d04 	.word	0x20000d04

080052f0 <xTaskGetTickCountFromISR>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <xTaskGetTickCountFromISR+0x8>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	20000d04 	.word	0x20000d04

080052fc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052fc:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <xTaskIncrementTick+0xd4>)
{
 80052fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d15e      	bne.n	80053c4 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <xTaskIncrementTick+0xd8>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	3201      	adds	r2, #1
 800530c:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 800530e:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005310:	2a00      	cmp	r2, #0
 8005312:	d111      	bne.n	8005338 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8005314:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <xTaskIncrementTick+0xdc>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	2a00      	cmp	r2, #0
 800531c:	d001      	beq.n	8005322 <xTaskIncrementTick+0x26>
 800531e:	b672      	cpsid	i
 8005320:	e7fe      	b.n	8005320 <xTaskIncrementTick+0x24>
 8005322:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <xTaskIncrementTick+0xe0>)
 8005324:	6819      	ldr	r1, [r3, #0]
 8005326:	6810      	ldr	r0, [r2, #0]
 8005328:	6018      	str	r0, [r3, #0]
 800532a:	6011      	str	r1, [r2, #0]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <xTaskIncrementTick+0xe4>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	f7ff fe52 	bl	8004fdc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005338:	4e2a      	ldr	r6, [pc, #168]	; (80053e4 <xTaskIncrementTick+0xe8>)
 800533a:	9a00      	ldr	r2, [sp, #0]
 800533c:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800533e:	2400      	movs	r4, #0
 8005340:	4f29      	ldr	r7, [pc, #164]	; (80053e8 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005342:	429a      	cmp	r2, r3
 8005344:	d235      	bcs.n	80053b2 <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	2314      	movs	r3, #20
 800534c:	4353      	muls	r3, r2
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <xTaskIncrementTick+0xf0>)
 8005350:	58d3      	ldr	r3, [r2, r3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d900      	bls.n	8005358 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8005356:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005358:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <xTaskIncrementTick+0xf4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d000      	beq.n	8005362 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005360:	2401      	movs	r4, #1
}
 8005362:	0020      	movs	r0, r4
 8005364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005366:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8005368:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800536e:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8005370:	429a      	cmp	r2, r3
 8005372:	d325      	bcc.n	80053c0 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005374:	1d2b      	adds	r3, r5, #4
 8005376:	0018      	movs	r0, r3
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	f7ff fa0e 	bl	800479a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800537e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005384:	0028      	movs	r0, r5
 8005386:	3018      	adds	r0, #24
 8005388:	f7ff fa07 	bl	800479a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <xTaskIncrementTick+0xf8>)
 800538e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4290      	cmp	r0, r2
 8005394:	d900      	bls.n	8005398 <xTaskIncrementTick+0x9c>
 8005396:	6018      	str	r0, [r3, #0]
 8005398:	2314      	movs	r3, #20
 800539a:	4358      	muls	r0, r3
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <xTaskIncrementTick+0xf0>)
 800539e:	1d29      	adds	r1, r5, #4
 80053a0:	1818      	adds	r0, r3, r0
 80053a2:	f7ff f9d7 	bl	8004754 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d300      	bcc.n	80053b2 <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 80053b0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <xTaskIncrementTick+0xdc>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	d1d4      	bne.n	8005366 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	2301      	movs	r3, #1
 80053be:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 80053c0:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053c2:	e7c0      	b.n	8005346 <xTaskIncrementTick+0x4a>
		++xPendedTicks;
 80053c4:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 80053c6:	2400      	movs	r4, #0
		++xPendedTicks;
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 80053ce:	e7c8      	b.n	8005362 <xTaskIncrementTick+0x66>
 80053d0:	20000c84 	.word	0x20000c84
 80053d4:	20000d04 	.word	0x20000d04
 80053d8:	20000814 	.word	0x20000814
 80053dc:	20000818 	.word	0x20000818
 80053e0:	20000cbc 	.word	0x20000cbc
 80053e4:	20000cb8 	.word	0x20000cb8
 80053e8:	20000810 	.word	0x20000810
 80053ec:	2000081c 	.word	0x2000081c
 80053f0:	20000d08 	.word	0x20000d08
 80053f4:	20000c8c 	.word	0x20000c8c
 80053f8:	20000cc0 	.word	0x20000cc0

080053fc <xTaskResumeAll>:
{
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80053fe:	4c2b      	ldr	r4, [pc, #172]	; (80054ac <xTaskResumeAll+0xb0>)
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xTaskResumeAll+0xe>
 8005406:	b672      	cpsid	i
 8005408:	e7fe      	b.n	8005408 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800540a:	f000 fd61 	bl	8005ed0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	3b01      	subs	r3, #1
 8005412:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005414:	6824      	ldr	r4, [r4, #0]
 8005416:	2c00      	cmp	r4, #0
 8005418:	d004      	beq.n	8005424 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 800541a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800541c:	f000 fd64 	bl	8005ee8 <vPortExitCritical>
}
 8005420:	0020      	movs	r0, r4
 8005422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005424:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <xTaskResumeAll+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f6      	beq.n	800541a <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 800542c:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 800542e:	2701      	movs	r7, #1
 8005430:	e01d      	b.n	800546e <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005436:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005438:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800543a:	3018      	adds	r0, #24
 800543c:	f7ff f9ad 	bl	800479a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005440:	0028      	movs	r0, r5
 8005442:	f7ff f9aa 	bl	800479a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005446:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <xTaskResumeAll+0xb8>)
 8005448:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4290      	cmp	r0, r2
 800544e:	d900      	bls.n	8005452 <xTaskResumeAll+0x56>
 8005450:	6018      	str	r0, [r3, #0]
 8005452:	4370      	muls	r0, r6
 8005454:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <xTaskResumeAll+0xbc>)
 8005456:	0029      	movs	r1, r5
 8005458:	18c0      	adds	r0, r0, r3
 800545a:	f7ff f97b 	bl	8004754 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <xTaskResumeAll+0xc0>)
 8005460:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	429a      	cmp	r2, r3
 8005468:	d301      	bcc.n	800546e <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <xTaskResumeAll+0xc4>)
 800546c:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <xTaskResumeAll+0xc8>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1dd      	bne.n	8005432 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 8005476:	2c00      	cmp	r4, #0
 8005478:	d001      	beq.n	800547e <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 800547a:	f7ff fdaf 	bl	8004fdc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800547e:	4d12      	ldr	r5, [pc, #72]	; (80054c8 <xTaskResumeAll+0xcc>)
 8005480:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005482:	2c00      	cmp	r4, #0
 8005484:	d00a      	beq.n	800549c <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8005486:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005488:	f7ff ff38 	bl	80052fc <xTaskIncrementTick>
 800548c:	2800      	cmp	r0, #0
 800548e:	d001      	beq.n	8005494 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <xTaskResumeAll+0xc4>)
 8005492:	601e      	str	r6, [r3, #0]
							--xPendedCounts;
 8005494:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005496:	2c00      	cmp	r4, #0
 8005498:	d1f6      	bne.n	8005488 <xTaskResumeAll+0x8c>
						xPendedTicks = 0;
 800549a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <xTaskResumeAll+0xc4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ba      	beq.n	800541a <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 80054a4:	f000 fd08 	bl	8005eb8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 80054a8:	2401      	movs	r4, #1
 80054aa:	e7b7      	b.n	800541c <xTaskResumeAll+0x20>
 80054ac:	20000c84 	.word	0x20000c84
 80054b0:	20000c7c 	.word	0x20000c7c
 80054b4:	20000c8c 	.word	0x20000c8c
 80054b8:	2000081c 	.word	0x2000081c
 80054bc:	20000810 	.word	0x20000810
 80054c0:	20000d08 	.word	0x20000d08
 80054c4:	20000cc4 	.word	0x20000cc4
 80054c8:	20000cc0 	.word	0x20000cc0

080054cc <vTaskDelay>:
	{
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054d0:	d102      	bne.n	80054d8 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 80054d2:	f000 fcf1 	bl	8005eb8 <vPortYield>
	}
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <vTaskDelay+0x30>)
 80054da:	681d      	ldr	r5, [r3, #0]
 80054dc:	2d00      	cmp	r5, #0
 80054de:	d001      	beq.n	80054e4 <vTaskDelay+0x18>
 80054e0:	b672      	cpsid	i
 80054e2:	e7fe      	b.n	80054e2 <vTaskDelay+0x16>
			vTaskSuspendAll();
 80054e4:	f7ff fef6 	bl	80052d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054e8:	0029      	movs	r1, r5
 80054ea:	0020      	movs	r0, r4
 80054ec:	f7ff fe28 	bl	8005140 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80054f0:	f7ff ff84 	bl	80053fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0ec      	beq.n	80054d2 <vTaskDelay+0x6>
 80054f8:	e7ed      	b.n	80054d6 <vTaskDelay+0xa>
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	20000c84 	.word	0x20000c84

08005500 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <vTaskSwitchContext+0x60>)
{
 8005502:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <vTaskSwitchContext+0x64>)
 8005508:	2a00      	cmp	r2, #0
 800550a:	d002      	beq.n	8005512 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005512:	2514      	movs	r5, #20
 8005514:	4814      	ldr	r0, [pc, #80]	; (8005568 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8005516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005518:	6802      	ldr	r2, [r0, #0]
 800551a:	4914      	ldr	r1, [pc, #80]	; (800556c <vTaskSwitchContext+0x6c>)
 800551c:	002b      	movs	r3, r5
 800551e:	4353      	muls	r3, r2
 8005520:	585c      	ldr	r4, [r3, r1]
 8005522:	2c00      	cmp	r4, #0
 8005524:	d016      	beq.n	8005554 <vTaskSwitchContext+0x54>
 8005526:	18cc      	adds	r4, r1, r3
 8005528:	6865      	ldr	r5, [r4, #4]
 800552a:	3308      	adds	r3, #8
 800552c:	686d      	ldr	r5, [r5, #4]
 800552e:	185b      	adds	r3, r3, r1
 8005530:	6065      	str	r5, [r4, #4]
 8005532:	429d      	cmp	r5, r3
 8005534:	d101      	bne.n	800553a <vTaskSwitchContext+0x3a>
 8005536:	686b      	ldr	r3, [r5, #4]
 8005538:	6063      	str	r3, [r4, #4]
 800553a:	2314      	movs	r3, #20
 800553c:	4353      	muls	r3, r2
 800553e:	18c9      	adds	r1, r1, r3
 8005540:	684b      	ldr	r3, [r1, #4]
 8005542:	68d9      	ldr	r1, [r3, #12]
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <vTaskSwitchContext+0x70>)
 8005546:	6019      	str	r1, [r3, #0]
 8005548:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <vTaskSwitchContext+0x74>)
 800554e:	3354      	adds	r3, #84	; 0x54
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	e7dd      	b.n	8005510 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005554:	2a00      	cmp	r2, #0
 8005556:	d101      	bne.n	800555c <vTaskSwitchContext+0x5c>
 8005558:	b672      	cpsid	i
 800555a:	e7fe      	b.n	800555a <vTaskSwitchContext+0x5a>
 800555c:	3a01      	subs	r2, #1
 800555e:	e7dd      	b.n	800551c <vTaskSwitchContext+0x1c>
 8005560:	20000c84 	.word	0x20000c84
 8005564:	20000d08 	.word	0x20000d08
 8005568:	20000c8c 	.word	0x20000c8c
 800556c:	2000081c 	.word	0x2000081c
 8005570:	20000810 	.word	0x20000810
 8005574:	20000010 	.word	0x20000010

08005578 <vTaskPlaceOnEventList>:
{
 8005578:	b510      	push	{r4, lr}
 800557a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800557c:	2800      	cmp	r0, #0
 800557e:	d101      	bne.n	8005584 <vTaskPlaceOnEventList+0xc>
 8005580:	b672      	cpsid	i
 8005582:	e7fe      	b.n	8005582 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <vTaskPlaceOnEventList+0x20>)
 8005586:	6819      	ldr	r1, [r3, #0]
 8005588:	3118      	adds	r1, #24
 800558a:	f7ff f8ef 	bl	800476c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800558e:	2101      	movs	r1, #1
 8005590:	0020      	movs	r0, r4
 8005592:	f7ff fdd5 	bl	8005140 <prvAddCurrentTaskToDelayedList>
}
 8005596:	bd10      	pop	{r4, pc}
 8005598:	20000810 	.word	0x20000810

0800559c <vTaskPlaceOnEventListRestricted>:
	{
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	000c      	movs	r4, r1
 80055a0:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d101      	bne.n	80055aa <vTaskPlaceOnEventListRestricted+0xe>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <vTaskPlaceOnEventListRestricted+0x2c>)
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	3118      	adds	r1, #24
 80055b0:	f7ff f8d0 	bl	8004754 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	d001      	beq.n	80055bc <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
 80055b8:	2401      	movs	r4, #1
 80055ba:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055bc:	0029      	movs	r1, r5
 80055be:	0020      	movs	r0, r4
 80055c0:	f7ff fdbe 	bl	8005140 <prvAddCurrentTaskToDelayedList>
	}
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	20000810 	.word	0x20000810

080055cc <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055cc:	68c3      	ldr	r3, [r0, #12]
{
 80055ce:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d101      	bne.n	80055da <xTaskRemoveFromEventList+0xe>
 80055d6:	b672      	cpsid	i
 80055d8:	e7fe      	b.n	80055d8 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055da:	0025      	movs	r5, r4
 80055dc:	3518      	adds	r5, #24
 80055de:	0028      	movs	r0, r5
 80055e0:	f7ff f8db 	bl	800479a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <xTaskRemoveFromEventList+0x60>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11b      	bne.n	8005624 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ec:	1d25      	adds	r5, r4, #4
 80055ee:	0028      	movs	r0, r5
 80055f0:	f7ff f8d3 	bl	800479a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055f4:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <xTaskRemoveFromEventList+0x64>)
 80055f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055f8:	6811      	ldr	r1, [r2, #0]
 80055fa:	428b      	cmp	r3, r1
 80055fc:	d900      	bls.n	8005600 <xTaskRemoveFromEventList+0x34>
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	2014      	movs	r0, #20
 8005602:	0029      	movs	r1, r5
 8005604:	4358      	muls	r0, r3
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <xTaskRemoveFromEventList+0x68>)
 8005608:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800560a:	f7ff f8a3 	bl	8004754 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <xTaskRemoveFromEventList+0x6c>)
 8005610:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005612:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8005614:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d902      	bls.n	8005622 <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <xTaskRemoveFromEventList+0x70>)
 800561e:	3001      	adds	r0, #1
 8005620:	6018      	str	r0, [r3, #0]
}
 8005622:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005624:	0029      	movs	r1, r5
 8005626:	4806      	ldr	r0, [pc, #24]	; (8005640 <xTaskRemoveFromEventList+0x74>)
 8005628:	e7ef      	b.n	800560a <xTaskRemoveFromEventList+0x3e>
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	20000c84 	.word	0x20000c84
 8005630:	20000c8c 	.word	0x20000c8c
 8005634:	2000081c 	.word	0x2000081c
 8005638:	20000810 	.word	0x20000810
 800563c:	20000d08 	.word	0x20000d08
 8005640:	20000cc4 	.word	0x20000cc4

08005644 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <vTaskInternalSetTimeOutState+0x10>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800564a:	4b03      	ldr	r3, [pc, #12]	; (8005658 <vTaskInternalSetTimeOutState+0x14>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6043      	str	r3, [r0, #4]
}
 8005650:	4770      	bx	lr
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	20000cbc 	.word	0x20000cbc
 8005658:	20000d04 	.word	0x20000d04

0800565c <xTaskCheckForTimeOut>:
{
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	0005      	movs	r5, r0
 8005660:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 8005662:	2800      	cmp	r0, #0
 8005664:	d101      	bne.n	800566a <xTaskCheckForTimeOut+0xe>
 8005666:	b672      	cpsid	i
 8005668:	e7fe      	b.n	8005668 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 800566a:	2900      	cmp	r1, #0
 800566c:	d101      	bne.n	8005672 <xTaskCheckForTimeOut+0x16>
 800566e:	b672      	cpsid	i
 8005670:	e7fe      	b.n	8005670 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8005672:	f000 fc2d 	bl	8005ed0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <xTaskCheckForTimeOut+0x5c>)
				xReturn = pdFALSE;
 8005678:	2600      	movs	r6, #0
		const TickType_t xConstTickCount = xTickCount;
 800567a:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	d012      	beq.n	80056a8 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005682:	480e      	ldr	r0, [pc, #56]	; (80056bc <xTaskCheckForTimeOut+0x60>)
 8005684:	682e      	ldr	r6, [r5, #0]
 8005686:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005688:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800568a:	4286      	cmp	r6, r0
 800568c:	d002      	beq.n	8005694 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 800568e:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005690:	428a      	cmp	r2, r1
 8005692:	d909      	bls.n	80056a8 <xTaskCheckForTimeOut+0x4c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005694:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005696:	4283      	cmp	r3, r0
 8005698:	d90a      	bls.n	80056b0 <xTaskCheckForTimeOut+0x54>
			*pxTicksToWait -= xElapsedTime;
 800569a:	1a5b      	subs	r3, r3, r1
 800569c:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800569e:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80056a0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056a2:	f7ff ffcf 	bl	8005644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056a6:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80056a8:	f000 fc1e 	bl	8005ee8 <vPortExitCritical>
}
 80056ac:	0030      	movs	r0, r6
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80056b0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80056b2:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 80056b4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80056b6:	e7f7      	b.n	80056a8 <xTaskCheckForTimeOut+0x4c>
 80056b8:	20000d04 	.word	0x20000d04
 80056bc:	20000cbc 	.word	0x20000cbc

080056c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80056c0:	2201      	movs	r2, #1
 80056c2:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <vTaskMissedYield+0x8>)
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	4770      	bx	lr
 80056c8:	20000d08 	.word	0x20000d08

080056cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ce:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <xTaskGetSchedulerState+0x1c>)
 80056d8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80056da:	4243      	negs	r3, r0
 80056dc:	4158      	adcs	r0, r3
 80056de:	0040      	lsls	r0, r0, #1
	}
 80056e0:	4770      	bx	lr
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	20000cd8 	.word	0x20000cd8
 80056e8:	20000c84 	.word	0x20000c84

080056ec <xTaskPriorityInherit>:
	{
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80056f0:	d027      	beq.n	8005742 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056f2:	4d1a      	ldr	r5, [pc, #104]	; (800575c <xTaskPriorityInherit+0x70>)
 80056f4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d226      	bcs.n	800574c <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056fe:	6983      	ldr	r3, [r0, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db04      	blt.n	800570e <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005704:	2238      	movs	r2, #56	; 0x38
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800570e:	2314      	movs	r3, #20
 8005710:	434b      	muls	r3, r1
 8005712:	4e13      	ldr	r6, [pc, #76]	; (8005760 <xTaskPriorityInherit+0x74>)
 8005714:	6962      	ldr	r2, [r4, #20]
 8005716:	199b      	adds	r3, r3, r6
 8005718:	429a      	cmp	r2, r3
 800571a:	d113      	bne.n	8005744 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571c:	1d27      	adds	r7, r4, #4
 800571e:	0038      	movs	r0, r7
 8005720:	f7ff f83b 	bl	800479a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005728:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800572a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4290      	cmp	r0, r2
 8005730:	d900      	bls.n	8005734 <xTaskPriorityInherit+0x48>
 8005732:	6018      	str	r0, [r3, #0]
 8005734:	2314      	movs	r3, #20
 8005736:	4358      	muls	r0, r3
 8005738:	0039      	movs	r1, r7
 800573a:	1830      	adds	r0, r6, r0
 800573c:	f7ff f80a 	bl	8004754 <vListInsertEnd>
				xReturn = pdTRUE;
 8005740:	2001      	movs	r0, #1
	}
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800574a:	e7f9      	b.n	8005740 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	4298      	cmp	r0, r3
 8005754:	4180      	sbcs	r0, r0
 8005756:	4240      	negs	r0, r0
 8005758:	e7f3      	b.n	8005742 <xTaskPriorityInherit+0x56>
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	20000810 	.word	0x20000810
 8005760:	2000081c 	.word	0x2000081c
 8005764:	20000c8c 	.word	0x20000c8c

08005768 <xTaskPriorityDisinherit>:
	{
 8005768:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800576a:	2800      	cmp	r0, #0
 800576c:	d101      	bne.n	8005772 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800576e:	2000      	movs	r0, #0
	}
 8005770:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <xTaskPriorityDisinherit+0x60>)
 8005774:	681c      	ldr	r4, [r3, #0]
 8005776:	4284      	cmp	r4, r0
 8005778:	d001      	beq.n	800577e <xTaskPriorityDisinherit+0x16>
 800577a:	b672      	cpsid	i
 800577c:	e7fe      	b.n	800577c <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 800577e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <xTaskPriorityDisinherit+0x20>
 8005784:	b672      	cpsid	i
 8005786:	e7fe      	b.n	8005786 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005788:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800578a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800578c:	3b01      	subs	r3, #1
 800578e:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005790:	428a      	cmp	r2, r1
 8005792:	d0ec      	beq.n	800576e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ea      	bne.n	800576e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005798:	1d25      	adds	r5, r4, #4
 800579a:	0028      	movs	r0, r5
 800579c:	f7fe fffd 	bl	800479a <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a0:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80057a8:	4a08      	ldr	r2, [pc, #32]	; (80057cc <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057aa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	428b      	cmp	r3, r1
 80057b0:	d900      	bls.n	80057b4 <xTaskPriorityDisinherit+0x4c>
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	2014      	movs	r0, #20
 80057b6:	4358      	muls	r0, r3
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <xTaskPriorityDisinherit+0x68>)
 80057ba:	0029      	movs	r1, r5
 80057bc:	18c0      	adds	r0, r0, r3
 80057be:	f7fe ffc9 	bl	8004754 <vListInsertEnd>
					xReturn = pdTRUE;
 80057c2:	2001      	movs	r0, #1
		return xReturn;
 80057c4:	e7d4      	b.n	8005770 <xTaskPriorityDisinherit+0x8>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	20000810 	.word	0x20000810
 80057cc:	20000c8c 	.word	0x20000c8c
 80057d0:	2000081c 	.word	0x2000081c

080057d4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80057d8:	d031      	beq.n	800583e <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
 80057da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
 80057e0:	b672      	cpsid	i
 80057e2:	e7fe      	b.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0xe>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80057e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80057e6:	428a      	cmp	r2, r1
 80057e8:	d200      	bcs.n	80057ec <vTaskPriorityDisinheritAfterTimeout+0x18>
 80057ea:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80057ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80057ee:	4290      	cmp	r0, r2
 80057f0:	d025      	beq.n	800583e <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d123      	bne.n	800583e <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <vTaskPriorityDisinheritAfterTimeout+0x6c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	d101      	bne.n	8005802 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 80057fe:	b672      	cpsid	i
 8005800:	e7fe      	b.n	8005800 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005802:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005804:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005806:	2b00      	cmp	r3, #0
 8005808:	db02      	blt.n	8005810 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580a:	2138      	movs	r1, #56	; 0x38
 800580c:	1a8a      	subs	r2, r1, r2
 800580e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005810:	2314      	movs	r3, #20
 8005812:	4343      	muls	r3, r0
 8005814:	4d0b      	ldr	r5, [pc, #44]	; (8005844 <vTaskPriorityDisinheritAfterTimeout+0x70>)
 8005816:	6962      	ldr	r2, [r4, #20]
 8005818:	195b      	adds	r3, r3, r5
 800581a:	429a      	cmp	r2, r3
 800581c:	d10f      	bne.n	800583e <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800581e:	1d26      	adds	r6, r4, #4
 8005820:	0030      	movs	r0, r6
 8005822:	f7fe ffba 	bl	800479a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005826:	4a08      	ldr	r2, [pc, #32]	; (8005848 <vTaskPriorityDisinheritAfterTimeout+0x74>)
 8005828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800582a:	6811      	ldr	r1, [r2, #0]
 800582c:	428b      	cmp	r3, r1
 800582e:	d900      	bls.n	8005832 <vTaskPriorityDisinheritAfterTimeout+0x5e>
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	2014      	movs	r0, #20
 8005834:	4358      	muls	r0, r3
 8005836:	0031      	movs	r1, r6
 8005838:	1828      	adds	r0, r5, r0
 800583a:	f7fe ff8b 	bl	8004754 <vListInsertEnd>
	}
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	20000810 	.word	0x20000810
 8005844:	2000081c 	.word	0x2000081c
 8005848:	20000c8c 	.word	0x20000c8c

0800584c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <pvTaskIncrementMutexHeldCount+0x14>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	2a00      	cmp	r2, #0
 8005852:	d003      	beq.n	800585c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005858:	3201      	adds	r2, #1
 800585a:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800585c:	6818      	ldr	r0, [r3, #0]
	}
 800585e:	4770      	bx	lr
 8005860:	20000810 	.word	0x20000810

08005864 <ulTaskNotifyTake>:
	{
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	0006      	movs	r6, r0
 8005868:	000d      	movs	r5, r1
		taskENTER_CRITICAL();
 800586a:	f000 fb31 	bl	8005ed0 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800586e:	4c15      	ldr	r4, [pc, #84]	; (80058c4 <ulTaskNotifyTake+0x60>)
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	33b4      	adds	r3, #180	; 0xb4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <ulTaskNotifyTake+0x2c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800587a:	2101      	movs	r1, #1
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	33b8      	adds	r3, #184	; 0xb8
 8005880:	7019      	strb	r1, [r3, #0]
				if( xTicksToWait > ( TickType_t ) 0 )
 8005882:	2d00      	cmp	r5, #0
 8005884:	d004      	beq.n	8005890 <ulTaskNotifyTake+0x2c>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005886:	0028      	movs	r0, r5
 8005888:	f7ff fc5a 	bl	8005140 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800588c:	f000 fb14 	bl	8005eb8 <vPortYield>
		taskEXIT_CRITICAL();
 8005890:	f000 fb2a 	bl	8005ee8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005894:	f000 fb1c 	bl	8005ed0 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	33b4      	adds	r3, #180	; 0xb4
 800589c:	681d      	ldr	r5, [r3, #0]
			if( ulReturn != 0UL )
 800589e:	2d00      	cmp	r5, #0
 80058a0:	d005      	beq.n	80058ae <ulTaskNotifyTake+0x4a>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80058a2:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	d00a      	beq.n	80058be <ulTaskNotifyTake+0x5a>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80058a8:	2200      	movs	r2, #0
 80058aa:	33b4      	adds	r3, #180	; 0xb4
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80058ac:	601a      	str	r2, [r3, #0]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ae:	2200      	movs	r2, #0
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	33b8      	adds	r3, #184	; 0xb8
 80058b4:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80058b6:	f000 fb17 	bl	8005ee8 <vPortExitCritical>
	}
 80058ba:	0028      	movs	r0, r5
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80058be:	1e6a      	subs	r2, r5, #1
 80058c0:	33b4      	adds	r3, #180	; 0xb4
 80058c2:	e7f3      	b.n	80058ac <ulTaskNotifyTake+0x48>
 80058c4:	20000810 	.word	0x20000810

080058c8 <xTaskGenericNotify>:
	{
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	0004      	movs	r4, r0
 80058cc:	000d      	movs	r5, r1
 80058ce:	0016      	movs	r6, r2
 80058d0:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d101      	bne.n	80058da <xTaskGenericNotify+0x12>
 80058d6:	b672      	cpsid	i
 80058d8:	e7fe      	b.n	80058d8 <xTaskGenericNotify+0x10>
		taskENTER_CRITICAL();
 80058da:	f000 faf9 	bl	8005ed0 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d003      	beq.n	80058ea <xTaskGenericNotify+0x22>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80058e2:	0023      	movs	r3, r4
 80058e4:	33b4      	adds	r3, #180	; 0xb4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80058ea:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058ec:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80058ee:	32b8      	adds	r2, #184	; 0xb8
 80058f0:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058f2:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80058f4:	b2db      	uxtb	r3, r3
			switch( eAction )
 80058f6:	2e04      	cmp	r6, #4
 80058f8:	d81c      	bhi.n	8005934 <xTaskGenericNotify+0x6c>
 80058fa:	0030      	movs	r0, r6
 80058fc:	f7fa fc0e 	bl	800011c <__gnu_thumb1_case_uqi>
 8005900:	1709030e 	.word	0x1709030e
 8005904:	15          	.byte	0x15
 8005905:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005906:	0022      	movs	r2, r4
 8005908:	32b4      	adds	r2, #180	; 0xb4
 800590a:	6811      	ldr	r1, [r2, #0]
 800590c:	430d      	orrs	r5, r1
					pxTCB->ulNotifiedValue = ulValue;
 800590e:	6015      	str	r5, [r2, #0]
					break;
 8005910:	e004      	b.n	800591c <xTaskGenericNotify+0x54>
					( pxTCB->ulNotifiedValue )++;
 8005912:	0021      	movs	r1, r4
 8005914:	31b4      	adds	r1, #180	; 0xb4
 8005916:	680a      	ldr	r2, [r1, #0]
 8005918:	3201      	adds	r2, #1
 800591a:	600a      	str	r2, [r1, #0]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800591c:	2b01      	cmp	r3, #1
 800591e:	d010      	beq.n	8005942 <xTaskGenericNotify+0x7a>
 8005920:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8005922:	f000 fae1 	bl	8005ee8 <vPortExitCritical>
	}
 8005926:	0020      	movs	r0, r4
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800592a:	2b02      	cmp	r3, #2
 800592c:	d028      	beq.n	8005980 <xTaskGenericNotify+0xb8>
					pxTCB->ulNotifiedValue = ulValue;
 800592e:	0022      	movs	r2, r4
 8005930:	32b4      	adds	r2, #180	; 0xb4
 8005932:	e7ec      	b.n	800590e <xTaskGenericNotify+0x46>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005934:	0022      	movs	r2, r4
 8005936:	32b4      	adds	r2, #180	; 0xb4
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	3201      	adds	r2, #1
 800593c:	d0ee      	beq.n	800591c <xTaskGenericNotify+0x54>
 800593e:	b672      	cpsid	i
 8005940:	e7fe      	b.n	8005940 <xTaskGenericNotify+0x78>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005942:	1d25      	adds	r5, r4, #4
 8005944:	0028      	movs	r0, r5
 8005946:	f7fe ff28 	bl	800479a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800594a:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <xTaskGenericNotify+0xbc>)
 800594c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800594e:	6811      	ldr	r1, [r2, #0]
 8005950:	428b      	cmp	r3, r1
 8005952:	d900      	bls.n	8005956 <xTaskGenericNotify+0x8e>
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	2014      	movs	r0, #20
 8005958:	4358      	muls	r0, r3
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <xTaskGenericNotify+0xc0>)
 800595c:	0029      	movs	r1, r5
 800595e:	18c0      	adds	r0, r0, r3
 8005960:	f7fe fef8 	bl	8004754 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <xTaskGenericNotify+0xa6>
 800596a:	b672      	cpsid	i
 800596c:	e7fe      	b.n	800596c <xTaskGenericNotify+0xa4>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <xTaskGenericNotify+0xc4>)
 8005970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d9d2      	bls.n	8005920 <xTaskGenericNotify+0x58>
					taskYIELD_IF_USING_PREEMPTION();
 800597a:	f000 fa9d 	bl	8005eb8 <vPortYield>
 800597e:	e7cf      	b.n	8005920 <xTaskGenericNotify+0x58>
						xReturn = pdFAIL;
 8005980:	2400      	movs	r4, #0
 8005982:	e7ce      	b.n	8005922 <xTaskGenericNotify+0x5a>
 8005984:	20000c8c 	.word	0x20000c8c
 8005988:	2000081c 	.word	0x2000081c
 800598c:	20000810 	.word	0x20000810

08005990 <xTaskGenericNotifyFromISR>:
	{
 8005990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005992:	0004      	movs	r4, r0
 8005994:	000f      	movs	r7, r1
 8005996:	0015      	movs	r5, r2
 8005998:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 800599a:	2800      	cmp	r0, #0
 800599c:	d101      	bne.n	80059a2 <xTaskGenericNotifyFromISR+0x12>
 800599e:	b672      	cpsid	i
 80059a0:	e7fe      	b.n	80059a0 <xTaskGenericNotifyFromISR+0x10>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a2:	f000 faaf 	bl	8005f04 <ulSetInterruptMaskFromISR>
 80059a6:	9001      	str	r0, [sp, #4]
			if( pulPreviousNotificationValue != NULL )
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	d003      	beq.n	80059b4 <xTaskGenericNotifyFromISR+0x24>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80059ac:	0023      	movs	r3, r4
 80059ae:	33b4      	adds	r3, #180	; 0xb4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80059b4:	0022      	movs	r2, r4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80059b6:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80059b8:	32b8      	adds	r2, #184	; 0xb8
 80059ba:	7813      	ldrb	r3, [r2, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80059bc:	7011      	strb	r1, [r2, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80059be:	b2db      	uxtb	r3, r3
			switch( eAction )
 80059c0:	2d04      	cmp	r5, #4
 80059c2:	d81e      	bhi.n	8005a02 <xTaskGenericNotifyFromISR+0x72>
 80059c4:	0028      	movs	r0, r5
 80059c6:	f7fa fba9 	bl	800011c <__gnu_thumb1_case_uqi>
 80059ca:	0308      	.short	0x0308
 80059cc:	1810      	.short	0x1810
 80059ce:	16          	.byte	0x16
 80059cf:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 80059d0:	0022      	movs	r2, r4
 80059d2:	32b4      	adds	r2, #180	; 0xb4
 80059d4:	6811      	ldr	r1, [r2, #0]
 80059d6:	4339      	orrs	r1, r7
 80059d8:	6011      	str	r1, [r2, #0]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d018      	beq.n	8005a10 <xTaskGenericNotifyFromISR+0x80>
 80059de:	2401      	movs	r4, #1
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80059e0:	9801      	ldr	r0, [sp, #4]
 80059e2:	f000 fa93 	bl	8005f0c <vClearInterruptMaskFromISR>
	}
 80059e6:	0020      	movs	r0, r4
 80059e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80059ea:	0021      	movs	r1, r4
 80059ec:	31b4      	adds	r1, #180	; 0xb4
 80059ee:	680a      	ldr	r2, [r1, #0]
 80059f0:	3201      	adds	r2, #1
 80059f2:	600a      	str	r2, [r1, #0]
					break;
 80059f4:	e7f1      	b.n	80059da <xTaskGenericNotifyFromISR+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d036      	beq.n	8005a68 <xTaskGenericNotifyFromISR+0xd8>
						pxTCB->ulNotifiedValue = ulValue;
 80059fa:	0022      	movs	r2, r4
 80059fc:	32b4      	adds	r2, #180	; 0xb4
 80059fe:	6017      	str	r7, [r2, #0]
 8005a00:	e7eb      	b.n	80059da <xTaskGenericNotifyFromISR+0x4a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005a02:	0022      	movs	r2, r4
 8005a04:	32b4      	adds	r2, #180	; 0xb4
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	3201      	adds	r2, #1
 8005a0a:	d0e6      	beq.n	80059da <xTaskGenericNotifyFromISR+0x4a>
 8005a0c:	b672      	cpsid	i
 8005a0e:	e7fe      	b.n	8005a0e <xTaskGenericNotifyFromISR+0x7e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <xTaskGenericNotifyFromISR+0x8a>
 8005a16:	b672      	cpsid	i
 8005a18:	e7fe      	b.n	8005a18 <xTaskGenericNotifyFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <xTaskGenericNotifyFromISR+0xdc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11e      	bne.n	8005a60 <xTaskGenericNotifyFromISR+0xd0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a22:	1d25      	adds	r5, r4, #4
 8005a24:	0028      	movs	r0, r5
 8005a26:	f7fe feb8 	bl	800479a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a2a:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <xTaskGenericNotifyFromISR+0xe0>)
 8005a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a2e:	6811      	ldr	r1, [r2, #0]
 8005a30:	428b      	cmp	r3, r1
 8005a32:	d900      	bls.n	8005a36 <xTaskGenericNotifyFromISR+0xa6>
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	2014      	movs	r0, #20
 8005a38:	0029      	movs	r1, r5
 8005a3a:	4358      	muls	r0, r3
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <xTaskGenericNotifyFromISR+0xe4>)
 8005a3e:	18c0      	adds	r0, r0, r3
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005a40:	f7fe fe88 	bl	8004754 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <xTaskGenericNotifyFromISR+0xe8>)
 8005a46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d9c6      	bls.n	80059de <xTaskGenericNotifyFromISR+0x4e>
					if( pxHigherPriorityTaskWoken != NULL )
 8005a50:	9a08      	ldr	r2, [sp, #32]
 8005a52:	2301      	movs	r3, #1
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	d000      	beq.n	8005a5a <xTaskGenericNotifyFromISR+0xca>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005a58:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8005a5a:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <xTaskGenericNotifyFromISR+0xec>)
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e7be      	b.n	80059de <xTaskGenericNotifyFromISR+0x4e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005a60:	0021      	movs	r1, r4
 8005a62:	4807      	ldr	r0, [pc, #28]	; (8005a80 <xTaskGenericNotifyFromISR+0xf0>)
 8005a64:	3118      	adds	r1, #24
 8005a66:	e7eb      	b.n	8005a40 <xTaskGenericNotifyFromISR+0xb0>
						xReturn = pdFAIL;
 8005a68:	2400      	movs	r4, #0
 8005a6a:	e7b9      	b.n	80059e0 <xTaskGenericNotifyFromISR+0x50>
 8005a6c:	20000c84 	.word	0x20000c84
 8005a70:	20000c8c 	.word	0x20000c8c
 8005a74:	2000081c 	.word	0x2000081c
 8005a78:	20000810 	.word	0x20000810
 8005a7c:	20000d08 	.word	0x20000d08
 8005a80:	20000cc4 	.word	0x20000cc4

08005a84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a86:	f000 fa23 	bl	8005ed0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a8a:	4c10      	ldr	r4, [pc, #64]	; (8005acc <prvCheckForValidListAndQueue+0x48>)
 8005a8c:	6825      	ldr	r5, [r4, #0]
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	d118      	bne.n	8005ac4 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a92:	4f0f      	ldr	r7, [pc, #60]	; (8005ad0 <prvCheckForValidListAndQueue+0x4c>)
 8005a94:	0038      	movs	r0, r7
 8005a96:	f7fe fe4f 	bl	8004738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a9a:	4e0e      	ldr	r6, [pc, #56]	; (8005ad4 <prvCheckForValidListAndQueue+0x50>)
 8005a9c:	0030      	movs	r0, r6
 8005a9e:	f7fe fe4b 	bl	8004738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aa4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005aa6:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aaa:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005aac:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aae:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <prvCheckForValidListAndQueue+0x5c>)
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <prvCheckForValidListAndQueue+0x60>)
 8005ab2:	9500      	str	r5, [sp, #0]
 8005ab4:	f7fe ff41 	bl	800493a <xQueueGenericCreateStatic>
 8005ab8:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d002      	beq.n	8005ac4 <prvCheckForValidListAndQueue+0x40>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005abe:	490a      	ldr	r1, [pc, #40]	; (8005ae8 <prvCheckForValidListAndQueue+0x64>)
 8005ac0:	f7ff f9bc 	bl	8004e3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ac4:	f000 fa10 	bl	8005ee8 <vPortExitCritical>
}
 8005ac8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	20000e30 	.word	0x20000e30
 8005ad0:	20000db4 	.word	0x20000db4
 8005ad4:	20000dc8 	.word	0x20000dc8
 8005ad8:	20000d0c 	.word	0x20000d0c
 8005adc:	20000d10 	.word	0x20000d10
 8005ae0:	20000d14 	.word	0x20000d14
 8005ae4:	20000de0 	.word	0x20000de0
 8005ae8:	0800654d 	.word	0x0800654d

08005aec <prvInsertTimerInActiveList>:
{
 8005aec:	b510      	push	{r4, lr}
 8005aee:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005af0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005af2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005af4:	4291      	cmp	r1, r2
 8005af6:	d80b      	bhi.n	8005b10 <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af8:	1ad2      	subs	r2, r2, r3
 8005afa:	69a3      	ldr	r3, [r4, #24]
			xProcessTimerNow = pdTRUE;
 8005afc:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d205      	bcs.n	8005b0e <prvInsertTimerInActiveList+0x22>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <prvInsertTimerInActiveList+0x34>)
 8005b04:	1d21      	adds	r1, r4, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	f7fe fe30 	bl	800476c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005b0c:	2000      	movs	r0, #0
}
 8005b0e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d202      	bcs.n	8005b1a <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
 8005b14:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d2f9      	bcs.n	8005b0e <prvInsertTimerInActiveList+0x22>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b1a:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <prvInsertTimerInActiveList+0x38>)
 8005b1c:	1d21      	adds	r1, r4, #4
 8005b1e:	e7f2      	b.n	8005b06 <prvInsertTimerInActiveList+0x1a>
 8005b20:	20000d10 	.word	0x20000d10
 8005b24:	20000d0c 	.word	0x20000d0c

08005b28 <xTimerCreateTimerTask>:
{
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005b2c:	f7ff ffaa 	bl	8005a84 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <xTimerCreateTimerTask+0x4c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <xTimerCreateTimerTask+0x40>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b38:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b3a:	aa07      	add	r2, sp, #28
 8005b3c:	a906      	add	r1, sp, #24
 8005b3e:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b40:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b42:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b44:	f7fe fdec 	bl	8004720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b48:	9b05      	ldr	r3, [sp, #20]
 8005b4a:	9a07      	ldr	r2, [sp, #28]
 8005b4c:	9302      	str	r3, [sp, #8]
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	4909      	ldr	r1, [pc, #36]	; (8005b78 <xTimerCreateTimerTask+0x50>)
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	2302      	movs	r3, #2
 8005b56:	4809      	ldr	r0, [pc, #36]	; (8005b7c <xTimerCreateTimerTask+0x54>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	0023      	movs	r3, r4
 8005b5c:	f7ff fb28 	bl	80051b0 <xTaskCreateStatic>
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <xTimerCreateTimerTask+0x58>)
 8005b62:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005b64:	42a0      	cmp	r0, r4
 8005b66:	d101      	bne.n	8005b6c <xTimerCreateTimerTask+0x44>
	configASSERT( xReturn );
 8005b68:	b672      	cpsid	i
 8005b6a:	e7fe      	b.n	8005b6a <xTimerCreateTimerTask+0x42>
}
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	b008      	add	sp, #32
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000e30 	.word	0x20000e30
 8005b78:	08006552 	.word	0x08006552
 8005b7c:	08005c89 	.word	0x08005c89
 8005b80:	20000e34 	.word	0x20000e34

08005b84 <xTimerCreate>:
	{
 8005b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b86:	0007      	movs	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b88:	202c      	movs	r0, #44	; 0x2c
	{
 8005b8a:	000d      	movs	r5, r1
 8005b8c:	9200      	str	r2, [sp, #0]
 8005b8e:	9301      	str	r3, [sp, #4]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b90:	f000 fa56 	bl	8006040 <pvPortMalloc>
 8005b94:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8005b96:	d019      	beq.n	8005bcc <xTimerCreate+0x48>
			pxNewTimer->ucStatus = 0x00;
 8005b98:	0006      	movs	r6, r0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	3628      	adds	r6, #40	; 0x28
 8005b9e:	7033      	strb	r3, [r6, #0]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005ba0:	429d      	cmp	r5, r3
 8005ba2:	d101      	bne.n	8005ba8 <xTimerCreate+0x24>
 8005ba4:	b672      	cpsid	i
 8005ba6:	e7fe      	b.n	8005ba6 <xTimerCreate+0x22>
		prvCheckForValidListAndQueue();
 8005ba8:	f7ff ff6c 	bl	8005a84 <prvCheckForValidListAndQueue>
		pxNewTimer->pvTimerID = pvTimerID;
 8005bac:	9b01      	ldr	r3, [sp, #4]
		pxNewTimer->pcTimerName = pcTimerName;
 8005bae:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8005bb0:	61e3      	str	r3, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005bb2:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005bb4:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005bb6:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005bb8:	1d20      	adds	r0, r4, #4
 8005bba:	f7fe fdc8 	bl	800474e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <xTimerCreate+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	7832      	ldrb	r2, [r6, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	7033      	strb	r3, [r6, #0]
	}
 8005bcc:	0020      	movs	r0, r4
 8005bce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005bd0 <xTimerGenericCommand>:
{
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	0017      	movs	r7, r2
 8005bd4:	0004      	movs	r4, r0
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	b085      	sub	sp, #20
	configASSERT( xTimer );
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d101      	bne.n	8005be2 <xTimerGenericCommand+0x12>
 8005bde:	b672      	cpsid	i
 8005be0:	e7fe      	b.n	8005be0 <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
 8005be2:	4d0d      	ldr	r5, [pc, #52]	; (8005c18 <xTimerGenericCommand+0x48>)
 8005be4:	682e      	ldr	r6, [r5, #0]
BaseType_t xReturn = pdFAIL;
 8005be6:	1e30      	subs	r0, r6, #0
	if( xTimerQueue != NULL )
 8005be8:	d00f      	beq.n	8005c0a <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
 8005bea:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bec:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bee:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bf0:	2905      	cmp	r1, #5
 8005bf2:	dc0c      	bgt.n	8005c0e <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bf4:	f7ff fd6a 	bl	80056cc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bfc:	2802      	cmp	r0, #2
 8005bfe:	d000      	beq.n	8005c02 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c00:	001a      	movs	r2, r3
 8005c02:	4669      	mov	r1, sp
 8005c04:	6828      	ldr	r0, [r5, #0]
 8005c06:	f7fe ff13 	bl	8004a30 <xQueueGenericSend>
}
 8005c0a:	b005      	add	sp, #20
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4669      	mov	r1, sp
 8005c12:	f7fe ff9d 	bl	8004b50 <xQueueGenericSendFromISR>
 8005c16:	e7f8      	b.n	8005c0a <xTimerGenericCommand+0x3a>
 8005c18:	20000e30 	.word	0x20000e30

08005c1c <prvSwitchTimerLists>:
{
 8005c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c1e:	4d18      	ldr	r5, [pc, #96]	; (8005c80 <prvSwitchTimerLists+0x64>)
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	d104      	bne.n	8005c32 <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <prvSwitchTimerLists+0x68>)
 8005c2a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c2c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c2e:	6029      	str	r1, [r5, #0]
}
 8005c30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c32:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c36:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c38:	1d27      	adds	r7, r4, #4
 8005c3a:	0038      	movs	r0, r7
 8005c3c:	f7fe fdad 	bl	800479a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c40:	6a23      	ldr	r3, [r4, #32]
 8005c42:	0020      	movs	r0, r4
 8005c44:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c46:	0023      	movs	r3, r4
 8005c48:	2204      	movs	r2, #4
 8005c4a:	3328      	adds	r3, #40	; 0x28
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4213      	tst	r3, r2
 8005c50:	d0e5      	beq.n	8005c1e <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c52:	69a3      	ldr	r3, [r4, #24]
 8005c54:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
 8005c56:	429e      	cmp	r6, r3
 8005c58:	d206      	bcs.n	8005c68 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c5a:	0039      	movs	r1, r7
 8005c5c:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c5e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c60:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c62:	f7fe fd83 	bl	800476c <vListInsert>
 8005c66:	e7da      	b.n	8005c1e <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c68:	2100      	movs	r1, #0
 8005c6a:	0032      	movs	r2, r6
 8005c6c:	000b      	movs	r3, r1
 8005c6e:	0020      	movs	r0, r4
 8005c70:	9100      	str	r1, [sp, #0]
 8005c72:	f7ff ffad 	bl	8005bd0 <xTimerGenericCommand>
				configASSERT( xResult );
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1d1      	bne.n	8005c1e <prvSwitchTimerLists+0x2>
 8005c7a:	b672      	cpsid	i
 8005c7c:	e7fe      	b.n	8005c7c <prvSwitchTimerLists+0x60>
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	20000d0c 	.word	0x20000d0c
 8005c84:	20000d10 	.word	0x20000d10

08005c88 <prvTimerTask>:
{
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c8c:	4f65      	ldr	r7, [pc, #404]	; (8005e24 <prvTimerTask+0x19c>)
 8005c8e:	2601      	movs	r6, #1
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681c      	ldr	r4, [r3, #0]
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d002      	beq.n	8005c9e <prvTimerTask+0x16>
 8005c98:	2600      	movs	r6, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8005c9e:	f7ff fb19 	bl	80052d4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005ca2:	f7ff fb1f 	bl	80052e4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005ca6:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005ca8:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	d315      	bcc.n	8005cde <prvTimerTask+0x56>
	xLastTime = xTimeNow;
 8005cb2:	4b5d      	ldr	r3, [pc, #372]	; (8005e28 <prvTimerTask+0x1a0>)
 8005cb4:	6018      	str	r0, [r3, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	d019      	beq.n	8005cee <prvTimerTask+0x66>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cba:	4b5c      	ldr	r3, [pc, #368]	; (8005e2c <prvTimerTask+0x1a4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681e      	ldr	r6, [r3, #0]
 8005cc0:	4273      	negs	r3, r6
 8005cc2:	415e      	adcs	r6, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cc4:	4b5a      	ldr	r3, [pc, #360]	; (8005e30 <prvTimerTask+0x1a8>)
 8005cc6:	0032      	movs	r2, r6
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	1b61      	subs	r1, r4, r5
 8005ccc:	f7ff f8ec 	bl	8004ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cd0:	f7ff fb94 	bl	80053fc <xTaskResumeAll>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d108      	bne.n	8005cea <prvTimerTask+0x62>
					portYIELD_WITHIN_API();
 8005cd8:	f000 f8ee 	bl	8005eb8 <vPortYield>
 8005cdc:	e005      	b.n	8005cea <prvTimerTask+0x62>
		prvSwitchTimerLists();
 8005cde:	f7ff ff9d 	bl	8005c1c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005ce2:	4b51      	ldr	r3, [pc, #324]	; (8005e28 <prvTimerTask+0x1a0>)
 8005ce4:	601d      	str	r5, [r3, #0]
			( void ) xTaskResumeAll();
 8005ce6:	f7ff fb89 	bl	80053fc <xTaskResumeAll>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cea:	2702      	movs	r7, #2
 8005cec:	e032      	b.n	8005d54 <prvTimerTask+0xcc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cee:	4284      	cmp	r4, r0
 8005cf0:	d8e8      	bhi.n	8005cc4 <prvTimerTask+0x3c>
				( void ) xTaskResumeAll();
 8005cf2:	f7ff fb83 	bl	80053fc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cfc:	1d38      	adds	r0, r7, #4
 8005cfe:	f7fe fd4c 	bl	800479a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d02:	003a      	movs	r2, r7
 8005d04:	2104      	movs	r1, #4
 8005d06:	3228      	adds	r2, #40	; 0x28
 8005d08:	7813      	ldrb	r3, [r2, #0]
 8005d0a:	420b      	tst	r3, r1
 8005d0c:	d013      	beq.n	8005d36 <prvTimerTask+0xae>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	002a      	movs	r2, r5
 8005d12:	18e1      	adds	r1, r4, r3
 8005d14:	0038      	movs	r0, r7
 8005d16:	0023      	movs	r3, r4
 8005d18:	f7ff fee8 	bl	8005aec <prvInsertTimerInActiveList>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d00d      	beq.n	8005d3c <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d20:	0033      	movs	r3, r6
 8005d22:	0022      	movs	r2, r4
 8005d24:	0031      	movs	r1, r6
 8005d26:	0038      	movs	r0, r7
 8005d28:	9600      	str	r6, [sp, #0]
 8005d2a:	f7ff ff51 	bl	8005bd0 <xTimerGenericCommand>
			configASSERT( xResult );
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d104      	bne.n	8005d3c <prvTimerTask+0xb4>
 8005d32:	b672      	cpsid	i
 8005d34:	e7fe      	b.n	8005d34 <prvTimerTask+0xac>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d36:	2101      	movs	r1, #1
 8005d38:	438b      	bics	r3, r1
 8005d3a:	7013      	strb	r3, [r2, #0]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d3c:	0038      	movs	r0, r7
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	4798      	blx	r3
}
 8005d42:	e7d2      	b.n	8005cea <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d44:	9b05      	ldr	r3, [sp, #20]
 8005d46:	9907      	ldr	r1, [sp, #28]
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0b      	bge.n	8005d6c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d54:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <prvTimerTask+0x1a8>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	a904      	add	r1, sp, #16
 8005d5c:	f7fe ff42 	bl	8004be4 <xQueueReceive>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d093      	beq.n	8005c8c <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	9806      	ldr	r0, [sp, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dbeb      	blt.n	8005d44 <prvTimerTask+0xbc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d6c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d6e:	6963      	ldr	r3, [r4, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d118      	bne.n	8005da6 <prvTimerTask+0x11e>
	xTimeNow = xTaskGetTickCount();
 8005d74:	f7ff fab6 	bl	80052e4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <prvTimerTask+0x1a0>)
	xTimeNow = xTaskGetTickCount();
 8005d7a:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	4298      	cmp	r0, r3
 8005d82:	d201      	bcs.n	8005d88 <prvTimerTask+0x100>
		prvSwitchTimerLists();
 8005d84:	f7ff ff4a 	bl	8005c1c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <prvTimerTask+0x1a0>)
 8005d8a:	9804      	ldr	r0, [sp, #16]
 8005d8c:	601e      	str	r6, [r3, #0]
			switch( xMessage.xMessageID )
 8005d8e:	2809      	cmp	r0, #9
 8005d90:	d8e0      	bhi.n	8005d54 <prvTimerTask+0xcc>
 8005d92:	0025      	movs	r5, r4
 8005d94:	3528      	adds	r5, #40	; 0x28
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d96:	782b      	ldrb	r3, [r5, #0]
 8005d98:	f7fa f9c0 	bl	800011c <__gnu_thumb1_case_uqi>
 8005d9c:	40090909 	.word	0x40090909
 8005da0:	09093a2a 	.word	0x09093a2a
 8005da4:	2a40      	.short	0x2a40
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005da6:	1d20      	adds	r0, r4, #4
 8005da8:	f7fe fcf7 	bl	800479a <uxListRemove>
 8005dac:	e7e2      	b.n	8005d74 <prvTimerTask+0xec>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dae:	2201      	movs	r2, #1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	702b      	strb	r3, [r5, #0]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005db4:	69a2      	ldr	r2, [r4, #24]
 8005db6:	9b05      	ldr	r3, [sp, #20]
 8005db8:	0020      	movs	r0, r4
 8005dba:	1899      	adds	r1, r3, r2
 8005dbc:	0032      	movs	r2, r6
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	f7ff fe94 	bl	8005aec <prvInsertTimerInActiveList>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d0c5      	beq.n	8005d54 <prvTimerTask+0xcc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc8:	6a23      	ldr	r3, [r4, #32]
 8005dca:	0020      	movs	r0, r4
 8005dcc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dce:	2204      	movs	r2, #4
 8005dd0:	782b      	ldrb	r3, [r5, #0]
 8005dd2:	4213      	tst	r3, r2
 8005dd4:	d0be      	beq.n	8005d54 <prvTimerTask+0xcc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	69a3      	ldr	r3, [r4, #24]
 8005dda:	9a05      	ldr	r2, [sp, #20]
 8005ddc:	0020      	movs	r0, r4
 8005dde:	18d2      	adds	r2, r2, r3
 8005de0:	9100      	str	r1, [sp, #0]
 8005de2:	000b      	movs	r3, r1
 8005de4:	f7ff fef4 	bl	8005bd0 <xTimerGenericCommand>
							configASSERT( xResult );
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1b3      	bne.n	8005d54 <prvTimerTask+0xcc>
 8005dec:	b672      	cpsid	i
 8005dee:	e7fe      	b.n	8005dee <prvTimerTask+0x166>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005df0:	2201      	movs	r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005df2:	9905      	ldr	r1, [sp, #20]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005df4:	4313      	orrs	r3, r2
 8005df6:	702b      	strb	r3, [r5, #0]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005df8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	d101      	bne.n	8005e02 <prvTimerTask+0x17a>
 8005dfe:	b672      	cpsid	i
 8005e00:	e7fe      	b.n	8005e00 <prvTimerTask+0x178>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e02:	0033      	movs	r3, r6
 8005e04:	0032      	movs	r2, r6
 8005e06:	0020      	movs	r0, r4
 8005e08:	1989      	adds	r1, r1, r6
 8005e0a:	f7ff fe6f 	bl	8005aec <prvInsertTimerInActiveList>
					break;
 8005e0e:	e7a1      	b.n	8005d54 <prvTimerTask+0xcc>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e10:	423b      	tst	r3, r7
 8005e12:	d103      	bne.n	8005e1c <prvTimerTask+0x194>
							vPortFree( pxTimer );
 8005e14:	0020      	movs	r0, r4
 8005e16:	f000 f995 	bl	8006144 <vPortFree>
 8005e1a:	e79b      	b.n	8005d54 <prvTimerTask+0xcc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4393      	bics	r3, r2
 8005e20:	702b      	strb	r3, [r5, #0]
 8005e22:	e797      	b.n	8005d54 <prvTimerTask+0xcc>
 8005e24:	20000d0c 	.word	0x20000d0c
 8005e28:	20000ddc 	.word	0x20000ddc
 8005e2c:	20000d10 	.word	0x20000d10
 8005e30:	20000e30 	.word	0x20000e30

08005e34 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8005e34:	2300      	movs	r3, #0
{
 8005e36:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8005e38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvTaskExitError+0x20>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	d001      	beq.n	8005e46 <prvTaskExitError+0x12>
 8005e42:	b672      	cpsid	i
 8005e44:	e7fe      	b.n	8005e44 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8005e46:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0fc      	beq.n	8005e48 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e4e:	b002      	add	sp, #8
 8005e50:	4770      	bx	lr
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	2000000c 	.word	0x2000000c
	...

08005e60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005e60:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <pxCurrentTCBConst2>)
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	3020      	adds	r0, #32
 8005e68:	f380 8809 	msr	PSP, r0
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f380 8814 	msr	CONTROL, r0
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005e78:	46ae      	mov	lr, r5
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	bc04      	pop	{r2}
 8005e7e:	b662      	cpsie	i
 8005e80:	4718      	bx	r3
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46c0      	nop			; (mov r8, r8)

08005e90 <pxCurrentTCBConst2>:
 8005e90:	20000810 	.word	0x20000810

08005e94 <pxPortInitialiseStack>:
{
 8005e94:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e96:	2480      	movs	r4, #128	; 0x80
 8005e98:	1f03      	subs	r3, r0, #4
 8005e9a:	0464      	lsls	r4, r4, #17
 8005e9c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ea2:	4903      	ldr	r1, [pc, #12]	; (8005eb0 <pxPortInitialiseStack+0x1c>)
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ea8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8005eaa:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	bd10      	pop	{r4, pc}
 8005eb0:	08005e35 	.word	0x08005e35

08005eb4 <SVC_Handler>:
}
 8005eb4:	4770      	bx	lr
	...

08005eb8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <vPortYield+0x14>)
 8005ebc:	0552      	lsls	r2, r2, #21
 8005ebe:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005ec0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ec4:	f3bf 8f6f 	isb	sy
}
 8005ec8:	4770      	bx	lr
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 8005ed0:	b672      	cpsid	i
	uxCriticalNesting++;
 8005ed2:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <vPortEnterCritical+0x14>)
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005eda:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ede:	f3bf 8f6f 	isb	sy
}
 8005ee2:	4770      	bx	lr
 8005ee4:	2000000c 	.word	0x2000000c

08005ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005ee8:	4a05      	ldr	r2, [pc, #20]	; (8005f00 <vPortExitCritical+0x18>)
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <vPortExitCritical+0xc>
 8005ef0:	b672      	cpsid	i
 8005ef2:	e7fe      	b.n	8005ef2 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d100      	bne.n	8005efe <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 8005efc:	b662      	cpsie	i
	}
}
 8005efe:	4770      	bx	lr
 8005f00:	2000000c 	.word	0x2000000c

08005f04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005f04:	f3ef 8010 	mrs	r0, PRIMASK
 8005f08:	b672      	cpsid	i
 8005f0a:	4770      	bx	lr

08005f0c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005f0c:	f380 8810 	msr	PRIMASK, r0
 8005f10:	4770      	bx	lr
	...

08005f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f20:	f3ef 8009 	mrs	r0, PSP
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <pxCurrentTCBConst>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	3820      	subs	r0, #32
 8005f2a:	6010      	str	r0, [r2, #0]
 8005f2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f2e:	4644      	mov	r4, r8
 8005f30:	464d      	mov	r5, r9
 8005f32:	4656      	mov	r6, sl
 8005f34:	465f      	mov	r7, fp
 8005f36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f38:	b508      	push	{r3, lr}
 8005f3a:	b672      	cpsid	i
 8005f3c:	f7ff fae0 	bl	8005500 <vTaskSwitchContext>
 8005f40:	b662      	cpsie	i
 8005f42:	bc0c      	pop	{r2, r3}
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	6808      	ldr	r0, [r1, #0]
 8005f48:	3010      	adds	r0, #16
 8005f4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f4c:	46a0      	mov	r8, r4
 8005f4e:	46a9      	mov	r9, r5
 8005f50:	46b2      	mov	sl, r6
 8005f52:	46bb      	mov	fp, r7
 8005f54:	f380 8809 	msr	PSP, r0
 8005f58:	3820      	subs	r0, #32
 8005f5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f5c:	4718      	bx	r3
 8005f5e:	46c0      	nop			; (mov r8, r8)

08005f60 <pxCurrentTCBConst>:
 8005f60:	20000810 	.word	0x20000810

08005f64 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f64:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f66:	f7ff ffcd 	bl	8005f04 <ulSetInterruptMaskFromISR>
 8005f6a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f6c:	f7ff f9c6 	bl	80052fc <xTaskIncrementTick>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d003      	beq.n	8005f7c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <xPortSysTickHandler+0x20>)
 8005f78:	0552      	lsls	r2, r2, #21
 8005f7a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005f7c:	0020      	movs	r0, r4
 8005f7e:	f7ff ffc5 	bl	8005f0c <vClearInterruptMaskFromISR>
}
 8005f82:	bd10      	pop	{r4, pc}
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f88:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f8a:	21fa      	movs	r1, #250	; 0xfa
{
 8005f8c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f90:	4c07      	ldr	r4, [pc, #28]	; (8005fb0 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f92:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f94:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <vPortSetupTimerInterrupt+0x2c>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	f7fa f8dc 	bl	8000158 <__udivsi3>
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <vPortSetupTimerInterrupt+0x30>)
 8005fa2:	3801      	subs	r0, #1
 8005fa4:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005fa6:	2307      	movs	r3, #7
 8005fa8:	6023      	str	r3, [r4, #0]
}
 8005faa:	bd10      	pop	{r4, pc}
 8005fac:	e000e018 	.word	0xe000e018
 8005fb0:	e000e010 	.word	0xe000e010
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	e000e014 	.word	0xe000e014

08005fbc <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <xPortStartScheduler+0x34>)
 8005fc0:	0412      	lsls	r2, r2, #16
 8005fc2:	6819      	ldr	r1, [r3, #0]
{
 8005fc4:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fca:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 8005fcc:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	0612      	lsls	r2, r2, #24
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005fd6:	f7ff ffd7 	bl	8005f88 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <xPortStartScheduler+0x38>)
 8005fdc:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8005fde:	f7ff ff3f 	bl	8005e60 <vPortStartFirstTask>
	vTaskSwitchContext();
 8005fe2:	f7ff fa8d 	bl	8005500 <vTaskSwitchContext>
	prvTaskExitError();
 8005fe6:	f7ff ff25 	bl	8005e34 <prvTaskExitError>
}
 8005fea:	0020      	movs	r0, r4
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	e000ed20 	.word	0xe000ed20
 8005ff4:	2000000c 	.word	0x2000000c

08005ff8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ff8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <prvInsertBlockIntoFreeList+0x40>)
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4283      	cmp	r3, r0
 8006002:	d3fb      	bcc.n	8005ffc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006004:	6854      	ldr	r4, [r2, #4]
 8006006:	1911      	adds	r1, r2, r4
 8006008:	4288      	cmp	r0, r1
 800600a:	d103      	bne.n	8006014 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800600c:	6841      	ldr	r1, [r0, #4]
 800600e:	0010      	movs	r0, r2
 8006010:	1909      	adds	r1, r1, r4
 8006012:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006014:	6841      	ldr	r1, [r0, #4]
 8006016:	1844      	adds	r4, r0, r1
 8006018:	42a3      	cmp	r3, r4
 800601a:	d107      	bne.n	800602c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800601c:	4c07      	ldr	r4, [pc, #28]	; (800603c <prvInsertBlockIntoFreeList+0x44>)
 800601e:	6824      	ldr	r4, [r4, #0]
 8006020:	42a3      	cmp	r3, r4
 8006022:	d003      	beq.n	800602c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006024:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006026:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006028:	1861      	adds	r1, r4, r1
 800602a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800602c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800602e:	4290      	cmp	r0, r2
 8006030:	d000      	beq.n	8006034 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006032:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006034:	bd10      	pop	{r4, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	20001250 	.word	0x20001250
 800603c:	20000e38 	.word	0x20000e38

08006040 <pvPortMalloc>:
{
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	0005      	movs	r5, r0
	vTaskSuspendAll();
 8006044:	f7ff f946 	bl	80052d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006048:	4a37      	ldr	r2, [pc, #220]	; (8006128 <pvPortMalloc+0xe8>)
 800604a:	4c38      	ldr	r4, [pc, #224]	; (800612c <pvPortMalloc+0xec>)
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11c      	bne.n	800608c <pvPortMalloc+0x4c>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006052:	2007      	movs	r0, #7
	uxAddress = ( size_t ) ucHeap;
 8006054:	4b36      	ldr	r3, [pc, #216]	; (8006130 <pvPortMalloc+0xf0>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006056:	0019      	movs	r1, r3
 8006058:	4203      	tst	r3, r0
 800605a:	d001      	beq.n	8006060 <pvPortMalloc+0x20>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800605c:	1819      	adds	r1, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800605e:	4381      	bics	r1, r0
	xStart.xBlockSize = ( size_t ) 0;
 8006060:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006062:	4e34      	ldr	r6, [pc, #208]	; (8006134 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 8006064:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006066:	6031      	str	r1, [r6, #0]
	uxAddress -= xHeapStructSize;
 8006068:	26fe      	movs	r6, #254	; 0xfe
 800606a:	00b6      	lsls	r6, r6, #2
 800606c:	199b      	adds	r3, r3, r6
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800606e:	2607      	movs	r6, #7
 8006070:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8006072:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006074:	6058      	str	r0, [r3, #4]
	pxEnd = ( void * ) uxAddress;
 8006076:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006078:	1a58      	subs	r0, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800607a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800607c:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <pvPortMalloc+0xf8>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607e:	6048      	str	r0, [r1, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006080:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006082:	4b2e      	ldr	r3, [pc, #184]	; (800613c <pvPortMalloc+0xfc>)
 8006084:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	6023      	str	r3, [r4, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800608c:	6826      	ldr	r6, [r4, #0]
 800608e:	4235      	tst	r5, r6
 8006090:	d146      	bne.n	8006120 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
 8006092:	2d00      	cmp	r5, #0
 8006094:	d03e      	beq.n	8006114 <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 8006096:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006098:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 800609a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800609c:	420b      	tst	r3, r1
 800609e:	d001      	beq.n	80060a4 <pvPortMalloc+0x64>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060a0:	438b      	bics	r3, r1
 80060a2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d03b      	beq.n	8006120 <pvPortMalloc+0xe0>
 80060a8:	4924      	ldr	r1, [pc, #144]	; (800613c <pvPortMalloc+0xfc>)
 80060aa:	680d      	ldr	r5, [r1, #0]
 80060ac:	429d      	cmp	r5, r3
 80060ae:	d337      	bcc.n	8006120 <pvPortMalloc+0xe0>
				pxBlock = xStart.pxNextFreeBlock;
 80060b0:	4920      	ldr	r1, [pc, #128]	; (8006134 <pvPortMalloc+0xf4>)
 80060b2:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060b4:	6860      	ldr	r0, [r4, #4]
 80060b6:	4298      	cmp	r0, r3
 80060b8:	d203      	bcs.n	80060c2 <pvPortMalloc+0x82>
 80060ba:	6827      	ldr	r7, [r4, #0]
 80060bc:	46bc      	mov	ip, r7
 80060be:	2f00      	cmp	r7, #0
 80060c0:	d10e      	bne.n	80060e0 <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	42a2      	cmp	r2, r4
 80060c6:	d02b      	beq.n	8006120 <pvPortMalloc+0xe0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060c8:	680a      	ldr	r2, [r1, #0]
 80060ca:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060d0:	1ac2      	subs	r2, r0, r3
 80060d2:	2a10      	cmp	r2, #16
 80060d4:	d90b      	bls.n	80060ee <pvPortMalloc+0xae>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060d6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d8:	0741      	lsls	r1, r0, #29
 80060da:	d004      	beq.n	80060e6 <pvPortMalloc+0xa6>
 80060dc:	b672      	cpsid	i
 80060de:	e7fe      	b.n	80060de <pvPortMalloc+0x9e>
 80060e0:	0021      	movs	r1, r4
 80060e2:	4664      	mov	r4, ip
 80060e4:	e7e6      	b.n	80060b4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ea:	f7ff ff85 	bl	8005ff8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <pvPortMalloc+0xfc>)
 80060f2:	1aed      	subs	r5, r5, r3
 80060f4:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <pvPortMalloc+0xf8>)
 80060f8:	6811      	ldr	r1, [r2, #0]
 80060fa:	428d      	cmp	r5, r1
 80060fc:	d200      	bcs.n	8006100 <pvPortMalloc+0xc0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060fe:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006100:	431e      	orrs	r6, r3
					pxBlock->pxNextFreeBlock = NULL;
 8006102:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006104:	003d      	movs	r5, r7
					xNumberOfSuccessfulAllocations++;
 8006106:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <pvPortMalloc+0x100>)
					pxBlock->pxNextFreeBlock = NULL;
 8006108:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800610a:	6813      	ldr	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800610c:	3508      	adds	r5, #8
					xNumberOfSuccessfulAllocations++;
 800610e:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006110:	6066      	str	r6, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 8006112:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8006114:	f7ff f972 	bl	80053fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006118:	076b      	lsls	r3, r5, #29
 800611a:	d003      	beq.n	8006124 <pvPortMalloc+0xe4>
 800611c:	b672      	cpsid	i
 800611e:	e7fe      	b.n	800611e <pvPortMalloc+0xde>
void *pvReturn = NULL;
 8006120:	2500      	movs	r5, #0
 8006122:	e7f7      	b.n	8006114 <pvPortMalloc+0xd4>
}
 8006124:	0028      	movs	r0, r5
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	20000e38 	.word	0x20000e38
 800612c:	2000123c 	.word	0x2000123c
 8006130:	20000e3c 	.word	0x20000e3c
 8006134:	20001250 	.word	0x20001250
 8006138:	20001244 	.word	0x20001244
 800613c:	20001240 	.word	0x20001240
 8006140:	20001248 	.word	0x20001248

08006144 <vPortFree>:
{
 8006144:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006146:	2800      	cmp	r0, #0
 8006148:	d01f      	beq.n	800618a <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <vPortFree+0x48>)
 800614c:	3808      	subs	r0, #8
 800614e:	6843      	ldr	r3, [r0, #4]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	0004      	movs	r4, r0
 8006154:	421a      	tst	r2, r3
 8006156:	d101      	bne.n	800615c <vPortFree+0x18>
 8006158:	b672      	cpsid	i
 800615a:	e7fe      	b.n	800615a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800615c:	6801      	ldr	r1, [r0, #0]
 800615e:	2900      	cmp	r1, #0
 8006160:	d001      	beq.n	8006166 <vPortFree+0x22>
 8006162:	b672      	cpsid	i
 8006164:	e7fe      	b.n	8006164 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006166:	4393      	bics	r3, r2
 8006168:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800616a:	f7ff f8b3 	bl	80052d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800616e:	4a08      	ldr	r2, [pc, #32]	; (8006190 <vPortFree+0x4c>)
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006174:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006176:	185b      	adds	r3, r3, r1
 8006178:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800617a:	f7ff ff3d 	bl	8005ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <vPortFree+0x50>)
 8006180:	6813      	ldr	r3, [r2, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006186:	f7ff f939 	bl	80053fc <xTaskResumeAll>
}
 800618a:	bd10      	pop	{r4, pc}
 800618c:	2000123c 	.word	0x2000123c
 8006190:	20001240 	.word	0x20001240
 8006194:	2000124c 	.word	0x2000124c

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	2600      	movs	r6, #0
 800619c:	4d0c      	ldr	r5, [pc, #48]	; (80061d0 <__libc_init_array+0x38>)
 800619e:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 80061a0:	1b64      	subs	r4, r4, r5
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	2600      	movs	r6, #0
 80061aa:	f000 f8f9 	bl	80063a0 <_init>
 80061ae:	4d0a      	ldr	r5, [pc, #40]	; (80061d8 <__libc_init_array+0x40>)
 80061b0:	4c0a      	ldr	r4, [pc, #40]	; (80061dc <__libc_init_array+0x44>)
 80061b2:	1b64      	subs	r4, r4, r5
 80061b4:	10a4      	asrs	r4, r4, #2
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	00b3      	lsls	r3, r6, #2
 80061be:	58eb      	ldr	r3, [r5, r3]
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	00b3      	lsls	r3, r6, #2
 80061c8:	58eb      	ldr	r3, [r5, r3]
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	080065c4 	.word	0x080065c4
 80061d4:	080065c4 	.word	0x080065c4
 80061d8:	080065c4 	.word	0x080065c4
 80061dc:	080065c8 	.word	0x080065c8

080061e0 <__retarget_lock_acquire_recursive>:
 80061e0:	4770      	bx	lr

080061e2 <__retarget_lock_release_recursive>:
 80061e2:	4770      	bx	lr

080061e4 <memcpy>:
 80061e4:	2300      	movs	r3, #0
 80061e6:	b510      	push	{r4, lr}
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d100      	bne.n	80061ee <memcpy+0xa>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	5ccc      	ldrb	r4, [r1, r3]
 80061f0:	54c4      	strb	r4, [r0, r3]
 80061f2:	3301      	adds	r3, #1
 80061f4:	e7f8      	b.n	80061e8 <memcpy+0x4>

080061f6 <memset>:
 80061f6:	0003      	movs	r3, r0
 80061f8:	1882      	adds	r2, r0, r2
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d100      	bne.n	8006200 <memset+0xa>
 80061fe:	4770      	bx	lr
 8006200:	7019      	strb	r1, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	e7f9      	b.n	80061fa <memset+0x4>

08006206 <cleanup_glue>:
 8006206:	b570      	push	{r4, r5, r6, lr}
 8006208:	000d      	movs	r5, r1
 800620a:	6809      	ldr	r1, [r1, #0]
 800620c:	0004      	movs	r4, r0
 800620e:	2900      	cmp	r1, #0
 8006210:	d001      	beq.n	8006216 <cleanup_glue+0x10>
 8006212:	f7ff fff8 	bl	8006206 <cleanup_glue>
 8006216:	0029      	movs	r1, r5
 8006218:	0020      	movs	r0, r4
 800621a:	f000 f877 	bl	800630c <_free_r>
 800621e:	bd70      	pop	{r4, r5, r6, pc}

08006220 <_reclaim_reent>:
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <_reclaim_reent+0xc8>)
 8006222:	b570      	push	{r4, r5, r6, lr}
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	0004      	movs	r4, r0
 8006228:	4283      	cmp	r3, r0
 800622a:	d049      	beq.n	80062c0 <_reclaim_reent+0xa0>
 800622c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <_reclaim_reent+0x28>
 8006232:	2500      	movs	r5, #0
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	42ab      	cmp	r3, r5
 8006238:	d147      	bne.n	80062ca <_reclaim_reent+0xaa>
 800623a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	2900      	cmp	r1, #0
 8006240:	d002      	beq.n	8006248 <_reclaim_reent+0x28>
 8006242:	0020      	movs	r0, r4
 8006244:	f000 f862 	bl	800630c <_free_r>
 8006248:	6961      	ldr	r1, [r4, #20]
 800624a:	2900      	cmp	r1, #0
 800624c:	d002      	beq.n	8006254 <_reclaim_reent+0x34>
 800624e:	0020      	movs	r0, r4
 8006250:	f000 f85c 	bl	800630c <_free_r>
 8006254:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006256:	2900      	cmp	r1, #0
 8006258:	d002      	beq.n	8006260 <_reclaim_reent+0x40>
 800625a:	0020      	movs	r0, r4
 800625c:	f000 f856 	bl	800630c <_free_r>
 8006260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006262:	2900      	cmp	r1, #0
 8006264:	d002      	beq.n	800626c <_reclaim_reent+0x4c>
 8006266:	0020      	movs	r0, r4
 8006268:	f000 f850 	bl	800630c <_free_r>
 800626c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800626e:	2900      	cmp	r1, #0
 8006270:	d002      	beq.n	8006278 <_reclaim_reent+0x58>
 8006272:	0020      	movs	r0, r4
 8006274:	f000 f84a 	bl	800630c <_free_r>
 8006278:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800627a:	2900      	cmp	r1, #0
 800627c:	d002      	beq.n	8006284 <_reclaim_reent+0x64>
 800627e:	0020      	movs	r0, r4
 8006280:	f000 f844 	bl	800630c <_free_r>
 8006284:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006286:	2900      	cmp	r1, #0
 8006288:	d002      	beq.n	8006290 <_reclaim_reent+0x70>
 800628a:	0020      	movs	r0, r4
 800628c:	f000 f83e 	bl	800630c <_free_r>
 8006290:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006292:	2900      	cmp	r1, #0
 8006294:	d002      	beq.n	800629c <_reclaim_reent+0x7c>
 8006296:	0020      	movs	r0, r4
 8006298:	f000 f838 	bl	800630c <_free_r>
 800629c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629e:	2900      	cmp	r1, #0
 80062a0:	d002      	beq.n	80062a8 <_reclaim_reent+0x88>
 80062a2:	0020      	movs	r0, r4
 80062a4:	f000 f832 	bl	800630c <_free_r>
 80062a8:	69a3      	ldr	r3, [r4, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <_reclaim_reent+0xa0>
 80062ae:	0020      	movs	r0, r4
 80062b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062b2:	4798      	blx	r3
 80062b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d002      	beq.n	80062c0 <_reclaim_reent+0xa0>
 80062ba:	0020      	movs	r0, r4
 80062bc:	f7ff ffa3 	bl	8006206 <cleanup_glue>
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	5949      	ldr	r1, [r1, r5]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d108      	bne.n	80062da <_reclaim_reent+0xba>
 80062c8:	3504      	adds	r5, #4
 80062ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	2d80      	cmp	r5, #128	; 0x80
 80062d0:	d1f7      	bne.n	80062c2 <_reclaim_reent+0xa2>
 80062d2:	0020      	movs	r0, r4
 80062d4:	f000 f81a 	bl	800630c <_free_r>
 80062d8:	e7af      	b.n	800623a <_reclaim_reent+0x1a>
 80062da:	680e      	ldr	r6, [r1, #0]
 80062dc:	0020      	movs	r0, r4
 80062de:	f000 f815 	bl	800630c <_free_r>
 80062e2:	0031      	movs	r1, r6
 80062e4:	e7ee      	b.n	80062c4 <_reclaim_reent+0xa4>
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	20000010 	.word	0x20000010

080062ec <__malloc_lock>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4802      	ldr	r0, [pc, #8]	; (80062f8 <__malloc_lock+0xc>)
 80062f0:	f7ff ff76 	bl	80061e0 <__retarget_lock_acquire_recursive>
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	200018f0 	.word	0x200018f0

080062fc <__malloc_unlock>:
 80062fc:	b510      	push	{r4, lr}
 80062fe:	4802      	ldr	r0, [pc, #8]	; (8006308 <__malloc_unlock+0xc>)
 8006300:	f7ff ff6f 	bl	80061e2 <__retarget_lock_release_recursive>
 8006304:	bd10      	pop	{r4, pc}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	200018f0 	.word	0x200018f0

0800630c <_free_r>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	0005      	movs	r5, r0
 8006310:	2900      	cmp	r1, #0
 8006312:	d010      	beq.n	8006336 <_free_r+0x2a>
 8006314:	1f0c      	subs	r4, r1, #4
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	da00      	bge.n	800631e <_free_r+0x12>
 800631c:	18e4      	adds	r4, r4, r3
 800631e:	0028      	movs	r0, r5
 8006320:	f7ff ffe4 	bl	80062ec <__malloc_lock>
 8006324:	4a1d      	ldr	r2, [pc, #116]	; (800639c <_free_r+0x90>)
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <_free_r+0x2c>
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	6014      	str	r4, [r2, #0]
 8006330:	0028      	movs	r0, r5
 8006332:	f7ff ffe3 	bl	80062fc <__malloc_unlock>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	42a3      	cmp	r3, r4
 800633a:	d908      	bls.n	800634e <_free_r+0x42>
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	1860      	adds	r0, r4, r1
 8006340:	4283      	cmp	r3, r0
 8006342:	d1f3      	bne.n	800632c <_free_r+0x20>
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	1841      	adds	r1, r0, r1
 800634a:	6021      	str	r1, [r4, #0]
 800634c:	e7ee      	b.n	800632c <_free_r+0x20>
 800634e:	001a      	movs	r2, r3
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <_free_r+0x4e>
 8006356:	42a3      	cmp	r3, r4
 8006358:	d9f9      	bls.n	800634e <_free_r+0x42>
 800635a:	6811      	ldr	r1, [r2, #0]
 800635c:	1850      	adds	r0, r2, r1
 800635e:	42a0      	cmp	r0, r4
 8006360:	d10b      	bne.n	800637a <_free_r+0x6e>
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	1809      	adds	r1, r1, r0
 8006366:	1850      	adds	r0, r2, r1
 8006368:	6011      	str	r1, [r2, #0]
 800636a:	4283      	cmp	r3, r0
 800636c:	d1e0      	bne.n	8006330 <_free_r+0x24>
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	1841      	adds	r1, r0, r1
 8006374:	6011      	str	r1, [r2, #0]
 8006376:	6053      	str	r3, [r2, #4]
 8006378:	e7da      	b.n	8006330 <_free_r+0x24>
 800637a:	42a0      	cmp	r0, r4
 800637c:	d902      	bls.n	8006384 <_free_r+0x78>
 800637e:	230c      	movs	r3, #12
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	e7d5      	b.n	8006330 <_free_r+0x24>
 8006384:	6821      	ldr	r1, [r4, #0]
 8006386:	1860      	adds	r0, r4, r1
 8006388:	4283      	cmp	r3, r0
 800638a:	d103      	bne.n	8006394 <_free_r+0x88>
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	1841      	adds	r1, r0, r1
 8006392:	6021      	str	r1, [r4, #0]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6054      	str	r4, [r2, #4]
 8006398:	e7ca      	b.n	8006330 <_free_r+0x24>
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20001258 	.word	0x20001258

080063a0 <_init>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr

080063ac <_fini>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr
